op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 328683*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 109561}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 2629464}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 331, 331], stride=[328683, 1, 993, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (2629464, 1)
op0.sizes = ([8, 3, 109561], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 331, 331], stride=[328683, 109561, 331, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 331, 331], stride=[328683, 1, 993, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 109561}
    index0 = 328683*z0 + 109561*z1 + z2
    index1 = 328683*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 96, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2592}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[96, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2592, 1)
op1.sizes = ([96, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[96, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[96, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 96, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op5.writes = 
    [   MemoryDep('buf3', c0, {c0: 20908800}, None),
        MemoryDep('buf5', c0, {c0: 20908800}, None)]
op3_op5.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 20908800}, None)]
op3_op5.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg3_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg4_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg5_1', c1, {c0: 217800, c1: 96}, None)]
op3_op5.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op3_op5.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 20908800}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 20908800}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg3_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg4_1', c1, {c0: 217800, c1: 96}, None),
        MemoryDep('arg5_1', c1, {c0: 217800, c1: 96}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (20908800, 1)
op3.sizes = ([217800, 96], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
class op3_loop_body:
    var_ranges = {z0: 217800, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store
op3_op5.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 20908800}, None)]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 20908800}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (20908800, 1)
op5.sizes = ([20908800], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
class op5_loop_body:
    var_ranges = {z0: 20908800}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf5', get_index_1, relu, None)
        return store


op4_op10_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op4_op10_op12.writes = 
    [   MemoryDep('buf10', c0, {c0: 5290752}, None),
        MemoryDep('buf12', c0, {c0: 5290752}, None),
        MemoryDep('buf4', c0, {c0: 5290752}, None)]
op4_op10_op12.unmet_dependencies = 
    [   MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15744, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15840, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15936, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 96, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15744, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15840, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15936, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 96, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 96}, None)]
op4_op10_op12.met_dependencies = []
op4_op10_op12.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op4_op10_op12.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 5290752}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15744, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15840, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15936, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 96, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15744, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15840, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 15936, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 - 96, {c0: 8, c1: 83, c2: 83, c3: 96}, None),
        MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 96}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (5290752, 1)
op4.sizes = ([8, 83, 83, 96], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 83, z2: 83, z3: 96}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 2613600*z0 + 31680*z1 + 192*z2 + z3 - 15936
    index3 = 2*z2
    index4 = 2613600*z0 + 31680*z1 + 192*z2 + z3 - 15840
    index5 = 2*z2 + 1
    index6 = 2613600*z0 + 31680*z1 + 192*z2 + z3 - 15744
    index7 = 2*z1
    index8 = 2613600*z0 + 31680*z1 + 192*z2 + z3 - 96
    index9 = 2613600*z0 + 31680*z1 + 192*z2 + z3
    index10 = 2613600*z0 + 31680*z1 + 192*z2 + z3 + 96
    index11 = 2*z1 + 1
    index12 = 2613600*z0 + 31680*z1 + 192*z2 + z3 + 15744
    index13 = 2613600*z0 + 31680*z1 + 192*z2 + z3 + 15840
    index14 = 2613600*z0 + 31680*z1 + 192*z2 + z3 + 15936
    index15 = 661344*z0 + 7968*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(165, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(165, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(165, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(165, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(165, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(165, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(165, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(165, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(165, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(165, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(165, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(165, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(165, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(165, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(165, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(165, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf4', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf3', get_index)
        return load
op4_op10_op12.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 5290752}, None)]
op10.unmet_dependencies = [   MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 96}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (5290752, 1)
op10.sizes = ([8, 83, 83, 96], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 83, z2: 83, z3: 96}
    index0 = 2613600*z0 + 31680*z1 + 192*z2 + z3
    index1 = 661344*z0 + 7968*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(relu, constant)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, mul, None)
        return store
op4_op10_op12.snodes[2] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 5290752}, None)]
op12.unmet_dependencies = [   MemoryDep('buf3', 2613600*c0 + 31680*c1 + 192*c2 + c3 + 15936, {c0: 8, c1: 83, c2: 83, c3: 96}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (5290752, 1)
op12.sizes = ([8, 83, 83, 96], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 83, z2: 83, z3: 96}
    index0 = 2*z1 + 1
    index1 = 2*z2 + 1
    index2 = 2613600*z0 + 31680*z1 + 192*z2 + z3 + 15936
    index3 = 661344*z0 + 7968*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        constant_4 = ops.constant(1.0, torch.float32)
        mul = ops.mul(masked_subblock1, constant_4)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf12', get_index_4, mul, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        return relu


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7_op55: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op7_op55.writes = 
    [   MemoryDep('buf55', c0, {c0: 11761200}, None),
        MemoryDep('buf7', c0, {c0: 11761200}, None)]
op7_op55.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 11761200}, None)]
op7_op55.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg7_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg8_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg9_1', c1, {c0: 217800, c1: 54}, None)]
op7_op55.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
    ]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op7_op55.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 11761200}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 11761200}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg7_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg8_1', c1, {c0: 217800, c1: 54}, None),
        MemoryDep('arg9_1', c1, {c0: 217800, c1: 54}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (11761200, 1)
op7.sizes = ([217800, 54], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
class op7_loop_body:
    var_ranges = {z0: 217800, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store
op7_op55.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 11761200}, None)]
op55.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 11761200}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (11761200, 1)
op55.sizes = ([11761200], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
class op55_loop_body:
    var_ranges = {z0: 11761200}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf55', get_index_1, relu, None)
        return store


op8_op9: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op8_op9.writes = 
    [   MemoryDep('buf8', c0, {c0: 2976048}, None),
        MemoryDep('buf9', c0, {c0: 2976048}, None)]
op8_op9.unmet_dependencies = 
    [   MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 54}, None)]
op8_op9.met_dependencies = []
op8_op9.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf8.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf9.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op8_op9.snodes[0] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 2976048}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 54}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf8.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (2976048, 1)
op8.sizes = ([8, 83, 83, 54], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op8_loop_body:
    var_ranges = {z0: 8, z1: 83, z2: 83, z3: 54}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8964
    index3 = 2*z2
    index4 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8910
    index5 = 2*z2 + 1
    index6 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8856
    index7 = 2*z1
    index8 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 54
    index9 = 1470150*z0 + 17820*z1 + 108*z2 + z3
    index10 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 54
    index11 = 2*z1 + 1
    index12 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8856
    index13 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8910
    index14 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8964
    index15 = 372006*z0 + 4482*z1 + 54*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(165, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(165, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(165, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(165, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(165, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(165, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(165, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(165, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(165, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(165, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(165, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(165, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(165, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(165, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(165, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(165, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf8', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf7', get_index)
        return load
op8_op9.snodes[1] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2976048}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 + 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 54, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8856, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8910, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3 - 8964, {c0: 8, c1: 83, c2: 83, c3: 54}, None),
        MemoryDep('buf7', 1470150*c0 + 17820*c1 + 108*c2 + c3, {c0: 8, c1: 83, c2: 83, c3: 54}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf9.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (2976048, 1)
op9.sizes = ([8, 83, 83, 54], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 83, z2: 83, z3: 54}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8964
    index3 = 2*z2
    index4 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8910
    index5 = 2*z2 + 1
    index6 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 8856
    index7 = 2*z1
    index8 = 1470150*z0 + 17820*z1 + 108*z2 + z3 - 54
    index9 = 1470150*z0 + 17820*z1 + 108*z2 + z3
    index10 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 54
    index11 = 2*z1 + 1
    index12 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8856
    index13 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8910
    index14 = 1470150*z0 + 17820*z1 + 108*z2 + z3 + 8964
    index15 = 372006*z0 + 4482*z1 + 54*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(165, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(165, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(165, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(165, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(165, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(165, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(165, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(165, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(165, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(165, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(165, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(165, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(165, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(165, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(165, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(165, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf9', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf7', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf7', get_index)
        return load


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf11.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.convolution


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 6912*c0 + c1, {c0: 864, c1: 6889}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf11', 372006*c0 + 54*c2 + I, {c0: 8, c1: 108, c2: 6889}, None),
        MemoryDep('buf13', 372006*c0 + 54*c2 + I, {c0: 8, c1: 108, c2: 6889}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 8, c1: 108}, None),
        MemoryDep('arg96_1', c1, {c0: 8, c1: 108}, None),
        MemoryDep('arg97_1', c1, {c0: 8, c1: 108}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 108}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (5952096, 1)
op14.sizes = ([8, 108, 6889], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 108, z2: 6889}
    index0 = z1
    index1 = 372006*z0 + 54*z2 + I
    index2 = 372006*z0 + 54*z2 + I
    index3 = 746496*z0 + 6912*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(54, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(54, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(108, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg95_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg96_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg97_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg98_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf14', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf11', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        return load


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 1792*c0 + c1, {c0: 864, c1: 1764}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 + 1, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 + 82, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 + 83, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 + 84, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 - 1, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 - 82, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 - 83, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2 - 84, {c0: 864, c1: 42, c2: 42}, None),
        MemoryDep('buf14', 6912*c0 + 166*c1 + 2*c2, {c0: 864, c1: 42, c2: 42}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[193536, 1792, 42, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1524096, 1)
op15.sizes = ([864, 42, 42], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[193536, 1792, 42, 1])
class op15_loop_body:
    var_ranges = {z0: 864, z1: 42, z2: 42}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 6912*z0 + 166*z1 + 2*z2 - 84
    index3 = 2*z2
    index4 = 6912*z0 + 166*z1 + 2*z2 - 83
    index5 = 2*z2 + 1
    index6 = 6912*z0 + 166*z1 + 2*z2 - 82
    index7 = 2*z1
    index8 = 6912*z0 + 166*z1 + 2*z2 - 1
    index9 = 6912*z0 + 166*z1 + 2*z2
    index10 = 6912*z0 + 166*z1 + 2*z2 + 1
    index11 = 2*z1 + 1
    index12 = 6912*z0 + 166*z1 + 2*z2 + 82
    index13 = 6912*z0 + 166*z1 + 2*z2 + 83
    index14 = 6912*z0 + 166*z1 + 2*z2 + 84
    index15 = 1792*z0 + 42*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(83, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(83, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(83, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(83, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(83, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(83, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(83, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(83, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(83, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(83, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(83, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(83, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(83, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(83, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(83, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(83, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf15', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf14', get_index)
        return load


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 21934848}, None)]
op16.unmet_dependencies = [   MemoryDep('buf3', 2613600*c0 + 15840*c1 + c2 - 31872, {c0: 8, c1: 169, c2: 16224}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 169, 169], stride=[2741856, 1, 16224, 96])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (21934848, 1)
op16.sizes = ([8, 169, 169, 96], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 169, 169], stride=[2741856, 1, 16224, 96])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 169, z2: 169, z3: 96}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 2613600*z0 + 15840*z1 + 96*z2 + z3 - 31872
    index3 = 2741856*z0 + 16224*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf16', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        return relu


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 2976048}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 2976048}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg14_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg15_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg16_1', c1, {c0: 55112, c1: 54}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (2976048, 1)
op19.sizes = ([55112, 54], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op19_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg14_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg15_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg16_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, relu, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op22.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2976048}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 2976048}, None),
        MemoryDep('buf22', c0, {c0: 2976048}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg19_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg20_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg21_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg22_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg24_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg25_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg26_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg27_1', c1, {c0: 55112, c1: 54}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf23.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2976048, 1)
op23.sizes = ([55112, 54], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op23_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf22', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg24_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg25_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg26_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg27_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf23', get_index_10, add_4, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 12632112}, None)]
op24.unmet_dependencies = [   MemoryDep('buf7', 1470150*c0 + 8910*c1 + c2 - 26892, {c0: 8, c1: 171, c2: 9234}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 171, 171], stride=[1579014, 1, 9234, 54])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (12632112, 1)
op24.sizes = ([8, 171, 171, 54], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 171, 171], stride=[1579014, 1, 9234, 54])
class op24_loop_body:
    var_ranges = {z0: 8, z1: 171, z2: 171, z3: 54}
    index0 = z1 - 3
    index1 = z2 - 3
    index2 = 1470150*z0 + 8910*z1 + 54*z2 + z3 - 26892
    index3 = 1579014*z0 + 9234*z1 + 54*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf24', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        relu = ops.relu(load)
        return relu


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 2976048}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 2976048}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg31_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg32_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg33_1', c1, {c0: 55112, c1: 54}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (2976048, 1)
op27.sizes = ([55112, 54], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op27_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg32_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg33_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, relu, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf29.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 12338352}, None)]
op30.unmet_dependencies = [   MemoryDep('buf7', 1470150*c0 + 8910*c1 + c2 - 17928, {c0: 8, c1: 169, c2: 9126}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 169, 169], stride=[1542294, 1, 9126, 54])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (12338352, 1)
op30.sizes = ([8, 169, 169, 54], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 169, 169], stride=[1542294, 1, 9126, 54])
class op30_loop_body:
    var_ranges = {z0: 8, z1: 169, z2: 169, z3: 54}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 1470150*z0 + 8910*z1 + 54*z2 + z3 - 17928
    index3 = 1542294*z0 + 9126*z1 + 54*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf30', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        relu = ops.relu(load)
        return relu


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2976048}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 2976048}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg43_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg44_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg45_1', c1, {c0: 55112, c1: 54}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (2976048, 1)
op33.sizes = ([55112, 54], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op33_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, relu, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf35.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 12048048}, None)]
op36.unmet_dependencies = [   MemoryDep('buf7', 1470150*c0 + 8910*c1 + c2 - 8964, {c0: 8, c1: 167, c2: 9018}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 167, 167], stride=[1506006, 1, 9018, 54])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (12048048, 1)
op36.sizes = ([8, 167, 167, 54], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 165, 165], stride=[1470150, 1, 8910, 54])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 167, 167], stride=[1506006, 1, 9018, 54])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 167, z2: 167, z3: 54}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 1470150*z0 + 8910*z1 + 54*z2 + z3 - 8964
    index3 = 1506006*z0 + 9018*z1 + 54*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf36', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf7', get_index)
        relu = ops.relu(load)
        return relu


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 2976048}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 2976048}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg55_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg56_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg57_1', c1, {c0: 55112, c1: 54}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (2976048, 1)
op39.sizes = ([55112, 54], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op39_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg55_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg57_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, relu, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op42_op43.writes = 
    [   MemoryDep('buf42', c0, {c0: 2976048}, None),
        MemoryDep('buf43', c0, {c0: 2976048}, None)]
op42_op43.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 2976048}, None),
        MemoryDep('buf41', c0, {c0: 2976048}, None)]
op42_op43.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg49_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg50_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg51_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg60_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg61_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg62_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg63_1', c1, {c0: 55112, c1: 54}, None)]
op42_op43.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42_op43.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 2976048}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 2976048}, None),
        MemoryDep('buf41', c0, {c0: 2976048}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg49_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg50_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg51_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg60_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg61_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg62_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg63_1', c1, {c0: 55112, c1: 54}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (2976048, 1)
op42.sizes = ([55112, 54], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op42_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg49_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg50_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg51_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf41', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg60_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg61_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg62_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg63_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf42', get_index_10, add_4, None)
        return store
op42_op43.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 2976048}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 2976048}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (2976048, 1)
op43.sizes = ([2976048], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op43_loop_body:
    var_ranges = {z0: 2976048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf43', get_index_1, relu, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 2976048}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 2976048}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg67_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg68_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg69_1', c1, {c0: 55112, c1: 54}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (2976048, 1)
op46.sizes = ([55112, 54], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op46_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, relu, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: ExternKernelSchedulerNode(ExternKernelAlloc)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelAlloc
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf48.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.convolution


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 21418752}, None)]
op49.unmet_dependencies = [   MemoryDep('buf3', 2613600*c0 + 15840*c1 + c2 - 15936, {c0: 8, c1: 167, c2: 16032}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 167, 167], stride=[2677344, 1, 16032, 96])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (21418752, 1)
op49.sizes = ([8, 167, 167, 96], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 165, 165], stride=[2613600, 1, 15840, 96])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 167, 167], stride=[2677344, 1, 16032, 96])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 167, z2: 167, z3: 96}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 2613600*z0 + 15840*z1 + 96*z2 + z3 - 15936
    index3 = 2677344*z0 + 16032*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(165, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(165, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf49', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        return relu


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 83, 83], stride=[661344, 1, 7968, 96])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 2976048}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 2976048}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg79_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg80_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg81_1', c1, {c0: 55112, c1: 54}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (2976048, 1)
op52.sizes = ([55112, 54], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op52_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg81_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf52', get_index_5, relu, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2976048}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 2976048}, None),
        MemoryDep('buf56', c0, {c0: 2976048}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg85_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg86_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg87_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg89_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg90_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg91_1', c1, {c0: 55112, c1: 54}, None),
        MemoryDep('arg92_1', c1, {c0: 55112, c1: 54}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2976048, 1)
op57.sizes = ([55112, 54], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
class op57_loop_body:
    var_ranges = {z0: 55112, z1: 54}
    index0 = 54*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg85_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf56', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg89_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg90_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg91_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg92_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf57', get_index_10, add_4, None)
        return store


op58_op59: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op58_op59.writes = 
    [   MemoryDep('buf58', 6912*c0 + c1, {c0: 2160, c1: 6889}, None),
        MemoryDep('buf59', 1860030*c0 + c1 + 270*c2, {c0: 8, c1: 270, c2: 6889}, None)]
op58_op59.unmet_dependencies = 
    [   MemoryDep('buf23', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf29', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf42', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf48', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf57', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf8', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf9', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None)]
op58_op59.met_dependencies = 
    [   MemoryDep('arg36_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg37_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg38_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg39_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg72_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg73_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg74_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg75_1', I, {c0: 8, c1: 270}, None)]
op58_op59.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1860030, 1, 22410, 270])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58_op59.snodes[0] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', 6912*c0 + c1, {c0: 2160, c1: 6889}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf23', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf29', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf42', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf48', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf57', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf8', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None),
        MemoryDep('buf9', 372006*c0 + 54*c2 + I, {c0: 8, c1: 270, c2: 6889}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg36_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg37_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg38_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg39_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg72_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg73_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg74_1', I, {c0: 8, c1: 270}, None),
        MemoryDep('arg75_1', I, {c0: 8, c1: 270}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (14880240, 1)
op58.sizes = ([8, 270, 6889], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 54, 83, 83], stride=[372006, 1, 4482, 54])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 270, z2: 6889}
    index0 = z1
    index1 = 372006*z0 + 54*z2 + I
    index2 = 372006*z0 + 54*z2 + I
    index3 = I
    index4 = 372006*z0 + 54*z2 + I
    index5 = 372006*z0 + 54*z2 + I
    index6 = I
    index7 = 372006*z0 + 54*z2 + I
    index8 = 1866240*z0 + 6912*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(54, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(54, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(108, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(108, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(162, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(162, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(216, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(216, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(270, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index8')
        store = ops.store('buf58', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf23', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg36_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg37_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg39_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf8', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf42', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index6')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index6')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index6')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('buf9', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf57', get_index)
        return load
op58_op59.snodes[1] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 1860030*c0 + c1 + 270*c2, {c0: 8, c1: 270, c2: 6889}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', 6912*c0 + c1, {c0: 2160, c1: 6889}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1860030, 1, 22410, 270])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (14880240, 1)
op59.sizes = ([8, 270, 6889], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1860030, 1, 22410, 270])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 270, z2: 6889}
    index0 = 1866240*z0 + 6912*z1 + z2
    index1 = 1860030*z0 + z1 + 270*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, relu, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61_op107: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op61_op107.writes = 
    [   MemoryDep('buf107', c0, {c0: 5952096}, None),
        MemoryDep('buf61', c0, {c0: 5952096}, None)]
op61_op107.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 5952096}, None)]
op61_op107.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg101_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg102_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg103_1', c1, {c0: 55112, c1: 108}, None)]
op61_op107.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op61_op107.snodes[0] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 5952096}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 5952096}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg101_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg102_1', c1, {c0: 55112, c1: 108}, None),
        MemoryDep('arg103_1', c1, {c0: 55112, c1: 108}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (5952096, 1)
op61.sizes = ([55112, 108], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
class op61_loop_body:
    var_ranges = {z0: 55112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg101_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf61', get_index_5, add_1, None)
        return store
op61_op107.snodes[1] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 5952096}, None)]
op107.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 5952096}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (5952096, 1)
op107.sizes = ([5952096], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
class op107_loop_body:
    var_ranges = {z0: 5952096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf107', get_index_1, relu, None)
        return store


op62_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op62_op63.writes = 
    [   MemoryDep('buf62', c0, {c0: 1524096}, None),
        MemoryDep('buf63', c0, {c0: 1524096}, None)]
op62_op63.unmet_dependencies = 
    [   MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3, {c0: 8, c1: 42, c2: 42, c3: 108}, None)]
op62_op63.met_dependencies = []
op62_op63.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf62.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf63.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op62_op63.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1524096}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3, {c0: 8, c1: 42, c2: 42, c3: 108}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf62.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1524096, 1)
op62.sizes = ([8, 42, 42, 108], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 108}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 9072
    index3 = 2*z2
    index4 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 8964
    index5 = 2*z2 + 1
    index6 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 8856
    index7 = 2*z1
    index8 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 108
    index9 = 744012*z0 + 17928*z1 + 216*z2 + z3
    index10 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 108
    index11 = 2*z1 + 1
    index12 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 8856
    index13 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 8964
    index14 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 9072
    index15 = 190512*z0 + 4536*z1 + 108*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(83, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(83, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(83, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(83, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(83, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(83, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(83, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(83, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(83, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(83, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(83, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(83, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(83, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(83, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(83, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(83, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf62', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf61', get_index)
        return load
op62_op63.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1524096}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 + 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 108, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8856, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 8964, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3 - 9072, {c0: 8, c1: 42, c2: 42, c3: 108}, None),
        MemoryDep('buf61', 744012*c0 + 17928*c1 + 216*c2 + c3, {c0: 8, c1: 42, c2: 42, c3: 108}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf63.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1524096, 1)
op63.sizes = ([8, 42, 42, 108], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 108}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 9072
    index3 = 2*z2
    index4 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 8964
    index5 = 2*z2 + 1
    index6 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 8856
    index7 = 2*z1
    index8 = 744012*z0 + 17928*z1 + 216*z2 + z3 - 108
    index9 = 744012*z0 + 17928*z1 + 216*z2 + z3
    index10 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 108
    index11 = 2*z1 + 1
    index12 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 8856
    index13 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 8964
    index14 = 744012*z0 + 17928*z1 + 216*z2 + z3 + 9072
    index15 = 190512*z0 + 4536*z1 + 108*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(83, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(83, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(83, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(83, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(83, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(83, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(83, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(83, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(83, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(83, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(83, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(83, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(83, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(83, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(83, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(83, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf63', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf61', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf61', get_index)
        return load


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 476280*c0 + c1 + 270*c2, {c0: 8, c1: 270, c2: 1764}, None)]
op64.unmet_dependencies = [MemoryDep('buf58', 6912*c0 + 166*c1 + 2*c2, {c0: 2160, c1: 42, c2: 42}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 42, 42], stride=[476280, 1, 11340, 270])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (3810240, 1)
op64.sizes = ([8, 270, 42, 42], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 42, 42], stride=[476280, 1, 11340, 270])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 270, z2: 42, z3: 42}
    index0 = 1866240*z0 + 6912*z1 + 166*z2 + 2*z3
    index1 = 476280*z0 + z1 + 11340*z2 + 270*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        relu = ops.relu(load)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(relu, constant)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf64', get_index_1, mul, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', 476280*c0 + c1 + 270*c2, {c0: 8, c1: 270, c2: 1764}, None)]
op66.unmet_dependencies = [   MemoryDep('buf58', 6912*c0 + 166*c1 + 2*c2 + 84, {c0: 2160, c1: 42, c2: 42}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 270, 42, 42], stride=[476280, 1, 11340, 270])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (3810240, 1)
op66.sizes = ([8, 270, 42, 42], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 83, 83], stride=[1866240, 6912, 83, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 270, 42, 42], stride=[476280, 1, 11340, 270])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 270, z2: 42, z3: 42}
    index0 = 2*z2 + 1
    index1 = 2*z3 + 1
    index2 = 1866240*z0 + 6912*z1 + 166*z2 + 2*z3 + 84
    index3 = 476280*z0 + z1 + 11340*z2 + 270*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        constant_4 = ops.constant(1.0, torch.float32)
        mul = ops.mul(masked_subblock1, constant_4)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf66', get_index_4, mul, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        relu = ops.relu(load)
        return relu


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68_op120_op151: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op68_op120_op151.writes = 
    [   MemoryDep('buf120', 381024*c0 + c1 + 216*c2, {c0: 8, c1: 216, c2: 1764}, None),
        MemoryDep('buf151', 381024*c0 + c1 + 216*c2, {c0: 8, c1: 216, c2: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op68_op120_op151.unmet_dependencies = 
    [   MemoryDep('buf65', 190512*c0 + 108*c2 + I, {c0: 8, c1: 216, c2: 1764}, None),
        MemoryDep('buf67', 190512*c0 + 108*c2 + I, {c0: 8, c1: 216, c2: 1764}, None)]
op68_op120_op151.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg184_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg185_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 216}, None)]
op68_op120_op151.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op68_op120_op151.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf65', 190512*c0 + 108*c2 + I, {c0: 8, c1: 216, c2: 1764}, None),
        MemoryDep('buf67', 190512*c0 + 108*c2 + I, {c0: 8, c1: 216, c2: 1764}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg184_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg185_1', c1, {c0: 8, c1: 216}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 216}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (3048192, 1)
op68.sizes = ([8, 216, 1764], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 216, z2: 1764}
    index0 = z1
    index1 = 190512*z0 + 108*z2 + I
    index2 = 190512*z0 + 108*z2 + I
    index3 = 387072*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(108, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(108, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(216, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg183_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg184_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg185_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg186_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf68', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf65', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf67', get_index)
        return load
op68_op120_op151.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', 381024*c0 + c1 + 216*c2, {c0: 8, c1: 216, c2: 1764}, None)]
op120.unmet_dependencies = [MemoryDep('buf68', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (3048192, 1)
op120.sizes = ([8, 216, 1764], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 216, z2: 1764}
    index0 = 387072*z0 + 1792*z1 + z2
    index1 = 381024*z0 + z1 + 216*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf120', get_index_1, relu, None)
        return store
op68_op120_op151.snodes[2] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', 381024*c0 + c1 + 216*c2, {c0: 8, c1: 216, c2: 1764}, None)]
op151.unmet_dependencies = [MemoryDep('buf68', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (3048192, 1)
op151.sizes = ([8, 216, 1764], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 216, z2: 1764}
    index0 = 387072*z0 + 1792*z1 + z2
    index1 = 381024*z0 + z1 + 216*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, relu, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf68', 1792*c0 + c1 + 1, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 + 41, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 + 42, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 + 43, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 - 1, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 - 41, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 - 42, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1 - 43, {c0: 1728, c1: 1764}, None),
        MemoryDep('buf68', 1792*c0 + c1, {c0: 1728, c1: 1764}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (3048192, 1)
op69.sizes = ([1728, 42, 42], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
class op69_loop_body:
    var_ranges = {z0: 1728, z1: 42, z2: 42}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 1792*z0 + 42*z1 + z2 - 43
    index3 = z2
    index4 = 1792*z0 + 42*z1 + z2 - 42
    index5 = z2 + 1
    index6 = 1792*z0 + 42*z1 + z2 - 41
    index7 = z1
    index8 = 1792*z0 + 42*z1 + z2 - 1
    index9 = 1792*z0 + 42*z1 + z2
    index10 = 1792*z0 + 42*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 1792*z0 + 42*z1 + z2 + 41
    index13 = 1792*z0 + 42*z1 + z2 + 42
    index14 = 1792*z0 + 42*z1 + z2 + 43
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf69', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf68', get_index)
        return load


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', 817452*c0 + c1 + 108*c2, {c0: 8, c1: 108, c2: 7569}, None)]
op70.unmet_dependencies = [   MemoryDep('buf14', 6912*c0 + 83*c1 + c2 - 168, {c0: 864, c1: 87, c2: 87}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 87, 87], stride=[817452, 1, 9396, 108])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (6539616, 1)
op70.sizes = ([8, 108, 87, 87], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 87, 87], stride=[817452, 1, 9396, 108])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 108, z2: 87, z3: 87}
    index0 = z2 - 2
    index1 = z3 - 2
    index2 = 746496*z0 + 6912*z1 + 83*z2 + z3 - 168
    index3 = 817452*z0 + z1 + 9396*z2 + 108*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf70', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        relu = ops.relu(load)
        return relu


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1524096}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 1524096}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg107_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg108_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg109_1', c1, {c0: 14112, c1: 108}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (1524096, 1)
op73.sizes = ([14112, 108], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op73_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg109_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf75.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 6843744}, None)]
op76.unmet_dependencies = [   MemoryDep('buf61', 744012*c0 + 8964*c1 + c2 - 27216, {c0: 8, c1: 89, c2: 9612}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 89, 89], stride=[855468, 1, 9612, 108])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (6843744, 1)
op76.sizes = ([8, 89, 89, 108], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 89, 89], stride=[855468, 1, 9612, 108])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 89, z2: 89, z3: 108}
    index0 = z1 - 3
    index1 = z2 - 3
    index2 = 744012*z0 + 8964*z1 + 108*z2 + z3 - 27216
    index3 = 855468*z0 + 9612*z1 + 108*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf76', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf61', get_index)
        relu = ops.relu(load)
        return relu


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1524096}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1524096}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg119_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg120_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg121_1', c1, {c0: 14112, c1: 108}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1524096, 1)
op79.sizes = ([14112, 108], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op79_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg119_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg120_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg121_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: ExternKernelSchedulerNode(ExternKernelAlloc)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelAlloc
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf81.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.convolution


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 6539616}, None)]
op82.unmet_dependencies = [   MemoryDep('buf61', 744012*c0 + 8964*c1 + c2 - 18144, {c0: 8, c1: 87, c2: 9396}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 87, 87], stride=[817452, 1, 9396, 108])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (6539616, 1)
op82.sizes = ([8, 87, 87, 108], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 87, 87], stride=[817452, 1, 9396, 108])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 87, z2: 87, z3: 108}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 744012*z0 + 8964*z1 + 108*z2 + z3 - 18144
    index3 = 817452*z0 + 9396*z1 + 108*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf82', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf61', get_index)
        relu = ops.relu(load)
        return relu


op83: ExternKernelSchedulerNode(ExternKernelAlloc)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelAlloc
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.node.kernel = extern_kernels.convolution


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 1524096}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 1524096}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg131_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg132_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg133_1', c1, {c0: 14112, c1: 108}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (1524096, 1)
op85.sizes = ([14112, 108], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op85_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, relu, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf87.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 6242400}, None)]
op88.unmet_dependencies = [   MemoryDep('buf61', 744012*c0 + 8964*c1 + c2 - 9072, {c0: 8, c1: 85, c2: 9180}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 85, 85], stride=[780300, 1, 9180, 108])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (6242400, 1)
op88.sizes = ([8, 85, 85, 108], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[744012, 1, 8964, 108])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 85, 85], stride=[780300, 1, 9180, 108])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 85, z2: 85, z3: 108}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 744012*z0 + 8964*z1 + 108*z2 + z3 - 9072
    index3 = 780300*z0 + 9180*z1 + 108*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf88', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf61', get_index)
        relu = ops.relu(load)
        return relu


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 1524096}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 1524096}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg143_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg144_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg145_1', c1, {c0: 14112, c1: 108}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1524096, 1)
op91.sizes = ([14112, 108], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op91_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, relu, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op94_op95.writes = 
    [   MemoryDep('buf94', c0, {c0: 1524096}, None),
        MemoryDep('buf95', c0, {c0: 1524096}, None)]
op94_op95.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 1524096}, None),
        MemoryDep('buf93', c0, {c0: 1524096}, None)]
op94_op95.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg137_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg138_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg139_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg148_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg149_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg150_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg151_1', c1, {c0: 14112, c1: 108}, None)]
op94_op95.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94_op95.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1524096}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 1524096}, None),
        MemoryDep('buf93', c0, {c0: 1524096}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg137_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg138_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg139_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg148_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg149_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg150_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg151_1', c1, {c0: 14112, c1: 108}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (1524096, 1)
op94.sizes = ([14112, 108], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op94_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg137_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg138_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg139_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf93', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg148_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg149_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg150_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg151_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf94', get_index_10, add_4, None)
        return store
op94_op95.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1524096}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 1524096}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1524096, 1)
op95.sizes = ([1524096], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op95_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf95', get_index_1, relu, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1524096}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 1524096}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg155_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg156_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg157_1', c1, {c0: 14112, c1: 108}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1524096, 1)
op98.sizes = ([14112, 108], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op98_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg155_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf98', get_index_5, relu, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelAlloc)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelAlloc
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.convolution


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf100.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', 780300*c0 + c1 + 108*c2, {c0: 8, c1: 108, c2: 7225}, None)]
op101.unmet_dependencies = [MemoryDep('buf14', 6912*c0 + 83*c1 + c2 - 84, {c0: 864, c1: 85, c2: 85}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 85, 85], stride=[780300, 1, 9180, 108])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (6242400, 1)
op101.sizes = ([8, 108, 85, 85], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 83, 83], stride=[746496, 6912, 83, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 85, 85], stride=[780300, 1, 9180, 108])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 108, z2: 85, z3: 85}
    index0 = z2 - 1
    index1 = z3 - 1
    index2 = 746496*z0 + 6912*z1 + 83*z2 + z3 - 84
    index3 = 780300*z0 + z1 + 9180*z2 + 108*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(83, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(83, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf101', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        relu = ops.relu(load)
        return relu


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 1524096}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 1524096}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg166_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg167_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg168_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg169_1', c1, {c0: 14112, c1: 108}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (1524096, 1)
op104.sizes = ([14112, 108], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op104_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg167_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg168_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg169_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf104', get_index_5, relu, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelAlloc)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelAlloc
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.convolution


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1524096}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 1524096}, None),
        MemoryDep('buf108', c0, {c0: 1524096}, None)]
op109.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg173_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg174_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg175_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg177_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg178_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg179_1', c1, {c0: 14112, c1: 108}, None),
        MemoryDep('arg180_1', c1, {c0: 14112, c1: 108}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1524096, 1)
op109.sizes = ([14112, 108], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
class op109_loop_body:
    var_ranges = {z0: 14112, z1: 108}
    index0 = 108*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf108', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg178_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg179_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg180_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf109', get_index_10, add_4, None)
        return store


op110_op111_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op110_op111_op116.writes = 
    [   MemoryDep('buf110', 1792*c0 + c1, {c0: 4320, c1: 1764}, None),
        MemoryDep('buf111', 952560*c0 + c1 + 540*c2, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf116', 952560*c0 + c1 + 540*c2, {c0: 8, c1: 540, c2: 1764}, None)]
op110_op111_op116.unmet_dependencies = 
    [   MemoryDep('buf100', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf109', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf15', 193536*c0 + c2 + 1792*I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf62', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf63', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf75', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf81', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf94', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None)]
op110_op111_op116.met_dependencies = 
    [   MemoryDep('arg112_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg113_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg114_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg115_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg124_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg125_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg126_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg127_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg160_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg161_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg162_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg163_1', I, {c0: 8, c1: 540}, None)]
op110_op111_op116.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[967680, 1792, 42, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op110_op111_op116.snodes[0] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', 1792*c0 + c1, {c0: 4320, c1: 1764}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf100', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf109', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf15', 193536*c0 + c2 + 1792*I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf62', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf63', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf75', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf81', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None),
        MemoryDep('buf94', 190512*c0 + 108*c2 + I, {c0: 8, c1: 540, c2: 1764}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg112_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg113_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg114_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg115_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg124_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg125_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg126_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg127_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg160_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg161_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg162_1', I, {c0: 8, c1: 540}, None),
        MemoryDep('arg163_1', I, {c0: 8, c1: 540}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[967680, 1792, 42, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (7620480, 1)
op110.sizes = ([8, 540, 1764], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[193536, 1792, 42, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[108], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 108, 42, 42], stride=[190512, 1, 4536, 108])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[967680, 1792, 42, 1])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 540, z2: 1764}
    index0 = z1
    index1 = 190512*z0 + 108*z2 + I
    index2 = I
    index3 = 193536*z0 + z2 + 1792*I
    index4 = 190512*z0 + 108*z2 + I
    index5 = I
    index6 = 190512*z0 + 108*z2 + I
    index7 = 190512*z0 + 108*z2 + I
    index8 = I
    index9 = 190512*z0 + 108*z2 + I
    index10 = 967680*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(108, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(108, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(216, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(216, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(324, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(324, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(432, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(432, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(540, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf110', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf15', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg124_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index5')
        load_2 = ops.load('arg125_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index5')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index5')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf62', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf94', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg160_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index8')
        load_2 = ops.load('arg161_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index8')
        load_3 = ops.load('arg162_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index8')
        load_4 = ops.load('arg163_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index7')
        load_5 = ops.load('buf63', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf109', get_index)
        return load
op110_op111_op116.snodes[1] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', 952560*c0 + c1 + 540*c2, {c0: 8, c1: 540, c2: 1764}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', 1792*c0 + c1, {c0: 4320, c1: 1764}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (7620480, 1)
op111.sizes = ([8, 540, 1764], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[967680, 1792, 42, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 540, z2: 1764}
    index0 = 967680*z0 + 1792*z1 + z2
    index1 = 952560*z0 + z1 + 540*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, relu, None)
        return store
op110_op111_op116.snodes[2] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', 952560*c0 + c1 + 540*c2, {c0: 8, c1: 540, c2: 1764}, None)]
op116.unmet_dependencies = [MemoryDep('buf110', 1792*c0 + c1, {c0: 4320, c1: 1764}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (7620480, 1)
op116.sizes = ([8, 540, 1764], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[967680, 1792, 42, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 540, 42, 42], stride=[952560, 1, 22680, 540])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 540, z2: 1764}
    index0 = 967680*z0 + 1792*z1 + z2
    index1 = 952560*z0 + z1 + 540*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf116', get_index_1, relu, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 3048192}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 3048192}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg189_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg190_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg191_1', c1, {c0: 14112, c1: 216}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (3048192, 1)
op113.sizes = ([14112, 216], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op113_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg190_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg191_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, add_1, None)
        return store


op114_op115_op126_op132_op138: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op114_op115_op126_op132_op138.writes = 
    [   MemoryDep('buf114', c0, {c0: 3048192}, None),
        MemoryDep('buf115', c0, {c0: 3048192}, None),
        MemoryDep('buf126', c0, {c0: 3048192}, None),
        MemoryDep('buf132', c0, {c0: 3048192}, None),
        MemoryDep('buf138', c0, {c0: 3048192}, None)]
op114_op115_op126_op132_op138.unmet_dependencies = 
    [   MemoryDep('buf113', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0, {c0: 3048192}, None)]
op114_op115_op126_op132_op138.met_dependencies = []
op114_op115_op126_op132_op138.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf114.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf115.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op114_op115_op126_op132_op138.snodes[0] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 3048192}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf113', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0, {c0: 3048192}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf114.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (3048192, 1)
op114.sizes = ([8, 42, 42, 216], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf114', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf113', get_index)
        return load
op114_op115_op126_op132_op138.snodes[1] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 3048192}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf113', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf113', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf113', c0, {c0: 3048192}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf115.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (3048192, 1)
op115.sizes = ([8, 42, 42, 216], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op115_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf115', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf113', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf113', get_index)
        return load
op114_op115_op126_op132_op138.snodes[2] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 3048192}, None)]
op126.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 3048192}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (3048192, 1)
op126.sizes = ([3048192], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op126_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf126', get_index_1, relu, None)
        return store
op114_op115_op126_op132_op138.snodes[3] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 3048192}, None)]
op132.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 3048192}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (3048192, 1)
op132.sizes = ([3048192], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op132_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf132', get_index_1, relu, None)
        return store
op114_op115_op126_op132_op138.snodes[4] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 3048192}, None)]
op138.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 3048192}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (3048192, 1)
op138.sizes = ([3048192], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op138_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf138', get_index_1, relu, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg264_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118_op167_op198: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op118_op167_op198.writes = 
    [   MemoryDep('buf118', c0, {c0: 3048192}, None),
        MemoryDep('buf167', c0, {c0: 3048192}, None),
        MemoryDep('buf198', c0, {c0: 3048192}, None)]
op118_op167_op198.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 3048192}, None)]
op118_op167_op198.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg266_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg267_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg268_1', c1, {c0: 14112, c1: 216}, None)]
op118_op167_op198.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op118_op167_op198.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 3048192}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 3048192}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg266_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg267_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg268_1', c1, {c0: 14112, c1: 216}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (3048192, 1)
op118.sizes = ([14112, 216], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op118_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg265_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg266_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg267_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg268_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store
op118_op167_op198.snodes[1] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 3048192}, None)]
op167.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 3048192}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (3048192, 1)
op167.sizes = ([3048192], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op167_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf167', get_index_1, relu, None)
        return store
op118_op167_op198.snodes[2] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 3048192}, None)]
op198.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 3048192}, None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (3048192, 1)
op198.sizes = ([3048192], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op198_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf198', get_index_1, relu, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 3048192}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf118', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf118', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf118', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf118', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf118', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf118', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf118', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf118', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf118', c0, {c0: 3048192}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf119.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (3048192, 1)
op119.sizes = ([8, 42, 42, 216], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf119', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf118', get_index)
        return load


op121: ExternKernelSchedulerNode(ExternKernelAlloc)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelAlloc
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = extern_kernels.convolution


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 3048192}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 3048192}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg195_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg196_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg197_1', c1, {c0: 14112, c1: 216}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (3048192, 1)
op123.sizes = ([14112, 216], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op123_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg195_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, relu, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelAlloc)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelAlloc
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.convolution


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf125.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.convolution


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 3048192}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 3048192}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg207_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg208_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg209_1', c1, {c0: 14112, c1: 216}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (3048192, 1)
op129.sizes = ([14112, 216], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op129_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg207_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg208_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg209_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf129', get_index_5, relu, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf131.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 3048192}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 3048192}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg219_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg220_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg221_1', c1, {c0: 14112, c1: 216}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (3048192, 1)
op135.sizes = ([14112, 216], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op135_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg220_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg221_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, relu, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf137.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.convolution


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 3048192}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 3048192}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg231_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg232_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg233_1', c1, {c0: 14112, c1: 216}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (3048192, 1)
op141.sizes = ([14112, 216], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op141_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg231_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg233_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf141', get_index_5, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144_op145: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op144_op145.writes = 
    [   MemoryDep('buf144', c0, {c0: 3048192}, None),
        MemoryDep('buf145', c0, {c0: 3048192}, None)]
op144_op145.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 3048192}, None),
        MemoryDep('buf143', c0, {c0: 3048192}, None)]
op144_op145.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg225_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg226_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg227_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg236_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg237_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg238_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg239_1', c1, {c0: 14112, c1: 216}, None)]
op144_op145.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144_op145.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 3048192}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 3048192}, None),
        MemoryDep('buf143', c0, {c0: 3048192}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg225_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg226_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg227_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg236_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg237_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg238_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg239_1', c1, {c0: 14112, c1: 216}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (3048192, 1)
op144.sizes = ([14112, 216], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op144_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg225_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg226_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg227_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf143', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg236_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg237_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg238_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg239_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf144', get_index_10, add_4, None)
        return store
op144_op145.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 3048192}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 3048192}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (3048192, 1)
op145.sizes = ([3048192], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op145_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf145', get_index_1, relu, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelAlloc)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelAlloc
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.convolution


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 3048192}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 3048192}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg243_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg244_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg245_1', c1, {c0: 14112, c1: 216}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (3048192, 1)
op148.sizes = ([14112, 216], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op148_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf148', get_index_5, relu, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: ExternKernelSchedulerNode(ExternKernelAlloc)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelAlloc
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf150.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op150.node.kernel = extern_kernels.convolution


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: ExternKernelSchedulerNode(ExternKernelAlloc)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelAlloc
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.convolution


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 3048192}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 3048192}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg255_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg256_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg257_1', c1, {c0: 14112, c1: 216}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (3048192, 1)
op154.sizes = ([14112, 216], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op154_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg257_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, relu, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157_op158_op163: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op157_op158_op163.writes = 
    [   MemoryDep('buf157', 1792*c0 + c1, {c0: 8640, c1: 1764}, None),
        MemoryDep('buf158', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf163', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op157_op158_op163.unmet_dependencies = 
    [   MemoryDep('buf113', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf114', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf115', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf125', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf131', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf144', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf150', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf156', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf69', 387072*c0 + c2 + 1792*I, {c0: 8, c1: 1080, c2: 1764}, None)]
op157_op158_op163.met_dependencies = 
    [   MemoryDep('arg200_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg201_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg202_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg203_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg212_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg213_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg214_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg215_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg248_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg249_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg250_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg251_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg260_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg261_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg262_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg263_1', I, {c0: 8, c1: 1080}, None)]
op157_op158_op163.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op157_op158_op163.snodes[0] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf113', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf114', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf115', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf125', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf131', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf144', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf150', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf156', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf69', 387072*c0 + c2 + 1792*I, {c0: 8, c1: 1080, c2: 1764}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg200_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg201_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg202_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg203_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg212_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg213_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg214_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg215_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg248_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg249_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg250_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg251_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg260_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg261_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg262_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg263_1', I, {c0: 8, c1: 1080}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (15240960, 1)
op157.sizes = ([8, 1080, 1764], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[387072, 1792, 42, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = z1
    index1 = 381024*z0 + 216*z2 + I
    index2 = I
    index3 = 387072*z0 + z2 + 1792*I
    index4 = 381024*z0 + 216*z2 + I
    index5 = I
    index6 = 381024*z0 + 216*z2 + I
    index7 = 381024*z0 + 216*z2 + I
    index8 = I
    index9 = 381024*z0 + 216*z2 + I
    index10 = I
    index11 = 1935360*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(216, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(216, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(432, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(432, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(648, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(648, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(864, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(864, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(1080, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index11')
        store = ops.store('buf157', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg200_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg201_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg202_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg203_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf69', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index5')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index5')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index5')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf114', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf144', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg248_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index8')
        load_2 = ops.load('arg249_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index8')
        load_3 = ops.load('arg250_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index8')
        load_4 = ops.load('arg251_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index7')
        load_5 = ops.load('buf115', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('arg260_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index10')
        load_2 = ops.load('arg261_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index10')
        load_3 = ops.load('arg262_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index10')
        load_4 = ops.load('arg263_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index9')
        load_5 = ops.load('buf113', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op157_op158_op163.snodes[1] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [   MemoryDep('buf158', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (15240960, 1)
op158.sizes = ([8, 1080, 1764], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, relu, None)
        return store
op157_op158_op163.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [   MemoryDep('buf163', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op163.unmet_dependencies = [MemoryDep('buf157', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (15240960, 1)
op163.sizes = ([8, 1080, 1764], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, relu, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.convolution


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 3048192}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 3048192}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg271_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg272_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg273_1', c1, {c0: 14112, c1: 216}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (3048192, 1)
op160.sizes = ([14112, 216], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op160_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg271_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg272_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg273_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_1, None)
        return store


op161_op162_op173_op179_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op161_op162_op173_op179_op185.writes = 
    [   MemoryDep('buf161', c0, {c0: 3048192}, None),
        MemoryDep('buf162', c0, {c0: 3048192}, None),
        MemoryDep('buf173', c0, {c0: 3048192}, None),
        MemoryDep('buf179', c0, {c0: 3048192}, None),
        MemoryDep('buf185', c0, {c0: 3048192}, None)]
op161_op162_op173_op179_op185.unmet_dependencies = 
    [   MemoryDep('buf160', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0, {c0: 3048192}, None)]
op161_op162_op173_op179_op185.met_dependencies = []
op161_op162_op173_op179_op185.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf161.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf162.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op161_op162_op173_op179_op185.snodes[0] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 3048192}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf160', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0, {c0: 3048192}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf161.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (3048192, 1)
op161.sizes = ([8, 42, 42, 216], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf161', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf160', get_index)
        return load
op161_op162_op173_op179_op185.snodes[1] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 3048192}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf160', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf160', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf160', c0, {c0: 3048192}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf162.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (3048192, 1)
op162.sizes = ([8, 42, 42, 216], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf162', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf160', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf160', get_index)
        return load
op161_op162_op173_op179_op185.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 3048192}, None)]
op173.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 3048192}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (3048192, 1)
op173.sizes = ([3048192], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op173_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf173', get_index_1, relu, None)
        return store
op161_op162_op173_op179_op185.snodes[3] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 3048192}, None)]
op179.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 3048192}, None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (3048192, 1)
op179.sizes = ([3048192], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op179_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf179', get_index_1, relu, None)
        return store
op161_op162_op173_op179_op185.snodes[4] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 3048192}, None)]
op185.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 3048192}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (3048192, 1)
op185.sizes = ([3048192], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op185_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf185', get_index_1, relu, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelAlloc)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelAlloc
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False)]
]
op164.node.kernel = extern_kernels.convolution


op165_op214_op245: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op165_op214_op245.writes = 
    [   MemoryDep('buf165', c0, {c0: 3048192}, None),
        MemoryDep('buf214', c0, {c0: 3048192}, None),
        MemoryDep('buf245', c0, {c0: 3048192}, None)]
op165_op214_op245.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 3048192}, None)]
op165_op214_op245.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg348_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg349_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg350_1', c1, {c0: 14112, c1: 216}, None)]
op165_op214_op245.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op165_op214_op245.snodes[0] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 3048192}, None)]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 3048192}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg348_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg349_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg350_1', c1, {c0: 14112, c1: 216}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (3048192, 1)
op165.sizes = ([14112, 216], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op165_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf165', get_index_5, add_1, None)
        return store
op165_op214_op245.snodes[1] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 3048192}, None)]
op214.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 3048192}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (3048192, 1)
op214.sizes = ([3048192], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op214_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf214', get_index_1, relu, None)
        return store
op165_op214_op245.snodes[2] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 3048192}, None)]
op245.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 3048192}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (3048192, 1)
op245.sizes = ([3048192], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op245_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf245', get_index_1, relu, None)
        return store


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 3048192}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf165', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf165', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf165', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf165', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf165', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf165', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf165', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf165', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf165', c0, {c0: 3048192}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf166.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (3048192, 1)
op166.sizes = ([8, 42, 42, 216], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op166_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf166', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf165', get_index)
        return load


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.convolution


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 3048192}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 3048192}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg277_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg278_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg279_1', c1, {c0: 14112, c1: 216}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (3048192, 1)
op170.sizes = ([14112, 216], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op170_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg277_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg278_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg279_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf170', get_index_5, relu, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelAlloc)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelAlloc
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.convolution


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf172.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op174: ExternKernelSchedulerNode(ExternKernelAlloc)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelAlloc
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.convolution


op175: ExternKernelSchedulerNode(ExternKernelAlloc)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelAlloc
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op175.node.kernel = extern_kernels.convolution


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 3048192}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 3048192}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg289_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg290_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg291_1', c1, {c0: 14112, c1: 216}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (3048192, 1)
op176.sizes = ([14112, 216], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op176_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg289_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg290_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg291_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, relu, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelAlloc)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelAlloc
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.node.kernel = extern_kernels.convolution


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg293_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf178.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.convolution


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 3048192}, None)]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 3048192}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg301_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg302_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg303_1', c1, {c0: 14112, c1: 216}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (3048192, 1)
op182.sizes = ([14112, 216], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op182_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg301_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg302_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg303_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf182', get_index_5, relu, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelAlloc)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelAlloc
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.node.kernel = extern_kernels.convolution


op184: ExternKernelSchedulerNode(ExternKernelAlloc)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelAlloc
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf184.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.convolution


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg310_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: ExternKernelSchedulerNode(ExternKernelAlloc)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelAlloc
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.node.kernel = extern_kernels.convolution


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 3048192}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 3048192}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg313_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg314_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg315_1', c1, {c0: 14112, c1: 216}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (3048192, 1)
op188.sizes = ([14112, 216], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op188_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, relu, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.convolution


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191_op192: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op191_op192.writes = 
    [   MemoryDep('buf191', c0, {c0: 3048192}, None),
        MemoryDep('buf192', c0, {c0: 3048192}, None)]
op191_op192.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 3048192}, None),
        MemoryDep('buf190', c0, {c0: 3048192}, None)]
op191_op192.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg307_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg308_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg309_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg318_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg319_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg320_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg321_1', c1, {c0: 14112, c1: 216}, None)]
op191_op192.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191_op192.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 3048192}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 3048192}, None),
        MemoryDep('buf190', c0, {c0: 3048192}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg307_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg308_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg309_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg318_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg319_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg320_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg321_1', c1, {c0: 14112, c1: 216}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (3048192, 1)
op191.sizes = ([14112, 216], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op191_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg306_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg307_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg308_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg309_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf190', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg318_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg319_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg320_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg321_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf191', get_index_10, add_4, None)
        return store
op191_op192.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 3048192}, None)]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 3048192}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (3048192, 1)
op192.sizes = ([3048192], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op192_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf192', get_index_1, relu, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg322_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 3048192}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 3048192}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg325_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg326_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg327_1', c1, {c0: 14112, c1: 216}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (3048192, 1)
op195.sizes = ([14112, 216], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op195_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg325_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg326_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg327_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, relu, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelAlloc)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='arg328_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelAlloc
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.convolution


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf197.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg334_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 3048192}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 3048192}, None)]
op201.met_dependencies = 
    [   MemoryDep('arg336_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg337_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg338_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg339_1', c1, {c0: 14112, c1: 216}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (3048192, 1)
op201.sizes = ([14112, 216], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op201_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg337_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg338_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg339_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, relu, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelAlloc)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg340_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelAlloc
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.node.kernel = extern_kernels.convolution


op203: ExternKernelSchedulerNode(ExternKernelAlloc)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelAlloc
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.convolution


op204_op205_op210: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op204_op205_op210.writes = 
    [   MemoryDep('buf204', 1792*c0 + c1, {c0: 8640, c1: 1764}, None),
        MemoryDep('buf205', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf210', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op204_op205_op210.unmet_dependencies = 
    [   MemoryDep('buf119', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf160', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf161', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf162', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf172', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf178', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf191', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf197', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf203', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op204_op205_op210.met_dependencies = 
    [   MemoryDep('arg282_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg283_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg284_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg285_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg294_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg295_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg296_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg297_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg330_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg331_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg332_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg333_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg342_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg343_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg344_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg345_1', I, {c0: 8, c1: 1080}, None)]
op204_op205_op210.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op204_op205_op210.snodes[0] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf119', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf160', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf161', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf162', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf172', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf178', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf191', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf197', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf203', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg282_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg283_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg284_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg285_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg294_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg295_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg296_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg297_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg330_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg331_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg332_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg333_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg342_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg343_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg344_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg345_1', I, {c0: 8, c1: 1080}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (15240960, 1)
op204.sizes = ([8, 1080, 1764], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = z1
    index1 = 381024*z0 + 216*z2 + I
    index2 = I
    index3 = 381024*z0 + 216*z2 + I
    index4 = I
    index5 = 381024*z0 + 216*z2 + I
    index6 = 381024*z0 + 216*z2 + I
    index7 = I
    index8 = 381024*z0 + 216*z2 + I
    index9 = I
    index10 = 1935360*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(216, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(216, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(432, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(432, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(648, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(648, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(864, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(864, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(1080, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf204', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf119', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg294_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg295_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg296_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg297_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf161', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg330_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg331_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg332_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg333_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf162', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf160', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op204_op205_op210.snodes[1] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [   MemoryDep('buf205', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (15240960, 1)
op205.sizes = ([8, 1080, 1764], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf205', get_index_1, relu, None)
        return store
op204_op205_op210.snodes[2] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [   MemoryDep('buf210', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op210.unmet_dependencies = [MemoryDep('buf204', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (15240960, 1)
op210.sizes = ([8, 1080, 1764], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf210', get_index_1, relu, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelAlloc)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelAlloc
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False)]
]
op206.node.kernel = extern_kernels.convolution


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 3048192}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 3048192}, None)]
op207.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg353_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg354_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg355_1', c1, {c0: 14112, c1: 216}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op207.group.device = cuda:0
op207.group.iteration = (3048192, 1)
op207.sizes = ([14112, 216], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op207_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf207', get_index_5, add_1, None)
        return store


op208_op209_op220_op226_op232: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op208_op209_op220_op226_op232.writes = 
    [   MemoryDep('buf208', c0, {c0: 3048192}, None),
        MemoryDep('buf209', c0, {c0: 3048192}, None),
        MemoryDep('buf220', c0, {c0: 3048192}, None),
        MemoryDep('buf226', c0, {c0: 3048192}, None),
        MemoryDep('buf232', c0, {c0: 3048192}, None)]
op208_op209_op220_op226_op232.unmet_dependencies = 
    [   MemoryDep('buf207', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0, {c0: 3048192}, None)]
op208_op209_op220_op226_op232.met_dependencies = []
op208_op209_op220_op226_op232.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf208.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf209.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op208_op209_op220_op226_op232.snodes[0] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 3048192}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf207', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0, {c0: 3048192}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf208.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (3048192, 1)
op208.sizes = ([8, 42, 42, 216], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf208', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf207', get_index)
        return load
op208_op209_op220_op226_op232.snodes[1] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 3048192}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf207', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf207', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf207', c0, {c0: 3048192}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf209.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (3048192, 1)
op209.sizes = ([8, 42, 42, 216], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf209', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf207', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf207', get_index)
        return load
op208_op209_op220_op226_op232.snodes[2] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 3048192}, None)]
op220.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 3048192}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (3048192, 1)
op220.sizes = ([3048192], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op220_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf220', get_index_1, relu, None)
        return store
op208_op209_op220_op226_op232.snodes[3] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 3048192}, None)]
op226.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 3048192}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (3048192, 1)
op226.sizes = ([3048192], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op226_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf226', get_index_1, relu, None)
        return store
op208_op209_op220_op226_op232.snodes[4] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 3048192}, None)]
op232.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 3048192}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (3048192, 1)
op232.sizes = ([3048192], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op232_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf232', get_index_1, relu, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg428_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212_op261_op292: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op212_op261_op292.writes = 
    [   MemoryDep('buf212', c0, {c0: 3048192}, None),
        MemoryDep('buf261', c0, {c0: 3048192}, None),
        MemoryDep('buf292', c0, {c0: 3048192}, None)]
op212_op261_op292.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 3048192}, None)]
op212_op261_op292.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg430_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg431_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg432_1', c1, {c0: 14112, c1: 216}, None)]
op212_op261_op292.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op212_op261_op292.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 3048192}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 3048192}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg430_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg431_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg432_1', c1, {c0: 14112, c1: 216}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (3048192, 1)
op212.sizes = ([14112, 216], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op212_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg430_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg431_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg432_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf212', get_index_5, add_1, None)
        return store
op212_op261_op292.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 3048192}, None)]
op261.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 3048192}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (3048192, 1)
op261.sizes = ([3048192], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op261_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf261', get_index_1, relu, None)
        return store
op212_op261_op292.snodes[2] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 3048192}, None)]
op292.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 3048192}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (3048192, 1)
op292.sizes = ([3048192], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op292_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf292', get_index_1, relu, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 3048192}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf212', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf212', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf212', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf212', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf212', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf212', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf212', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf212', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf212', c0, {c0: 3048192}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf213.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (3048192, 1)
op213.sizes = ([8, 42, 42, 216], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf213', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf212', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf212', get_index)
        return load


op215: ExternKernelSchedulerNode(ExternKernelAlloc)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg356_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelAlloc
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.convolution


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 3048192}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 3048192}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg358_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg359_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg360_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg361_1', c1, {c0: 14112, c1: 216}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (3048192, 1)
op217.sizes = ([14112, 216], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op217_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg358_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg359_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg360_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg361_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, relu, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelAlloc)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg362_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelAlloc
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.convolution


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf219.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op221: ExternKernelSchedulerNode(ExternKernelAlloc)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='arg368_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelAlloc
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.node.kernel = extern_kernels.convolution


op222: ExternKernelSchedulerNode(ExternKernelAlloc)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelAlloc
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.convolution


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 3048192}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 3048192}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg371_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg372_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg373_1', c1, {c0: 14112, c1: 216}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (3048192, 1)
op223.sizes = ([14112, 216], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op223_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg371_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg372_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg373_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, relu, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelAlloc)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg374_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelAlloc
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.convolution


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf225.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op227: ExternKernelSchedulerNode(ExternKernelAlloc)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg380_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelAlloc
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.node.kernel = extern_kernels.convolution


op228: ExternKernelSchedulerNode(ExternKernelAlloc)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelAlloc
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.convolution


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 3048192}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 3048192}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg383_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg384_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg385_1', c1, {c0: 14112, c1: 216}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (3048192, 1)
op229.sizes = ([14112, 216], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op229_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, relu, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg386_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: ExternKernelSchedulerNode(ExternKernelAlloc)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelAlloc
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf231.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.convolution


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg392_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: ExternKernelSchedulerNode(ExternKernelAlloc)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='arg393_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelAlloc
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf234.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False)]
]
op234.node.kernel = extern_kernels.convolution


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 3048192}, None)]
op235.unmet_dependencies = [MemoryDep('buf234', c0, {c0: 3048192}, None)]
op235.met_dependencies = 
    [   MemoryDep('arg394_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg395_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg396_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg397_1', c1, {c0: 14112, c1: 216}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (3048192, 1)
op235.sizes = ([14112, 216], [])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op235_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg394_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg395_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg396_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg397_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf235', get_index_5, relu, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelAlloc)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg398_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelAlloc
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.node.kernel = extern_kernels.convolution


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.convolution


op238_op239: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op238_op239.writes = 
    [   MemoryDep('buf238', c0, {c0: 3048192}, None),
        MemoryDep('buf239', c0, {c0: 3048192}, None)]
op238_op239.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 3048192}, None),
        MemoryDep('buf237', c0, {c0: 3048192}, None)]
op238_op239.met_dependencies = 
    [   MemoryDep('arg388_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg389_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg390_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg391_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg400_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg401_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg402_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg403_1', c1, {c0: 14112, c1: 216}, None)]
op238_op239.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238_op239.snodes[0] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 3048192}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 3048192}, None),
        MemoryDep('buf237', c0, {c0: 3048192}, None)]
op238.met_dependencies = 
    [   MemoryDep('arg388_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg389_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg390_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg391_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg400_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg401_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg402_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg403_1', c1, {c0: 14112, c1: 216}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (3048192, 1)
op238.sizes = ([14112, 216], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op238_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg389_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg390_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg391_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf237', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg400_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg401_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg402_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg403_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf238', get_index_10, add_4, None)
        return store
op238_op239.snodes[1] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 3048192}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 3048192}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (3048192, 1)
op239.sizes = ([3048192], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op239_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf239', get_index_1, relu, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg404_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: ExternKernelSchedulerNode(ExternKernelAlloc)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelAlloc
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.convolution


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 3048192}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 3048192}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg406_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg407_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg408_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg409_1', c1, {c0: 14112, c1: 216}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (3048192, 1)
op242.sizes = ([14112, 216], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op242_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg406_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg407_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg408_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg409_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, relu, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelAlloc)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg410_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelAlloc
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.convolution


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf244.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.convolution


op246: ExternKernelSchedulerNode(ExternKernelAlloc)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg416_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelAlloc
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.convolution


op247: ExternKernelSchedulerNode(ExternKernelAlloc)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg417_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelAlloc
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.convolution


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 3048192}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 3048192}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg418_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg419_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg420_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg421_1', c1, {c0: 14112, c1: 216}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (3048192, 1)
op248.sizes = ([14112, 216], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op248_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg418_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg419_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg420_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg421_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf248', get_index_5, relu, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelAlloc)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg422_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelAlloc
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.convolution


op250: ExternKernelSchedulerNode(ExternKernelAlloc)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg423_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelAlloc
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.convolution


op251_op252_op257: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op251_op252_op257.writes = 
    [   MemoryDep('buf251', 1792*c0 + c1, {c0: 8640, c1: 1764}, None),
        MemoryDep('buf252', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf257', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op251_op252_op257.unmet_dependencies = 
    [   MemoryDep('buf166', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf207', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf208', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf209', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf219', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf225', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf238', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf244', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf250', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op251_op252_op257.met_dependencies = 
    [   MemoryDep('arg364_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg365_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg366_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg367_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg376_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg377_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg378_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg379_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg412_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg413_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg414_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg415_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg424_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg425_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg426_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg427_1', I, {c0: 8, c1: 1080}, None)]
op251_op252_op257.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op251_op252_op257.snodes[0] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf166', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf207', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf208', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf209', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf219', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf225', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf238', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf244', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf250', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op251.met_dependencies = 
    [   MemoryDep('arg364_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg365_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg366_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg367_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg376_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg377_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg378_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg379_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg412_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg413_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg414_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg415_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg424_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg425_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg426_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg427_1', I, {c0: 8, c1: 1080}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (15240960, 1)
op251.sizes = ([8, 1080, 1764], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
class op251_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = z1
    index1 = 381024*z0 + 216*z2 + I
    index2 = I
    index3 = 381024*z0 + 216*z2 + I
    index4 = I
    index5 = 381024*z0 + 216*z2 + I
    index6 = 381024*z0 + 216*z2 + I
    index7 = I
    index8 = 381024*z0 + 216*z2 + I
    index9 = I
    index10 = 1935360*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(216, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(216, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(432, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(432, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(648, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(648, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(864, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(864, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(1080, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf251', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg364_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg365_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg366_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg367_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf166', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg376_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg377_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg378_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg379_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf208', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf238', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg413_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf209', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg424_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg425_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg426_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg427_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf207', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op251_op252_op257.snodes[1] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [   MemoryDep('buf252', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op252.unmet_dependencies = [MemoryDep('buf251', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (15240960, 1)
op252.sizes = ([8, 1080, 1764], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf252', get_index_1, relu, None)
        return store
op251_op252_op257.snodes[2] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [   MemoryDep('buf257', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op257.unmet_dependencies = [MemoryDep('buf251', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (15240960, 1)
op257.sizes = ([8, 1080, 1764], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, relu, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg433_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.node.kernel = extern_kernels.convolution


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 3048192}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 3048192}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg434_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg435_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg436_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg437_1', c1, {c0: 14112, c1: 216}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (3048192, 1)
op254.sizes = ([14112, 216], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op254_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg434_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg435_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg436_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg437_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf254', get_index_5, add_1, None)
        return store


op255_op256_op267_op273_op279: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op255_op256_op267_op273_op279.writes = 
    [   MemoryDep('buf255', c0, {c0: 3048192}, None),
        MemoryDep('buf256', c0, {c0: 3048192}, None),
        MemoryDep('buf267', c0, {c0: 3048192}, None),
        MemoryDep('buf273', c0, {c0: 3048192}, None),
        MemoryDep('buf279', c0, {c0: 3048192}, None)]
op255_op256_op267_op273_op279.unmet_dependencies = 
    [   MemoryDep('buf254', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0, {c0: 3048192}, None)]
op255_op256_op267_op273_op279.met_dependencies = []
op255_op256_op267_op273_op279.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf255.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf256.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op255_op256_op267_op273_op279.snodes[0] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 3048192}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf254', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0, {c0: 3048192}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf255.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (3048192, 1)
op255.sizes = ([8, 42, 42, 216], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf255', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf254', get_index)
        return load
op255_op256_op267_op273_op279.snodes[1] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 3048192}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf254', c0 + 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 + 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 216, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 8856, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9072, {c0: 3048192}, None),
        MemoryDep('buf254', c0 - 9288, {c0: 3048192}, None),
        MemoryDep('buf254', c0, {c0: 3048192}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf256.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (3048192, 1)
op256.sizes = ([8, 42, 42, 216], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 42, z2: 42, z3: 216}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9288
    index3 = z2
    index4 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 8856
    index7 = z1
    index8 = 381024*z0 + 9072*z1 + 216*z2 + z3 - 216
    index9 = 381024*z0 + 9072*z1 + 216*z2 + z3
    index10 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 216
    index11 = z1 + 1
    index12 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 8856
    index13 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9072
    index14 = 381024*z0 + 9072*z1 + 216*z2 + z3 + 9288
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf256', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf254', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf254', get_index)
        return load
op255_op256_op267_op273_op279.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 3048192}, None)]
op267.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 3048192}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (3048192, 1)
op267.sizes = ([3048192], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op267_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf267', get_index_1, relu, None)
        return store
op255_op256_op267_op273_op279.snodes[3] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 3048192}, None)]
op273.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 3048192}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (3048192, 1)
op273.sizes = ([3048192], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op273_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf273', get_index_1, relu, None)
        return store
op255_op256_op267_op273_op279.snodes[4] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 3048192}, None)]
op279.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 3048192}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (3048192, 1)
op279.sizes = ([3048192], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op279_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf279', get_index_1, relu, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelAlloc)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg510_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelAlloc
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False)]
]
op258.node.kernel = extern_kernels.convolution


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 6096384}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 6096384}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg511_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg512_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg513_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg514_1', c1, {c0: 14112, c1: 432}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (6096384, 1)
op259.sizes = ([14112, 432], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
class op259_loop_body:
    var_ranges = {z0: 14112, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg511_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg512_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg513_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg514_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf259', get_index_5, add_1, None)
        return store


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 1524096}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 18144, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 18576, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 19008, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 36288, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 36720, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 37152, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 432, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2 + 864, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf259', 36288*c0 + 864*c1 + c2, {c0: 168, c1: 21, c2: 432}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf260.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (1524096, 1)
op260.sizes = ([8, 21, 21, 432], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = 2*z1
    index1 = 2*z2
    index2 = 762048*z0 + 36288*z1 + 864*z2 + z3
    index3 = 2*z2 + 1
    index4 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 432
    index5 = 2*z2 + 2
    index6 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 864
    index7 = 2*z1 + 1
    index8 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18144
    index9 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18576
    index10 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 19008
    index11 = 2*z1 + 2
    index12 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36288
    index13 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36720
    index14 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 37152
    index15 = 190512*z0 + 9072*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, -inf)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_2, constant_2)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(lt_2, lt_3)
        masked_subblock2 = self.masked_subblock2(and__1, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_4, constant_4)
        get_index_5 = self.get_index('index5')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_5, constant_5)
        and__2 = ops.and_(lt_4, lt_5)
        masked_subblock3 = self.masked_subblock3(and__2, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_6 = self.get_index('index7')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_6, constant_6)
        get_index_7 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(lt_6, lt_7)
        masked_subblock4 = self.masked_subblock4(and__3, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_8 = self.get_index('index7')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_8, constant_8)
        get_index_9 = self.get_index('index3')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_9, constant_9)
        and__4 = ops.and_(lt_8, lt_9)
        masked_subblock5 = self.masked_subblock5(and__4, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_10 = self.get_index('index7')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_11, constant_11)
        and__5 = ops.and_(lt_10, lt_11)
        masked_subblock6 = self.masked_subblock6(and__5, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_12 = self.get_index('index11')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_12, constant_12)
        get_index_13 = self.get_index('index1')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_13, constant_13)
        and__6 = ops.and_(lt_12, lt_13)
        masked_subblock7 = self.masked_subblock7(and__6, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_14 = self.get_index('index11')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_14, constant_14)
        get_index_15 = self.get_index('index3')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_15, constant_15)
        and__7 = ops.and_(lt_14, lt_15)
        masked_subblock8 = self.masked_subblock8(and__7, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_16 = self.get_index('index11')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_16, constant_16)
        get_index_17 = self.get_index('index5')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_17, constant_17)
        and__8 = ops.and_(lt_16, lt_17)
        masked_subblock9 = self.masked_subblock9(and__8, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_18 = self.get_index('index15')
        store = ops.store('buf260', get_index_18, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf259', get_index)
        return load


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg438_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = extern_kernels.convolution


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.convolution


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 3048192}, None)]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 3048192}, None)]
op264.met_dependencies = 
    [   MemoryDep('arg440_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg441_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg442_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg443_1', c1, {c0: 14112, c1: 216}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (3048192, 1)
op264.sizes = ([14112, 216], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg441_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op264_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg441_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg442_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg443_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf264', get_index_5, relu, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg444_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.node.kernel = extern_kernels.convolution


op266: ExternKernelSchedulerNode(ExternKernelAlloc)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelAlloc
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf266.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = extern_kernels.convolution


op268: ExternKernelSchedulerNode(ExternKernelAlloc)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg450_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelAlloc
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.convolution


op269: ExternKernelSchedulerNode(ExternKernelAlloc)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelAlloc
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.convolution


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 3048192}, None)]
op270.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 3048192}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg453_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg454_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg455_1', c1, {c0: 14112, c1: 216}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (3048192, 1)
op270.sizes = ([14112, 216], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op270_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, relu, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg456_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg457_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf272.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op274: ExternKernelSchedulerNode(ExternKernelAlloc)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg462_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelAlloc
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.node.kernel = extern_kernels.convolution


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg463_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.convolution


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 3048192}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 3048192}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg464_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg465_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg466_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg467_1', c1, {c0: 14112, c1: 216}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (3048192, 1)
op276.sizes = ([14112, 216], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op276_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg464_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg465_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg466_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg467_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, relu, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelAlloc)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg468_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelAlloc
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.convolution


op278: ExternKernelSchedulerNode(ExternKernelAlloc)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg469_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelAlloc
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf278.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.convolution


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg474_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.convolution


op281: ExternKernelSchedulerNode(ExternKernelAlloc)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelAlloc
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.convolution


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 3048192}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 3048192}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg476_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg477_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg478_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg479_1', c1, {c0: 14112, c1: 216}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (3048192, 1)
op282.sizes = ([14112, 216], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op282_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg477_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg478_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg479_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf282', get_index_5, relu, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg480_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: ExternKernelSchedulerNode(ExternKernelAlloc)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op284.outputs = [
    buf284: ExternKernelAlloc
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.convolution


op285_op286: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op285_op286.writes = 
    [   MemoryDep('buf285', c0, {c0: 3048192}, None),
        MemoryDep('buf286', c0, {c0: 3048192}, None)]
op285_op286.unmet_dependencies = 
    [   MemoryDep('buf278', c0, {c0: 3048192}, None),
        MemoryDep('buf284', c0, {c0: 3048192}, None)]
op285_op286.met_dependencies = 
    [   MemoryDep('arg470_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg471_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg472_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg473_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg482_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg483_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg484_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg485_1', c1, {c0: 14112, c1: 216}, None)]
op285_op286.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285_op286.snodes[0] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 3048192}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf278', c0, {c0: 3048192}, None),
        MemoryDep('buf284', c0, {c0: 3048192}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg470_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg471_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg472_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg473_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg482_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg483_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg484_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg485_1', c1, {c0: 14112, c1: 216}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (3048192, 1)
op285.sizes = ([14112, 216], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op285_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg470_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg471_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg472_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg473_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf284', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg482_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg483_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg484_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg485_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf285', get_index_10, add_4, None)
        return store
op285_op286.snodes[1] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 3048192}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 3048192}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (3048192, 1)
op286.sizes = ([3048192], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op286_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, relu, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelAlloc)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg486_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelAlloc
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.node.kernel = extern_kernels.convolution


op288: ExternKernelSchedulerNode(ExternKernelAlloc)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg487_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelAlloc
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.convolution


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 3048192}, None)]
op289.unmet_dependencies = [MemoryDep('buf288', c0, {c0: 3048192}, None)]
op289.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg489_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg490_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg491_1', c1, {c0: 14112, c1: 216}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (3048192, 1)
op289.sizes = ([14112, 216], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op289_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg489_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg490_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg491_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf289', get_index_5, relu, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelAlloc)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='arg492_1', mode=None)]
op290.outputs = [
    buf290: ExternKernelAlloc
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.node.kernel = extern_kernels.convolution


op291: ExternKernelSchedulerNode(ExternKernelAlloc)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg493_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelAlloc
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf291.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op291.node.kernel = extern_kernels.convolution


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg498_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.node.kernel = extern_kernels.convolution


op294: ExternKernelSchedulerNode(ExternKernelAlloc)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg499_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelAlloc
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.convolution


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 3048192}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 3048192}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg500_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg501_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg502_1', c1, {c0: 14112, c1: 216}, None),
        MemoryDep('arg503_1', c1, {c0: 14112, c1: 216}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (3048192, 1)
op295.sizes = ([14112, 216], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
class op295_loop_body:
    var_ranges = {z0: 14112, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg500_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg501_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg502_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg503_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, relu, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelAlloc)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg504_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelAlloc
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.node.kernel = extern_kernels.convolution


op297: ExternKernelSchedulerNode(ExternKernelAlloc)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg505_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelAlloc
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = extern_kernels.convolution


op298_op299: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op298_op299.writes = 
    [   MemoryDep('buf298', 1792*c0 + c1, {c0: 8640, c1: 1764}, None),
        MemoryDep('buf299', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op298_op299.unmet_dependencies = 
    [   MemoryDep('buf213', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf254', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf255', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf256', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf266', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf272', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf285', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf291', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf297', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op298_op299.met_dependencies = 
    [   MemoryDep('arg446_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg447_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg448_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg449_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg458_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg459_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg460_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg461_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg494_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg495_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg496_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg497_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg506_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg507_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg508_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg509_1', I, {c0: 8, c1: 1080}, None)]
op298_op299.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op298_op299.snodes[0] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf213', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf254', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf255', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf256', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf266', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf272', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf285', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf291', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None),
        MemoryDep('buf297', 381024*c0 + 216*c2 + I, {c0: 8, c1: 1080, c2: 1764}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg446_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg447_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg448_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg449_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg458_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg459_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg460_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg461_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg494_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg495_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg496_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg497_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg506_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg507_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg508_1', I, {c0: 8, c1: 1080}, None),
        MemoryDep('arg509_1', I, {c0: 8, c1: 1080}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (15240960, 1)
op298.sizes = ([8, 1080, 1764], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg461_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 42, 42], stride=[381024, 1, 9072, 216])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = z1
    index1 = 381024*z0 + 216*z2 + I
    index2 = I
    index3 = 381024*z0 + 216*z2 + I
    index4 = I
    index5 = 381024*z0 + 216*z2 + I
    index6 = 381024*z0 + 216*z2 + I
    index7 = I
    index8 = 381024*z0 + 216*z2 + I
    index9 = I
    index10 = 1935360*z0 + 1792*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(216, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(216, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(432, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(432, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(648, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(648, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(864, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(864, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(1080, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf298', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg446_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg447_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg448_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg449_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf213', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg458_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg459_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg460_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg461_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf255', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf285', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg494_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg495_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg496_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg497_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf256', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg506_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg507_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg508_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg509_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf254', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op298_op299.snodes[1] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [   MemoryDep('buf299', 1905120*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 1764}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', 1792*c0 + c1, {c0: 8640, c1: 1764}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (15240960, 1)
op299.sizes = ([8, 1080, 1764], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1905120, 1, 45360, 1080])
class op299_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 1764}
    index0 = 1935360*z0 + 1792*z1 + z2
    index1 = 1905120*z0 + z1 + 1080*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf299', get_index_1, relu, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelAlloc)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg515_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelAlloc
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf300.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=True, is_weak=False)]
]
op300.node.kernel = extern_kernels.convolution


op301_op347: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op301_op347.writes = 
    [   MemoryDep('buf301', c0, {c0: 6096384}, None),
        MemoryDep('buf347', c0, {c0: 6096384}, None)]
op301_op347.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 6096384}, None)]
op301_op347.met_dependencies = 
    [   MemoryDep('arg516_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg517_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg518_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg519_1', c1, {c0: 14112, c1: 432}, None)]
op301_op347.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
    ]
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op301_op347.snodes[0] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 6096384}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 6096384}, None)]
op301.met_dependencies = 
    [   MemoryDep('arg516_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg517_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg518_1', c1, {c0: 14112, c1: 432}, None),
        MemoryDep('arg519_1', c1, {c0: 14112, c1: 432}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
    ]
]
op301.group.device = cuda:0
op301.group.iteration = (6096384, 1)
op301.sizes = ([14112, 432], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
class op301_loop_body:
    var_ranges = {z0: 14112, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg516_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg517_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg518_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg519_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf301', get_index_5, add_1, None)
        return store
op301_op347.snodes[1] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 6096384}, None)]
op347.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 6096384}, None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (6096384, 1)
op347.sizes = ([6096384], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
class op347_loop_body:
    var_ranges = {z0: 6096384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf347', get_index_1, relu, None)
        return store


op302_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op302_op303.writes = 
    [   MemoryDep('buf302', c0, {c0: 1524096}, None),
        MemoryDep('buf303', c0, {c0: 1524096}, None)]
op302_op303.unmet_dependencies = 
    [   MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18144, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18576, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 19008, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36288, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36720, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 37152, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 432, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 864, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2, {c0: 168, c1: 21, c2: 432}, None)]
op302_op303.met_dependencies = []
op302_op303.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf302.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf303.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op302_op303.snodes[0] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1524096}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18144, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18576, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 19008, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36288, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36720, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 37152, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 432, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 864, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2, {c0: 168, c1: 21, c2: 432}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf302.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1524096, 1)
op302.sizes = ([8, 21, 21, 432], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = 2*z1
    index1 = 2*z2
    index2 = 762048*z0 + 36288*z1 + 864*z2 + z3
    index3 = 2*z2 + 1
    index4 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 432
    index5 = 2*z2 + 2
    index6 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 864
    index7 = 2*z1 + 1
    index8 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18144
    index9 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18576
    index10 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 19008
    index11 = 2*z1 + 2
    index12 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36288
    index13 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36720
    index14 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 37152
    index15 = 190512*z0 + 9072*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, -inf)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_2, constant_2)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(lt_2, lt_3)
        masked_subblock2 = self.masked_subblock2(and__1, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_4, constant_4)
        get_index_5 = self.get_index('index5')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_5, constant_5)
        and__2 = ops.and_(lt_4, lt_5)
        masked_subblock3 = self.masked_subblock3(and__2, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_6 = self.get_index('index7')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_6, constant_6)
        get_index_7 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(lt_6, lt_7)
        masked_subblock4 = self.masked_subblock4(and__3, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_8 = self.get_index('index7')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_8, constant_8)
        get_index_9 = self.get_index('index3')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_9, constant_9)
        and__4 = ops.and_(lt_8, lt_9)
        masked_subblock5 = self.masked_subblock5(and__4, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_10 = self.get_index('index7')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_11, constant_11)
        and__5 = ops.and_(lt_10, lt_11)
        masked_subblock6 = self.masked_subblock6(and__5, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_12 = self.get_index('index11')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_12, constant_12)
        get_index_13 = self.get_index('index1')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_13, constant_13)
        and__6 = ops.and_(lt_12, lt_13)
        masked_subblock7 = self.masked_subblock7(and__6, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_14 = self.get_index('index11')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_14, constant_14)
        get_index_15 = self.get_index('index3')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_15, constant_15)
        and__7 = ops.and_(lt_14, lt_15)
        masked_subblock8 = self.masked_subblock8(and__7, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_16 = self.get_index('index11')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_16, constant_16)
        get_index_17 = self.get_index('index5')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_17, constant_17)
        and__8 = ops.and_(lt_16, lt_17)
        masked_subblock9 = self.masked_subblock9(and__8, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_18 = self.get_index('index15')
        store = ops.store('buf302', get_index_18, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf301', get_index)
        return load
op302_op303.snodes[1] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 1524096}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18144, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 18576, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 19008, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36288, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 36720, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 37152, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 432, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2 + 864, {c0: 168, c1: 21, c2: 432}, None),
        MemoryDep('buf301', 36288*c0 + 864*c1 + c2, {c0: 168, c1: 21, c2: 432}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf303.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (1524096, 1)
op303.sizes = ([8, 21, 21, 432], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op303_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = 2*z1
    index1 = 2*z2
    index2 = 762048*z0 + 36288*z1 + 864*z2 + z3
    index3 = 2*z2 + 1
    index4 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 432
    index5 = 2*z2 + 2
    index6 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 864
    index7 = 2*z1 + 1
    index8 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18144
    index9 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 18576
    index10 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 19008
    index11 = 2*z1 + 2
    index12 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36288
    index13 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 36720
    index14 = 762048*z0 + 36288*z1 + 864*z2 + z3 + 37152
    index15 = 190512*z0 + 9072*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, -inf)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(42, torch.int64)
        lt_2 = ops.lt(index_expr_2, constant_2)
        get_index_3 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_3 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(lt_2, lt_3)
        masked_subblock2 = self.masked_subblock2(and__1, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(42, torch.int64)
        lt_4 = ops.lt(index_expr_4, constant_4)
        get_index_5 = self.get_index('index5')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(42, torch.int64)
        lt_5 = ops.lt(index_expr_5, constant_5)
        and__2 = ops.and_(lt_4, lt_5)
        masked_subblock3 = self.masked_subblock3(and__2, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_6 = self.get_index('index7')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(42, torch.int64)
        lt_6 = ops.lt(index_expr_6, constant_6)
        get_index_7 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(42, torch.int64)
        lt_7 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(lt_6, lt_7)
        masked_subblock4 = self.masked_subblock4(and__3, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_8 = self.get_index('index7')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(42, torch.int64)
        lt_8 = ops.lt(index_expr_8, constant_8)
        get_index_9 = self.get_index('index3')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(42, torch.int64)
        lt_9 = ops.lt(index_expr_9, constant_9)
        and__4 = ops.and_(lt_8, lt_9)
        masked_subblock5 = self.masked_subblock5(and__4, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_10 = self.get_index('index7')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(42, torch.int64)
        lt_10 = ops.lt(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(42, torch.int64)
        lt_11 = ops.lt(index_expr_11, constant_11)
        and__5 = ops.and_(lt_10, lt_11)
        masked_subblock6 = self.masked_subblock6(and__5, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_12 = self.get_index('index11')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(42, torch.int64)
        lt_12 = ops.lt(index_expr_12, constant_12)
        get_index_13 = self.get_index('index1')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(42, torch.int64)
        lt_13 = ops.lt(index_expr_13, constant_13)
        and__6 = ops.and_(lt_12, lt_13)
        masked_subblock7 = self.masked_subblock7(and__6, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_14 = self.get_index('index11')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(42, torch.int64)
        lt_14 = ops.lt(index_expr_14, constant_14)
        get_index_15 = self.get_index('index3')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(42, torch.int64)
        lt_15 = ops.lt(index_expr_15, constant_15)
        and__7 = ops.and_(lt_14, lt_15)
        masked_subblock8 = self.masked_subblock8(and__7, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_16 = self.get_index('index11')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(42, torch.int64)
        lt_16 = ops.lt(index_expr_16, constant_16)
        get_index_17 = self.get_index('index5')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(42, torch.int64)
        lt_17 = ops.lt(index_expr_17, constant_17)
        and__8 = ops.and_(lt_16, lt_17)
        masked_subblock9 = self.masked_subblock9(and__8, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_18 = self.get_index('index15')
        store = ops.store('buf303', get_index_18, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf301', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf301', get_index)
        return load


op304: SchedulerNode(ComputedBuffer)
op304.writes = [   MemoryDep('buf304', 476280*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 441}, None)]
op304.unmet_dependencies = [MemoryDep('buf298', 1792*c0 + 84*c1 + 2*c2, {c0: 8640, c1: 21, c2: 21}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 21, 21], stride=[476280, 1, 22680, 1080])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (3810240, 1)
op304.sizes = ([8, 1080, 21, 21], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 21, 21], stride=[476280, 1, 22680, 1080])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 21, z3: 21}
    index0 = 1935360*z0 + 1792*z1 + 84*z2 + 2*z3
    index1 = 476280*z0 + z1 + 22680*z2 + 1080*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        relu = ops.relu(load)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(relu, constant)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf304', get_index_1, mul, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelAlloc)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg597_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelAlloc
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 21, 21], stride=[95256, 1, 4536, 216])
    buf305.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.convolution


op306: SchedulerNode(ComputedBuffer)
op306.writes = [   MemoryDep('buf306', 476280*c0 + c1 + 1080*c2, {c0: 8, c1: 1080, c2: 441}, None)]
op306.unmet_dependencies = [   MemoryDep('buf298', 1792*c0 + 84*c1 + 2*c2 + 43, {c0: 8640, c1: 21, c2: 21}, None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 21, 21], stride=[476280, 1, 22680, 1080])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (3810240, 1)
op306.sizes = ([8, 1080, 21, 21], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 42, 42], stride=[1935360, 1792, 42, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 1080, 21, 21], stride=[476280, 1, 22680, 1080])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 1080, z2: 21, z3: 21}
    index0 = 2*z2 + 1
    index1 = 2*z3 + 1
    index2 = 1935360*z0 + 1792*z1 + 84*z2 + 2*z3 + 43
    index3 = 476280*z0 + z1 + 22680*z2 + 1080*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        constant_4 = ops.constant(1.0, torch.float32)
        mul = ops.mul(masked_subblock1, constant_4)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf306', get_index_4, mul, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf298', get_index)
        relu = ops.relu(load)
        return relu


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg598_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 21, 21], stride=[95256, 1, 4536, 216])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.node.kernel = extern_kernels.convolution


op308_op360_op391: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op308_op360_op391.writes = 
    [   MemoryDep('buf308', 190528*c0 + c1, {c0: 8, c1: 190512}, None),
        MemoryDep('buf360', 190512*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 441}, None),
        MemoryDep('buf391', 190512*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 441}, None)]
op308_op360_op391.unmet_dependencies = 
    [   MemoryDep('buf305', 95256*c0 + 216*c2 + I, {c0: 8, c1: 432, c2: 441}, None),
        MemoryDep('buf307', 95256*c0 + 216*c2 + I, {c0: 8, c1: 432, c2: 441}, None)]
op308_op360_op391.met_dependencies = 
    [   MemoryDep('arg599_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg600_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg601_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg602_1', c1, {c0: 8, c1: 432}, None)]
op308_op360_op391.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op308_op360_op391.snodes[0] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', 190528*c0 + c1, {c0: 8, c1: 190512}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf305', 95256*c0 + 216*c2 + I, {c0: 8, c1: 432, c2: 441}, None),
        MemoryDep('buf307', 95256*c0 + 216*c2 + I, {c0: 8, c1: 432, c2: 441}, None)]
op308.met_dependencies = 
    [   MemoryDep('arg599_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg600_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg601_1', c1, {c0: 8, c1: 432}, None),
        MemoryDep('arg602_1', c1, {c0: 8, c1: 432}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (1524096, 1)
op308.sizes = ([8, 432, 441], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 21, 21], stride=[95256, 1, 4536, 216])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 21, 21], stride=[95256, 1, 4536, 216])
arg599_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg601_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 432, z2: 441}
    index0 = z1
    index1 = 95256*z0 + 216*z2 + I
    index2 = 95256*z0 + 216*z2 + I
    index3 = 190528*z0 + 441*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(216, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(216, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(432, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg599_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg600_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg601_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg602_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf308', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf305', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf307', get_index)
        return load
op308_op360_op391.snodes[1] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', 190512*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 441}, None)]
op360.unmet_dependencies = [MemoryDep('buf308', 190528*c0 + c1, {c0: 8, c1: 190512}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (1524096, 1)
op360.sizes = ([8, 432, 441], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op360_loop_body:
    var_ranges = {z0: 8, z1: 432, z2: 441}
    index0 = 190528*z0 + 441*z1 + z2
    index1 = 190512*z0 + z1 + 432*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf360', get_index_1, relu, None)
        return store
op308_op360_op391.snodes[2] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', 190512*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 441}, None)]
op391.unmet_dependencies = [MemoryDep('buf308', 190528*c0 + c1, {c0: 8, c1: 190512}, None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (1524096, 1)
op391.sizes = ([8, 432, 441], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op391_loop_body:
    var_ranges = {z0: 8, z1: 432, z2: 441}
    index0 = 190528*z0 + 441*z1 + z2
    index1 = 190512*z0 + z1 + 432*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf391', get_index_1, relu, None)
        return store


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', 190528*c0 + c1, {c0: 8, c1: 190512}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf308', 190528*c0 + c1 + 1, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 + 20, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 + 21, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 + 22, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 - 1, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 - 20, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 - 21, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1 - 22, {c0: 8, c1: 190512}, None),
        MemoryDep('buf308', 190528*c0 + c1, {c0: 8, c1: 190512}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (1524096, 1)
op309.sizes = ([8, 432, 21, 21], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
class op309_loop_body:
    var_ranges = {z0: 8, z1: 432, z2: 21, z3: 21}
    index0 = z2 - 1
    index1 = z3 - 1
    index2 = 190528*z0 + 441*z1 + 21*z2 + z3 - 22
    index3 = z3
    index4 = 190528*z0 + 441*z1 + 21*z2 + z3 - 21
    index5 = z3 + 1
    index6 = 190528*z0 + 441*z1 + 21*z2 + z3 - 20
    index7 = z2
    index8 = 190528*z0 + 441*z1 + 21*z2 + z3 - 1
    index9 = 190528*z0 + 441*z1 + 21*z2 + z3
    index10 = 190528*z0 + 441*z1 + 21*z2 + z3 + 1
    index11 = z2 + 1
    index12 = 190528*z0 + 441*z1 + 21*z2 + z3 + 20
    index13 = 190528*z0 + 441*z1 + 21*z2 + z3 + 21
    index14 = 190528*z0 + 441*z1 + 21*z2 + z3 + 22
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf309', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf308', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf308', get_index)
        return load


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 6998400}, None)]
op310.unmet_dependencies = [   MemoryDep('buf259', 762048*c0 + 18144*c1 + c2 - 18576, {c0: 8, c1: 45, c2: 19440}, None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 45, 45], stride=[874800, 1, 19440, 432])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (6998400, 1)
op310.sizes = ([8, 45, 45, 432], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 45, 45], stride=[874800, 1, 19440, 432])
class op310_loop_body:
    var_ranges = {z0: 8, z1: 45, z2: 45, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 762048*z0 + 18144*z1 + 432*z2 + z3 - 18576
    index3 = 874800*z0 + 19440*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf310', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf259', get_index)
        relu = ops.relu(load)
        return relu


op311: ExternKernelSchedulerNode(ExternKernelAlloc)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg520_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelAlloc
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.node.kernel = extern_kernels.convolution


op312: ExternKernelSchedulerNode(ExternKernelAlloc)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf311', mode=None)]
op312.met_dependencies = [StarDep(name='arg521_1', mode=None)]
op312.outputs = [
    buf312: ExternKernelAlloc
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op312.node.kernel = extern_kernels.convolution


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1524096}, None)]
op313.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 1524096}, None)]
op313.met_dependencies = 
    [   MemoryDep('arg522_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg523_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg524_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg525_1', c1, {c0: 3528, c1: 432}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (1524096, 1)
op313.sizes = ([3528, 432], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg524_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op313_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg522_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg523_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg524_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg525_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, relu, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelAlloc)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg526_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelAlloc
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.convolution


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg527_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf315.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.convolution


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 7634304}, None)]
op316.unmet_dependencies = [   MemoryDep('buf301', 762048*c0 + 18144*c1 + c2 - 37152, {c0: 8, c1: 47, c2: 20304}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 47, 47], stride=[954288, 1, 20304, 432])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (7634304, 1)
op316.sizes = ([8, 47, 47, 432], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 47, 47], stride=[954288, 1, 20304, 432])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 47, z2: 47, z3: 432}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 762048*z0 + 18144*z1 + 432*z2 + z3 - 37152
    index3 = 954288*z0 + 20304*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf316', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf301', get_index)
        relu = ops.relu(load)
        return relu


op317: ExternKernelSchedulerNode(ExternKernelAlloc)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg532_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelAlloc
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.convolution


op318: ExternKernelSchedulerNode(ExternKernelAlloc)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg533_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelAlloc
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf318.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op318.node.kernel = extern_kernels.convolution


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1524096}, None)]
op319.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 1524096}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg534_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg535_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg536_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg537_1', c1, {c0: 3528, c1: 432}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (1524096, 1)
op319.sizes = ([3528, 432], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg534_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg535_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op319_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg534_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg535_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg536_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg537_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf319', get_index_5, relu, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelAlloc)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf319', mode=None)]
op320.met_dependencies = [StarDep(name='arg538_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelAlloc
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.node.kernel = extern_kernels.convolution


op321: ExternKernelSchedulerNode(ExternKernelAlloc)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = [StarDep(name='arg539_1', mode=None)]
op321.outputs = [
    buf321: ExternKernelAlloc
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf321.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op321.node.kernel = extern_kernels.convolution


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 6998400}, None)]
op322.unmet_dependencies = [   MemoryDep('buf301', 762048*c0 + 18144*c1 + c2 - 18576, {c0: 8, c1: 45, c2: 19440}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 45, 45], stride=[874800, 1, 19440, 432])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (6998400, 1)
op322.sizes = ([8, 45, 45, 432], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 45, 45], stride=[874800, 1, 19440, 432])
class op322_loop_body:
    var_ranges = {z0: 8, z1: 45, z2: 45, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 762048*z0 + 18144*z1 + 432*z2 + z3 - 18576
    index3 = 874800*z0 + 19440*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf322', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf301', get_index)
        relu = ops.relu(load)
        return relu


op323: ExternKernelSchedulerNode(ExternKernelAlloc)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='arg544_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelAlloc
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = extern_kernels.convolution


op324: ExternKernelSchedulerNode(ExternKernelAlloc)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg545_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelAlloc
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.node.kernel = extern_kernels.convolution


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 1524096}, None)]
op325.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 1524096}, None)]
op325.met_dependencies = 
    [   MemoryDep('arg546_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg547_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg548_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg549_1', c1, {c0: 3528, c1: 432}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (1524096, 1)
op325.sizes = ([3528, 432], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg547_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg549_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op325_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg546_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg547_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg548_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg549_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf325', get_index_5, relu, None)
        return store


op326: ExternKernelSchedulerNode(ExternKernelAlloc)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = [StarDep(name='arg550_1', mode=None)]
op326.outputs = [
    buf326: ExternKernelAlloc
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = extern_kernels.convolution


op327: ExternKernelSchedulerNode(ExternKernelAlloc)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = [StarDep(name='arg551_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelAlloc
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf327.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op327.node.kernel = extern_kernels.convolution


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 6390144}, None)]
op328.unmet_dependencies = [   MemoryDep('buf301', 762048*c0 + 18144*c1 + c2, {c0: 8, c1: 43, c2: 18576}, None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 43, 43], stride=[798768, 1, 18576, 432])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (6390144, 1)
op328.sizes = ([8, 43, 43, 432], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 43, 43], stride=[798768, 1, 18576, 432])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 43, z2: 43, z3: 432}
    index0 = z1
    index1 = z2
    index2 = 762048*z0 + 18144*z1 + 432*z2 + z3
    index3 = 798768*z0 + 18576*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf328', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf301', get_index)
        relu = ops.relu(load)
        return relu


op329: ExternKernelSchedulerNode(ExternKernelAlloc)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg556_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelAlloc
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = extern_kernels.convolution


op330: ExternKernelSchedulerNode(ExternKernelAlloc)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg557_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelAlloc
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.convolution


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 1524096}, None)]
op331.unmet_dependencies = [MemoryDep('buf330', c0, {c0: 1524096}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg558_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg559_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg560_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg561_1', c1, {c0: 3528, c1: 432}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (1524096, 1)
op331.sizes = ([3528, 432], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg558_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg560_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op331_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg558_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg559_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg560_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg561_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf331', get_index_5, relu, None)
        return store


op332: ExternKernelSchedulerNode(ExternKernelAlloc)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg562_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelAlloc
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.node.kernel = extern_kernels.convolution


op333: ExternKernelSchedulerNode(ExternKernelAlloc)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg563_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelAlloc
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.node.kernel = extern_kernels.convolution


op334_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op334_op335.writes = 
    [   MemoryDep('buf334', c0, {c0: 1524096}, None),
        MemoryDep('buf335', c0, {c0: 1524096}, None)]
op334_op335.unmet_dependencies = 
    [   MemoryDep('buf327', c0, {c0: 1524096}, None),
        MemoryDep('buf333', c0, {c0: 1524096}, None)]
op334_op335.met_dependencies = 
    [   MemoryDep('arg552_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg553_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg554_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg555_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg564_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg565_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg566_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg567_1', c1, {c0: 3528, c1: 432}, None)]
op334_op335.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
    ]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op334_op335.snodes[0] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 1524096}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf327', c0, {c0: 1524096}, None),
        MemoryDep('buf333', c0, {c0: 1524096}, None)]
op334.met_dependencies = 
    [   MemoryDep('arg552_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg553_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg554_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg555_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg564_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg565_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg566_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg567_1', c1, {c0: 3528, c1: 432}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (1524096, 1)
op334.sizes = ([3528, 432], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg553_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg564_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg565_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg567_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op334_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg552_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg553_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg554_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg555_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf333', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg564_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg565_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg566_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg567_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf334', get_index_10, add_4, None)
        return store
op334_op335.snodes[1] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 1524096}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 1524096}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (1524096, 1)
op335.sizes = ([1524096], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op335_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf335', get_index_1, relu, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg568_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: ExternKernelSchedulerNode(ExternKernelAlloc)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='arg569_1', mode=None)]
op337.outputs = [
    buf337: ExternKernelAlloc
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False)]
]
op337.node.kernel = extern_kernels.convolution


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1524096}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 1524096}, None)]
op338.met_dependencies = 
    [   MemoryDep('arg570_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg571_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg572_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg573_1', c1, {c0: 3528, c1: 432}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1524096, 1)
op338.sizes = ([3528, 432], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg570_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg571_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg572_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op338_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg570_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg571_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg572_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg573_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf338', get_index_5, relu, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelAlloc)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf338', mode=None)]
op339.met_dependencies = [StarDep(name='arg574_1', mode=None)]
op339.outputs = [
    buf339: ExternKernelAlloc
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.node.kernel = extern_kernels.convolution


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg575_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf340.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op340.node.kernel = extern_kernels.convolution


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 6390144}, None)]
op341.unmet_dependencies = [   MemoryDep('buf259', 762048*c0 + 18144*c1 + c2, {c0: 8, c1: 43, c2: 18576}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 43, 43], stride=[798768, 1, 18576, 432])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (6390144, 1)
op341.sizes = ([8, 43, 43, 432], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 42, 42], stride=[762048, 1, 18144, 432])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 43, 43], stride=[798768, 1, 18576, 432])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 43, z2: 43, z3: 432}
    index0 = z1
    index1 = z2
    index2 = 762048*z0 + 18144*z1 + 432*z2 + z3
    index3 = 798768*z0 + 18576*z1 + 432*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(42, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(42, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf341', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf259', get_index)
        relu = ops.relu(load)
        return relu


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg580_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.node.kernel = extern_kernels.convolution


op343: ExternKernelSchedulerNode(ExternKernelAlloc)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf342', mode=None)]
op343.met_dependencies = [StarDep(name='arg581_1', mode=None)]
op343.outputs = [
    buf343: ExternKernelAlloc
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False)]
]
op343.node.kernel = extern_kernels.convolution


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1524096}, None)]
op344.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 1524096}, None)]
op344.met_dependencies = 
    [   MemoryDep('arg582_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg583_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg584_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg585_1', c1, {c0: 3528, c1: 432}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (1524096, 1)
op344.sizes = ([3528, 432], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg583_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg585_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op344_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg582_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg583_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg584_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg585_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf344', get_index_5, relu, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelAlloc)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg586_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelAlloc
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.node.kernel = extern_kernels.convolution


op346: ExternKernelSchedulerNode(ExternKernelAlloc)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg587_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelAlloc
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf346.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op346.node.kernel = extern_kernels.convolution


op348: ExternKernelSchedulerNode(ExternKernelAlloc)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg592_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelAlloc
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.node.kernel = extern_kernels.convolution


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 1524096}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 1524096}, None),
        MemoryDep('buf348', c0, {c0: 1524096}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg588_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg589_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg590_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg591_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg593_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg594_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg595_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg596_1', c1, {c0: 3528, c1: 432}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (1524096, 1)
op349.sizes = ([3528, 432], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg588_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg589_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg590_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg593_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg594_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg596_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op349_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg588_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg589_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg590_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg591_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf348', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg593_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg594_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg595_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg596_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf349', get_index_10, add_4, None)
        return store


op350_op351_op356: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op350_op351_op356.writes = 
    [   MemoryDep('buf350', 952576*c0 + c1, {c0: 8, c1: 952560}, None),
        MemoryDep('buf351', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf356', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op350_op351_op356.unmet_dependencies = 
    [   MemoryDep('buf260', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf302', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf303', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf315', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf321', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf334', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf340', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf349', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op350_op351_op356.met_dependencies = 
    [   MemoryDep('arg528_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg529_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg530_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg531_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg540_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg541_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg542_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg543_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg576_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg577_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg578_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg579_1', I, {c0: 8, c1: 2160}, None)]
op350_op351_op356.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op350_op351_op356.snodes[0] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf260', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf302', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf303', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf315', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf321', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf334', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf340', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf349', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op350.met_dependencies = 
    [   MemoryDep('arg528_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg529_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg530_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg531_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg540_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg541_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg542_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg543_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg576_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg577_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg578_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg579_1', I, {c0: 8, c1: 2160}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (7620480, 1)
op350.sizes = ([8, 2160, 441], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg529_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg540_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg542_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg576_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg578_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = z1
    index1 = 190512*z0 + 432*z2 + I
    index2 = I
    index3 = 190512*z0 + 432*z2 + I
    index4 = I
    index5 = 190512*z0 + 432*z2 + I
    index6 = 190512*z0 + 432*z2 + I
    index7 = I
    index8 = 190512*z0 + 432*z2 + I
    index9 = 952576*z0 + 441*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(432, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(432, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(864, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(864, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1296, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1296, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1728, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(1728, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(2160, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index9')
        store = ops.store('buf350', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg528_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg529_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg530_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg531_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf260', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg540_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg541_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg542_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg543_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf302', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf334', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg576_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg577_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg578_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg579_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf303', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf349', get_index)
        return load
op350_op351_op356.snodes[1] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [   MemoryDep('buf351', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op351.unmet_dependencies = [MemoryDep('buf350', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (7620480, 1)
op351.sizes = ([8, 2160, 441], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf351', get_index_1, relu, None)
        return store
op350_op351_op356.snodes[2] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [   MemoryDep('buf356', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op356.unmet_dependencies = [MemoryDep('buf350', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (7620480, 1)
op356.sizes = ([8, 2160, 441], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op356_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf356', get_index_1, relu, None)
        return store


op352: ExternKernelSchedulerNode(ExternKernelAlloc)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='arg603_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelAlloc
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
]
op352.node.kernel = extern_kernels.convolution


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 1524096}, None)]
op353.unmet_dependencies = [MemoryDep('buf352', c0, {c0: 1524096}, None)]
op353.met_dependencies = 
    [   MemoryDep('arg604_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg605_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg606_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg607_1', c1, {c0: 3528, c1: 432}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (1524096, 1)
op353.sizes = ([3528, 432], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg605_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg606_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg607_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op353_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg604_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg605_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg606_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg607_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf353', get_index_5, add_1, None)
        return store


op354_op355_op366_op372_op378: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op354_op355_op366_op372_op378.writes = 
    [   MemoryDep('buf354', c0, {c0: 1524096}, None),
        MemoryDep('buf355', c0, {c0: 1524096}, None),
        MemoryDep('buf366', c0, {c0: 1524096}, None),
        MemoryDep('buf372', c0, {c0: 1524096}, None),
        MemoryDep('buf378', c0, {c0: 1524096}, None)]
op354_op355_op366_op372_op378.unmet_dependencies = 
    [   MemoryDep('buf353', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0, {c0: 1524096}, None)]
op354_op355_op366_op372_op378.met_dependencies = []
op354_op355_op366_op372_op378.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf354.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf355.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op354_op355_op366_op372_op378.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 1524096}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf353', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0, {c0: 1524096}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf354.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (1524096, 1)
op354.sizes = ([8, 21, 21, 432], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf354', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf353', get_index)
        return load
op354_op355_op366_op372_op378.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 1524096}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf353', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf353', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf353', c0, {c0: 1524096}, None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf355.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (1524096, 1)
op355.sizes = ([8, 21, 21, 432], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op355_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf355', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf353', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf353', get_index)
        return load
op354_op355_op366_op372_op378.snodes[2] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 1524096}, None)]
op366.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 1524096}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (1524096, 1)
op366.sizes = ([1524096], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op366_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf366', get_index_1, relu, None)
        return store
op354_op355_op366_op372_op378.snodes[3] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1524096}, None)]
op372.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 1524096}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (1524096, 1)
op372.sizes = ([1524096], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op372_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf372', get_index_1, relu, None)
        return store
op354_op355_op366_op372_op378.snodes[4] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 1524096}, None)]
op378.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 1524096}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (1524096, 1)
op378.sizes = ([1524096], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op378_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf378', get_index_1, relu, None)
        return store


op357: ExternKernelSchedulerNode(ExternKernelAlloc)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg680_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelAlloc
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op357.node.kernel = extern_kernels.convolution


op358_op407_op438: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op358_op407_op438.writes = 
    [   MemoryDep('buf358', c0, {c0: 1524096}, None),
        MemoryDep('buf407', c0, {c0: 1524096}, None),
        MemoryDep('buf438', c0, {c0: 1524096}, None)]
op358_op407_op438.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 1524096}, None)]
op358_op407_op438.met_dependencies = 
    [   MemoryDep('arg681_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg682_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg683_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg684_1', c1, {c0: 3528, c1: 432}, None)]
op358_op407_op438.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op358_op407_op438.snodes[0] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 1524096}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 1524096}, None)]
op358.met_dependencies = 
    [   MemoryDep('arg681_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg682_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg683_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg684_1', c1, {c0: 3528, c1: 432}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (1524096, 1)
op358.sizes = ([3528, 432], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg682_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op358_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg681_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg682_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg683_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg684_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf358', get_index_5, add_1, None)
        return store
op358_op407_op438.snodes[1] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 1524096}, None)]
op407.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1524096}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (1524096, 1)
op407.sizes = ([1524096], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op407_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf407', get_index_1, relu, None)
        return store
op358_op407_op438.snodes[2] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 1524096}, None)]
op438.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 1524096}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (1524096, 1)
op438.sizes = ([1524096], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op438_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf438', get_index_1, relu, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 1524096}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf358', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf358', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf358', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf358', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf358', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf358', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf358', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf358', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf358', c0, {c0: 1524096}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf359.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (1524096, 1)
op359.sizes = ([8, 21, 21, 432], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op359_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf359', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf358', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf358', get_index)
        return load


op361: ExternKernelSchedulerNode(ExternKernelAlloc)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg608_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelAlloc
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = extern_kernels.convolution


op362: ExternKernelSchedulerNode(ExternKernelAlloc)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='arg609_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelAlloc
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.convolution


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1524096}, None)]
op363.unmet_dependencies = [MemoryDep('buf362', c0, {c0: 1524096}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg610_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg611_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg612_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg613_1', c1, {c0: 3528, c1: 432}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (1524096, 1)
op363.sizes = ([3528, 432], [])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg610_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg611_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg612_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op363_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg610_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg611_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg612_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg613_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, relu, None)
        return store


op364: ExternKernelSchedulerNode(ExternKernelAlloc)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = [StarDep(name='arg614_1', mode=None)]
op364.outputs = [
    buf364: ExternKernelAlloc
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.node.kernel = extern_kernels.convolution


op365: ExternKernelSchedulerNode(ExternKernelAlloc)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg615_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelAlloc
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf365.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = extern_kernels.convolution


op367: ExternKernelSchedulerNode(ExternKernelAlloc)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg620_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelAlloc
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.node.kernel = extern_kernels.convolution


op368: ExternKernelSchedulerNode(ExternKernelAlloc)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg621_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelAlloc
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False)]
]
op368.node.kernel = extern_kernels.convolution


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 1524096}, None)]
op369.unmet_dependencies = [MemoryDep('buf368', c0, {c0: 1524096}, None)]
op369.met_dependencies = 
    [   MemoryDep('arg622_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg623_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg624_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg625_1', c1, {c0: 3528, c1: 432}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (1524096, 1)
op369.sizes = ([3528, 432], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg624_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg625_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op369_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg623_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg624_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg625_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf369', get_index_5, relu, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelAlloc)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='arg626_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelAlloc
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.node.kernel = extern_kernels.convolution


op371: ExternKernelSchedulerNode(ExternKernelAlloc)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op371.met_dependencies = [StarDep(name='arg627_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelAlloc
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf371.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.convolution


op373: ExternKernelSchedulerNode(ExternKernelAlloc)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op373.met_dependencies = [StarDep(name='arg632_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelAlloc
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.node.kernel = extern_kernels.convolution


op374: ExternKernelSchedulerNode(ExternKernelAlloc)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf373', mode=None)]
op374.met_dependencies = [StarDep(name='arg633_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelAlloc
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False)]
]
op374.node.kernel = extern_kernels.convolution


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 1524096}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 1524096}, None)]
op375.met_dependencies = 
    [   MemoryDep('arg634_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg635_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg636_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg637_1', c1, {c0: 3528, c1: 432}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (1524096, 1)
op375.sizes = ([3528, 432], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg634_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg636_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg637_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op375_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg634_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg635_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg636_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg637_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf375', get_index_5, relu, None)
        return store


op376: ExternKernelSchedulerNode(ExternKernelAlloc)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op376.met_dependencies = [StarDep(name='arg638_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelAlloc
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.node.kernel = extern_kernels.convolution


op377: ExternKernelSchedulerNode(ExternKernelAlloc)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg639_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelAlloc
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf377.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False)]
]
op377.node.kernel = extern_kernels.convolution


op379: ExternKernelSchedulerNode(ExternKernelAlloc)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='arg644_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelAlloc
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.node.kernel = extern_kernels.convolution


op380: ExternKernelSchedulerNode(ExternKernelAlloc)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf379', mode=None)]
op380.met_dependencies = [StarDep(name='arg645_1', mode=None)]
op380.outputs = [
    buf380: ExternKernelAlloc
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False)]
]
op380.node.kernel = extern_kernels.convolution


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 1524096}, None)]
op381.unmet_dependencies = [MemoryDep('buf380', c0, {c0: 1524096}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg646_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg647_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg648_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg649_1', c1, {c0: 3528, c1: 432}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (1524096, 1)
op381.sizes = ([3528, 432], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg647_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg648_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op381_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg646_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg647_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg648_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg649_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf381', get_index_5, relu, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelAlloc)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg650_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelAlloc
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.node.kernel = extern_kernels.convolution


op383: ExternKernelSchedulerNode(ExternKernelAlloc)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf382', mode=None)]
op383.met_dependencies = [StarDep(name='arg651_1', mode=None)]
op383.outputs = [
    buf383: ExternKernelAlloc
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf383.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False)]
]
op383.node.kernel = extern_kernels.convolution


op384_op385: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op384_op385.writes = 
    [   MemoryDep('buf384', c0, {c0: 1524096}, None),
        MemoryDep('buf385', c0, {c0: 1524096}, None)]
op384_op385.unmet_dependencies = 
    [   MemoryDep('buf377', c0, {c0: 1524096}, None),
        MemoryDep('buf383', c0, {c0: 1524096}, None)]
op384_op385.met_dependencies = 
    [   MemoryDep('arg640_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg641_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg642_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg643_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg652_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg653_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg654_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg655_1', c1, {c0: 3528, c1: 432}, None)]
op384_op385.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op384_op385.snodes[0] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 1524096}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf377', c0, {c0: 1524096}, None),
        MemoryDep('buf383', c0, {c0: 1524096}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg640_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg641_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg642_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg643_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg652_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg653_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg654_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg655_1', c1, {c0: 3528, c1: 432}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (1524096, 1)
op384.sizes = ([3528, 432], [])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg641_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg642_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg643_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg654_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg655_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op384_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg640_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg641_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg642_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg643_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf383', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg652_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg653_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg654_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg655_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf384', get_index_10, add_4, None)
        return store
op384_op385.snodes[1] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 1524096}, None)]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 1524096}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (1524096, 1)
op385.sizes = ([1524096], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op385_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf385', get_index_1, relu, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelAlloc)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg656_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelAlloc
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf386.users = [NodeUser(node=ExternKernelSchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.convolution


op387: ExternKernelSchedulerNode(ExternKernelAlloc)
op387.writes = [StarDep(name='buf387', mode=None)]
op387.unmet_dependencies = [StarDep(name='buf386', mode=None)]
op387.met_dependencies = [StarDep(name='arg657_1', mode=None)]
op387.outputs = [
    buf387: ExternKernelAlloc
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False)]
]
op387.node.kernel = extern_kernels.convolution


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1524096}, None)]
op388.unmet_dependencies = [MemoryDep('buf387', c0, {c0: 1524096}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg658_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg659_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg660_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg661_1', c1, {c0: 3528, c1: 432}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1524096, 1)
op388.sizes = ([3528, 432], [])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg658_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg659_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg660_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg661_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op388_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg658_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg659_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg660_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg661_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, relu, None)
        return store


op389: ExternKernelSchedulerNode(ExternKernelAlloc)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg662_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelAlloc
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.convolution


op390: ExternKernelSchedulerNode(ExternKernelAlloc)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op390.met_dependencies = [StarDep(name='arg663_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelAlloc
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf390.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op390.node.kernel = extern_kernels.convolution


op392: ExternKernelSchedulerNode(ExternKernelAlloc)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op392.met_dependencies = [StarDep(name='arg668_1', mode=None)]
op392.outputs = [
    buf392: ExternKernelAlloc
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op392.node.kernel = extern_kernels.convolution


op393: ExternKernelSchedulerNode(ExternKernelAlloc)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf392', mode=None)]
op393.met_dependencies = [StarDep(name='arg669_1', mode=None)]
op393.outputs = [
    buf393: ExternKernelAlloc
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False)]
]
op393.node.kernel = extern_kernels.convolution


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 1524096}, None)]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1524096}, None)]
op394.met_dependencies = 
    [   MemoryDep('arg670_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg671_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg672_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg673_1', c1, {c0: 3528, c1: 432}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (1524096, 1)
op394.sizes = ([3528, 432], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg670_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg672_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op394_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg670_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg671_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg672_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg673_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf394', get_index_5, relu, None)
        return store


op395: ExternKernelSchedulerNode(ExternKernelAlloc)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf394', mode=None)]
op395.met_dependencies = [StarDep(name='arg674_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelAlloc
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.node.kernel = extern_kernels.convolution


op396: ExternKernelSchedulerNode(ExternKernelAlloc)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg675_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelAlloc
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf396.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op396.node.kernel = extern_kernels.convolution


op397_op398_op403: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op397_op398_op403.writes = 
    [   MemoryDep('buf397', 952576*c0 + c1, {c0: 8, c1: 952560}, None),
        MemoryDep('buf398', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf403', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op397_op398_op403.unmet_dependencies = 
    [   MemoryDep('buf309', 190528*c0 + c2 + 441*I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf353', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf354', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf355', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf365', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf371', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf384', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf390', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf396', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op397_op398_op403.met_dependencies = 
    [   MemoryDep('arg616_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg617_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg618_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg619_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg628_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg629_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg630_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg631_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg664_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg665_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg666_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg667_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg676_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg677_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg678_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg679_1', I, {c0: 8, c1: 2160}, None)]
op397_op398_op403.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
    ]
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op397_op398_op403.snodes[0] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf309', 190528*c0 + c2 + 441*I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf353', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf354', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf355', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf365', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf371', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf384', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf390', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf396', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op397.met_dependencies = 
    [   MemoryDep('arg616_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg617_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg618_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg619_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg628_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg629_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg630_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg631_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg664_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg665_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg666_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg667_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg676_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg677_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg678_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg679_1', I, {c0: 8, c1: 2160}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (7620480, 1)
op397.sizes = ([8, 2160, 441], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg616_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg618_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg619_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190528, 441, 21, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg629_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg630_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg664_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg667_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg676_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg677_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg678_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg679_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
class op397_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = z1
    index1 = 190512*z0 + 432*z2 + I
    index2 = I
    index3 = 190528*z0 + z2 + 441*I
    index4 = 190512*z0 + 432*z2 + I
    index5 = I
    index6 = 190512*z0 + 432*z2 + I
    index7 = 190512*z0 + 432*z2 + I
    index8 = I
    index9 = 190512*z0 + 432*z2 + I
    index10 = I
    index11 = 952576*z0 + 441*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(432, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(432, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(864, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(864, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1296, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1296, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1728, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(1728, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(2160, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index11')
        store = ops.store('buf397', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg616_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg617_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg618_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg619_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf309', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg628_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index5')
        load_2 = ops.load('arg629_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index5')
        load_3 = ops.load('arg630_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index5')
        load_4 = ops.load('arg631_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf354', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf384', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg664_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index8')
        load_2 = ops.load('arg665_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index8')
        load_3 = ops.load('arg666_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index8')
        load_4 = ops.load('arg667_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index7')
        load_5 = ops.load('buf355', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('arg676_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index10')
        load_2 = ops.load('arg677_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index10')
        load_3 = ops.load('arg678_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index10')
        load_4 = ops.load('arg679_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index9')
        load_5 = ops.load('buf353', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op397_op398_op403.snodes[1] =
op398: SchedulerNode(ComputedBuffer)
op398.writes = [   MemoryDep('buf398', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op398.unmet_dependencies = [MemoryDep('buf397', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (7620480, 1)
op398.sizes = ([8, 2160, 441], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf398', get_index_1, relu, None)
        return store
op397_op398_op403.snodes[2] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [   MemoryDep('buf403', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op403.unmet_dependencies = [MemoryDep('buf397', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (7620480, 1)
op403.sizes = ([8, 2160, 441], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op403_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf403', get_index_1, relu, None)
        return store


op399: ExternKernelSchedulerNode(ExternKernelAlloc)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op399.met_dependencies = [StarDep(name='arg685_1', mode=None)]
op399.outputs = [
    buf399: ExternKernelAlloc
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False)]
]
op399.node.kernel = extern_kernels.convolution


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 1524096}, None)]
op400.unmet_dependencies = [MemoryDep('buf399', c0, {c0: 1524096}, None)]
op400.met_dependencies = 
    [   MemoryDep('arg686_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg687_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg688_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg689_1', c1, {c0: 3528, c1: 432}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf400.users = [
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op400.group.device = cuda:0
op400.group.iteration = (1524096, 1)
op400.sizes = ([3528, 432], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg686_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg687_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg688_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op400_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg686_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg687_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg688_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg689_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf400', get_index_5, add_1, None)
        return store


op401_op402_op413_op419_op425: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op401_op402_op413_op419_op425.writes = 
    [   MemoryDep('buf401', c0, {c0: 1524096}, None),
        MemoryDep('buf402', c0, {c0: 1524096}, None),
        MemoryDep('buf413', c0, {c0: 1524096}, None),
        MemoryDep('buf419', c0, {c0: 1524096}, None),
        MemoryDep('buf425', c0, {c0: 1524096}, None)]
op401_op402_op413_op419_op425.unmet_dependencies = 
    [   MemoryDep('buf400', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0, {c0: 1524096}, None)]
op401_op402_op413_op419_op425.met_dependencies = []
op401_op402_op413_op419_op425.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf401.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf402.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op401_op402_op413_op419_op425.snodes[0] =
op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 1524096}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf400', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0, {c0: 1524096}, None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf401.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (1524096, 1)
op401.sizes = ([8, 21, 21, 432], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op401_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf401', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf400', get_index)
        return load
op401_op402_op413_op419_op425.snodes[1] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 1524096}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf400', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf400', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf400', c0, {c0: 1524096}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf402.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (1524096, 1)
op402.sizes = ([8, 21, 21, 432], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op402_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf402', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf400', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf400', get_index)
        return load
op401_op402_op413_op419_op425.snodes[2] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 1524096}, None)]
op413.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 1524096}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (1524096, 1)
op413.sizes = ([1524096], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op413_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf413', get_index_1, relu, None)
        return store
op401_op402_op413_op419_op425.snodes[3] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 1524096}, None)]
op419.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 1524096}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (1524096, 1)
op419.sizes = ([1524096], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op419_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf419', get_index_1, relu, None)
        return store
op401_op402_op413_op419_op425.snodes[4] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 1524096}, None)]
op425.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 1524096}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (1524096, 1)
op425.sizes = ([1524096], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op425_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf425', get_index_1, relu, None)
        return store


op404: ExternKernelSchedulerNode(ExternKernelAlloc)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg762_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelAlloc
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
]
op404.node.kernel = extern_kernels.convolution


op405_op454_op485: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op405_op454_op485.writes = 
    [   MemoryDep('buf405', c0, {c0: 1524096}, None),
        MemoryDep('buf454', c0, {c0: 1524096}, None),
        MemoryDep('buf485', c0, {c0: 1524096}, None)]
op405_op454_op485.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 1524096}, None)]
op405_op454_op485.met_dependencies = 
    [   MemoryDep('arg763_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg764_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg765_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg766_1', c1, {c0: 3528, c1: 432}, None)]
op405_op454_op485.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
    ]
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf454.users = [NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op405_op454_op485.snodes[0] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 1524096}, None)]
op405.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 1524096}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg763_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg764_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg765_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg766_1', c1, {c0: 3528, c1: 432}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
    ]
]
op405.group.device = cuda:0
op405.group.iteration = (1524096, 1)
op405.sizes = ([3528, 432], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg763_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg764_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg765_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg766_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op405_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg763_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg764_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg765_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg766_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf405', get_index_5, add_1, None)
        return store
op405_op454_op485.snodes[1] =
op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 1524096}, None)]
op454.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 1524096}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf454.users = [NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op454.group.device = cuda:0
op454.group.iteration = (1524096, 1)
op454.sizes = ([1524096], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op454_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf454', get_index_1, relu, None)
        return store
op405_op454_op485.snodes[2] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 1524096}, None)]
op485.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 1524096}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (1524096, 1)
op485.sizes = ([1524096], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op485_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf485', get_index_1, relu, None)
        return store


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 1524096}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf405', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf405', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf405', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf405', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf405', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf405', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf405', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf405', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf405', c0, {c0: 1524096}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf406.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (1524096, 1)
op406.sizes = ([8, 21, 21, 432], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf406', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf405', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf405', get_index)
        return load


op408: ExternKernelSchedulerNode(ExternKernelAlloc)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg690_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelAlloc
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.node.kernel = extern_kernels.convolution


op409: ExternKernelSchedulerNode(ExternKernelAlloc)
op409.writes = [StarDep(name='buf409', mode=None)]
op409.unmet_dependencies = [StarDep(name='buf408', mode=None)]
op409.met_dependencies = [StarDep(name='arg691_1', mode=None)]
op409.outputs = [
    buf409: ExternKernelAlloc
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf409.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False)]
]
op409.node.kernel = extern_kernels.convolution


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 1524096}, None)]
op410.unmet_dependencies = [MemoryDep('buf409', c0, {c0: 1524096}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg692_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg693_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg694_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg695_1', c1, {c0: 3528, c1: 432}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (1524096, 1)
op410.sizes = ([3528, 432], [])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg693_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg694_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg695_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op410_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg692_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg693_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg694_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg695_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf410', get_index_5, relu, None)
        return store


op411: ExternKernelSchedulerNode(ExternKernelAlloc)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf410', mode=None)]
op411.met_dependencies = [StarDep(name='arg696_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelAlloc
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf411.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.convolution


op412: ExternKernelSchedulerNode(ExternKernelAlloc)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op412.met_dependencies = [StarDep(name='arg697_1', mode=None)]
op412.outputs = [
    buf412: ExternKernelAlloc
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf412.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = extern_kernels.convolution


op414: ExternKernelSchedulerNode(ExternKernelAlloc)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf413', mode=None)]
op414.met_dependencies = [StarDep(name='arg702_1', mode=None)]
op414.outputs = [
    buf414: ExternKernelAlloc
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op414.node.kernel = extern_kernels.convolution


op415: ExternKernelSchedulerNode(ExternKernelAlloc)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf414', mode=None)]
op415.met_dependencies = [StarDep(name='arg703_1', mode=None)]
op415.outputs = [
    buf415: ExternKernelAlloc
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
]
op415.node.kernel = extern_kernels.convolution


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 1524096}, None)]
op416.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 1524096}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg704_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg705_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg706_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg707_1', c1, {c0: 3528, c1: 432}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (1524096, 1)
op416.sizes = ([3528, 432], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg704_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg705_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg706_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg707_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op416_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg704_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg705_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg706_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg707_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf416', get_index_5, relu, None)
        return store


op417: ExternKernelSchedulerNode(ExternKernelAlloc)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = [StarDep(name='arg708_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelAlloc
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.node.kernel = extern_kernels.convolution


op418: ExternKernelSchedulerNode(ExternKernelAlloc)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf417', mode=None)]
op418.met_dependencies = [StarDep(name='arg709_1', mode=None)]
op418.outputs = [
    buf418: ExternKernelAlloc
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf418.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op418.node.kernel = extern_kernels.convolution


op420: ExternKernelSchedulerNode(ExternKernelAlloc)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf419', mode=None)]
op420.met_dependencies = [StarDep(name='arg714_1', mode=None)]
op420.outputs = [
    buf420: ExternKernelAlloc
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.node.kernel = extern_kernels.convolution


op421: ExternKernelSchedulerNode(ExternKernelAlloc)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op421.met_dependencies = [StarDep(name='arg715_1', mode=None)]
op421.outputs = [
    buf421: ExternKernelAlloc
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf421.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op421.node.kernel = extern_kernels.convolution


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 1524096}, None)]
op422.unmet_dependencies = [MemoryDep('buf421', c0, {c0: 1524096}, None)]
op422.met_dependencies = 
    [   MemoryDep('arg716_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg717_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg718_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg719_1', c1, {c0: 3528, c1: 432}, None)]
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (1524096, 1)
op422.sizes = ([3528, 432], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg716_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg717_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg718_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg719_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op422_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg716_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg717_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg718_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg719_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf422', get_index_5, relu, None)
        return store


op423: ExternKernelSchedulerNode(ExternKernelAlloc)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf422', mode=None)]
op423.met_dependencies = [StarDep(name='arg720_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelAlloc
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.node.kernel = extern_kernels.convolution


op424: ExternKernelSchedulerNode(ExternKernelAlloc)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg721_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelAlloc
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf424.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op424.node.kernel = extern_kernels.convolution


op426: ExternKernelSchedulerNode(ExternKernelAlloc)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf425', mode=None)]
op426.met_dependencies = [StarDep(name='arg726_1', mode=None)]
op426.outputs = [
    buf426: ExternKernelAlloc
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.node.kernel = extern_kernels.convolution


op427: ExternKernelSchedulerNode(ExternKernelAlloc)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='arg727_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelAlloc
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.convolution


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 1524096}, None)]
op428.unmet_dependencies = [MemoryDep('buf427', c0, {c0: 1524096}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg728_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg729_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg730_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg731_1', c1, {c0: 3528, c1: 432}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf428.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (1524096, 1)
op428.sizes = ([3528, 432], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg728_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg729_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg730_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg731_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op428_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg728_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg729_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg730_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg731_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf428', get_index_5, relu, None)
        return store


op429: ExternKernelSchedulerNode(ExternKernelAlloc)
op429.writes = [StarDep(name='buf429', mode=None)]
op429.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op429.met_dependencies = [StarDep(name='arg732_1', mode=None)]
op429.outputs = [
    buf429: ExternKernelAlloc
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.node.kernel = extern_kernels.convolution


op430: ExternKernelSchedulerNode(ExternKernelAlloc)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = [StarDep(name='arg733_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelAlloc
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op430.node.kernel = extern_kernels.convolution


op431_op432: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op431_op432.writes = 
    [   MemoryDep('buf431', c0, {c0: 1524096}, None),
        MemoryDep('buf432', c0, {c0: 1524096}, None)]
op431_op432.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1524096}, None),
        MemoryDep('buf430', c0, {c0: 1524096}, None)]
op431_op432.met_dependencies = 
    [   MemoryDep('arg722_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg723_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg724_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg725_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg734_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg735_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg736_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg737_1', c1, {c0: 3528, c1: 432}, None)]
op431_op432.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op431_op432.snodes[0] =
op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 1524096}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1524096}, None),
        MemoryDep('buf430', c0, {c0: 1524096}, None)]
op431.met_dependencies = 
    [   MemoryDep('arg722_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg723_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg724_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg725_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg734_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg735_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg736_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg737_1', c1, {c0: 3528, c1: 432}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (1524096, 1)
op431.sizes = ([3528, 432], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg722_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg723_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg724_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg725_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg734_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg735_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg736_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg737_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op431_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg722_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg723_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg724_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg725_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf430', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg734_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg735_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg736_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg737_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf431', get_index_10, add_4, None)
        return store
op431_op432.snodes[1] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 1524096}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 1524096}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (1524096, 1)
op432.sizes = ([1524096], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op432_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf432', get_index_1, relu, None)
        return store


op433: ExternKernelSchedulerNode(ExternKernelAlloc)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op433.met_dependencies = [StarDep(name='arg738_1', mode=None)]
op433.outputs = [
    buf433: ExternKernelAlloc
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf433.users = [NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.node.kernel = extern_kernels.convolution


op434: ExternKernelSchedulerNode(ExternKernelAlloc)
op434.writes = [StarDep(name='buf434', mode=None)]
op434.unmet_dependencies = [StarDep(name='buf433', mode=None)]
op434.met_dependencies = [StarDep(name='arg739_1', mode=None)]
op434.outputs = [
    buf434: ExternKernelAlloc
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf434.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False)]
]
op434.node.kernel = extern_kernels.convolution


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 1524096}, None)]
op435.unmet_dependencies = [MemoryDep('buf434', c0, {c0: 1524096}, None)]
op435.met_dependencies = 
    [   MemoryDep('arg740_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg741_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg742_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg743_1', c1, {c0: 3528, c1: 432}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (1524096, 1)
op435.sizes = ([3528, 432], [])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg740_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg741_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg742_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg743_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op435_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg740_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg741_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg742_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg743_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf435', get_index_5, relu, None)
        return store


op436: ExternKernelSchedulerNode(ExternKernelAlloc)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op436.met_dependencies = [StarDep(name='arg744_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelAlloc
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.node.kernel = extern_kernels.convolution


op437: ExternKernelSchedulerNode(ExternKernelAlloc)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op437.met_dependencies = [StarDep(name='arg745_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelAlloc
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf437.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op437.node.kernel = extern_kernels.convolution


op439: ExternKernelSchedulerNode(ExternKernelAlloc)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg750_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelAlloc
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.node.kernel = extern_kernels.convolution


op440: ExternKernelSchedulerNode(ExternKernelAlloc)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf439', mode=None)]
op440.met_dependencies = [StarDep(name='arg751_1', mode=None)]
op440.outputs = [
    buf440: ExternKernelAlloc
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf440.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False)]
]
op440.node.kernel = extern_kernels.convolution


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 1524096}, None)]
op441.unmet_dependencies = [MemoryDep('buf440', c0, {c0: 1524096}, None)]
op441.met_dependencies = 
    [   MemoryDep('arg752_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg753_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg754_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg755_1', c1, {c0: 3528, c1: 432}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (1524096, 1)
op441.sizes = ([3528, 432], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg752_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg753_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg754_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg755_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op441_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg752_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg753_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg754_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg755_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf441', get_index_5, relu, None)
        return store


op442: ExternKernelSchedulerNode(ExternKernelAlloc)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op442.met_dependencies = [StarDep(name='arg756_1', mode=None)]
op442.outputs = [
    buf442: ExternKernelAlloc
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf442.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op442.node.kernel = extern_kernels.convolution


op443: ExternKernelSchedulerNode(ExternKernelAlloc)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf442', mode=None)]
op443.met_dependencies = [StarDep(name='arg757_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelAlloc
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = extern_kernels.convolution


op444_op445_op450: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op444_op445_op450.writes = 
    [   MemoryDep('buf444', 952576*c0 + c1, {c0: 8, c1: 952560}, None),
        MemoryDep('buf445', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf450', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op444_op445_op450.unmet_dependencies = 
    [   MemoryDep('buf359', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf400', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf401', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf402', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf412', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf418', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf431', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf437', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf443', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op444_op445_op450.met_dependencies = 
    [   MemoryDep('arg698_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg699_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg700_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg701_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg710_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg711_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg712_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg713_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg746_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg747_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg748_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg749_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg758_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg759_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg760_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg761_1', I, {c0: 8, c1: 2160}, None)]
op444_op445_op450.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op444_op445_op450.snodes[0] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf359', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf400', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf401', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf402', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf412', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf418', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf431', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf437', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf443', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op444.met_dependencies = 
    [   MemoryDep('arg698_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg699_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg700_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg701_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg710_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg711_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg712_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg713_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg746_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg747_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg748_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg749_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg758_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg759_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg760_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg761_1', I, {c0: 8, c1: 2160}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
]
op444.group.device = cuda:0
op444.group.iteration = (7620480, 1)
op444.sizes = ([8, 2160, 441], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg698_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg699_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg700_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg701_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg710_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg711_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg712_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg713_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg746_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg747_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg748_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg749_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg758_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg759_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg760_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg761_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
class op444_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = z1
    index1 = 190512*z0 + 432*z2 + I
    index2 = I
    index3 = 190512*z0 + 432*z2 + I
    index4 = I
    index5 = 190512*z0 + 432*z2 + I
    index6 = 190512*z0 + 432*z2 + I
    index7 = I
    index8 = 190512*z0 + 432*z2 + I
    index9 = I
    index10 = 952576*z0 + 441*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(432, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(432, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(864, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(864, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1296, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1296, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1728, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(1728, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(2160, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf444', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg698_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg699_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg700_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg701_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf359', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg710_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg711_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg712_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg713_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf401', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf431', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg746_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg747_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg748_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg749_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf402', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg758_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg759_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg760_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg761_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf400', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op444_op445_op450.snodes[1] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [   MemoryDep('buf445', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op445.unmet_dependencies = [MemoryDep('buf444', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (7620480, 1)
op445.sizes = ([8, 2160, 441], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op445_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf445', get_index_1, relu, None)
        return store
op444_op445_op450.snodes[2] =
op450: SchedulerNode(ComputedBuffer)
op450.writes = [   MemoryDep('buf450', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op450.unmet_dependencies = [MemoryDep('buf444', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (7620480, 1)
op450.sizes = ([8, 2160, 441], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf450', get_index_1, relu, None)
        return store


op446: ExternKernelSchedulerNode(ExternKernelAlloc)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = [StarDep(name='buf445', mode=None)]
op446.met_dependencies = [StarDep(name='arg767_1', mode=None)]
op446.outputs = [
    buf446: ExternKernelAlloc
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False)]
]
op446.node.kernel = extern_kernels.convolution


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 1524096}, None)]
op447.unmet_dependencies = [MemoryDep('buf446', c0, {c0: 1524096}, None)]
op447.met_dependencies = 
    [   MemoryDep('arg768_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg769_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg770_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg771_1', c1, {c0: 3528, c1: 432}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf447.users = [
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
]
op447.group.device = cuda:0
op447.group.iteration = (1524096, 1)
op447.sizes = ([3528, 432], [])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg768_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg769_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg770_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg771_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op447_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg768_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg769_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg770_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg771_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf447', get_index_5, add_1, None)
        return store


op448_op449_op460_op466_op472: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op448_op449_op460_op466_op472.writes = 
    [   MemoryDep('buf448', c0, {c0: 1524096}, None),
        MemoryDep('buf449', c0, {c0: 1524096}, None),
        MemoryDep('buf460', c0, {c0: 1524096}, None),
        MemoryDep('buf466', c0, {c0: 1524096}, None),
        MemoryDep('buf472', c0, {c0: 1524096}, None)]
op448_op449_op460_op466_op472.unmet_dependencies = 
    [   MemoryDep('buf447', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0, {c0: 1524096}, None)]
op448_op449_op460_op466_op472.met_dependencies = []
op448_op449_op460_op466_op472.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf448.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf449.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf466.users = [NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op448_op449_op460_op466_op472.snodes[0] =
op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 1524096}, None)]
op448.unmet_dependencies = 
    [   MemoryDep('buf447', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0, {c0: 1524096}, None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf448.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (1524096, 1)
op448.sizes = ([8, 21, 21, 432], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op448_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf448', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf447', get_index)
        return load
op448_op449_op460_op466_op472.snodes[1] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 1524096}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf447', c0 + 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 + 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 432, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 8640, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9072, {c0: 1524096}, None),
        MemoryDep('buf447', c0 - 9504, {c0: 1524096}, None),
        MemoryDep('buf447', c0, {c0: 1524096}, None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf449.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (1524096, 1)
op449.sizes = ([8, 21, 21, 432], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op449_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 432}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9504
    index3 = z2
    index4 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 9072
    index5 = z2 + 1
    index6 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 8640
    index7 = z1
    index8 = 190512*z0 + 9072*z1 + 432*z2 + z3 - 432
    index9 = 190512*z0 + 9072*z1 + 432*z2 + z3
    index10 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 432
    index11 = z1 + 1
    index12 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 8640
    index13 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9072
    index14 = 190512*z0 + 9072*z1 + 432*z2 + z3 + 9504
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf449', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf447', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf447', get_index)
        return load
op448_op449_op460_op466_op472.snodes[2] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 1524096}, None)]
op460.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 1524096}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (1524096, 1)
op460.sizes = ([1524096], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op460_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, relu, None)
        return store
op448_op449_op460_op466_op472.snodes[3] =
op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 1524096}, None)]
op466.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 1524096}, None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf466.users = [NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (1524096, 1)
op466.sizes = ([1524096], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op466_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf466', get_index_1, relu, None)
        return store
op448_op449_op460_op466_op472.snodes[4] =
op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 1524096}, None)]
op472.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 1524096}, None)]
op472.met_dependencies = []
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (1524096, 1)
op472.sizes = ([1524096], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op472_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf472', get_index_1, relu, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelAlloc)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg844_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelAlloc
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf451.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False)]
]
op451.node.kernel = extern_kernels.convolution


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 3048192}, None)]
op452.unmet_dependencies = [MemoryDep('buf451', c0, {c0: 3048192}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg845_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg846_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg847_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg848_1', c1, {c0: 3528, c1: 864}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf452.users = [
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (3048192, 1)
op452.sizes = ([3528, 864], [])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
arg845_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg846_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg847_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg848_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
class op452_loop_body:
    var_ranges = {z0: 3528, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg845_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg846_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg847_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg848_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf452', get_index_5, add_1, None)
        return store


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 836352}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf452', 381024*c0 + 36288*c1 + 1728*c2 + c3, {c0: 8, c1: 11, c2: 11, c3: 864}, None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf453.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (836352, 1)
op453.sizes = ([8, 11, 11, 864], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op453_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 19008
    index3 = 2*z2
    index4 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 18144
    index5 = 2*z2 + 1
    index6 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 17280
    index7 = 2*z1
    index8 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 864
    index9 = 381024*z0 + 36288*z1 + 1728*z2 + z3
    index10 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 864
    index11 = 2*z1 + 1
    index12 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 17280
    index13 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 18144
    index14 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 19008
    index15 = 104544*z0 + 9504*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf453', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf452', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf452', get_index)
        return load


op455: ExternKernelSchedulerNode(ExternKernelAlloc)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf454', mode=None)]
op455.met_dependencies = [StarDep(name='arg772_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelAlloc
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf455.users = [NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op455.node.kernel = extern_kernels.convolution


op456: ExternKernelSchedulerNode(ExternKernelAlloc)
op456.writes = [StarDep(name='buf456', mode=None)]
op456.unmet_dependencies = [StarDep(name='buf455', mode=None)]
op456.met_dependencies = [StarDep(name='arg773_1', mode=None)]
op456.outputs = [
    buf456: ExternKernelAlloc
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf456.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False)]
]
op456.node.kernel = extern_kernels.convolution


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 1524096}, None)]
op457.unmet_dependencies = [MemoryDep('buf456', c0, {c0: 1524096}, None)]
op457.met_dependencies = 
    [   MemoryDep('arg774_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg775_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg776_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg777_1', c1, {c0: 3528, c1: 432}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (1524096, 1)
op457.sizes = ([3528, 432], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg774_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg775_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg776_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg777_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op457_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg774_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg775_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg776_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg777_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf457', get_index_5, relu, None)
        return store


op458: ExternKernelSchedulerNode(ExternKernelAlloc)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf457', mode=None)]
op458.met_dependencies = [StarDep(name='arg778_1', mode=None)]
op458.outputs = [
    buf458: ExternKernelAlloc
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.node.kernel = extern_kernels.convolution


op459: ExternKernelSchedulerNode(ExternKernelAlloc)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf458', mode=None)]
op459.met_dependencies = [StarDep(name='arg779_1', mode=None)]
op459.outputs = [
    buf459: ExternKernelAlloc
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf459.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op459.node.kernel = extern_kernels.convolution


op461: ExternKernelSchedulerNode(ExternKernelAlloc)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='arg784_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelAlloc
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf461.users = [NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.node.kernel = extern_kernels.convolution


op462: ExternKernelSchedulerNode(ExternKernelAlloc)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf461', mode=None)]
op462.met_dependencies = [StarDep(name='arg785_1', mode=None)]
op462.outputs = [
    buf462: ExternKernelAlloc
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op462.node.kernel = extern_kernels.convolution


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 1524096}, None)]
op463.unmet_dependencies = [MemoryDep('buf462', c0, {c0: 1524096}, None)]
op463.met_dependencies = 
    [   MemoryDep('arg786_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg787_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg788_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg789_1', c1, {c0: 3528, c1: 432}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (1524096, 1)
op463.sizes = ([3528, 432], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg786_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg787_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg788_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op463_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg786_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg787_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg788_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg789_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf463', get_index_5, relu, None)
        return store


op464: ExternKernelSchedulerNode(ExternKernelAlloc)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='arg790_1', mode=None)]
op464.outputs = [
    buf464: ExternKernelAlloc
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf464.users = [NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op464.node.kernel = extern_kernels.convolution


op465: ExternKernelSchedulerNode(ExternKernelAlloc)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf464', mode=None)]
op465.met_dependencies = [StarDep(name='arg791_1', mode=None)]
op465.outputs = [
    buf465: ExternKernelAlloc
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf465.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op465.node.kernel = extern_kernels.convolution


op467: ExternKernelSchedulerNode(ExternKernelAlloc)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf466', mode=None)]
op467.met_dependencies = [StarDep(name='arg796_1', mode=None)]
op467.outputs = [
    buf467: ExternKernelAlloc
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.node.kernel = extern_kernels.convolution


op468: ExternKernelSchedulerNode(ExternKernelAlloc)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='arg797_1', mode=None)]
op468.outputs = [
    buf468: ExternKernelAlloc
    buf468.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf468.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False)]
]
op468.node.kernel = extern_kernels.convolution


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 1524096}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 1524096}, None)]
op469.met_dependencies = 
    [   MemoryDep('arg798_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg799_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg800_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg801_1', c1, {c0: 3528, c1: 432}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (1524096, 1)
op469.sizes = ([3528, 432], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg798_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg799_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg800_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg801_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op469_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg798_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg799_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg800_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg801_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf469', get_index_5, relu, None)
        return store


op470: ExternKernelSchedulerNode(ExternKernelAlloc)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='arg802_1', mode=None)]
op470.outputs = [
    buf470: ExternKernelAlloc
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.convolution


op471: ExternKernelSchedulerNode(ExternKernelAlloc)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf470', mode=None)]
op471.met_dependencies = [StarDep(name='arg803_1', mode=None)]
op471.outputs = [
    buf471: ExternKernelAlloc
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf471.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
]
op471.node.kernel = extern_kernels.convolution


op473: ExternKernelSchedulerNode(ExternKernelAlloc)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf472', mode=None)]
op473.met_dependencies = [StarDep(name='arg808_1', mode=None)]
op473.outputs = [
    buf473: ExternKernelAlloc
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf473.users = [NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op473.node.kernel = extern_kernels.convolution


op474: ExternKernelSchedulerNode(ExternKernelAlloc)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = [StarDep(name='arg809_1', mode=None)]
op474.outputs = [
    buf474: ExternKernelAlloc
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf474.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=True, is_weak=False)]
]
op474.node.kernel = extern_kernels.convolution


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 1524096}, None)]
op475.unmet_dependencies = [MemoryDep('buf474', c0, {c0: 1524096}, None)]
op475.met_dependencies = 
    [   MemoryDep('arg810_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg811_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg812_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg813_1', c1, {c0: 3528, c1: 432}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (1524096, 1)
op475.sizes = ([3528, 432], [])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg810_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg811_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg812_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg813_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op475_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg810_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg811_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg812_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg813_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf475', get_index_5, relu, None)
        return store


op476: ExternKernelSchedulerNode(ExternKernelAlloc)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op476.met_dependencies = [StarDep(name='arg814_1', mode=None)]
op476.outputs = [
    buf476: ExternKernelAlloc
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf476.users = [NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.convolution


op477: ExternKernelSchedulerNode(ExternKernelAlloc)
op477.writes = [StarDep(name='buf477', mode=None)]
op477.unmet_dependencies = [StarDep(name='buf476', mode=None)]
op477.met_dependencies = [StarDep(name='arg815_1', mode=None)]
op477.outputs = [
    buf477: ExternKernelAlloc
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf477.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
]
op477.node.kernel = extern_kernels.convolution


op478_op479: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op478_op479.writes = 
    [   MemoryDep('buf478', c0, {c0: 1524096}, None),
        MemoryDep('buf479', c0, {c0: 1524096}, None)]
op478_op479.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 1524096}, None),
        MemoryDep('buf477', c0, {c0: 1524096}, None)]
op478_op479.met_dependencies = 
    [   MemoryDep('arg804_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg805_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg806_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg807_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg816_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg817_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg818_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg819_1', c1, {c0: 3528, c1: 432}, None)]
op478_op479.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf478.users = [
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op478_op479.snodes[0] =
op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 1524096}, None)]
op478.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 1524096}, None),
        MemoryDep('buf477', c0, {c0: 1524096}, None)]
op478.met_dependencies = 
    [   MemoryDep('arg804_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg805_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg806_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg807_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg816_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg817_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg818_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg819_1', c1, {c0: 3528, c1: 432}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf478.users = [
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (1524096, 1)
op478.sizes = ([3528, 432], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg804_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg805_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg806_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg807_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg816_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg817_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg818_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg819_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op478_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg804_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg805_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg806_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg807_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf477', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg816_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg817_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg818_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg819_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf478', get_index_10, add_4, None)
        return store
op478_op479.snodes[1] =
op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 1524096}, None)]
op479.unmet_dependencies = [MemoryDep('buf478', c0, {c0: 1524096}, None)]
op479.met_dependencies = []
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (1524096, 1)
op479.sizes = ([1524096], [])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf479_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op479_loop_body:
    var_ranges = {z0: 1524096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf478', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf479', get_index_1, relu, None)
        return store


op480: ExternKernelSchedulerNode(ExternKernelAlloc)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op480.met_dependencies = [StarDep(name='arg820_1', mode=None)]
op480.outputs = [
    buf480: ExternKernelAlloc
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf480.users = [NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = extern_kernels.convolution


op481: ExternKernelSchedulerNode(ExternKernelAlloc)
op481.writes = [StarDep(name='buf481', mode=None)]
op481.unmet_dependencies = [StarDep(name='buf480', mode=None)]
op481.met_dependencies = [StarDep(name='arg821_1', mode=None)]
op481.outputs = [
    buf481: ExternKernelAlloc
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op481.node.kernel = extern_kernels.convolution


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 1524096}, None)]
op482.unmet_dependencies = [MemoryDep('buf481', c0, {c0: 1524096}, None)]
op482.met_dependencies = 
    [   MemoryDep('arg822_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg823_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg824_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg825_1', c1, {c0: 3528, c1: 432}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (1524096, 1)
op482.sizes = ([3528, 432], [])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg822_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg823_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg824_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg825_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op482_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf481', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg822_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg823_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg824_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg825_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf482', get_index_5, relu, None)
        return store


op483: ExternKernelSchedulerNode(ExternKernelAlloc)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf482', mode=None)]
op483.met_dependencies = [StarDep(name='arg826_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelAlloc
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf483.users = [NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False)]
]
op483.node.kernel = extern_kernels.convolution


op484: ExternKernelSchedulerNode(ExternKernelAlloc)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf483', mode=None)]
op484.met_dependencies = [StarDep(name='arg827_1', mode=None)]
op484.outputs = [
    buf484: ExternKernelAlloc
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf484.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op484.node.kernel = extern_kernels.convolution


op486: ExternKernelSchedulerNode(ExternKernelAlloc)
op486.writes = [StarDep(name='buf486', mode=None)]
op486.unmet_dependencies = [StarDep(name='buf485', mode=None)]
op486.met_dependencies = [StarDep(name='arg832_1', mode=None)]
op486.outputs = [
    buf486: ExternKernelAlloc
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.node.kernel = extern_kernels.convolution


op487: ExternKernelSchedulerNode(ExternKernelAlloc)
op487.writes = [StarDep(name='buf487', mode=None)]
op487.unmet_dependencies = [StarDep(name='buf486', mode=None)]
op487.met_dependencies = [StarDep(name='arg833_1', mode=None)]
op487.outputs = [
    buf487: ExternKernelAlloc
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf487.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False)]
]
op487.node.kernel = extern_kernels.convolution


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 1524096}, None)]
op488.unmet_dependencies = [MemoryDep('buf487', c0, {c0: 1524096}, None)]
op488.met_dependencies = 
    [   MemoryDep('arg834_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg835_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg836_1', c1, {c0: 3528, c1: 432}, None),
        MemoryDep('arg837_1', c1, {c0: 3528, c1: 432}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (1524096, 1)
op488.sizes = ([3528, 432], [])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg834_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg835_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg836_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg837_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
class op488_loop_body:
    var_ranges = {z0: 3528, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg834_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg835_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg836_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg837_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf488', get_index_5, relu, None)
        return store


op489: ExternKernelSchedulerNode(ExternKernelAlloc)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf488', mode=None)]
op489.met_dependencies = [StarDep(name='arg838_1', mode=None)]
op489.outputs = [
    buf489: ExternKernelAlloc
    buf489.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.node.kernel = extern_kernels.convolution


op490: ExternKernelSchedulerNode(ExternKernelAlloc)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf489', mode=None)]
op490.met_dependencies = [StarDep(name='arg839_1', mode=None)]
op490.outputs = [
    buf490: ExternKernelAlloc
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.node.kernel = extern_kernels.convolution


op491_op492: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op491_op492.writes = 
    [   MemoryDep('buf491', 952576*c0 + c1, {c0: 8, c1: 952560}, None),
        MemoryDep('buf492', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op491_op492.unmet_dependencies = 
    [   MemoryDep('buf406', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf447', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf448', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf449', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf459', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf465', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf478', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf484', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf490', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op491_op492.met_dependencies = 
    [   MemoryDep('arg780_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg781_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg782_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg783_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg792_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg793_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg794_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg795_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg828_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg829_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg830_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg831_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg840_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg841_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg842_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg843_1', I, {c0: 8, c1: 2160}, None)]
op491_op492.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf492.users = [NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op491_op492.snodes[0] =
op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op491.unmet_dependencies = 
    [   MemoryDep('buf406', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf447', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf448', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf449', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf459', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf465', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf478', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf484', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None),
        MemoryDep('buf490', 190512*c0 + 432*c2 + I, {c0: 8, c1: 2160, c2: 441}, None)]
op491.met_dependencies = 
    [   MemoryDep('arg780_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg781_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg782_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg783_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg792_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg793_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg794_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg795_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg828_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg829_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg830_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg831_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg840_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg841_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg842_1', I, {c0: 8, c1: 2160}, None),
        MemoryDep('arg843_1', I, {c0: 8, c1: 2160}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op491.group.device = cuda:0
op491.group.iteration = (7620480, 1)
op491.sizes = ([8, 2160, 441], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg780_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg781_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg782_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg783_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg792_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg793_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg794_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg795_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg828_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg829_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg830_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg831_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
arg840_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg841_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg842_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg843_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 21, 21], stride=[190512, 1, 9072, 432])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
class op491_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = z1
    index1 = 190512*z0 + 432*z2 + I
    index2 = I
    index3 = 190512*z0 + 432*z2 + I
    index4 = I
    index5 = 190512*z0 + 432*z2 + I
    index6 = 190512*z0 + 432*z2 + I
    index7 = I
    index8 = 190512*z0 + 432*z2 + I
    index9 = I
    index10 = 952576*z0 + 441*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(432, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(432, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(864, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(864, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1296, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1296, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1728, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(1728, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(2160, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf491', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg780_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg781_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg782_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg783_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf406', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf465', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg792_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg793_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg794_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg795_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf448', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf478', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg828_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg829_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg830_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg831_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf449', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf490', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg840_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg841_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg842_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg843_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf447', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op491_op492.snodes[1] =
op492: SchedulerNode(ComputedBuffer)
op492.writes = [   MemoryDep('buf492', 952560*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 441}, None)]
op492.unmet_dependencies = [MemoryDep('buf491', 952576*c0 + c1, {c0: 8, c1: 952560}, None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
    buf492.users = [NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (7620480, 1)
op492.sizes = ([8, 2160, 441], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952560, 1, 45360, 2160])
class op492_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 441}
    index0 = 952576*z0 + 441*z1 + z2
    index1 = 952560*z0 + z1 + 2160*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf492', get_index_1, relu, None)
        return store


op493: ExternKernelSchedulerNode(ExternKernelAlloc)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op493.met_dependencies = [StarDep(name='arg849_1', mode=None)]
op493.outputs = [
    buf493: ExternKernelAlloc
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf493.users = [NodeUser(node=SchedulerNode(name='op494'), can_inplace=True, is_weak=False)]
]
op493.node.kernel = extern_kernels.convolution


op494_op540: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op494_op540.writes = 
    [   MemoryDep('buf494', c0, {c0: 3048192}, None),
        MemoryDep('buf540', c0, {c0: 3048192}, None)]
op494_op540.unmet_dependencies = [MemoryDep('buf493', c0, {c0: 3048192}, None)]
op494_op540.met_dependencies = 
    [   MemoryDep('arg850_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg851_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg852_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg853_1', c1, {c0: 3528, c1: 864}, None)]
op494_op540.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
    ]
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op494_op540.snodes[0] =
op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 3048192}, None)]
op494.unmet_dependencies = [MemoryDep('buf493', c0, {c0: 3048192}, None)]
op494.met_dependencies = 
    [   MemoryDep('arg850_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg851_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg852_1', c1, {c0: 3528, c1: 864}, None),
        MemoryDep('arg853_1', c1, {c0: 3528, c1: 864}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
    ]
]
op494.group.device = cuda:0
op494.group.iteration = (3048192, 1)
op494.sizes = ([3528, 864], [])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
arg850_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg851_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg852_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg853_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
class op494_loop_body:
    var_ranges = {z0: 3528, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg850_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg851_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg852_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg853_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf494', get_index_5, add_1, None)
        return store
op494_op540.snodes[1] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 3048192}, None)]
op540.unmet_dependencies = [MemoryDep('buf494', c0, {c0: 3048192}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (3048192, 1)
op540.sizes = ([3048192], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
class op540_loop_body:
    var_ranges = {z0: 3048192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf540', get_index_1, relu, None)
        return store


op495_op496: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op495_op496.writes = 
    [   MemoryDep('buf495', c0, {c0: 836352}, None),
        MemoryDep('buf496', c0, {c0: 836352}, None)]
op495_op496.unmet_dependencies = 
    [   MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3, {c0: 8, c1: 11, c2: 11, c3: 864}, None)]
op495_op496.met_dependencies = []
op495_op496.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf495.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf496.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op495_op496.snodes[0] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 836352}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3, {c0: 8, c1: 11, c2: 11, c3: 864}, None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf495.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (836352, 1)
op495.sizes = ([8, 11, 11, 864], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op495_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 19008
    index3 = 2*z2
    index4 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 18144
    index5 = 2*z2 + 1
    index6 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 17280
    index7 = 2*z1
    index8 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 864
    index9 = 381024*z0 + 36288*z1 + 1728*z2 + z3
    index10 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 864
    index11 = 2*z1 + 1
    index12 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 17280
    index13 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 18144
    index14 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 19008
    index15 = 104544*z0 + 9504*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf495', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf494', get_index)
        return load
op495_op496.snodes[1] =
op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 836352}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 + 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 17280, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 18144, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 19008, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3 - 864, {c0: 8, c1: 11, c2: 11, c3: 864}, None),
        MemoryDep('buf494', 381024*c0 + 36288*c1 + 1728*c2 + c3, {c0: 8, c1: 11, c2: 11, c3: 864}, None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf496.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (836352, 1)
op496.sizes = ([8, 11, 11, 864], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op496_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 19008
    index3 = 2*z2
    index4 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 18144
    index5 = 2*z2 + 1
    index6 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 17280
    index7 = 2*z1
    index8 = 381024*z0 + 36288*z1 + 1728*z2 + z3 - 864
    index9 = 381024*z0 + 36288*z1 + 1728*z2 + z3
    index10 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 864
    index11 = 2*z1 + 1
    index12 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 17280
    index13 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 18144
    index14 = 381024*z0 + 36288*z1 + 1728*z2 + z3 + 19008
    index15 = 104544*z0 + 9504*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(21, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(21, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__3 = ops.and_(ge_2, lt_2)
        and__4 = ops.and_(and__3, ge_3)
        and__5 = ops.and_(and__4, lt_3)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(21, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(21, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__6 = ops.and_(ge_4, lt_4)
        and__7 = ops.and_(and__6, ge_5)
        and__8 = ops.and_(and__7, lt_5)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(21, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(21, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__9 = ops.and_(ge_6, lt_6)
        and__10 = ops.and_(and__9, ge_7)
        and__11 = ops.and_(and__10, lt_7)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(21, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(21, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__12 = ops.and_(ge_8, lt_8)
        and__13 = ops.and_(and__12, ge_9)
        and__14 = ops.and_(and__13, lt_9)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(21, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(21, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__15 = ops.and_(ge_10, lt_10)
        and__16 = ops.and_(and__15, ge_11)
        and__17 = ops.and_(and__16, lt_11)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(21, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(21, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__18 = ops.and_(ge_12, lt_12)
        and__19 = ops.and_(and__18, ge_13)
        and__20 = ops.and_(and__19, lt_13)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(21, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(21, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__21 = ops.and_(ge_14, lt_14)
        and__22 = ops.and_(and__21, ge_15)
        and__23 = ops.and_(and__22, lt_15)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(21, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(21, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__24 = ops.and_(ge_16, lt_16)
        and__25 = ops.and_(and__24, ge_17)
        and__26 = ops.and_(and__25, lt_17)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf496', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf494', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf494', get_index)
        return load


op497: SchedulerNode(ComputedBuffer)
op497.writes = [   MemoryDep('buf497', 261360*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 121}, None)]
op497.unmet_dependencies = [   MemoryDep('buf491', 952576*c0 + 441*c1 + 42*c2 + 2*c3, {c0: 8, c1: 2160, c2: 11, c3: 11}, None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 11, 11], stride=[261360, 1, 23760, 2160])
    buf497.users = [NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (2090880, 1)
op497.sizes = ([8, 2160, 11, 11], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 11, 11], stride=[261360, 1, 23760, 2160])
class op497_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 11, z3: 11}
    index0 = 952576*z0 + 441*z1 + 42*z2 + 2*z3
    index1 = 261360*z0 + z1 + 23760*z2 + 2160*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        relu = ops.relu(load)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(relu, constant)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf497', get_index_1, mul, None)
        return store


op498: ExternKernelSchedulerNode(ExternKernelAlloc)
op498.writes = [StarDep(name='buf498', mode=None)]
op498.unmet_dependencies = [StarDep(name='buf497', mode=None)]
op498.met_dependencies = [StarDep(name='arg931_1', mode=None)]
op498.outputs = [
    buf498: ExternKernelAlloc
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 11, 11], stride=[52272, 1, 4752, 432])
    buf498.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op498.node.kernel = extern_kernels.convolution


op499: SchedulerNode(ComputedBuffer)
op499.writes = [   MemoryDep('buf499', 261360*c0 + c1 + 2160*c2, {c0: 8, c1: 2160, c2: 121}, None)]
op499.unmet_dependencies = [   MemoryDep('buf491', 952576*c0 + 441*c1 + 42*c2 + 2*c3 + 22, {c0: 8, c1: 2160, c2: 11, c3: 11}, None)]
op499.met_dependencies = []
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 11, 11], stride=[261360, 1, 23760, 2160])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (2090880, 1)
op499.sizes = ([8, 2160, 11, 11], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 21, 21], stride=[952576, 441, 21, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 2160, 11, 11], stride=[261360, 1, 23760, 2160])
class op499_loop_body:
    var_ranges = {z0: 8, z1: 2160, z2: 11, z3: 11}
    index0 = 2*z2 + 1
    index1 = 2*z3 + 1
    index2 = 952576*z0 + 441*z1 + 42*z2 + 2*z3 + 22
    index3 = 261360*z0 + z1 + 23760*z2 + 2160*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        constant_4 = ops.constant(1.0, torch.float32)
        mul = ops.mul(masked_subblock1, constant_4)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf499', get_index_4, mul, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf491', get_index)
        relu = ops.relu(load)
        return relu


op500: ExternKernelSchedulerNode(ExternKernelAlloc)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = [StarDep(name='buf499', mode=None)]
op500.met_dependencies = [StarDep(name='arg932_1', mode=None)]
op500.outputs = [
    buf500: ExternKernelAlloc
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 11, 11], stride=[52272, 1, 4752, 432])
    buf500.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op500.node.kernel = extern_kernels.convolution


op501_op553_op584: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op501_op553_op584.writes = 
    [   MemoryDep('buf501', c0, {c0: 836352}, None),
        MemoryDep('buf553', 104544*c0 + c1 + 864*c2, {c0: 8, c1: 864, c2: 121}, None),
        MemoryDep('buf584', 104544*c0 + c1 + 864*c2, {c0: 8, c1: 864, c2: 121}, None)]
op501_op553_op584.unmet_dependencies = 
    [   MemoryDep('buf498', 52272*c0 + 432*c2 + I, {c0: 8, c1: 864, c2: 121}, None),
        MemoryDep('buf500', 52272*c0 + 432*c2 + I, {c0: 8, c1: 864, c2: 121}, None)]
op501_op553_op584.met_dependencies = 
    [   MemoryDep('arg933_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg934_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg935_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg936_1', c1, {c0: 8, c1: 864}, None)]
op501_op553_op584.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
    ]
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf584.users = [NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op501_op553_op584.snodes[0] =
op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 836352}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf498', 52272*c0 + 432*c2 + I, {c0: 8, c1: 864, c2: 121}, None),
        MemoryDep('buf500', 52272*c0 + 432*c2 + I, {c0: 8, c1: 864, c2: 121}, None)]
op501.met_dependencies = 
    [   MemoryDep('arg933_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg934_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg935_1', c1, {c0: 8, c1: 864}, None),
        MemoryDep('arg936_1', c1, {c0: 8, c1: 864}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
    ]
]
op501.group.device = cuda:0
op501.group.iteration = (836352, 1)
op501.sizes = ([8, 864, 121], [])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 11, 11], stride=[52272, 1, 4752, 432])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 11, 11], stride=[52272, 1, 4752, 432])
arg933_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg934_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg935_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg936_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
class op501_loop_body:
    var_ranges = {z0: 8, z1: 864, z2: 121}
    index0 = z1
    index1 = 52272*z0 + 432*z2 + I
    index2 = 52272*z0 + 432*z2 + I
    index3 = 104544*z0 + 121*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(432, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(432, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(864, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg933_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg934_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg935_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg936_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf501', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf498', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf500', get_index)
        return load
op501_op553_op584.snodes[1] =
op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', 104544*c0 + c1 + 864*c2, {c0: 8, c1: 864, c2: 121}, None)]
op553.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 836352}, None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (836352, 1)
op553.sizes = ([8, 864, 121], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op553_loop_body:
    var_ranges = {z0: 8, z1: 864, z2: 121}
    index0 = 104544*z0 + 121*z1 + z2
    index1 = 104544*z0 + z1 + 864*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf553', get_index_1, relu, None)
        return store
op501_op553_op584.snodes[2] =
op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', 104544*c0 + c1 + 864*c2, {c0: 8, c1: 864, c2: 121}, None)]
op584.unmet_dependencies = [MemoryDep('buf501', c0, {c0: 836352}, None)]
op584.met_dependencies = []
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf584.users = [NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (836352, 1)
op584.sizes = ([8, 864, 121], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op584_loop_body:
    var_ranges = {z0: 8, z1: 864, z2: 121}
    index0 = 104544*z0 + 121*z1 + z2
    index1 = 104544*z0 + z1 + 864*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf584', get_index_1, relu, None)
        return store


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 836352}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf501', c0 + 1, {c0: 836352}, None),
        MemoryDep('buf501', c0 + 10, {c0: 836352}, None),
        MemoryDep('buf501', c0 + 11, {c0: 836352}, None),
        MemoryDep('buf501', c0 + 12, {c0: 836352}, None),
        MemoryDep('buf501', c0 - 1, {c0: 836352}, None),
        MemoryDep('buf501', c0 - 10, {c0: 836352}, None),
        MemoryDep('buf501', c0 - 11, {c0: 836352}, None),
        MemoryDep('buf501', c0 - 12, {c0: 836352}, None),
        MemoryDep('buf501', c0, {c0: 836352}, None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
    buf502.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (836352, 1)
op502.sizes = ([6912, 11, 11], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
class op502_loop_body:
    var_ranges = {z0: 6912, z1: 11, z2: 11}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 121*z0 + 11*z1 + z2 - 12
    index3 = z2
    index4 = 121*z0 + 11*z1 + z2 - 11
    index5 = z2 + 1
    index6 = 121*z0 + 11*z1 + z2 - 10
    index7 = z1
    index8 = 121*z0 + 11*z1 + z2 - 1
    index9 = 121*z0 + 11*z1 + z2
    index10 = 121*z0 + 11*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 121*z0 + 11*z1 + z2 + 10
    index13 = 121*z0 + 11*z1 + z2 + 11
    index14 = 121*z0 + 11*z1 + z2 + 12
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf502', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf501', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf501', get_index)
        return load


op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 4320000}, None)]
op503.unmet_dependencies = [   MemoryDep('buf452', 381024*c0 + 18144*c1 + c2 - 38016, {c0: 8, c1: 25, c2: 21600}, None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 25, 25], stride=[540000, 1, 21600, 864])
    buf503.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (4320000, 1)
op503.sizes = ([8, 25, 25, 864], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf503_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 25, 25], stride=[540000, 1, 21600, 864])
class op503_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 25, z3: 864}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 381024*z0 + 18144*z1 + 864*z2 + z3 - 38016
    index3 = 540000*z0 + 21600*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf503', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf452', get_index)
        relu = ops.relu(load)
        return relu


op504: ExternKernelSchedulerNode(ExternKernelAlloc)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = [StarDep(name='buf503', mode=None)]
op504.met_dependencies = [StarDep(name='arg854_1', mode=None)]
op504.outputs = [
    buf504: ExternKernelAlloc
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf504.users = [NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
]
op504.node.kernel = extern_kernels.convolution


op505: ExternKernelSchedulerNode(ExternKernelAlloc)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf504', mode=None)]
op505.met_dependencies = [StarDep(name='arg855_1', mode=None)]
op505.outputs = [
    buf505: ExternKernelAlloc
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf505.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False)]
]
op505.node.kernel = extern_kernels.convolution


op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 836352}, None)]
op506.unmet_dependencies = [MemoryDep('buf505', c0, {c0: 836352}, None)]
op506.met_dependencies = 
    [   MemoryDep('arg856_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg857_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg858_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg859_1', c1, {c0: 968, c1: 864}, None)]
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf506.users = [NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op506.group.device = cuda:0
op506.group.iteration = (836352, 1)
op506.sizes = ([968, 864], [])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg856_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg857_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg858_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg859_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op506_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg856_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg857_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg858_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg859_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf506', get_index_5, relu, None)
        return store


op507: ExternKernelSchedulerNode(ExternKernelAlloc)
op507.writes = [StarDep(name='buf507', mode=None)]
op507.unmet_dependencies = [StarDep(name='buf506', mode=None)]
op507.met_dependencies = [StarDep(name='arg860_1', mode=None)]
op507.outputs = [
    buf507: ExternKernelAlloc
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.node.kernel = extern_kernels.convolution


op508: ExternKernelSchedulerNode(ExternKernelAlloc)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='arg861_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelAlloc
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf508.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op508.node.kernel = extern_kernels.convolution


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 5038848}, None)]
op509.unmet_dependencies = [   MemoryDep('buf494', 381024*c0 + 18144*c1 + c2 - 57024, {c0: 8, c1: 27, c2: 23328}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 27, 27], stride=[629856, 1, 23328, 864])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (5038848, 1)
op509.sizes = ([8, 27, 27, 864], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 27, 27], stride=[629856, 1, 23328, 864])
class op509_loop_body:
    var_ranges = {z0: 8, z1: 27, z2: 27, z3: 864}
    index0 = z1 - 3
    index1 = z2 - 3
    index2 = 381024*z0 + 18144*z1 + 864*z2 + z3 - 57024
    index3 = 629856*z0 + 23328*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf509', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf494', get_index)
        relu = ops.relu(load)
        return relu


op510: ExternKernelSchedulerNode(ExternKernelAlloc)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = [StarDep(name='buf509', mode=None)]
op510.met_dependencies = [StarDep(name='arg866_1', mode=None)]
op510.outputs = [
    buf510: ExternKernelAlloc
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf510.users = [NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op510.node.kernel = extern_kernels.convolution


op511: ExternKernelSchedulerNode(ExternKernelAlloc)
op511.writes = [StarDep(name='buf511', mode=None)]
op511.unmet_dependencies = [StarDep(name='buf510', mode=None)]
op511.met_dependencies = [StarDep(name='arg867_1', mode=None)]
op511.outputs = [
    buf511: ExternKernelAlloc
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf511.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False)]
]
op511.node.kernel = extern_kernels.convolution


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 836352}, None)]
op512.unmet_dependencies = [MemoryDep('buf511', c0, {c0: 836352}, None)]
op512.met_dependencies = 
    [   MemoryDep('arg868_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg869_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg870_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg871_1', c1, {c0: 968, c1: 864}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (836352, 1)
op512.sizes = ([968, 864], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg868_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg869_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg870_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg871_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op512_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg868_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg869_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg870_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg871_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf512', get_index_5, relu, None)
        return store


op513: ExternKernelSchedulerNode(ExternKernelAlloc)
op513.writes = [StarDep(name='buf513', mode=None)]
op513.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op513.met_dependencies = [StarDep(name='arg872_1', mode=None)]
op513.outputs = [
    buf513: ExternKernelAlloc
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.node.kernel = extern_kernels.convolution


op514: ExternKernelSchedulerNode(ExternKernelAlloc)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op514.met_dependencies = [StarDep(name='arg873_1', mode=None)]
op514.outputs = [
    buf514: ExternKernelAlloc
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf514.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op514.node.kernel = extern_kernels.convolution


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 4320000}, None)]
op515.unmet_dependencies = [   MemoryDep('buf494', 381024*c0 + 18144*c1 + c2 - 38016, {c0: 8, c1: 25, c2: 21600}, None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 25, 25], stride=[540000, 1, 21600, 864])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (4320000, 1)
op515.sizes = ([8, 25, 25, 864], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 25, 25], stride=[540000, 1, 21600, 864])
class op515_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 25, z3: 864}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 381024*z0 + 18144*z1 + 864*z2 + z3 - 38016
    index3 = 540000*z0 + 21600*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf515', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf494', get_index)
        relu = ops.relu(load)
        return relu


op516: ExternKernelSchedulerNode(ExternKernelAlloc)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='arg878_1', mode=None)]
op516.outputs = [
    buf516: ExternKernelAlloc
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op517'), can_inplace=False, is_weak=False)]
]
op516.node.kernel = extern_kernels.convolution


op517: ExternKernelSchedulerNode(ExternKernelAlloc)
op517.writes = [StarDep(name='buf517', mode=None)]
op517.unmet_dependencies = [StarDep(name='buf516', mode=None)]
op517.met_dependencies = [StarDep(name='arg879_1', mode=None)]
op517.outputs = [
    buf517: ExternKernelAlloc
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf517.users = [NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False)]
]
op517.node.kernel = extern_kernels.convolution


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 836352}, None)]
op518.unmet_dependencies = [MemoryDep('buf517', c0, {c0: 836352}, None)]
op518.met_dependencies = 
    [   MemoryDep('arg880_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg881_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg882_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg883_1', c1, {c0: 968, c1: 864}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf518.users = [NodeUser(node=ExternKernelSchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (836352, 1)
op518.sizes = ([968, 864], [])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg880_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg881_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg882_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg883_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op518_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg880_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg881_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg882_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg883_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf518', get_index_5, relu, None)
        return store


op519: ExternKernelSchedulerNode(ExternKernelAlloc)
op519.writes = [StarDep(name='buf519', mode=None)]
op519.unmet_dependencies = [StarDep(name='buf518', mode=None)]
op519.met_dependencies = [StarDep(name='arg884_1', mode=None)]
op519.outputs = [
    buf519: ExternKernelAlloc
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op519.node.kernel = extern_kernels.convolution


op520: ExternKernelSchedulerNode(ExternKernelAlloc)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf519', mode=None)]
op520.met_dependencies = [StarDep(name='arg885_1', mode=None)]
op520.outputs = [
    buf520: ExternKernelAlloc
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf520.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False)]
]
op520.node.kernel = extern_kernels.convolution


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 3656448}, None)]
op521.unmet_dependencies = [   MemoryDep('buf494', 381024*c0 + 18144*c1 + c2 - 19008, {c0: 8, c1: 23, c2: 19872}, None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 23, 23], stride=[457056, 1, 19872, 864])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (3656448, 1)
op521.sizes = ([8, 23, 23, 864], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf521_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 23, 23], stride=[457056, 1, 19872, 864])
class op521_loop_body:
    var_ranges = {z0: 8, z1: 23, z2: 23, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 18144*z1 + 864*z2 + z3 - 19008
    index3 = 457056*z0 + 19872*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf521', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf494', get_index)
        relu = ops.relu(load)
        return relu


op522: ExternKernelSchedulerNode(ExternKernelAlloc)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op522.met_dependencies = [StarDep(name='arg890_1', mode=None)]
op522.outputs = [
    buf522: ExternKernelAlloc
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.node.kernel = extern_kernels.convolution


op523: ExternKernelSchedulerNode(ExternKernelAlloc)
op523.writes = [StarDep(name='buf523', mode=None)]
op523.unmet_dependencies = [StarDep(name='buf522', mode=None)]
op523.met_dependencies = [StarDep(name='arg891_1', mode=None)]
op523.outputs = [
    buf523: ExternKernelAlloc
    buf523.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf523.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False)]
]
op523.node.kernel = extern_kernels.convolution


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 836352}, None)]
op524.unmet_dependencies = [MemoryDep('buf523', c0, {c0: 836352}, None)]
op524.met_dependencies = 
    [   MemoryDep('arg892_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg893_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg894_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg895_1', c1, {c0: 968, c1: 864}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (836352, 1)
op524.sizes = ([968, 864], [])
buf523_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg892_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg893_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg894_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg895_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op524_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg892_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg893_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg894_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg895_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf524', get_index_5, relu, None)
        return store


op525: ExternKernelSchedulerNode(ExternKernelAlloc)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf524', mode=None)]
op525.met_dependencies = [StarDep(name='arg896_1', mode=None)]
op525.outputs = [
    buf525: ExternKernelAlloc
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf525.users = [NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op525.node.kernel = extern_kernels.convolution


op526: ExternKernelSchedulerNode(ExternKernelAlloc)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op526.met_dependencies = [StarDep(name='arg897_1', mode=None)]
op526.outputs = [
    buf526: ExternKernelAlloc
    buf526.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf526.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False)]
]
op526.node.kernel = extern_kernels.convolution


op527_op528: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op527_op528.writes = 
    [   MemoryDep('buf527', c0, {c0: 836352}, None),
        MemoryDep('buf528', c0, {c0: 836352}, None)]
op527_op528.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 836352}, None),
        MemoryDep('buf526', c0, {c0: 836352}, None)]
op527_op528.met_dependencies = 
    [   MemoryDep('arg886_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg887_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg888_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg889_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg898_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg899_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg900_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg901_1', c1, {c0: 968, c1: 864}, None)]
op527_op528.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
    ]
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op527_op528.snodes[0] =
op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 836352}, None)]
op527.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 836352}, None),
        MemoryDep('buf526', c0, {c0: 836352}, None)]
op527.met_dependencies = 
    [   MemoryDep('arg886_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg887_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg888_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg889_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg898_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg899_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg900_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg901_1', c1, {c0: 968, c1: 864}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
    ]
]
op527.group.device = cuda:0
op527.group.iteration = (836352, 1)
op527.sizes = ([968, 864], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg886_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg887_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg888_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg889_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg898_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg899_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg900_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg901_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op527_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg886_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg887_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg888_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg889_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf526', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg898_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg899_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg900_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg901_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf527', get_index_10, add_4, None)
        return store
op527_op528.snodes[1] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 836352}, None)]
op528.unmet_dependencies = [MemoryDep('buf527', c0, {c0: 836352}, None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (836352, 1)
op528.sizes = ([836352], [])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op528_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf528', get_index_1, relu, None)
        return store


op529: ExternKernelSchedulerNode(ExternKernelAlloc)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = [StarDep(name='buf528', mode=None)]
op529.met_dependencies = [StarDep(name='arg902_1', mode=None)]
op529.outputs = [
    buf529: ExternKernelAlloc
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.node.kernel = extern_kernels.convolution


op530: ExternKernelSchedulerNode(ExternKernelAlloc)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op530.met_dependencies = [StarDep(name='arg903_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelAlloc
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False)]
]
op530.node.kernel = extern_kernels.convolution


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 836352}, None)]
op531.unmet_dependencies = [MemoryDep('buf530', c0, {c0: 836352}, None)]
op531.met_dependencies = 
    [   MemoryDep('arg904_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg905_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg906_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg907_1', c1, {c0: 968, c1: 864}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf531.users = [NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op531.group.device = cuda:0
op531.group.iteration = (836352, 1)
op531.sizes = ([968, 864], [])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg904_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg905_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg906_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg907_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op531_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg904_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg905_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg906_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg907_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf531', get_index_5, relu, None)
        return store


op532: ExternKernelSchedulerNode(ExternKernelAlloc)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op532.met_dependencies = [StarDep(name='arg908_1', mode=None)]
op532.outputs = [
    buf532: ExternKernelAlloc
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op532.node.kernel = extern_kernels.convolution


op533: ExternKernelSchedulerNode(ExternKernelAlloc)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op533.met_dependencies = [StarDep(name='arg909_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelAlloc
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf533.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op533.node.kernel = extern_kernels.convolution


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 3656448}, None)]
op534.unmet_dependencies = [   MemoryDep('buf452', 381024*c0 + 18144*c1 + c2 - 19008, {c0: 8, c1: 23, c2: 19872}, None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 23, 23], stride=[457056, 1, 19872, 864])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (3656448, 1)
op534.sizes = ([8, 23, 23, 864], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 21, 21], stride=[381024, 1, 18144, 864])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 23, 23], stride=[457056, 1, 19872, 864])
class op534_loop_body:
    var_ranges = {z0: 8, z1: 23, z2: 23, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 381024*z0 + 18144*z1 + 864*z2 + z3 - 19008
    index3 = 457056*z0 + 19872*z1 + 864*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(21, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(21, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf534', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf452', get_index)
        relu = ops.relu(load)
        return relu


op535: ExternKernelSchedulerNode(ExternKernelAlloc)
op535.writes = [StarDep(name='buf535', mode=None)]
op535.unmet_dependencies = [StarDep(name='buf534', mode=None)]
op535.met_dependencies = [StarDep(name='arg914_1', mode=None)]
op535.outputs = [
    buf535: ExternKernelAlloc
    buf535.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.node.kernel = extern_kernels.convolution


op536: ExternKernelSchedulerNode(ExternKernelAlloc)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf535', mode=None)]
op536.met_dependencies = [StarDep(name='arg915_1', mode=None)]
op536.outputs = [
    buf536: ExternKernelAlloc
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf536.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False)]
]
op536.node.kernel = extern_kernels.convolution


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 836352}, None)]
op537.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 836352}, None)]
op537.met_dependencies = 
    [   MemoryDep('arg916_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg917_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg918_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg919_1', c1, {c0: 968, c1: 864}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf537.users = [NodeUser(node=ExternKernelSchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (836352, 1)
op537.sizes = ([968, 864], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg916_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg917_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg918_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg919_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op537_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg916_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg917_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg918_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg919_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf537', get_index_5, relu, None)
        return store


op538: ExternKernelSchedulerNode(ExternKernelAlloc)
op538.writes = [StarDep(name='buf538', mode=None)]
op538.unmet_dependencies = [StarDep(name='buf537', mode=None)]
op538.met_dependencies = [StarDep(name='arg920_1', mode=None)]
op538.outputs = [
    buf538: ExternKernelAlloc
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op538.node.kernel = extern_kernels.convolution


op539: ExternKernelSchedulerNode(ExternKernelAlloc)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf538', mode=None)]
op539.met_dependencies = [StarDep(name='arg921_1', mode=None)]
op539.outputs = [
    buf539: ExternKernelAlloc
    buf539.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf539.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op539.node.kernel = extern_kernels.convolution


op541: ExternKernelSchedulerNode(ExternKernelAlloc)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf540', mode=None)]
op541.met_dependencies = [StarDep(name='arg926_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelAlloc
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.convolution


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 836352}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf539', c0, {c0: 836352}, None),
        MemoryDep('buf541', c0, {c0: 836352}, None)]
op542.met_dependencies = 
    [   MemoryDep('arg922_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg923_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg924_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg925_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg927_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg928_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg929_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg930_1', c1, {c0: 968, c1: 864}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (836352, 1)
op542.sizes = ([968, 864], [])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg922_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg923_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg924_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg925_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg927_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg928_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg929_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg930_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op542_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg922_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg923_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg924_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg925_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf541', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg927_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg928_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg929_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg930_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf542', get_index_10, add_4, None)
        return store


op543_op544_op549: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op543_op544_op549.writes = 
    [   MemoryDep('buf543', c0, {c0: 4181760}, None),
        MemoryDep('buf544', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf549', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op543_op544_op549.unmet_dependencies = 
    [   MemoryDep('buf453', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf495', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf496', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf508', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf514', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf527', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf533', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf542', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op543_op544_op549.met_dependencies = 
    [   MemoryDep('arg862_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg863_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg864_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg865_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg874_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg875_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg876_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg877_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg910_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg911_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg912_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg913_1', I, {c0: 8, c1: 4320}, None)]
op543_op544_op549.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf543.users = [
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
    ]
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf544.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf549.users = [NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False)]
]
op543_op544_op549.snodes[0] =
op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 4181760}, None)]
op543.unmet_dependencies = 
    [   MemoryDep('buf453', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf495', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf496', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf508', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf514', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf527', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf533', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf542', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op543.met_dependencies = 
    [   MemoryDep('arg862_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg863_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg864_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg865_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg874_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg875_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg876_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg877_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg910_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg911_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg912_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg913_1', I, {c0: 8, c1: 4320}, None)]
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf543.users = [
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
    ]
]
op543.group.device = cuda:0
op543.group.iteration = (4181760, 1)
op543.sizes = ([8, 4320, 121], [])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg862_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg863_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg864_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg865_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg874_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg875_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg876_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg877_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg910_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg911_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg912_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg913_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
class op543_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = z1
    index1 = 104544*z0 + 864*z2 + I
    index2 = I
    index3 = 104544*z0 + 864*z2 + I
    index4 = I
    index5 = 104544*z0 + 864*z2 + I
    index6 = 104544*z0 + 864*z2 + I
    index7 = I
    index8 = 104544*z0 + 864*z2 + I
    index9 = 522720*z0 + 121*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(864, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(864, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1728, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1728, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2592, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(2592, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(3456, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(3456, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(4320, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index9')
        store = ops.store('buf543', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg862_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg863_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg864_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg865_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf453', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg874_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg875_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg876_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg877_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf495', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf527', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg910_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg911_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg912_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg913_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf496', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf542', get_index)
        return load
op543_op544_op549.snodes[1] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [   MemoryDep('buf544', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op544.unmet_dependencies = [MemoryDep('buf543', c0, {c0: 4181760}, None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf544.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (4181760, 1)
op544.sizes = ([8, 4320, 121], [])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
class op544_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = 522720*z0 + 121*z1 + z2
    index1 = 522720*z0 + z1 + 4320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf543', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf544', get_index_1, relu, None)
        return store
op543_op544_op549.snodes[2] =
op549: SchedulerNode(ComputedBuffer)
op549.writes = [   MemoryDep('buf549', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op549.unmet_dependencies = [MemoryDep('buf543', c0, {c0: 4181760}, None)]
op549.met_dependencies = []
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf549.users = [NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (4181760, 1)
op549.sizes = ([8, 4320, 121], [])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
class op549_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = 522720*z0 + 121*z1 + z2
    index1 = 522720*z0 + z1 + 4320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf543', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf549', get_index_1, relu, None)
        return store


op545: ExternKernelSchedulerNode(ExternKernelAlloc)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf544', mode=None)]
op545.met_dependencies = [StarDep(name='arg937_1', mode=None)]
op545.outputs = [
    buf545: ExternKernelAlloc
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf545.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False)]
]
op545.node.kernel = extern_kernels.convolution


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 836352}, None)]
op546.unmet_dependencies = [MemoryDep('buf545', c0, {c0: 836352}, None)]
op546.met_dependencies = 
    [   MemoryDep('arg938_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg939_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg940_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg941_1', c1, {c0: 968, c1: 864}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf546.users = [
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
    ]
]
op546.group.device = cuda:0
op546.group.iteration = (836352, 1)
op546.sizes = ([968, 864], [])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg938_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg939_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg940_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg941_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op546_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg938_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg939_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg940_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg941_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf546', get_index_5, add_1, None)
        return store


op547_op548_op559_op565_op571: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op547_op548_op559_op565_op571.writes = 
    [   MemoryDep('buf547', c0, {c0: 836352}, None),
        MemoryDep('buf548', c0, {c0: 836352}, None),
        MemoryDep('buf559', c0, {c0: 836352}, None),
        MemoryDep('buf565', c0, {c0: 836352}, None),
        MemoryDep('buf571', c0, {c0: 836352}, None)]
op547_op548_op559_op565_op571.unmet_dependencies = 
    [   MemoryDep('buf546', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0, {c0: 836352}, None)]
op547_op548_op559_op565_op571.met_dependencies = []
op547_op548_op559_op565_op571.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf547.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf548.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op547_op548_op559_op565_op571.snodes[0] =
op547: SchedulerNode(ComputedBuffer)
op547.writes = [MemoryDep('buf547', c0, {c0: 836352}, None)]
op547.unmet_dependencies = 
    [   MemoryDep('buf546', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0, {c0: 836352}, None)]
op547.met_dependencies = []
op547.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf547.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op547.group.device = cuda:0
op547.group.iteration = (836352, 1)
op547.sizes = ([8, 11, 11, 864], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op547_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf547', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf546', get_index)
        return load
op547_op548_op559_op565_op571.snodes[1] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 836352}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf546', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf546', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf546', c0, {c0: 836352}, None)]
op548.met_dependencies = []
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf548.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (836352, 1)
op548.sizes = ([8, 11, 11, 864], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op548_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf548', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf546', get_index)
        return load
op547_op548_op559_op565_op571.snodes[2] =
op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 836352}, None)]
op559.unmet_dependencies = [MemoryDep('buf546', c0, {c0: 836352}, None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (836352, 1)
op559.sizes = ([836352], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op559_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf559', get_index_1, relu, None)
        return store
op547_op548_op559_op565_op571.snodes[3] =
op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 836352}, None)]
op565.unmet_dependencies = [MemoryDep('buf546', c0, {c0: 836352}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (836352, 1)
op565.sizes = ([836352], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op565_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf565', get_index_1, relu, None)
        return store
op547_op548_op559_op565_op571.snodes[4] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 836352}, None)]
op571.unmet_dependencies = [MemoryDep('buf546', c0, {c0: 836352}, None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (836352, 1)
op571.sizes = ([836352], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op571_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf571', get_index_1, relu, None)
        return store


op550: ExternKernelSchedulerNode(ExternKernelAlloc)
op550.writes = [StarDep(name='buf550', mode=None)]
op550.unmet_dependencies = [StarDep(name='buf549', mode=None)]
op550.met_dependencies = [StarDep(name='arg1014_1', mode=None)]
op550.outputs = [
    buf550: ExternKernelAlloc
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf550.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False)]
]
op550.node.kernel = extern_kernels.convolution


op551_op600_op631: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op551_op600_op631.writes = 
    [   MemoryDep('buf551', c0, {c0: 836352}, None),
        MemoryDep('buf600', c0, {c0: 836352}, None),
        MemoryDep('buf631', c0, {c0: 836352}, None)]
op551_op600_op631.unmet_dependencies = [MemoryDep('buf550', c0, {c0: 836352}, None)]
op551_op600_op631.met_dependencies = 
    [   MemoryDep('arg1015_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1016_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1017_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1018_1', c1, {c0: 968, c1: 864}, None)]
op551_op600_op631.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False),
    ]
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf600.users = [NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op551_op600_op631.snodes[0] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 836352}, None)]
op551.unmet_dependencies = [MemoryDep('buf550', c0, {c0: 836352}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg1015_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1016_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1017_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1018_1', c1, {c0: 968, c1: 864}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (836352, 1)
op551.sizes = ([968, 864], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1015_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1016_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1017_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1018_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op551_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1015_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1016_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1017_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1018_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf551', get_index_5, add_1, None)
        return store
op551_op600_op631.snodes[1] =
op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 836352}, None)]
op600.unmet_dependencies = [MemoryDep('buf551', c0, {c0: 836352}, None)]
op600.met_dependencies = []
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf600.users = [NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (836352, 1)
op600.sizes = ([836352], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op600_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf600', get_index_1, relu, None)
        return store
op551_op600_op631.snodes[2] =
op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 836352}, None)]
op631.unmet_dependencies = [MemoryDep('buf551', c0, {c0: 836352}, None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op631.group.device = cuda:0
op631.group.iteration = (836352, 1)
op631.sizes = ([836352], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op631_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf631', get_index_1, relu, None)
        return store


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 836352}, None)]
op552.unmet_dependencies = 
    [   MemoryDep('buf551', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf551', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf551', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf551', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf551', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf551', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf551', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf551', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf551', c0, {c0: 836352}, None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf552.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (836352, 1)
op552.sizes = ([8, 11, 11, 864], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf552_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op552_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf552', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf551', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf551', get_index)
        return load


op554: ExternKernelSchedulerNode(ExternKernelAlloc)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op554.met_dependencies = [StarDep(name='arg942_1', mode=None)]
op554.outputs = [
    buf554: ExternKernelAlloc
    buf554.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf554.users = [NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op554.node.kernel = extern_kernels.convolution


op555: ExternKernelSchedulerNode(ExternKernelAlloc)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf554', mode=None)]
op555.met_dependencies = [StarDep(name='arg943_1', mode=None)]
op555.outputs = [
    buf555: ExternKernelAlloc
    buf555.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False)]
]
op555.node.kernel = extern_kernels.convolution


op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 836352}, None)]
op556.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 836352}, None)]
op556.met_dependencies = 
    [   MemoryDep('arg944_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg945_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg946_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg947_1', c1, {c0: 968, c1: 864}, None)]
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf556.users = [NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False)]
]
op556.group.device = cuda:0
op556.group.iteration = (836352, 1)
op556.sizes = ([968, 864], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg944_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg945_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg946_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg947_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op556_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg944_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg945_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg946_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg947_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf556', get_index_5, relu, None)
        return store


op557: ExternKernelSchedulerNode(ExternKernelAlloc)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf556', mode=None)]
op557.met_dependencies = [StarDep(name='arg948_1', mode=None)]
op557.outputs = [
    buf557: ExternKernelAlloc
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = extern_kernels.convolution


op558: ExternKernelSchedulerNode(ExternKernelAlloc)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf557', mode=None)]
op558.met_dependencies = [StarDep(name='arg949_1', mode=None)]
op558.outputs = [
    buf558: ExternKernelAlloc
    buf558.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf558.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op558.node.kernel = extern_kernels.convolution


op560: ExternKernelSchedulerNode(ExternKernelAlloc)
op560.writes = [StarDep(name='buf560', mode=None)]
op560.unmet_dependencies = [StarDep(name='buf559', mode=None)]
op560.met_dependencies = [StarDep(name='arg954_1', mode=None)]
op560.outputs = [
    buf560: ExternKernelAlloc
    buf560.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf560.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op560.node.kernel = extern_kernels.convolution


op561: ExternKernelSchedulerNode(ExternKernelAlloc)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf560', mode=None)]
op561.met_dependencies = [StarDep(name='arg955_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelAlloc
    buf561.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf561.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False)]
]
op561.node.kernel = extern_kernels.convolution


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 836352}, None)]
op562.unmet_dependencies = [MemoryDep('buf561', c0, {c0: 836352}, None)]
op562.met_dependencies = 
    [   MemoryDep('arg956_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg957_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg958_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg959_1', c1, {c0: 968, c1: 864}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf562.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (836352, 1)
op562.sizes = ([968, 864], [])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg956_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg957_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg958_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg959_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op562_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg956_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg957_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg958_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg959_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf562', get_index_5, relu, None)
        return store


op563: ExternKernelSchedulerNode(ExternKernelAlloc)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op563.met_dependencies = [StarDep(name='arg960_1', mode=None)]
op563.outputs = [
    buf563: ExternKernelAlloc
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = extern_kernels.convolution


op564: ExternKernelSchedulerNode(ExternKernelAlloc)
op564.writes = [StarDep(name='buf564', mode=None)]
op564.unmet_dependencies = [StarDep(name='buf563', mode=None)]
op564.met_dependencies = [StarDep(name='arg961_1', mode=None)]
op564.outputs = [
    buf564: ExternKernelAlloc
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf564.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op564.node.kernel = extern_kernels.convolution


op566: ExternKernelSchedulerNode(ExternKernelAlloc)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf565', mode=None)]
op566.met_dependencies = [StarDep(name='arg966_1', mode=None)]
op566.outputs = [
    buf566: ExternKernelAlloc
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf566.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op566.node.kernel = extern_kernels.convolution


op567: ExternKernelSchedulerNode(ExternKernelAlloc)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op567.met_dependencies = [StarDep(name='arg967_1', mode=None)]
op567.outputs = [
    buf567: ExternKernelAlloc
    buf567.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf567.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False)]
]
op567.node.kernel = extern_kernels.convolution


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 836352}, None)]
op568.unmet_dependencies = [MemoryDep('buf567', c0, {c0: 836352}, None)]
op568.met_dependencies = 
    [   MemoryDep('arg968_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg969_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg970_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg971_1', c1, {c0: 968, c1: 864}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (836352, 1)
op568.sizes = ([968, 864], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg968_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg969_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg970_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg971_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op568_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg968_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg969_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg970_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg971_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf568', get_index_5, relu, None)
        return store


op569: ExternKernelSchedulerNode(ExternKernelAlloc)
op569.writes = [StarDep(name='buf569', mode=None)]
op569.unmet_dependencies = [StarDep(name='buf568', mode=None)]
op569.met_dependencies = [StarDep(name='arg972_1', mode=None)]
op569.outputs = [
    buf569: ExternKernelAlloc
    buf569.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf569.users = [NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op569.node.kernel = extern_kernels.convolution


op570: ExternKernelSchedulerNode(ExternKernelAlloc)
op570.writes = [StarDep(name='buf570', mode=None)]
op570.unmet_dependencies = [StarDep(name='buf569', mode=None)]
op570.met_dependencies = [StarDep(name='arg973_1', mode=None)]
op570.outputs = [
    buf570: ExternKernelAlloc
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf570.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False)]
]
op570.node.kernel = extern_kernels.convolution


op572: ExternKernelSchedulerNode(ExternKernelAlloc)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op572.met_dependencies = [StarDep(name='arg978_1', mode=None)]
op572.outputs = [
    buf572: ExternKernelAlloc
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf572.users = [NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op572.node.kernel = extern_kernels.convolution


op573: ExternKernelSchedulerNode(ExternKernelAlloc)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf572', mode=None)]
op573.met_dependencies = [StarDep(name='arg979_1', mode=None)]
op573.outputs = [
    buf573: ExternKernelAlloc
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf573.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=True, is_weak=False)]
]
op573.node.kernel = extern_kernels.convolution


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 836352}, None)]
op574.unmet_dependencies = [MemoryDep('buf573', c0, {c0: 836352}, None)]
op574.met_dependencies = 
    [   MemoryDep('arg980_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg981_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg982_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg983_1', c1, {c0: 968, c1: 864}, None)]
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (836352, 1)
op574.sizes = ([968, 864], [])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg980_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg981_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg982_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg983_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op574_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg980_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg981_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg982_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg983_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf574', get_index_5, relu, None)
        return store


op575: ExternKernelSchedulerNode(ExternKernelAlloc)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf574', mode=None)]
op575.met_dependencies = [StarDep(name='arg984_1', mode=None)]
op575.outputs = [
    buf575: ExternKernelAlloc
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op575.node.kernel = extern_kernels.convolution


op576: ExternKernelSchedulerNode(ExternKernelAlloc)
op576.writes = [StarDep(name='buf576', mode=None)]
op576.unmet_dependencies = [StarDep(name='buf575', mode=None)]
op576.met_dependencies = [StarDep(name='arg985_1', mode=None)]
op576.outputs = [
    buf576: ExternKernelAlloc
    buf576.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False)]
]
op576.node.kernel = extern_kernels.convolution


op577_op578: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op577_op578.writes = 
    [   MemoryDep('buf577', c0, {c0: 836352}, None),
        MemoryDep('buf578', c0, {c0: 836352}, None)]
op577_op578.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 836352}, None),
        MemoryDep('buf576', c0, {c0: 836352}, None)]
op577_op578.met_dependencies = 
    [   MemoryDep('arg974_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg975_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg976_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg977_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg986_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg987_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg988_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg989_1', c1, {c0: 968, c1: 864}, None)]
op577_op578.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf577.users = [
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
    ]
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf578.users = [NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op577_op578.snodes[0] =
op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 836352}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 836352}, None),
        MemoryDep('buf576', c0, {c0: 836352}, None)]
op577.met_dependencies = 
    [   MemoryDep('arg974_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg975_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg976_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg977_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg986_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg987_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg988_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg989_1', c1, {c0: 968, c1: 864}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf577.users = [
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (836352, 1)
op577.sizes = ([968, 864], [])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg974_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg975_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg976_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg977_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg986_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg987_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg988_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg989_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op577_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg974_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg975_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg976_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg977_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf576', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg986_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg987_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg988_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg989_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf577', get_index_10, add_4, None)
        return store
op577_op578.snodes[1] =
op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 836352}, None)]
op578.unmet_dependencies = [MemoryDep('buf577', c0, {c0: 836352}, None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf578.users = [NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op578.group.device = cuda:0
op578.group.iteration = (836352, 1)
op578.sizes = ([836352], [])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf578_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op578_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf578', get_index_1, relu, None)
        return store


op579: ExternKernelSchedulerNode(ExternKernelAlloc)
op579.writes = [StarDep(name='buf579', mode=None)]
op579.unmet_dependencies = [StarDep(name='buf578', mode=None)]
op579.met_dependencies = [StarDep(name='arg990_1', mode=None)]
op579.outputs = [
    buf579: ExternKernelAlloc
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.node.kernel = extern_kernels.convolution


op580: ExternKernelSchedulerNode(ExternKernelAlloc)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op580.met_dependencies = [StarDep(name='arg991_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelAlloc
    buf580.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf580.users = [NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False)]
]
op580.node.kernel = extern_kernels.convolution


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 836352}, None)]
op581.unmet_dependencies = [MemoryDep('buf580', c0, {c0: 836352}, None)]
op581.met_dependencies = 
    [   MemoryDep('arg992_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg993_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg994_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg995_1', c1, {c0: 968, c1: 864}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf581.users = [NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op581.group.device = cuda:0
op581.group.iteration = (836352, 1)
op581.sizes = ([968, 864], [])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg992_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg993_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg994_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg995_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op581_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg992_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg993_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg994_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg995_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf581', get_index_5, relu, None)
        return store


op582: ExternKernelSchedulerNode(ExternKernelAlloc)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf581', mode=None)]
op582.met_dependencies = [StarDep(name='arg996_1', mode=None)]
op582.outputs = [
    buf582: ExternKernelAlloc
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op582.node.kernel = extern_kernels.convolution


op583: ExternKernelSchedulerNode(ExternKernelAlloc)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf582', mode=None)]
op583.met_dependencies = [StarDep(name='arg997_1', mode=None)]
op583.outputs = [
    buf583: ExternKernelAlloc
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf583.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op583.node.kernel = extern_kernels.convolution


op585: ExternKernelSchedulerNode(ExternKernelAlloc)
op585.writes = [StarDep(name='buf585', mode=None)]
op585.unmet_dependencies = [StarDep(name='buf584', mode=None)]
op585.met_dependencies = [StarDep(name='arg1002_1', mode=None)]
op585.outputs = [
    buf585: ExternKernelAlloc
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf585.users = [NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op585.node.kernel = extern_kernels.convolution


op586: ExternKernelSchedulerNode(ExternKernelAlloc)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf585', mode=None)]
op586.met_dependencies = [StarDep(name='arg1003_1', mode=None)]
op586.outputs = [
    buf586: ExternKernelAlloc
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf586.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False)]
]
op586.node.kernel = extern_kernels.convolution


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 836352}, None)]
op587.unmet_dependencies = [MemoryDep('buf586', c0, {c0: 836352}, None)]
op587.met_dependencies = 
    [   MemoryDep('arg1004_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1005_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1006_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1007_1', c1, {c0: 968, c1: 864}, None)]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf587.users = [NodeUser(node=ExternKernelSchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (836352, 1)
op587.sizes = ([968, 864], [])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1004_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1005_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1006_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1007_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op587_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf586', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1004_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1005_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1006_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1007_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf587', get_index_5, relu, None)
        return store


op588: ExternKernelSchedulerNode(ExternKernelAlloc)
op588.writes = [StarDep(name='buf588', mode=None)]
op588.unmet_dependencies = [StarDep(name='buf587', mode=None)]
op588.met_dependencies = [StarDep(name='arg1008_1', mode=None)]
op588.outputs = [
    buf588: ExternKernelAlloc
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.node.kernel = extern_kernels.convolution


op589: ExternKernelSchedulerNode(ExternKernelAlloc)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf588', mode=None)]
op589.met_dependencies = [StarDep(name='arg1009_1', mode=None)]
op589.outputs = [
    buf589: ExternKernelAlloc
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.node.kernel = extern_kernels.convolution


op590_op591_op596: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op590_op591_op596.writes = 
    [   MemoryDep('buf590', c0, {c0: 4181760}, None),
        MemoryDep('buf591', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf596', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op590_op591_op596.unmet_dependencies = 
    [   MemoryDep('buf502', 104544*c0 + c2 + 121*I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf546', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf547', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf548', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf558', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf564', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf577', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf583', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf589', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op590_op591_op596.met_dependencies = 
    [   MemoryDep('arg1000_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1001_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1010_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1011_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1012_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1013_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg950_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg951_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg952_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg953_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg962_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg963_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg964_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg965_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg998_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg999_1', I, {c0: 8, c1: 4320}, None)]
op590_op591_op596.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf590.users = [
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
    ]
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op590_op591_op596.snodes[0] =
op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 4181760}, None)]
op590.unmet_dependencies = 
    [   MemoryDep('buf502', 104544*c0 + c2 + 121*I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf546', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf547', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf548', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf558', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf564', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf577', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf583', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf589', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op590.met_dependencies = 
    [   MemoryDep('arg1000_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1001_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1010_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1011_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1012_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1013_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg950_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg951_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg952_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg953_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg962_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg963_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg964_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg965_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg998_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg999_1', I, {c0: 8, c1: 4320}, None)]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf590.users = [
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
    ]
]
op590.group.device = cuda:0
op590.group.iteration = (4181760, 1)
op590.sizes = ([8, 4320, 121], [])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg950_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg951_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg952_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg953_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 121, 11, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg962_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg963_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg964_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg965_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg998_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg999_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1000_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1001_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1010_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1011_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1012_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1013_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
class op590_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = z1
    index1 = 104544*z0 + 864*z2 + I
    index2 = I
    index3 = 104544*z0 + z2 + 121*I
    index4 = 104544*z0 + 864*z2 + I
    index5 = I
    index6 = 104544*z0 + 864*z2 + I
    index7 = 104544*z0 + 864*z2 + I
    index8 = I
    index9 = 104544*z0 + 864*z2 + I
    index10 = I
    index11 = 522720*z0 + 121*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(864, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(864, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1728, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1728, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2592, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(2592, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(3456, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(3456, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(4320, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index11')
        store = ops.store('buf590', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf558', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg950_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg951_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg952_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg953_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf502', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg962_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index5')
        load_2 = ops.load('arg963_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index5')
        load_3 = ops.load('arg964_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index5')
        load_4 = ops.load('arg965_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf547', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf577', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg998_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index8')
        load_2 = ops.load('arg999_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index8')
        load_3 = ops.load('arg1000_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index8')
        load_4 = ops.load('arg1001_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index7')
        load_5 = ops.load('buf548', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('arg1010_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index10')
        load_2 = ops.load('arg1011_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index10')
        load_3 = ops.load('arg1012_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index10')
        load_4 = ops.load('arg1013_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index9')
        load_5 = ops.load('buf546', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op590_op591_op596.snodes[1] =
op591: SchedulerNode(ComputedBuffer)
op591.writes = [   MemoryDep('buf591', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op591.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 4181760}, None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (4181760, 1)
op591.sizes = ([8, 4320, 121], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
class op591_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = 522720*z0 + 121*z1 + z2
    index1 = 522720*z0 + z1 + 4320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf591', get_index_1, relu, None)
        return store
op590_op591_op596.snodes[2] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [   MemoryDep('buf596', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op596.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 4181760}, None)]
op596.met_dependencies = []
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (4181760, 1)
op596.sizes = ([8, 4320, 121], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
class op596_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = 522720*z0 + 121*z1 + z2
    index1 = 522720*z0 + z1 + 4320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf596', get_index_1, relu, None)
        return store


op592: ExternKernelSchedulerNode(ExternKernelAlloc)
op592.writes = [StarDep(name='buf592', mode=None)]
op592.unmet_dependencies = [StarDep(name='buf591', mode=None)]
op592.met_dependencies = [StarDep(name='arg1019_1', mode=None)]
op592.outputs = [
    buf592: ExternKernelAlloc
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf592.users = [NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False)]
]
op592.node.kernel = extern_kernels.convolution


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 836352}, None)]
op593.unmet_dependencies = [MemoryDep('buf592', c0, {c0: 836352}, None)]
op593.met_dependencies = 
    [   MemoryDep('arg1020_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1021_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1022_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1023_1', c1, {c0: 968, c1: 864}, None)]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (836352, 1)
op593.sizes = ([968, 864], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1020_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1021_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1022_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1023_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op593_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1020_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1021_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1022_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1023_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf593', get_index_5, add_1, None)
        return store


op594_op595_op606_op612_op618: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op594_op595_op606_op612_op618.writes = 
    [   MemoryDep('buf594', c0, {c0: 836352}, None),
        MemoryDep('buf595', c0, {c0: 836352}, None),
        MemoryDep('buf606', c0, {c0: 836352}, None),
        MemoryDep('buf612', c0, {c0: 836352}, None),
        MemoryDep('buf618', c0, {c0: 836352}, None)]
op594_op595_op606_op612_op618.unmet_dependencies = 
    [   MemoryDep('buf593', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0, {c0: 836352}, None)]
op594_op595_op606_op612_op618.met_dependencies = []
op594_op595_op606_op612_op618.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf594.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf595.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf612.users = [NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op594_op595_op606_op612_op618.snodes[0] =
op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 836352}, None)]
op594.unmet_dependencies = 
    [   MemoryDep('buf593', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0, {c0: 836352}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf594.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (836352, 1)
op594.sizes = ([8, 11, 11, 864], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op594_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf594', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf593', get_index)
        return load
op594_op595_op606_op612_op618.snodes[1] =
op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 836352}, None)]
op595.unmet_dependencies = 
    [   MemoryDep('buf593', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf593', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf593', c0, {c0: 836352}, None)]
op595.met_dependencies = []
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf595.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op595.group.device = cuda:0
op595.group.iteration = (836352, 1)
op595.sizes = ([8, 11, 11, 864], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op595_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf595', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf593', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf593', get_index)
        return load
op594_op595_op606_op612_op618.snodes[2] =
op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 836352}, None)]
op606.unmet_dependencies = [MemoryDep('buf593', c0, {c0: 836352}, None)]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (836352, 1)
op606.sizes = ([836352], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op606_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf606', get_index_1, relu, None)
        return store
op594_op595_op606_op612_op618.snodes[3] =
op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 836352}, None)]
op612.unmet_dependencies = [MemoryDep('buf593', c0, {c0: 836352}, None)]
op612.met_dependencies = []
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf612.users = [NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (836352, 1)
op612.sizes = ([836352], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op612_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf612', get_index_1, relu, None)
        return store
op594_op595_op606_op612_op618.snodes[4] =
op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 836352}, None)]
op618.unmet_dependencies = [MemoryDep('buf593', c0, {c0: 836352}, None)]
op618.met_dependencies = []
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (836352, 1)
op618.sizes = ([836352], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op618_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf618', get_index_1, relu, None)
        return store


op597: ExternKernelSchedulerNode(ExternKernelAlloc)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf596', mode=None)]
op597.met_dependencies = [StarDep(name='arg1096_1', mode=None)]
op597.outputs = [
    buf597: ExternKernelAlloc
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf597.users = [NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False)]
]
op597.node.kernel = extern_kernels.convolution


op598_op643_op674: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op598_op643_op674.writes = 
    [   MemoryDep('buf598', c0, {c0: 836352}, None),
        MemoryDep('buf643', c0, {c0: 836352}, None),
        MemoryDep('buf674', c0, {c0: 836352}, None)]
op598_op643_op674.unmet_dependencies = [MemoryDep('buf597', c0, {c0: 836352}, None)]
op598_op643_op674.met_dependencies = 
    [   MemoryDep('arg1097_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1098_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1099_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1100_1', c1, {c0: 968, c1: 864}, None)]
op598_op643_op674.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf598.users = [
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf643.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf674.users = [NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False)]
]
op598_op643_op674.snodes[0] =
op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 836352}, None)]
op598.unmet_dependencies = [MemoryDep('buf597', c0, {c0: 836352}, None)]
op598.met_dependencies = 
    [   MemoryDep('arg1097_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1098_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1099_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1100_1', c1, {c0: 968, c1: 864}, None)]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf598.users = [
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
]
op598.group.device = cuda:0
op598.group.iteration = (836352, 1)
op598.sizes = ([968, 864], [])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1097_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1098_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1099_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1100_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op598_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1097_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1098_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1099_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf598', get_index_5, add_1, None)
        return store
op598_op643_op674.snodes[1] =
op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 836352}, None)]
op643.unmet_dependencies = [MemoryDep('buf598', c0, {c0: 836352}, None)]
op643.met_dependencies = []
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf643.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op643.group.device = cuda:0
op643.group.iteration = (836352, 1)
op643.sizes = ([836352], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf643_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op643_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf643', get_index_1, relu, None)
        return store
op598_op643_op674.snodes[2] =
op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 836352}, None)]
op674.unmet_dependencies = [MemoryDep('buf598', c0, {c0: 836352}, None)]
op674.met_dependencies = []
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf674.users = [NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False)]
]
op674.group.device = cuda:0
op674.group.iteration = (836352, 1)
op674.sizes = ([836352], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op674_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf598', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf674', get_index_1, relu, None)
        return store


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 836352}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf598', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf598', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf598', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf598', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf598', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf598', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf598', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf598', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf598', c0, {c0: 836352}, None)]
op599.met_dependencies = []
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf599.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (836352, 1)
op599.sizes = ([8, 11, 11, 864], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op599_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf599', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf598', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf598', get_index)
        return load


op601: ExternKernelSchedulerNode(ExternKernelAlloc)
op601.writes = [StarDep(name='buf601', mode=None)]
op601.unmet_dependencies = [StarDep(name='buf600', mode=None)]
op601.met_dependencies = [StarDep(name='arg1024_1', mode=None)]
op601.outputs = [
    buf601: ExternKernelAlloc
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op601.node.kernel = extern_kernels.convolution


op602: ExternKernelSchedulerNode(ExternKernelAlloc)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf601', mode=None)]
op602.met_dependencies = [StarDep(name='arg1025_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelAlloc
    buf602.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf602.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False)]
]
op602.node.kernel = extern_kernels.convolution


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 836352}, None)]
op603.unmet_dependencies = [MemoryDep('buf602', c0, {c0: 836352}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg1026_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1027_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1028_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1029_1', c1, {c0: 968, c1: 864}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf603.users = [NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (836352, 1)
op603.sizes = ([968, 864], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1026_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1027_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1028_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1029_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op603_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1026_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1027_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1028_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1029_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf603', get_index_5, relu, None)
        return store


op604: ExternKernelSchedulerNode(ExternKernelAlloc)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op604.met_dependencies = [StarDep(name='arg1030_1', mode=None)]
op604.outputs = [
    buf604: ExternKernelAlloc
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf604.users = [NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op604.node.kernel = extern_kernels.convolution


op605: ExternKernelSchedulerNode(ExternKernelAlloc)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf604', mode=None)]
op605.met_dependencies = [StarDep(name='arg1031_1', mode=None)]
op605.outputs = [
    buf605: ExternKernelAlloc
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf605.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op605.node.kernel = extern_kernels.convolution


op607: ExternKernelSchedulerNode(ExternKernelAlloc)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op607.met_dependencies = [StarDep(name='arg1036_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelAlloc
    buf607.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf607.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op607.node.kernel = extern_kernels.convolution


op608: ExternKernelSchedulerNode(ExternKernelAlloc)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf607', mode=None)]
op608.met_dependencies = [StarDep(name='arg1037_1', mode=None)]
op608.outputs = [
    buf608: ExternKernelAlloc
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op608.node.kernel = extern_kernels.convolution


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 836352}, None)]
op609.unmet_dependencies = [MemoryDep('buf608', c0, {c0: 836352}, None)]
op609.met_dependencies = 
    [   MemoryDep('arg1038_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1039_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1040_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1041_1', c1, {c0: 968, c1: 864}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (836352, 1)
op609.sizes = ([968, 864], [])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1038_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1039_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1040_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1041_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op609_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf608', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1038_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1039_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1040_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1041_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf609', get_index_5, relu, None)
        return store


op610: ExternKernelSchedulerNode(ExternKernelAlloc)
op610.writes = [StarDep(name='buf610', mode=None)]
op610.unmet_dependencies = [StarDep(name='buf609', mode=None)]
op610.met_dependencies = [StarDep(name='arg1042_1', mode=None)]
op610.outputs = [
    buf610: ExternKernelAlloc
    buf610.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf610.users = [NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op610.node.kernel = extern_kernels.convolution


op611: ExternKernelSchedulerNode(ExternKernelAlloc)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf610', mode=None)]
op611.met_dependencies = [StarDep(name='arg1043_1', mode=None)]
op611.outputs = [
    buf611: ExternKernelAlloc
    buf611.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf611.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op611.node.kernel = extern_kernels.convolution


op613: ExternKernelSchedulerNode(ExternKernelAlloc)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op613.met_dependencies = [StarDep(name='arg1048_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelAlloc
    buf613.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.node.kernel = extern_kernels.convolution


op614: ExternKernelSchedulerNode(ExternKernelAlloc)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = [StarDep(name='buf613', mode=None)]
op614.met_dependencies = [StarDep(name='arg1049_1', mode=None)]
op614.outputs = [
    buf614: ExternKernelAlloc
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf614.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=True, is_weak=False)]
]
op614.node.kernel = extern_kernels.convolution


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 836352}, None)]
op615.unmet_dependencies = [MemoryDep('buf614', c0, {c0: 836352}, None)]
op615.met_dependencies = 
    [   MemoryDep('arg1050_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1051_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1052_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1053_1', c1, {c0: 968, c1: 864}, None)]
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (836352, 1)
op615.sizes = ([968, 864], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1050_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1051_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1052_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1053_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op615_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1050_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1051_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1052_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1053_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf615', get_index_5, relu, None)
        return store


op616: ExternKernelSchedulerNode(ExternKernelAlloc)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf615', mode=None)]
op616.met_dependencies = [StarDep(name='arg1054_1', mode=None)]
op616.outputs = [
    buf616: ExternKernelAlloc
    buf616.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf616.users = [NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op616.node.kernel = extern_kernels.convolution


op617: ExternKernelSchedulerNode(ExternKernelAlloc)
op617.writes = [StarDep(name='buf617', mode=None)]
op617.unmet_dependencies = [StarDep(name='buf616', mode=None)]
op617.met_dependencies = [StarDep(name='arg1055_1', mode=None)]
op617.outputs = [
    buf617: ExternKernelAlloc
    buf617.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf617.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op617.node.kernel = extern_kernels.convolution


op619: ExternKernelSchedulerNode(ExternKernelAlloc)
op619.writes = [StarDep(name='buf619', mode=None)]
op619.unmet_dependencies = [StarDep(name='buf618', mode=None)]
op619.met_dependencies = [StarDep(name='arg1060_1', mode=None)]
op619.outputs = [
    buf619: ExternKernelAlloc
    buf619.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf619.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op619.node.kernel = extern_kernels.convolution


op620: ExternKernelSchedulerNode(ExternKernelAlloc)
op620.writes = [StarDep(name='buf620', mode=None)]
op620.unmet_dependencies = [StarDep(name='buf619', mode=None)]
op620.met_dependencies = [StarDep(name='arg1061_1', mode=None)]
op620.outputs = [
    buf620: ExternKernelAlloc
    buf620.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf620.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=True, is_weak=False)]
]
op620.node.kernel = extern_kernels.convolution


op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 836352}, None)]
op621.unmet_dependencies = [MemoryDep('buf620', c0, {c0: 836352}, None)]
op621.met_dependencies = 
    [   MemoryDep('arg1062_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1063_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1064_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1065_1', c1, {c0: 968, c1: 864}, None)]
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf621.users = [NodeUser(node=ExternKernelSchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (836352, 1)
op621.sizes = ([968, 864], [])
buf620_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1062_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1063_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1064_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1065_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op621_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf620', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1062_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1063_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1064_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1065_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf621', get_index_5, relu, None)
        return store


op622: ExternKernelSchedulerNode(ExternKernelAlloc)
op622.writes = [StarDep(name='buf622', mode=None)]
op622.unmet_dependencies = [StarDep(name='buf621', mode=None)]
op622.met_dependencies = [StarDep(name='arg1066_1', mode=None)]
op622.outputs = [
    buf622: ExternKernelAlloc
    buf622.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf622.users = [NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op622.node.kernel = extern_kernels.convolution


op623: ExternKernelSchedulerNode(ExternKernelAlloc)
op623.writes = [StarDep(name='buf623', mode=None)]
op623.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op623.met_dependencies = [StarDep(name='arg1067_1', mode=None)]
op623.outputs = [
    buf623: ExternKernelAlloc
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf623.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op623.node.kernel = extern_kernels.convolution


op624_op625: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op624_op625.writes = 
    [   MemoryDep('buf624', c0, {c0: 836352}, None),
        MemoryDep('buf625', c0, {c0: 836352}, None)]
op624_op625.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 836352}, None),
        MemoryDep('buf623', c0, {c0: 836352}, None)]
op624_op625.met_dependencies = 
    [   MemoryDep('arg1056_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1057_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1058_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1059_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1068_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1069_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1070_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1071_1', c1, {c0: 968, c1: 864}, None)]
op624_op625.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf624.users = [
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
    ]
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf625.users = [NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op624_op625.snodes[0] =
op624: SchedulerNode(ComputedBuffer)
op624.writes = [MemoryDep('buf624', c0, {c0: 836352}, None)]
op624.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 836352}, None),
        MemoryDep('buf623', c0, {c0: 836352}, None)]
op624.met_dependencies = 
    [   MemoryDep('arg1056_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1057_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1058_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1059_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1068_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1069_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1070_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1071_1', c1, {c0: 968, c1: 864}, None)]
op624.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf624.users = [
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
    ]
]
op624.group.device = cuda:0
op624.group.iteration = (836352, 1)
op624.sizes = ([968, 864], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1056_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1057_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1058_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1059_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1068_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1069_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1070_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1071_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op624_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1056_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1057_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1058_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1059_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf623', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1068_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1069_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1070_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1071_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf624', get_index_10, add_4, None)
        return store
op624_op625.snodes[1] =
op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 836352}, None)]
op625.unmet_dependencies = [MemoryDep('buf624', c0, {c0: 836352}, None)]
op625.met_dependencies = []
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf625.users = [NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op625.group.device = cuda:0
op625.group.iteration = (836352, 1)
op625.sizes = ([836352], [])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op625_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf625', get_index_1, relu, None)
        return store


op626: ExternKernelSchedulerNode(ExternKernelAlloc)
op626.writes = [StarDep(name='buf626', mode=None)]
op626.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op626.met_dependencies = [StarDep(name='arg1072_1', mode=None)]
op626.outputs = [
    buf626: ExternKernelAlloc
    buf626.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False)]
]
op626.node.kernel = extern_kernels.convolution


op627: ExternKernelSchedulerNode(ExternKernelAlloc)
op627.writes = [StarDep(name='buf627', mode=None)]
op627.unmet_dependencies = [StarDep(name='buf626', mode=None)]
op627.met_dependencies = [StarDep(name='arg1073_1', mode=None)]
op627.outputs = [
    buf627: ExternKernelAlloc
    buf627.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf627.users = [NodeUser(node=SchedulerNode(name='op628'), can_inplace=True, is_weak=False)]
]
op627.node.kernel = extern_kernels.convolution


op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 836352}, None)]
op628.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 836352}, None)]
op628.met_dependencies = 
    [   MemoryDep('arg1074_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1075_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1076_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1077_1', c1, {c0: 968, c1: 864}, None)]
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf628.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (836352, 1)
op628.sizes = ([968, 864], [])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1074_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1075_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1076_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1077_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op628_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1074_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1075_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1076_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1077_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf628', get_index_5, relu, None)
        return store


op629: ExternKernelSchedulerNode(ExternKernelAlloc)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = [StarDep(name='buf628', mode=None)]
op629.met_dependencies = [StarDep(name='arg1078_1', mode=None)]
op629.outputs = [
    buf629: ExternKernelAlloc
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op629.node.kernel = extern_kernels.convolution


op630: ExternKernelSchedulerNode(ExternKernelAlloc)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op630.met_dependencies = [StarDep(name='arg1079_1', mode=None)]
op630.outputs = [
    buf630: ExternKernelAlloc
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf630.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op630.node.kernel = extern_kernels.convolution


op632: ExternKernelSchedulerNode(ExternKernelAlloc)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op632.met_dependencies = [StarDep(name='arg1084_1', mode=None)]
op632.outputs = [
    buf632: ExternKernelAlloc
    buf632.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op632.node.kernel = extern_kernels.convolution


op633: ExternKernelSchedulerNode(ExternKernelAlloc)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf632', mode=None)]
op633.met_dependencies = [StarDep(name='arg1085_1', mode=None)]
op633.outputs = [
    buf633: ExternKernelAlloc
    buf633.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf633.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False)]
]
op633.node.kernel = extern_kernels.convolution


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 836352}, None)]
op634.unmet_dependencies = [MemoryDep('buf633', c0, {c0: 836352}, None)]
op634.met_dependencies = 
    [   MemoryDep('arg1086_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1087_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1088_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1089_1', c1, {c0: 968, c1: 864}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf634.users = [NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (836352, 1)
op634.sizes = ([968, 864], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1086_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1087_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1088_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1089_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op634_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1086_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1087_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1088_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1089_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf634', get_index_5, relu, None)
        return store


op635: ExternKernelSchedulerNode(ExternKernelAlloc)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf634', mode=None)]
op635.met_dependencies = [StarDep(name='arg1090_1', mode=None)]
op635.outputs = [
    buf635: ExternKernelAlloc
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf635.users = [NodeUser(node=ExternKernelSchedulerNode(name='op636'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = extern_kernels.convolution


op636: ExternKernelSchedulerNode(ExternKernelAlloc)
op636.writes = [StarDep(name='buf636', mode=None)]
op636.unmet_dependencies = [StarDep(name='buf635', mode=None)]
op636.met_dependencies = [StarDep(name='arg1091_1', mode=None)]
op636.outputs = [
    buf636: ExternKernelAlloc
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf636.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op636.node.kernel = extern_kernels.convolution


op637_op638: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op637_op638.writes = 
    [   MemoryDep('buf637', c0, {c0: 4181760}, None),
        MemoryDep('buf638', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op637_op638.unmet_dependencies = 
    [   MemoryDep('buf552', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf593', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf594', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf595', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf605', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf611', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf624', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf630', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf636', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op637_op638.met_dependencies = 
    [   MemoryDep('arg1032_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1033_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1034_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1035_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1044_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1045_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1046_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1047_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1080_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1081_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1082_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1083_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1092_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1093_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1094_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1095_1', I, {c0: 8, c1: 4320}, None)]
op637_op638.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf637.users = [NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False)]
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf638.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op637_op638.snodes[0] =
op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 4181760}, None)]
op637.unmet_dependencies = 
    [   MemoryDep('buf552', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf593', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf594', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf595', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf605', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf611', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf624', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf630', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf636', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op637.met_dependencies = 
    [   MemoryDep('arg1032_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1033_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1034_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1035_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1044_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1045_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1046_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1047_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1080_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1081_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1082_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1083_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1092_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1093_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1094_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1095_1', I, {c0: 8, c1: 4320}, None)]
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf637.users = [NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (4181760, 1)
op637.sizes = ([8, 4320, 121], [])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1032_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1033_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1034_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1035_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf611_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1044_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1045_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1046_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1047_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1080_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1081_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1082_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1083_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1092_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1093_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1094_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1095_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
class op637_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = z1
    index1 = 104544*z0 + 864*z2 + I
    index2 = I
    index3 = 104544*z0 + 864*z2 + I
    index4 = I
    index5 = 104544*z0 + 864*z2 + I
    index6 = 104544*z0 + 864*z2 + I
    index7 = I
    index8 = 104544*z0 + 864*z2 + I
    index9 = I
    index10 = 522720*z0 + 121*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(864, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(864, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1728, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1728, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2592, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(2592, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(3456, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(3456, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(4320, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf637', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf605', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg1032_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1033_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg1034_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg1035_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf552', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg1044_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg1045_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg1046_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg1047_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf594', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf624', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg1080_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg1081_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg1082_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg1083_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf595', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg1092_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg1093_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg1094_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg1095_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf593', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op637_op638.snodes[1] =
op638: SchedulerNode(ComputedBuffer)
op638.writes = [   MemoryDep('buf638', 522720*c0 + c1 + 4320*c2, {c0: 8, c1: 4320, c2: 121}, None)]
op638.unmet_dependencies = [MemoryDep('buf637', c0, {c0: 4181760}, None)]
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
    buf638.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (4181760, 1)
op638.sizes = ([8, 4320, 121], [])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 1, 47520, 4320])
class op638_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = 522720*z0 + 121*z1 + z2
    index1 = 522720*z0 + z1 + 4320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf637', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf638', get_index_1, relu, None)
        return store


op639: ExternKernelSchedulerNode(ExternKernelAlloc)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = [StarDep(name='buf638', mode=None)]
op639.met_dependencies = [StarDep(name='arg1101_1', mode=None)]
op639.outputs = [
    buf639: ExternKernelAlloc
    buf639.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf639.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False)]
]
op639.node.kernel = extern_kernels.convolution


op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 836352}, None)]
op640.unmet_dependencies = [MemoryDep('buf639', c0, {c0: 836352}, None)]
op640.met_dependencies = 
    [   MemoryDep('arg1102_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1103_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1104_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1105_1', c1, {c0: 968, c1: 864}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf640.users = [
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op640.group.device = cuda:0
op640.group.iteration = (836352, 1)
op640.sizes = ([968, 864], [])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1102_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1103_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1104_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1105_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op640_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf639', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1103_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf640', get_index_5, add_1, None)
        return store


op641_op642_op649_op655_op661: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op641_op642_op649_op655_op661.writes = 
    [   MemoryDep('buf641', c0, {c0: 836352}, None),
        MemoryDep('buf642', c0, {c0: 836352}, None),
        MemoryDep('buf649', c0, {c0: 836352}, None),
        MemoryDep('buf655', c0, {c0: 836352}, None),
        MemoryDep('buf661', c0, {c0: 836352}, None)]
op641_op642_op649_op655_op661.unmet_dependencies = 
    [   MemoryDep('buf640', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0, {c0: 836352}, None)]
op641_op642_op649_op655_op661.met_dependencies = []
op641_op642_op649_op655_op661.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf641.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf642.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf649.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf655.users = [NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf661.users = [NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False)]
]
op641_op642_op649_op655_op661.snodes[0] =
op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 836352}, None)]
op641.unmet_dependencies = 
    [   MemoryDep('buf640', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0, {c0: 836352}, None)]
op641.met_dependencies = []
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf641.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (836352, 1)
op641.sizes = ([8, 11, 11, 864], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op641_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf641', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf640', get_index)
        return load
op641_op642_op649_op655_op661.snodes[1] =
op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 836352}, None)]
op642.unmet_dependencies = 
    [   MemoryDep('buf640', c0 + 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 + 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 10368, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 864, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 8640, {c0: 836352}, None),
        MemoryDep('buf640', c0 - 9504, {c0: 836352}, None),
        MemoryDep('buf640', c0, {c0: 836352}, None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf642.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (836352, 1)
op642.sizes = ([8, 11, 11, 864], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op642_loop_body:
    var_ranges = {z0: 8, z1: 11, z2: 11, z3: 864}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 10368
    index3 = z2
    index4 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 9504
    index5 = z2 + 1
    index6 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 8640
    index7 = z1
    index8 = 104544*z0 + 9504*z1 + 864*z2 + z3 - 864
    index9 = 104544*z0 + 9504*z1 + 864*z2 + z3
    index10 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 864
    index11 = z1 + 1
    index12 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 8640
    index13 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 9504
    index14 = 104544*z0 + 9504*z1 + 864*z2 + z3 + 10368
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(11, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(11, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(11, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(11, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(11, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(11, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(11, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(11, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(11, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(11, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(11, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(11, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(11, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(11, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(11, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(11, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(11, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(11, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index9')
        store = ops.store('buf642', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf640', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf640', get_index)
        return load
op641_op642_op649_op655_op661.snodes[2] =
op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 836352}, None)]
op649.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 836352}, None)]
op649.met_dependencies = []
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf649.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op649.group.device = cuda:0
op649.group.iteration = (836352, 1)
op649.sizes = ([836352], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op649_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf649', get_index_1, relu, None)
        return store
op641_op642_op649_op655_op661.snodes[3] =
op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 836352}, None)]
op655.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 836352}, None)]
op655.met_dependencies = []
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf655.users = [NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op655.group.device = cuda:0
op655.group.iteration = (836352, 1)
op655.sizes = ([836352], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op655_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf655', get_index_1, relu, None)
        return store
op641_op642_op649_op655_op661.snodes[4] =
op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 836352}, None)]
op661.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 836352}, None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf661.users = [NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False)]
]
op661.group.device = cuda:0
op661.group.iteration = (836352, 1)
op661.sizes = ([836352], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op661_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf661', get_index_1, relu, None)
        return store


op644: ExternKernelSchedulerNode(ExternKernelAlloc)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf643', mode=None)]
op644.met_dependencies = [StarDep(name='arg1106_1', mode=None)]
op644.outputs = [
    buf644: ExternKernelAlloc
    buf644.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf644.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op644.node.kernel = extern_kernels.convolution


op645: ExternKernelSchedulerNode(ExternKernelAlloc)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = [StarDep(name='buf644', mode=None)]
op645.met_dependencies = [StarDep(name='arg1107_1', mode=None)]
op645.outputs = [
    buf645: ExternKernelAlloc
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf645.users = [NodeUser(node=SchedulerNode(name='op646'), can_inplace=True, is_weak=False)]
]
op645.node.kernel = extern_kernels.convolution


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 836352}, None)]
op646.unmet_dependencies = [MemoryDep('buf645', c0, {c0: 836352}, None)]
op646.met_dependencies = 
    [   MemoryDep('arg1108_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1109_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1110_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1111_1', c1, {c0: 968, c1: 864}, None)]
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf646.users = [NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (836352, 1)
op646.sizes = ([968, 864], [])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1108_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1109_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1110_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1111_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op646_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf645', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1108_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1109_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1110_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1111_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf646', get_index_5, relu, None)
        return store


op647: ExternKernelSchedulerNode(ExternKernelAlloc)
op647.writes = [StarDep(name='buf647', mode=None)]
op647.unmet_dependencies = [StarDep(name='buf646', mode=None)]
op647.met_dependencies = [StarDep(name='arg1112_1', mode=None)]
op647.outputs = [
    buf647: ExternKernelAlloc
    buf647.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf647.users = [NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op647.node.kernel = extern_kernels.convolution


op648: ExternKernelSchedulerNode(ExternKernelAlloc)
op648.writes = [StarDep(name='buf648', mode=None)]
op648.unmet_dependencies = [StarDep(name='buf647', mode=None)]
op648.met_dependencies = [StarDep(name='arg1113_1', mode=None)]
op648.outputs = [
    buf648: ExternKernelAlloc
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf648.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op648.node.kernel = extern_kernels.convolution


op650: ExternKernelSchedulerNode(ExternKernelAlloc)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf649', mode=None)]
op650.met_dependencies = [StarDep(name='arg1118_1', mode=None)]
op650.outputs = [
    buf650: ExternKernelAlloc
    buf650.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf650.users = [NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op650.node.kernel = extern_kernels.convolution


op651: ExternKernelSchedulerNode(ExternKernelAlloc)
op651.writes = [StarDep(name='buf651', mode=None)]
op651.unmet_dependencies = [StarDep(name='buf650', mode=None)]
op651.met_dependencies = [StarDep(name='arg1119_1', mode=None)]
op651.outputs = [
    buf651: ExternKernelAlloc
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf651.users = [NodeUser(node=SchedulerNode(name='op652'), can_inplace=True, is_weak=False)]
]
op651.node.kernel = extern_kernels.convolution


op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 836352}, None)]
op652.unmet_dependencies = [MemoryDep('buf651', c0, {c0: 836352}, None)]
op652.met_dependencies = 
    [   MemoryDep('arg1120_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1121_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1122_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1123_1', c1, {c0: 968, c1: 864}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf652.users = [NodeUser(node=ExternKernelSchedulerNode(name='op653'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (836352, 1)
op652.sizes = ([968, 864], [])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1120_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1121_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1122_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1123_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op652_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf651', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1120_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1121_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1122_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1123_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf652', get_index_5, relu, None)
        return store


op653: ExternKernelSchedulerNode(ExternKernelAlloc)
op653.writes = [StarDep(name='buf653', mode=None)]
op653.unmet_dependencies = [StarDep(name='buf652', mode=None)]
op653.met_dependencies = [StarDep(name='arg1124_1', mode=None)]
op653.outputs = [
    buf653: ExternKernelAlloc
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf653.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op653.node.kernel = extern_kernels.convolution


op654: ExternKernelSchedulerNode(ExternKernelAlloc)
op654.writes = [StarDep(name='buf654', mode=None)]
op654.unmet_dependencies = [StarDep(name='buf653', mode=None)]
op654.met_dependencies = [StarDep(name='arg1125_1', mode=None)]
op654.outputs = [
    buf654: ExternKernelAlloc
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf654.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op654.node.kernel = extern_kernels.convolution


op656: ExternKernelSchedulerNode(ExternKernelAlloc)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf655', mode=None)]
op656.met_dependencies = [StarDep(name='arg1130_1', mode=None)]
op656.outputs = [
    buf656: ExternKernelAlloc
    buf656.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op656.node.kernel = extern_kernels.convolution


op657: ExternKernelSchedulerNode(ExternKernelAlloc)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf656', mode=None)]
op657.met_dependencies = [StarDep(name='arg1131_1', mode=None)]
op657.outputs = [
    buf657: ExternKernelAlloc
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf657.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False)]
]
op657.node.kernel = extern_kernels.convolution


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 836352}, None)]
op658.unmet_dependencies = [MemoryDep('buf657', c0, {c0: 836352}, None)]
op658.met_dependencies = 
    [   MemoryDep('arg1132_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1133_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1134_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1135_1', c1, {c0: 968, c1: 864}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op658.group.device = cuda:0
op658.group.iteration = (836352, 1)
op658.sizes = ([968, 864], [])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1132_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1133_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1134_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1135_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op658_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf657', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1133_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf658', get_index_5, relu, None)
        return store


op659: ExternKernelSchedulerNode(ExternKernelAlloc)
op659.writes = [StarDep(name='buf659', mode=None)]
op659.unmet_dependencies = [StarDep(name='buf658', mode=None)]
op659.met_dependencies = [StarDep(name='arg1136_1', mode=None)]
op659.outputs = [
    buf659: ExternKernelAlloc
    buf659.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf659.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op659.node.kernel = extern_kernels.convolution


op660: ExternKernelSchedulerNode(ExternKernelAlloc)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf659', mode=None)]
op660.met_dependencies = [StarDep(name='arg1137_1', mode=None)]
op660.outputs = [
    buf660: ExternKernelAlloc
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf660.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op660.node.kernel = extern_kernels.convolution


op662: ExternKernelSchedulerNode(ExternKernelAlloc)
op662.writes = [StarDep(name='buf662', mode=None)]
op662.unmet_dependencies = [StarDep(name='buf661', mode=None)]
op662.met_dependencies = [StarDep(name='arg1142_1', mode=None)]
op662.outputs = [
    buf662: ExternKernelAlloc
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf662.users = [NodeUser(node=ExternKernelSchedulerNode(name='op663'), can_inplace=False, is_weak=False)]
]
op662.node.kernel = extern_kernels.convolution


op663: ExternKernelSchedulerNode(ExternKernelAlloc)
op663.writes = [StarDep(name='buf663', mode=None)]
op663.unmet_dependencies = [StarDep(name='buf662', mode=None)]
op663.met_dependencies = [StarDep(name='arg1143_1', mode=None)]
op663.outputs = [
    buf663: ExternKernelAlloc
    buf663.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf663.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=True, is_weak=False)]
]
op663.node.kernel = extern_kernels.convolution


op664: SchedulerNode(ComputedBuffer)
op664.writes = [MemoryDep('buf664', c0, {c0: 836352}, None)]
op664.unmet_dependencies = [MemoryDep('buf663', c0, {c0: 836352}, None)]
op664.met_dependencies = 
    [   MemoryDep('arg1144_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1145_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1146_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1147_1', c1, {c0: 968, c1: 864}, None)]
op664.outputs = [
    buf664: ComputedBuffer
    buf664.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf664.users = [NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op664.group.device = cuda:0
op664.group.iteration = (836352, 1)
op664.sizes = ([968, 864], [])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1144_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1145_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1146_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1147_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf664_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op664_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf663', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1144_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1145_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1146_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1147_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf664', get_index_5, relu, None)
        return store


op665: ExternKernelSchedulerNode(ExternKernelAlloc)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf664', mode=None)]
op665.met_dependencies = [StarDep(name='arg1148_1', mode=None)]
op665.outputs = [
    buf665: ExternKernelAlloc
    buf665.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf665.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op665.node.kernel = extern_kernels.convolution


op666: ExternKernelSchedulerNode(ExternKernelAlloc)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf665', mode=None)]
op666.met_dependencies = [StarDep(name='arg1149_1', mode=None)]
op666.outputs = [
    buf666: ExternKernelAlloc
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf666.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op666.node.kernel = extern_kernels.convolution


op667_op668: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op667_op668.writes = 
    [   MemoryDep('buf667', c0, {c0: 836352}, None),
        MemoryDep('buf668', c0, {c0: 836352}, None)]
op667_op668.unmet_dependencies = 
    [   MemoryDep('buf660', c0, {c0: 836352}, None),
        MemoryDep('buf666', c0, {c0: 836352}, None)]
op667_op668.met_dependencies = 
    [   MemoryDep('arg1138_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1139_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1140_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1141_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1150_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1151_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1152_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1153_1', c1, {c0: 968, c1: 864}, None)]
op667_op668.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf668.users = [NodeUser(node=ExternKernelSchedulerNode(name='op669'), can_inplace=False, is_weak=False)]
]
op667_op668.snodes[0] =
op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 836352}, None)]
op667.unmet_dependencies = 
    [   MemoryDep('buf660', c0, {c0: 836352}, None),
        MemoryDep('buf666', c0, {c0: 836352}, None)]
op667.met_dependencies = 
    [   MemoryDep('arg1138_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1139_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1140_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1141_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1150_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1151_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1152_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1153_1', c1, {c0: 968, c1: 864}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op667.group.device = cuda:0
op667.group.iteration = (836352, 1)
op667.sizes = ([968, 864], [])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1138_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1139_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1140_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1141_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1150_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1151_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1152_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1153_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op667_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1138_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1139_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1140_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1141_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf666', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1150_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1151_1', get_index_7)
        constant_2 = ops.constant(0.001, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1152_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1153_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf667', get_index_10, add_4, None)
        return store
op667_op668.snodes[1] =
op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 836352}, None)]
op668.unmet_dependencies = [MemoryDep('buf667', c0, {c0: 836352}, None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf668.users = [NodeUser(node=ExternKernelSchedulerNode(name='op669'), can_inplace=False, is_weak=False)]
]
op668.group.device = cuda:0
op668.group.iteration = (836352, 1)
op668.sizes = ([836352], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf668_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op668_loop_body:
    var_ranges = {z0: 836352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf668', get_index_1, relu, None)
        return store


op669: ExternKernelSchedulerNode(ExternKernelAlloc)
op669.writes = [StarDep(name='buf669', mode=None)]
op669.unmet_dependencies = [StarDep(name='buf668', mode=None)]
op669.met_dependencies = [StarDep(name='arg1154_1', mode=None)]
op669.outputs = [
    buf669: ExternKernelAlloc
    buf669.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op669.node.kernel = extern_kernels.convolution


op670: ExternKernelSchedulerNode(ExternKernelAlloc)
op670.writes = [StarDep(name='buf670', mode=None)]
op670.unmet_dependencies = [StarDep(name='buf669', mode=None)]
op670.met_dependencies = [StarDep(name='arg1155_1', mode=None)]
op670.outputs = [
    buf670: ExternKernelAlloc
    buf670.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf670.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False)]
]
op670.node.kernel = extern_kernels.convolution


op671: SchedulerNode(ComputedBuffer)
op671.writes = [MemoryDep('buf671', c0, {c0: 836352}, None)]
op671.unmet_dependencies = [MemoryDep('buf670', c0, {c0: 836352}, None)]
op671.met_dependencies = 
    [   MemoryDep('arg1156_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1157_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1158_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1159_1', c1, {c0: 968, c1: 864}, None)]
op671.outputs = [
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf671.users = [NodeUser(node=ExternKernelSchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op671.group.device = cuda:0
op671.group.iteration = (836352, 1)
op671.sizes = ([968, 864], [])
buf670_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1156_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1157_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1158_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1159_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op671_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf670', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1156_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1157_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1158_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1159_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf671', get_index_5, relu, None)
        return store


op672: ExternKernelSchedulerNode(ExternKernelAlloc)
op672.writes = [StarDep(name='buf672', mode=None)]
op672.unmet_dependencies = [StarDep(name='buf671', mode=None)]
op672.met_dependencies = [StarDep(name='arg1160_1', mode=None)]
op672.outputs = [
    buf672: ExternKernelAlloc
    buf672.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False)]
]
op672.node.kernel = extern_kernels.convolution


op673: ExternKernelSchedulerNode(ExternKernelAlloc)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = [StarDep(name='arg1161_1', mode=None)]
op673.outputs = [
    buf673: ExternKernelAlloc
    buf673.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf673.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op673.node.kernel = extern_kernels.convolution


op675: ExternKernelSchedulerNode(ExternKernelAlloc)
op675.writes = [StarDep(name='buf675', mode=None)]
op675.unmet_dependencies = [StarDep(name='buf674', mode=None)]
op675.met_dependencies = [StarDep(name='arg1166_1', mode=None)]
op675.outputs = [
    buf675: ExternKernelAlloc
    buf675.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf675.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op675.node.kernel = extern_kernels.convolution


op676: ExternKernelSchedulerNode(ExternKernelAlloc)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf675', mode=None)]
op676.met_dependencies = [StarDep(name='arg1167_1', mode=None)]
op676.outputs = [
    buf676: ExternKernelAlloc
    buf676.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf676.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=True, is_weak=False)]
]
op676.node.kernel = extern_kernels.convolution


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 836352}, None)]
op677.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 836352}, None)]
op677.met_dependencies = 
    [   MemoryDep('arg1168_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1169_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1170_1', c1, {c0: 968, c1: 864}, None),
        MemoryDep('arg1171_1', c1, {c0: 968, c1: 864}, None)]
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf677.users = [NodeUser(node=ExternKernelSchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (836352, 1)
op677.sizes = ([968, 864], [])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1168_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1169_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1170_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1171_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
class op677_loop_body:
    var_ranges = {z0: 968, z1: 864}
    index0 = 864*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1168_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1169_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1170_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1171_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf677', get_index_5, relu, None)
        return store


op678: ExternKernelSchedulerNode(ExternKernelAlloc)
op678.writes = [StarDep(name='buf678', mode=None)]
op678.unmet_dependencies = [StarDep(name='buf677', mode=None)]
op678.met_dependencies = [StarDep(name='arg1172_1', mode=None)]
op678.outputs = [
    buf678: ExternKernelAlloc
    buf678.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf678.users = [NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False)]
]
op678.node.kernel = extern_kernels.convolution


op679: ExternKernelSchedulerNode(ExternKernelAlloc)
op679.writes = [StarDep(name='buf679', mode=None)]
op679.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op679.met_dependencies = [StarDep(name='arg1173_1', mode=None)]
op679.outputs = [
    buf679: ExternKernelAlloc
    buf679.layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
    buf679.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op679.node.kernel = extern_kernels.convolution


op680_op681_op682: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op680_op681_op682.writes = 
    [   MemoryDep('buf680', c0, {c0: 4181760}, None),
        MemoryDep('buf681', c0, {c0: 34560}, None),
        MemoryDep('buf682', c0, {c0: 34560}, None)]
op680_op681_op682.unmet_dependencies = 
    [   MemoryDep('buf599', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf640', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf641', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf642', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf648', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf654', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf667', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf673', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf679', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op680_op681_op682.met_dependencies = 
    [   MemoryDep('arg1114_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1115_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1116_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1117_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1126_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1127_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1128_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1129_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1162_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1163_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1164_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1165_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1174_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1175_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1176_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1177_1', I, {c0: 8, c1: 4320}, None)]
op680_op681_op682.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf680.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
    buf681.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False)]
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op680_op681_op682.snodes[0] =
op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 4181760}, None)]
op680.unmet_dependencies = 
    [   MemoryDep('buf599', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf640', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf641', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf642', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf648', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf654', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf667', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf673', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None),
        MemoryDep('buf679', 104544*c0 + 864*c2 + I, {c0: 8, c1: 4320, c2: 121}, None)]
op680.met_dependencies = 
    [   MemoryDep('arg1114_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1115_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1116_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1117_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1126_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1127_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1128_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1129_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1162_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1163_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1164_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1165_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1174_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1175_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1176_1', I, {c0: 8, c1: 4320}, None),
        MemoryDep('arg1177_1', I, {c0: 8, c1: 4320}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
    buf680.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
]
op680.group.device = cuda:0
op680.group.iteration = (4181760, 1)
op680.sizes = ([8, 4320, 121], [])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1114_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1115_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1116_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1117_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1126_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1127_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1128_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1129_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1162_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1163_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1164_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1165_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
arg1174_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1175_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1176_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
arg1177_1_layout = FixedLayout('cuda', torch.float32, size=[864], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 864, 11, 11], stride=[104544, 1, 9504, 864])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
class op680_loop_body:
    var_ranges = {z0: 8, z1: 4320, z2: 121}
    index0 = z1
    index1 = 104544*z0 + 864*z2 + I
    index2 = I
    index3 = 104544*z0 + 864*z2 + I
    index4 = I
    index5 = 104544*z0 + 864*z2 + I
    index6 = 104544*z0 + 864*z2 + I
    index7 = I
    index8 = 104544*z0 + 864*z2 + I
    index9 = I
    index10 = 522720*z0 + 121*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(864, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(864, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(1728, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(1728, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(2592, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(2592, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(3456, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__2 = ops.and_(ge_3, lt_3)
        masked_subblock4 = self.masked_subblock4(and__2, 0.0)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(3456, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(4320, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        masked_subblock5 = self.masked_subblock5(ge_4, 0.0)
        where = ops.where(and__2, masked_subblock4, masked_subblock5)
        where_1 = ops.where(and__1, masked_subblock3, where)
        where_2 = ops.where(and_, masked_subblock2, where_1)
        where_3 = ops.where(lt, masked_subblock1, where_2)
        get_index_10 = self.get_index('index10')
        store = ops.store('buf680', get_index_10, where_3, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf648', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg1114_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1115_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg1116_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg1117_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf599', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf654', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg1126_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg1127_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg1128_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg1129_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf641', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf667', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index7')
        load_1 = ops.load('arg1162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index7')
        load_2 = ops.load('arg1163_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index7')
        load_3 = ops.load('arg1164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index7')
        load_4 = ops.load('arg1165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index6')
        load_5 = ops.load('buf642', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
    def masked_subblock5(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf679', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('arg1174_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index9')
        load_2 = ops.load('arg1175_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index9')
        load_3 = ops.load('arg1176_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index9')
        load_4 = ops.load('arg1177_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index8')
        load_5 = ops.load('buf640', get_index_5)
        add_2 = ops.add(add_1, load_5)
        return add_2
op680_op681_op682.snodes[1] =
op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 34560}, None)]
op681.unmet_dependencies = [MemoryDep('buf680', c0, {c0: 4181760}, None)]
op681.met_dependencies = []
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
    buf681.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False)]
]
op681.group.device = cuda:0
op681.group.iteration = (34560, 121)
op681.sizes = ([34560], [121])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 11, 11], stride=[522720, 121, 11, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
class op681_loop_body:
    var_ranges = {z0: 34560, z1: 121}
    index0 = 121*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        relu = ops.relu(load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf681', get_index_1, reduction)
        return store_reduction
op680_op681_op682.snodes[2] =
op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 34560}, None)]
op682.unmet_dependencies = [MemoryDep('buf681', c0, {c0: 34560}, None)]
op682.met_dependencies = []
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (34560, 1)
op682.sizes = ([34560], [])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 4320, 1, 1], stride=[4320, 1, 34560, 34560])
class op682_loop_body:
    var_ranges = {z0: 34560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf681', get_index)
        constant = ops.constant(121.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf682', get_index_1, truediv, None)
        return store


op683: ExternKernelSchedulerNode(ExternKernelOut)
op683.writes = [StarDep(name='buf683', mode=None)]
op683.unmet_dependencies = [StarDep(name='buf682', mode=None)]
op683.met_dependencies = [StarDep(name='arg1178_1', mode=None), StarDep(name='arg1179_1', mode=None)]
op683.outputs = [
    buf683: ExternKernelOut
    buf683.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf683.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op683.node.kernel = extern_kernels.addmm



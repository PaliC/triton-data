op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 8192}, None),
        MemoryDep('arg1_1', c1 + 768*tmp0, {c0: 8192, c1: 768}, None),
        MemoryDep('arg204_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg2_1', c1 + 768*tmp2, {c0: 8192, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg5_1', c1, {c0: 8192, c1: 768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (6291456, 1)
op0.sizes = ([16, 512, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 768], stride=[768, 1])
arg204_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op0_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 768}
    index0 = 512*z0 + z1
    index1 = 768*indirect0 + z2
    index2 = z1
    index3 = 768*indirect1 + z2
    index4 = 0
    index5 = 1024
    index6 = z2
    index7 = 393216*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg204_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg2_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg3_1', get_index_6)
        add_1 = ops.add(add, load_4)
        get_index_7 = self.get_index('index4')
        get_index_8 = self.get_index('index5')
        check_bounds_1 = ops.check_bounds(get_index_7, get_index_8, False, False)
        get_index_9 = self.get_index('index6')
        load_5 = ops.load('arg4_1', get_index_9)
        add_2 = ops.add(add_1, load_5)
        get_index_10 = self.get_index('index4')
        get_index_11 = self.get_index('index5')
        check_bounds_2 = ops.check_bounds(get_index_10, get_index_11, False, False)
        get_index_12 = self.get_index('index6')
        load_6 = ops.load('arg3_1', get_index_12)
        add_3 = ops.add(add_2, load_6)
        get_index_13 = self.get_index('index4')
        get_index_14 = self.get_index('index5')
        check_bounds_3 = ops.check_bounds(get_index_13, get_index_14, False, False)
        get_index_15 = self.get_index('index6')
        load_7 = ops.load('arg4_1', get_index_15)
        add_4 = ops.add(add_3, load_7)
        get_index_16 = self.get_index('index4')
        get_index_17 = self.get_index('index5')
        check_bounds_4 = ops.check_bounds(get_index_16, get_index_17, False, False)
        get_index_18 = self.get_index('index6')
        load_8 = ops.load('arg5_1', get_index_18)
        add_5 = ops.add(add_4, load_8)
        get_index_19 = self.get_index('index7')
        store = ops.store('buf0', get_index_19, add_5, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 768)
        x0 = xindex % 768
        x1 = (xindex // 768) % 512
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp17 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp21 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 30522, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 30522), "index out of bounds: 0 <= tmp4 < 30522")
        tmp6 = tl.load(in_ptr1 + (x0 + (768*tmp4)), None)
        tmp8 = tl.full([XBLOCK], 512, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
        tmp13 = tl.load(in_ptr3 + (x0 + (768*tmp11)), None)
        tmp14 = tmp6 + tmp13
        tmp16 = tmp14 + tmp15
        tmp18 = tmp16 + tmp17
        tmp19 = tmp18 + tmp15
        tmp20 = tmp19 + tmp17
        tmp22 = tmp20 + tmp21
        tl.store(out_ptr0 + (x4), tmp22, None)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8192}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 8192, c1: 768}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (8192, 768)
op1.sizes = ([8192], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[2, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op1_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 0
    index2 = 1024
    index3 = z1
    index4 = 2
    index5 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_3)
        add = ops.add(load, load_1)
        get_index_4 = self.get_index('index1')
        get_index_5 = self.get_index('index4')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg7_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf1', get_index_7, getitem)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 8192}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 8192, c1: 768}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (8192, 768)
op2.sizes = ([8192], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[2, 768], stride=[768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op2_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 0
    index2 = 1024
    index3 = z1
    index4 = 2
    index5 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_3)
        add = ops.add(load, load_1)
        get_index_4 = self.get_index('index1')
        get_index_5 = self.get_index('index4')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg7_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf2', get_index_7, getitem_1)
        return store_reduction
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 6291456}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 6291456}, None),
        MemoryDep('buf1', c0, {c0: 8192}, None),
        MemoryDep('buf2', c0, {c0: 8192}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg8_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg9_1', c1, {c0: 8192, c1: 768}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (6291456, 1)
op4.sizes = ([8192, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 768], stride=[768, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[2, 768], stride=[768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf2_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op4_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = 0
    index2 = 1024
    index3 = z1
    index4 = 2
    index5 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_3)
        add = ops.add(load, load_1)
        get_index_4 = self.get_index('index1')
        get_index_5 = self.get_index('index4')
        check_bounds_1 = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg7_1', get_index_6)
        add_1 = ops.add(add, load_2)
        get_index_7 = self.get_index('index5')
        load_3 = ops.load('buf1', get_index_7)
        sub = ops.sub(add_1, load_3)
        get_index_8 = self.get_index('index5')
        load_4 = ops.load('buf2', get_index_8)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_9 = self.get_index('index3')
        load_5 = ops.load('arg8_1', get_index_9)
        mul_1 = ops.mul(mul, load_5)
        get_index_10 = self.get_index('index3')
        load_6 = ops.load('arg9_1', get_index_10)
        add_3 = ops.add(mul_1, load_6)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf4', get_index_11, add_3, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.addmm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op6.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op7.met_dependencies = [StarDep(name='arg14_1', mode=None), StarDep(name='arg15_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.addmm


op8: ExternKernelSchedulerNode(FallbackKernel)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = 
    [   StarDep(name='buf5', mode=None),
        StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: FallbackKernel
    buf8.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op9: ExternKernelSchedulerNode(MultiOutput)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: MultiOutput
    buf9.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = None


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op13.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
    ]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 8192}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf4', c0, {c0: 6291456}, None)]
op14.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 8192, c1: 768}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf14.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (8192, 768)
op14.sizes = ([8192], [768])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op14_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_3, getitem)
        return store_reduction
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 8192}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf4', c0, {c0: 6291456}, None)]
op15.met_dependencies = [MemoryDep('arg17_1', c1, {c0: 8192, c1: 768}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf15.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (8192, 768)
op15.sizes = ([8192], [768])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op15_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_3, getitem_1)
        return store_reduction
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 6291456}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 6291456}, None),
        MemoryDep('buf14', c0, {c0: 8192}, None),
        MemoryDep('buf15', c0, {c0: 8192}, None),
        MemoryDep('buf4', c0, {c0: 6291456}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg19_1', c1, {c0: 8192, c1: 768}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf17.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (6291456, 1)
op17.sizes = ([8192, 768], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf15_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op17_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf14', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf15', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg18_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg19_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf17', get_index_7, add_3, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 25165824}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 25165824}, None)]
op19.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 8192, c1: 3072}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (25165824, 1)
op19.sizes = ([8192, 3072], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op19_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf19', get_index_4, mul_2, None)
        return store
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8192}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 6291456}, None),
        MemoryDep('buf20', c0, {c0: 6291456}, None)]
op21.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf21.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (8192, 768)
op21.sizes = ([8192], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op21_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf21', get_index_3, getitem)
        return store_reduction
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 8192}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 6291456}, None),
        MemoryDep('buf20', c0, {c0: 6291456}, None)]
op22.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (8192, 768)
op22.sizes = ([8192], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op22_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf22', get_index_3, getitem_1)
        return store_reduction
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 6291456}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 6291456}, None),
        MemoryDep('buf20', c0, {c0: 6291456}, None),
        MemoryDep('buf21', c0, {c0: 8192}, None),
        MemoryDep('buf22', c0, {c0: 8192}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg25_1', c1, {c0: 8192, c1: 768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (6291456, 1)
op24.sizes = ([8192, 768], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op24_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf21', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf22', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg24_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg25_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf24', get_index_7, add_3, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg26_1', mode=None), StarDep(name='arg27_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.addmm


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op26.met_dependencies = [StarDep(name='arg28_1', mode=None), StarDep(name='arg29_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.node.kernel = extern_kernels.addmm


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op27.met_dependencies = [StarDep(name='arg30_1', mode=None), StarDep(name='arg31_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.addmm


op28: ExternKernelSchedulerNode(FallbackKernel)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = 
    [   StarDep(name='buf25', mode=None),
        StarDep(name='buf26', mode=None),
        StarDep(name='buf27', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: FallbackKernel
    buf28.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op28.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op29: ExternKernelSchedulerNode(MultiOutput)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: MultiOutput
    buf29.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = None


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op33.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 8192}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None)]
op34.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 8192, c1: 768}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (8192, 768)
op34.sizes = ([8192], [768])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op34_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 8192}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None)]
op35.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 8192, c1: 768}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (8192, 768)
op35.sizes = ([8192], [768])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op35_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_3, getitem_1)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 6291456}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 6291456}, None),
        MemoryDep('buf33', c0, {c0: 6291456}, None),
        MemoryDep('buf34', c0, {c0: 8192}, None),
        MemoryDep('buf35', c0, {c0: 8192}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg34_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg35_1', c1, {c0: 8192, c1: 768}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (6291456, 1)
op37.sizes = ([8192, 768], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op37_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf34', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf35', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg34_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg35_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf37', get_index_7, add_3, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 25165824}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 25165824}, None)]
op39.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 8192, c1: 3072}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (25165824, 1)
op39.sizes = ([8192, 3072], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op39_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, mul_2, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 8192}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 6291456}, None),
        MemoryDep('buf40', c0, {c0: 6291456}, None)]
op41.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (8192, 768)
op41.sizes = ([8192], [768])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op41_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem)
        return store_reduction
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 8192}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 6291456}, None),
        MemoryDep('buf40', c0, {c0: 6291456}, None)]
op42.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (8192, 768)
op42.sizes = ([8192], [768])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op42_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_3, getitem_1)
        return store_reduction
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 6291456}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 6291456}, None),
        MemoryDep('buf40', c0, {c0: 6291456}, None),
        MemoryDep('buf41', c0, {c0: 8192}, None),
        MemoryDep('buf42', c0, {c0: 8192}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg40_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 8192, c1: 768}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf44.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (6291456, 1)
op44.sizes = ([8192, 768], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op44_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf41', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf42', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg40_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg41_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf44', get_index_7, add_3, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg42_1', mode=None), StarDep(name='arg43_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = extern_kernels.addmm


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op46.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op46.node.kernel = extern_kernels.addmm


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op47.met_dependencies = [StarDep(name='arg46_1', mode=None), StarDep(name='arg47_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.addmm


op48: ExternKernelSchedulerNode(FallbackKernel)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = 
    [   StarDep(name='buf45', mode=None),
        StarDep(name='buf46', mode=None),
        StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: FallbackKernel
    buf48.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op49: ExternKernelSchedulerNode(MultiOutput)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: MultiOutput
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = None


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op53.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 8192}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None)]
op54.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (8192, 768)
op54.sizes = ([8192], [768])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op54_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_3, getitem)
        return store_reduction
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 8192}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None)]
op55.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (8192, 768)
op55.sizes = ([8192], [768])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op55_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_3, getitem_1)
        return store_reduction
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 6291456}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 6291456}, None),
        MemoryDep('buf53', c0, {c0: 6291456}, None),
        MemoryDep('buf54', c0, {c0: 8192}, None),
        MemoryDep('buf55', c0, {c0: 8192}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg49_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg51_1', c1, {c0: 8192, c1: 768}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (6291456, 1)
op57.sizes = ([8192, 768], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op57_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf54', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf55', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg50_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg51_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf57', get_index_7, add_3, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 25165824}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 25165824}, None)]
op59.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 8192, c1: 3072}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (25165824, 1)
op59.sizes = ([8192, 3072], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op59_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf58', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg53_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf59', get_index_4, mul_2, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
    ]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 8192}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 6291456}, None),
        MemoryDep('buf60', c0, {c0: 6291456}, None)]
op61.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf61.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (8192, 768)
op61.sizes = ([8192], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op61_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem)
        return store_reduction
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 8192}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 6291456}, None),
        MemoryDep('buf60', c0, {c0: 6291456}, None)]
op62.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf62.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (8192, 768)
op62.sizes = ([8192], [768])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op62_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem_1)
        return store_reduction
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 6291456}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 6291456}, None),
        MemoryDep('buf60', c0, {c0: 6291456}, None),
        MemoryDep('buf61', c0, {c0: 8192}, None),
        MemoryDep('buf62', c0, {c0: 8192}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg56_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 8192, c1: 768}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (6291456, 1)
op64.sizes = ([8192, 768], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op64_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf61', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf62', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg56_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg57_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf64', get_index_7, add_3, None)
        return store
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = extern_kernels.addmm


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op66.met_dependencies = [StarDep(name='arg60_1', mode=None), StarDep(name='arg61_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.addmm


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op67.met_dependencies = [StarDep(name='arg62_1', mode=None), StarDep(name='arg63_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.node.kernel = extern_kernels.addmm


op68: ExternKernelSchedulerNode(FallbackKernel)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = 
    [   StarDep(name='buf65', mode=None),
        StarDep(name='buf66', mode=None),
        StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: FallbackKernel
    buf68.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op68.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op69: ExternKernelSchedulerNode(MultiOutput)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: MultiOutput
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = None


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op73.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 8192}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None)]
op74.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 8192, c1: 768}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (8192, 768)
op74.sizes = ([8192], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op74_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem)
        return store_reduction
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 8192}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None)]
op75.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 8192, c1: 768}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (8192, 768)
op75.sizes = ([8192], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op75_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem_1)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 6291456}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 6291456}, None),
        MemoryDep('buf73', c0, {c0: 6291456}, None),
        MemoryDep('buf74', c0, {c0: 8192}, None),
        MemoryDep('buf75', c0, {c0: 8192}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg65_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg66_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 8192, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (6291456, 1)
op77.sizes = ([8192, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op77_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf74', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf75', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg66_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg67_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf77', get_index_7, add_3, None)
        return store
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 25165824}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 25165824}, None)]
op79.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 8192, c1: 3072}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (25165824, 1)
op79.sizes = ([8192, 3072], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op79_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf79', get_index_4, mul_2, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 8192}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 6291456}, None),
        MemoryDep('buf80', c0, {c0: 6291456}, None)]
op81.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (8192, 768)
op81.sizes = ([8192], [768])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op81_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem)
        return store_reduction
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 8192}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 6291456}, None),
        MemoryDep('buf80', c0, {c0: 6291456}, None)]
op82.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (8192, 768)
op82.sizes = ([8192], [768])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op82_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_3, getitem_1)
        return store_reduction
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6291456}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 6291456}, None),
        MemoryDep('buf80', c0, {c0: 6291456}, None),
        MemoryDep('buf81', c0, {c0: 8192}, None),
        MemoryDep('buf82', c0, {c0: 8192}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg73_1', c1, {c0: 8192, c1: 768}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (6291456, 1)
op84.sizes = ([8192, 768], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op84_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf81', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf82', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg72_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg73_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf84', get_index_7, add_3, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg74_1', mode=None), StarDep(name='arg75_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.addmm


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op86.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.addmm


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op87.met_dependencies = [StarDep(name='arg78_1', mode=None), StarDep(name='arg79_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = extern_kernels.addmm


op88: ExternKernelSchedulerNode(FallbackKernel)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = 
    [   StarDep(name='buf85', mode=None),
        StarDep(name='buf86', mode=None),
        StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: FallbackKernel
    buf88.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op88.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op89: ExternKernelSchedulerNode(MultiOutput)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: MultiOutput
    buf89.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = None


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op93.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 8192}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None)]
op94.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (8192, 768)
op94.sizes = ([8192], [768])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op94_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 8192}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None)]
op95.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (8192, 768)
op95.sizes = ([8192], [768])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op95_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem_1)
        return store_reduction
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 6291456}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 6291456}, None),
        MemoryDep('buf93', c0, {c0: 6291456}, None),
        MemoryDep('buf94', c0, {c0: 8192}, None),
        MemoryDep('buf95', c0, {c0: 8192}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg82_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 768}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (6291456, 1)
op97.sizes = ([8192, 768], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op97_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf94', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf95', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg82_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg83_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf97', get_index_7, add_3, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 25165824}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 25165824}, None)]
op99.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 8192, c1: 3072}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (25165824, 1)
op99.sizes = ([8192, 3072], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op99_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf98', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf99', get_index_4, mul_2, None)
        return store
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op100.node.kernel = extern_kernels.mm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 8192}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 6291456}, None),
        MemoryDep('buf97', c0, {c0: 6291456}, None)]
op101.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf101.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (8192, 768)
op101.sizes = ([8192], [768])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op101_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 8192}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 6291456}, None),
        MemoryDep('buf97', c0, {c0: 6291456}, None)]
op102.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (8192, 768)
op102.sizes = ([8192], [768])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op102_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf102', get_index_3, getitem_1)
        return store_reduction
op102 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 6291456}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 6291456}, None),
        MemoryDep('buf101', c0, {c0: 8192}, None),
        MemoryDep('buf102', c0, {c0: 8192}, None),
        MemoryDep('buf97', c0, {c0: 6291456}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 8192, c1: 768}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (6291456, 1)
op104.sizes = ([8192, 768], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op104_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf101', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf102', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg88_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg89_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf104', get_index_7, add_3, None)
        return store
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg90_1', mode=None), StarDep(name='arg91_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.addmm


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op106.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.addmm


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op107.met_dependencies = [StarDep(name='arg94_1', mode=None), StarDep(name='arg95_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.addmm


op108: ExternKernelSchedulerNode(FallbackKernel)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = 
    [   StarDep(name='buf105', mode=None),
        StarDep(name='buf106', mode=None),
        StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: FallbackKernel
    buf108.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf108.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
]
op108.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op109: ExternKernelSchedulerNode(MultiOutput)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: MultiOutput
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = None


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op113.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8192}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None)]
op114.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 8192, c1: 768}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf114.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (8192, 768)
op114.sizes = ([8192], [768])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op114_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_3, getitem)
        return store_reduction
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 8192}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None)]
op115.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 8192, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf115.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (8192, 768)
op115.sizes = ([8192], [768])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op115_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_3, getitem_1)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 6291456}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 6291456}, None),
        MemoryDep('buf113', c0, {c0: 6291456}, None),
        MemoryDep('buf114', c0, {c0: 8192}, None),
        MemoryDep('buf115', c0, {c0: 8192}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg97_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg98_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg99_1', c1, {c0: 8192, c1: 768}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf117.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (6291456, 1)
op117.sizes = ([8192, 768], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op117_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf114', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf115', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg98_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg99_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf117', get_index_7, add_3, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 25165824}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 25165824}, None)]
op119.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8192, c1: 3072}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (25165824, 1)
op119.sizes = ([8192, 3072], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op119_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg101_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf119', get_index_4, mul_2, None)
        return store
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 8192}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 6291456}, None),
        MemoryDep('buf120', c0, {c0: 6291456}, None)]
op121.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (8192, 768)
op121.sizes = ([8192], [768])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op121_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem)
        return store_reduction
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 8192}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 6291456}, None),
        MemoryDep('buf120', c0, {c0: 6291456}, None)]
op122.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (8192, 768)
op122.sizes = ([8192], [768])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op122_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem_1)
        return store_reduction
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 6291456}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 6291456}, None),
        MemoryDep('buf120', c0, {c0: 6291456}, None),
        MemoryDep('buf121', c0, {c0: 8192}, None),
        MemoryDep('buf122', c0, {c0: 8192}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg104_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg105_1', c1, {c0: 8192, c1: 768}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (6291456, 1)
op124.sizes = ([8192, 768], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf122_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op124_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf117', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf121', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf122', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg104_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg105_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf124', get_index_7, add_3, None)
        return store
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg106_1', mode=None), StarDep(name='arg107_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.addmm


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op126.met_dependencies = [StarDep(name='arg108_1', mode=None), StarDep(name='arg109_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.addmm


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op127.met_dependencies = [StarDep(name='arg110_1', mode=None), StarDep(name='arg111_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.addmm


op128: ExternKernelSchedulerNode(FallbackKernel)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = 
    [   StarDep(name='buf125', mode=None),
        StarDep(name='buf126', mode=None),
        StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: FallbackKernel
    buf128.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op129: ExternKernelSchedulerNode(MultiOutput)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: MultiOutput
    buf129.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = None


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op133.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.mm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 8192}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None)]
op134.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 8192, c1: 768}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf134.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (8192, 768)
op134.sizes = ([8192], [768])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op134_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf134', get_index_3, getitem)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 8192}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None)]
op135.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 8192, c1: 768}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf135.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (8192, 768)
op135.sizes = ([8192], [768])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op135_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf135', get_index_3, getitem_1)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 6291456}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 6291456}, None),
        MemoryDep('buf133', c0, {c0: 6291456}, None),
        MemoryDep('buf134', c0, {c0: 8192}, None),
        MemoryDep('buf135', c0, {c0: 8192}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg115_1', c1, {c0: 8192, c1: 768}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (6291456, 1)
op137.sizes = ([8192, 768], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op137_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf134', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf135', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg114_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg115_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf137', get_index_7, add_3, None)
        return store
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op138.node.kernel = extern_kernels.mm


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 25165824}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 25165824}, None)]
op139.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 8192, c1: 3072}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (25165824, 1)
op139.sizes = ([8192, 3072], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op139_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf139', get_index_4, mul_2, None)
        return store
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
    ]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 8192}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6291456}, None),
        MemoryDep('buf140', c0, {c0: 6291456}, None)]
op141.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 8192, c1: 768}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf141.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (8192, 768)
op141.sizes = ([8192], [768])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op141_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem)
        return store_reduction
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 8192}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6291456}, None),
        MemoryDep('buf140', c0, {c0: 6291456}, None)]
op142.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 8192, c1: 768}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf142.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (8192, 768)
op142.sizes = ([8192], [768])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op142_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem_1)
        return store_reduction
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 6291456}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6291456}, None),
        MemoryDep('buf140', c0, {c0: 6291456}, None),
        MemoryDep('buf141', c0, {c0: 8192}, None),
        MemoryDep('buf142', c0, {c0: 8192}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 768}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf144.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (6291456, 1)
op144.sizes = ([8192, 768], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op144_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf141', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf142', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg120_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg121_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf144', get_index_7, add_3, None)
        return store
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = extern_kernels.addmm


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op146.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.addmm


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op147.met_dependencies = [StarDep(name='arg126_1', mode=None), StarDep(name='arg127_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = extern_kernels.addmm


op148: ExternKernelSchedulerNode(FallbackKernel)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = 
    [   StarDep(name='buf145', mode=None),
        StarDep(name='buf146', mode=None),
        StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: FallbackKernel
    buf148.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
    ]
]
op148.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op149: ExternKernelSchedulerNode(MultiOutput)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: MultiOutput
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = None


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op153.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 8192}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None)]
op154.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 8192, c1: 768}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (8192, 768)
op154.sizes = ([8192], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op154_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_3, getitem)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 8192}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None)]
op155.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 8192, c1: 768}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (8192, 768)
op155.sizes = ([8192], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op155_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_3, getitem_1)
        return store_reduction
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 6291456}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 6291456}, None),
        MemoryDep('buf153', c0, {c0: 6291456}, None),
        MemoryDep('buf154', c0, {c0: 8192}, None),
        MemoryDep('buf155', c0, {c0: 8192}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg131_1', c1, {c0: 8192, c1: 768}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (6291456, 1)
op157.sizes = ([8192, 768], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op157_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf154', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf155', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg130_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg131_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf157', get_index_7, add_3, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.mm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 25165824}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 25165824}, None)]
op159.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 8192, c1: 3072}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (25165824, 1)
op159.sizes = ([8192, 3072], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op159_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf158', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf159', get_index_4, mul_2, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 8192}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 6291456}, None),
        MemoryDep('buf160', c0, {c0: 6291456}, None)]
op161.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 8192, c1: 768}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (8192, 768)
op161.sizes = ([8192], [768])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op161_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 8192}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 6291456}, None),
        MemoryDep('buf160', c0, {c0: 6291456}, None)]
op162.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 8192, c1: 768}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (8192, 768)
op162.sizes = ([8192], [768])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op162_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 6291456}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 6291456}, None),
        MemoryDep('buf160', c0, {c0: 6291456}, None),
        MemoryDep('buf161', c0, {c0: 8192}, None),
        MemoryDep('buf162', c0, {c0: 8192}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg136_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 8192, c1: 768}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (6291456, 1)
op164.sizes = ([8192, 768], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op164_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg136_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg137_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg138_1', mode=None), StarDep(name='arg139_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.addmm


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op166.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = extern_kernels.addmm


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op167.met_dependencies = [StarDep(name='arg142_1', mode=None), StarDep(name='arg143_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.addmm


op168: ExternKernelSchedulerNode(FallbackKernel)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = 
    [   StarDep(name='buf165', mode=None),
        StarDep(name='buf166', mode=None),
        StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: FallbackKernel
    buf168.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op169: ExternKernelSchedulerNode(MultiOutput)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: MultiOutput
    buf169.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = None


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op173.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
    ]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 8192}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None)]
op174.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 8192, c1: 768}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf174.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (8192, 768)
op174.sizes = ([8192], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op174_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_3, getitem)
        return store_reduction
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 8192}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None)]
op175.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 8192, c1: 768}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf175.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (8192, 768)
op175.sizes = ([8192], [768])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op175_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem_1)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 6291456}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 6291456}, None),
        MemoryDep('buf173', c0, {c0: 6291456}, None),
        MemoryDep('buf174', c0, {c0: 8192}, None),
        MemoryDep('buf175', c0, {c0: 8192}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg145_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg146_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 8192, c1: 768}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (6291456, 1)
op177.sizes = ([8192, 768], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op177_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf174', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf175', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg146_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg147_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf177', get_index_7, add_3, None)
        return store
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 25165824}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 25165824}, None)]
op179.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 8192, c1: 3072}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (25165824, 1)
op179.sizes = ([8192, 3072], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op179_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf178', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf179', get_index_4, mul_2, None)
        return store
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 8192}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf177', c0, {c0: 6291456}, None),
        MemoryDep('buf180', c0, {c0: 6291456}, None)]
op181.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 8192, c1: 768}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (8192, 768)
op181.sizes = ([8192], [768])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op181_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_3, getitem)
        return store_reduction
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 8192}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf177', c0, {c0: 6291456}, None),
        MemoryDep('buf180', c0, {c0: 6291456}, None)]
op182.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 8192, c1: 768}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (8192, 768)
op182.sizes = ([8192], [768])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op182_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf182', get_index_3, getitem_1)
        return store_reduction
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 6291456}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf177', c0, {c0: 6291456}, None),
        MemoryDep('buf180', c0, {c0: 6291456}, None),
        MemoryDep('buf181', c0, {c0: 8192}, None),
        MemoryDep('buf182', c0, {c0: 8192}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg152_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg153_1', c1, {c0: 8192, c1: 768}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf184.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (6291456, 1)
op184.sizes = ([8192, 768], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf182_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op184_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf181', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf182', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg152_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg153_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf184', get_index_7, add_3, None)
        return store
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg154_1', mode=None), StarDep(name='arg155_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.addmm


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op186.met_dependencies = [StarDep(name='arg156_1', mode=None), StarDep(name='arg157_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.addmm


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op187.met_dependencies = [StarDep(name='arg158_1', mode=None), StarDep(name='arg159_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.node.kernel = extern_kernels.addmm


op188: ExternKernelSchedulerNode(FallbackKernel)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = 
    [   StarDep(name='buf185', mode=None),
        StarDep(name='buf186', mode=None),
        StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: FallbackKernel
    buf188.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
]
op188.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op189: ExternKernelSchedulerNode(MultiOutput)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: MultiOutput
    buf189.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = None


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op193.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op193.node.kernel = extern_kernels.mm


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 8192}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None)]
op194.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 8192, c1: 768}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (8192, 768)
op194.sizes = ([8192], [768])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op194_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 8192}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None)]
op195.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 8192, c1: 768}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (8192, 768)
op195.sizes = ([8192], [768])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op195_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 6291456}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 6291456}, None),
        MemoryDep('buf193', c0, {c0: 6291456}, None),
        MemoryDep('buf194', c0, {c0: 8192}, None),
        MemoryDep('buf195', c0, {c0: 8192}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg162_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg163_1', c1, {c0: 8192, c1: 768}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (6291456, 1)
op197.sizes = ([8192, 768], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf195_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op197_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf195', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg162_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg163_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf197', get_index_7, add_3, None)
        return store
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 25165824}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 25165824}, None)]
op199.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 8192, c1: 3072}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (25165824, 1)
op199.sizes = ([8192, 3072], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op199_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf199', get_index_4, mul_2, None)
        return store
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 8192}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 6291456}, None),
        MemoryDep('buf200', c0, {c0: 6291456}, None)]
op201.met_dependencies = [MemoryDep('arg167_1', c1, {c0: 8192, c1: 768}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (8192, 768)
op201.sizes = ([8192], [768])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op201_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 8192}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 6291456}, None),
        MemoryDep('buf200', c0, {c0: 6291456}, None)]
op202.met_dependencies = [MemoryDep('arg167_1', c1, {c0: 8192, c1: 768}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (8192, 768)
op202.sizes = ([8192], [768])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op202_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf202', get_index_3, getitem_1)
        return store_reduction
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 6291456}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 6291456}, None),
        MemoryDep('buf200', c0, {c0: 6291456}, None),
        MemoryDep('buf201', c0, {c0: 8192}, None),
        MemoryDep('buf202', c0, {c0: 8192}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg168_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg169_1', c1, {c0: 8192, c1: 768}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (6291456, 1)
op204.sizes = ([8192, 768], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op204_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf201', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf202', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg168_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg169_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf204', get_index_7, add_3, None)
        return store
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.addmm


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op206.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.addmm


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op207.met_dependencies = [StarDep(name='arg174_1', mode=None), StarDep(name='arg175_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.addmm


op208: ExternKernelSchedulerNode(FallbackKernel)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = 
    [   StarDep(name='buf205', mode=None),
        StarDep(name='buf206', mode=None),
        StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: FallbackKernel
    buf208.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op208.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op209: ExternKernelSchedulerNode(MultiOutput)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: MultiOutput
    buf209.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = None


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op213.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 8192}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None)]
op214.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 8192, c1: 768}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (8192, 768)
op214.sizes = ([8192], [768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op214_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf204', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_3, getitem)
        return store_reduction
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 8192}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None)]
op215.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 8192, c1: 768}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (8192, 768)
op215.sizes = ([8192], [768])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op215_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf204', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem_1)
        return store_reduction
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 6291456}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 6291456}, None),
        MemoryDep('buf213', c0, {c0: 6291456}, None),
        MemoryDep('buf214', c0, {c0: 8192}, None),
        MemoryDep('buf215', c0, {c0: 8192}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg178_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg179_1', c1, {c0: 8192, c1: 768}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (6291456, 1)
op217.sizes = ([8192, 768], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf215_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op217_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf204', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf214', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf215', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg178_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg179_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf217', get_index_7, add_3, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 25165824}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 25165824}, None)]
op219.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 8192, c1: 3072}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (25165824, 1)
op219.sizes = ([8192, 3072], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op219_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf218', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg181_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf219', get_index_4, mul_2, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
    ]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 8192}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 6291456}, None),
        MemoryDep('buf220', c0, {c0: 6291456}, None)]
op221.met_dependencies = [MemoryDep('arg183_1', c1, {c0: 8192, c1: 768}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf221.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (8192, 768)
op221.sizes = ([8192], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op221_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_3, getitem)
        return store_reduction
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 8192}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 6291456}, None),
        MemoryDep('buf220', c0, {c0: 6291456}, None)]
op222.met_dependencies = [MemoryDep('arg183_1', c1, {c0: 8192, c1: 768}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (8192, 768)
op222.sizes = ([8192], [768])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op222_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem_1)
        return store_reduction
op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 6291456}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 6291456}, None),
        MemoryDep('buf220', c0, {c0: 6291456}, None),
        MemoryDep('buf221', c0, {c0: 8192}, None),
        MemoryDep('buf222', c0, {c0: 8192}, None)]
op224.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg184_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg185_1', c1, {c0: 8192, c1: 768}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf224.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (6291456, 1)
op224.sizes = ([8192, 768], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op224_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf221', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf222', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg184_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg185_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf224', get_index_7, add_3, None)
        return store
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg186_1', mode=None), StarDep(name='arg187_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.addmm


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op226.met_dependencies = [StarDep(name='arg188_1', mode=None), StarDep(name='arg189_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.addmm


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op227.met_dependencies = [StarDep(name='arg190_1', mode=None), StarDep(name='arg191_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.node.kernel = extern_kernels.addmm


op228: ExternKernelSchedulerNode(FallbackKernel)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = 
    [   StarDep(name='buf225', mode=None),
        StarDep(name='buf226', mode=None),
        StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: FallbackKernel
    buf228.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op228.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op229: ExternKernelSchedulerNode(MultiOutput)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: MultiOutput
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16, 12, 512, 64], stride=[393216, 64, 768, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = None


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op233.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 8192}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None)]
op234.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 8192, c1: 768}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf234.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (8192, 768)
op234.sizes = ([8192], [768])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op234_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 8192}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None)]
op235.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 8192, c1: 768}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (8192, 768)
op235.sizes = ([8192], [768])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op235_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem_1)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 6291456}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 6291456}, None),
        MemoryDep('buf233', c0, {c0: 6291456}, None),
        MemoryDep('buf234', c0, {c0: 8192}, None),
        MemoryDep('buf235', c0, {c0: 8192}, None)]
op237.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg194_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg195_1', c1, {c0: 8192, c1: 768}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf237.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (6291456, 1)
op237.sizes = ([8192, 768], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op237_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf224', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf234', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf235', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg194_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg195_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf237', get_index_7, add_3, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 25165824}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 25165824}, None)]
op239.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 8192, c1: 3072}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (25165824, 1)
op239.sizes = ([8192, 3072], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8192, 3072], stride=[3072, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 3072], stride=[1572864, 3072, 1])
class op239_loop_body:
    var_ranges = {z0: 8192, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg197_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf239', get_index_4, mul_2, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 25165824
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
    ]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 8192}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 6291456}, None),
        MemoryDep('buf240', c0, {c0: 6291456}, None)]
op241.met_dependencies = [MemoryDep('arg199_1', c1, {c0: 8192, c1: 768}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (8192, 768)
op241.sizes = ([8192], [768])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op241_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf241', get_index_3, getitem)
        return store_reduction
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 8192}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 6291456}, None),
        MemoryDep('buf240', c0, {c0: 6291456}, None)]
op242.met_dependencies = [MemoryDep('arg199_1', c1, {c0: 8192, c1: 768}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (8192, 768)
op242.sizes = ([8192], [768])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op242_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem_1)
        return store_reduction
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 6291456}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 6291456}, None),
        MemoryDep('buf240', c0, {c0: 6291456}, None),
        MemoryDep('buf241', c0, {c0: 8192}, None),
        MemoryDep('buf242', c0, {c0: 8192}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg200_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg201_1', c1, {c0: 8192, c1: 768}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (6291456, 1)
op244.sizes = ([8192, 768], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op244_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf237', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf241', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf242', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg200_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg201_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf244', get_index_7, add_3, None)
        return store
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
    ]
]
op245.node.kernel = extern_kernels.mm


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 8192}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 6291456}, None)]
op246.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 8192, c1: 768}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf246.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (8192, 768)
op246.sizes = ([8192], [768])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op246_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_4, getitem)
        return store_reduction
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = tl.where(rmask, tmp11, 0)
        tmp14 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp16 = tl.where(rmask, tmp14, 0)
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp16, 0))
        tmp18 = tl.full([1], 768, tl.int32)
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp17 / tmp19
        tmp21 = tmp11 - tmp20
        tmp22 = tmp21 * tmp21
        tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
        tmp25 = tl.where(rmask, tmp23, 0)
        tmp26 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 8192}, None)]
op247.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 6291456}, None)]
op247.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 8192, c1: 768}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
    buf247.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (8192, 768)
op247.sizes = ([8192], [768])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
class op247_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_4, getitem_1)
        return store_reduction
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[8192, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 8192
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = tl.where(rmask, tmp11, 0)
        tmp14 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp16 = tl.where(rmask, tmp14, 0)
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp16, 0))
        tmp18 = tl.full([1], 768, tl.int32)
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp17 / tmp19
        tmp21 = tmp11 - tmp20
        tmp22 = tmp21 * tmp21
        tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
        tmp25 = tl.where(rmask, tmp23, 0)
        tmp26 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
        tl.store(out_ptr0 + (x0), tmp26, None)


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 6291456}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 6291456}, None),
        MemoryDep('buf246', c0, {c0: 8192}, None),
        MemoryDep('buf247', c0, {c0: 8192}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg207_1', c1, {c0: 8192, c1: 768}, None),
        MemoryDep('arg208_1', c1, {c0: 8192, c1: 768}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (6291456, 1)
op249.sizes = ([8192, 768], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8192, 768], stride=[768, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
buf247_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 1], stride=[512, 1, 8192])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 512, 768], stride=[393216, 768, 1])
class op249_loop_body:
    var_ranges = {z0: 8192, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg206_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf246', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf247', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-12, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg207_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg208_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf249', get_index_8, add_4, None)
        return store
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 768.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-12
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x2), tmp23, None)


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', 30528*c0 + c1, {c0: 768, c1: 30524}, None)]
op250.unmet_dependencies = []
op250.met_dependencies = [MemoryDep('arg1_1', c0 + 768*I, {c0: 768, c1: 30524}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[768, 30524], stride=[30528, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (23442432, 1)
op250.sizes = ([768, 30524], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 768], stride=[768, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[768, 30524], stride=[30528, 1])
class op250_loop_body:
    var_ranges = {z0: 768, z1: 30524}
    index0 = z1
    index1 = z0 + 768*I
    index2 = 30528*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30522, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(30522, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30524, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf250', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 23442432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex % 30524
        x1 = (xindex // 30524)
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 30522, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (768*x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 30524, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0 + (30528*x1)), tmp12, xmask)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 30524}, None)]
op251.unmet_dependencies = []
op251.met_dependencies = [MemoryDep('arg209_1', I, {c0: 30524}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[30524], stride=[1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (30524, 1)
op251.sizes = ([30524], [])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[30522], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[30524], stride=[1])
class op251_loop_body:
    var_ranges = {z0: 30524}
    index0 = z0
    index1 = I
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30522, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(30522, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30524, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf251', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg209_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 30524
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 30522, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 30524, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0), tmp12, xmask)


op252: ExternKernelSchedulerNode(ExternKernelOut)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = 
    [   StarDep(name='buf249', mode=None),
        StarDep(name='buf250', mode=None),
        StarDep(name='buf251', mode=None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ExternKernelOut
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8192, 30524], stride=[30528, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op252.node.kernel = extern_kernels.addmm


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 8192}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', 30528*c0 + c1, {c0: 8192, c1: 30522}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (8192, 30522)
op253.sizes = ([8192], [30522])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 30524], stride=[30528, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
class op253_loop_body:
    var_ranges = {z0: 8192, z1: 30522}
    index0 = 30528*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, reduction)
        return store_reduction
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 30522
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (30528*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 8192}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf252', 30528*c0 + c1, {c0: 8192, c1: 30522}, None),
        MemoryDep('buf253', c0, {c0: 8192}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (8192, 30522)
op254.sizes = ([8192], [30522])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 30524], stride=[30528, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
class op254_loop_body:
    var_ranges = {z0: 8192, z1: 30522}
    index0 = 30528*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_2, reduction)
        return store_reduction
op254 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[8192, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 8192
        rnumel = 30522
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (30528*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', 0, {}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf252', 30528*c0 + tmp8, {c0: 8192}, None),
        MemoryDep('buf253', c0, {c0: 8192}, None),
        MemoryDep('buf254', c0, {c0: 8192}, None)]
op255.met_dependencies = [MemoryDep('arg210_1', c0, {c0: 8192}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (1, 8192)
op255.sizes = ([], [8192])
arg210_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8192, 30524], stride=[30528, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8192, 1], stride=[1, 8192])
buf255_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op255_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    index1 = indirect0 + 30528*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg210_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg210_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg210_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf252', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf253', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf254', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_6, reduction)
        return store_reduction
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 30522, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 30522)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 30522")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (30528*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', 0, {}, None)]
op256.unmet_dependencies = []
op256.met_dependencies = [MemoryDep('arg210_1', c0, {c0: 8192}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1, 8192)
op256.sizes = ([], [8192])
arg210_1_layout = FixedLayout('cuda', torch.int64, size=[16, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op256_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg210_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_1, reduction)
        return store_reduction
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', 0, {}, None)]
op257.unmet_dependencies = [MemoryDep('buf255', 0, {}, None), MemoryDep('buf256', 0, {}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1, 1)
op257.sizes = ([], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf256_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf257_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op257_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf256', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf257', get_index_2, truediv, None)
        return store
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



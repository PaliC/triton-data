op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 20, 20], stride=[51200, 400, 20, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1_op2_op4_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op4_op5.writes = 
    [   MemoryDep('buf1', c0, {c0: 3208}, None),
        MemoryDep('buf2', c0, {c0: 3208}, None),
        MemoryDep('buf4', c0, {c0: 410624}, None),
        MemoryDep('buf5', c0, {c0: 410624}, None)]
op1_op2_op4_op5.unmet_dependencies = [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None)]
op1_op2_op4_op5.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None),
        MemoryDep('arg9_1', c1, {c0: 3208, c1: 128}, None)]
op1_op2_op4_op5.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op1_op2_op4_op5.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 3208}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (3208, 128)
op1.sizes = ([8, 401], [128])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 128], stride=[128, 128, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 20, 20], stride=[51200, 400, 20, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 401, 128], stride=[51328, 128, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = z2
    index2 = 51200*z0 + 400*z2 + ModularIndexing(I, 1, 400)
    index3 = 128*z1 + z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg4_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg3_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op1_op2_op4_op5.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 3208}, None)]
op2.unmet_dependencies = [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (3208, 128)
op2.sizes = ([8, 401], [128])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 128], stride=[128, 128, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 20, 20], stride=[51200, 400, 20, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 401, 128], stride=[51328, 128, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = z2
    index2 = 51200*z0 + 400*z2 + ModularIndexing(I, 1, 400)
    index3 = 128*z1 + z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg4_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf2', get_index_5, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg3_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op1_op2_op4_op5.snodes[2] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 410624}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf1', c0, {c0: 3208}, None),
        MemoryDep('buf2', c0, {c0: 3208}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None),
        MemoryDep('arg9_1', c1, {c0: 3208, c1: 128}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (410624, 1)
op4.sizes = ([8, 401, 128], [])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 128], stride=[128, 128, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 20, 20], stride=[51200, 400, 20, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 401, 128], stride=[51328, 128, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = z2
    index2 = 51200*z0 + 400*z2 + ModularIndexing(I, 1, 400)
    index3 = 128*z1 + z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg4_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf1', get_index_5)
        sub = ops.sub(add, load_1)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('buf2', get_index_6)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_7)
        mul_1 = ops.mul(mul, load_3)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf4', get_index_8, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg3_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op1_op2_op4_op5.snodes[3] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 410624}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 410624}, None)]
op5.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 3208, c1: 128}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (410624, 1)
op5.sizes = ([3208, 128], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op5_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf5', get_index_2, add, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg11_1', mode=None), StarDep(name='arg12_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op7: ExternKernelSchedulerNode(FallbackKernel)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: FallbackKernel
    buf7.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op7.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op8: ExternKernelSchedulerNode(MultiOutput)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: MultiOutput
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 32, 128, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = None


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op12.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.mm


op13_op14_op15_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op13_op14_op15_op96.writes = 
    [   MemoryDep('buf13', c0, {c0: 410624}, None),
        MemoryDep('buf14', c0, {c0: 3208}, None),
        MemoryDep('buf15', c0, {c0: 3208}, None),
        MemoryDep('buf96', c0, {c0: 410624}, None)]
op13_op14_op15_op96.unmet_dependencies = 
    [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf12', c0, {c0: 410624}, None)]
op13_op14_op15_op96.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg15_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None)]
op13_op14_op15_op96.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf14.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf15.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op13_op14_op15_op96.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 410624}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf0', 51200*c0 + 400*c2 + ModularIndexing(I, 1, 400), {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf12', c0, {c0: 410624}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg2_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 51328}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (410624, 1)
op13.sizes = ([8, 401, 128], [])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 128], stride=[128, 128, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 20, 20], stride=[51200, 400, 20, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 401, 128], stride=[51328, 128, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = z2
    index2 = 51200*z0 + 400*z2 + ModularIndexing(I, 1, 400)
    index3 = 128*z1 + z2
    index4 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg4_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf12', get_index_5)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg14_1', get_index_6)
        add_1 = ops.add(load_1, load_2)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf13', get_index_7, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg3_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op13_op14_op15_op96.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 3208}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 410624}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf14.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (3208, 128)
op14.sizes = ([3208], [128])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op14_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf14', get_index_1, getitem)
        return store_reduction
op13_op14_op15_op96.snodes[2] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 3208}, None)]
op15.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 410624}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf15.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (3208, 128)
op15.sizes = ([3208], [128])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op15_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_1, getitem_1)
        return store_reduction
op13_op14_op15_op96.snodes[3] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 410624}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 410624}, None),
        MemoryDep('buf14', c0, {c0: 3208}, None),
        MemoryDep('buf15', c0, {c0: 3208}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 3208, c1: 128}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (410624, 1)
op96.sizes = ([3208, 128], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op96_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf14', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf15', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg15_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg16_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.writes = 
    [   MemoryDep('buf17', c0, {c0: 1204224}, None),
        MemoryDep('buf18', c0, {c0: 1204224}, None),
        MemoryDep('buf19', c0, {c0: 1204224}, None),
        MemoryDep('buf20', c0, {c0: 1204224}, None),
        MemoryDep('buf21', c0, {c0: 1204224}, None),
        MemoryDep('buf22', c0, {c0: 1204224}, None),
        MemoryDep('buf23', c0, {c0: 1204224}, None),
        MemoryDep('buf24', c0, {c0: 1204224}, None),
        MemoryDep('buf25', c0, {c0: 1204224}, None),
        MemoryDep('buf26', c0, {c0: 1204224}, None),
        MemoryDep('buf27', c0, {c0: 1204224}, None),
        MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf29', c0, {c0: 1204224}, None),
        MemoryDep('buf30', c0, {c0: 1204224}, None),
        MemoryDep('buf31', c0, {c0: 1204224}, None),
        MemoryDep('buf32', c0, {c0: 1204224}, None),
        MemoryDep('buf33', c0, {c0: 1204224}, None),
        MemoryDep('buf34', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None),
        MemoryDep('buf36', c0, {c0: 1204224}, None),
        MemoryDep('buf37', c0, {c0: 1204224}, None)]
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.unmet_dependencies = []
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1204224}, None)]
op17.unmet_dependencies = []
op17.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1204224, 1)
op17.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op17_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        sub_1 = ops.sub(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_2)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        sub_3 = ops.sub(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_3, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_2, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_3, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_5)
        sub_6 = ops.sub(sub_4, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_6, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(minimum_2, constant_20)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(add_4, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_7 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_9)
        sub_10 = ops.sub(sub_8, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_10, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(minimum_3, constant_31)
        mul_7 = ops.mul(sub_7, add_7)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_8 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_9, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_10, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(1.0, torch.float32)
        add_11 = ops.add(minimum_4, constant_41)
        mul_10 = ops.mul(add_8, add_11)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_14 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_14)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf17', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1204224}, None)]
op18.unmet_dependencies = []
op18.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1204224, 1)
op18.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op18_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        sub_1 = ops.sub(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_2)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_1, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_2, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_3, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(minimum_2, constant_19)
        constant_20 = ops.constant(2.25, torch.float32)
        sub_6 = ops.sub(mul_4, constant_20)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_4, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_4, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_23)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_5, constant_24)
        constant_25 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_5, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_26)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_28)
        mul_7 = ops.mul(sub_6, minimum_3)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_29 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_6, constant_29)
        constant_30 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_6, constant_30)
        constant_31 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_8, constant_31)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_7, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_7, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_9, constant_34)
        floor_4 = ops.floor(sub_11)
        sub_12 = ops.sub(sub_10, floor_4)
        constant_35 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_12, constant_35)
        constant_36 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_36)
        mul_10 = ops.mul(mul_7, minimum_4)
        constant_37 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(mul_10, constant_37)
        mul_11 = ops.mul(load, add_8)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf18', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1204224}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1204224, 1)
op19.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op19_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        sub_1 = ops.sub(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_2)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        add_2 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_2, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(sub_6, constant_21)
        constant_22 = ops.constant(2.25, torch.float32)
        sub_7 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_9)
        sub_10 = ops.sub(sub_8, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_10, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        sub_11 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_7, sub_11)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_6, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_7, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_8, constant_34)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_7, constant_35)
        constant_36 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_8, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_13 = ops.sub(mul_9, constant_37)
        floor_4 = ops.floor(sub_13)
        sub_14 = ops.sub(sub_12, floor_4)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_14, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        sub_15 = ops.sub(constant_40, minimum_4)
        mul_10 = ops.mul(mul_7, sub_15)
        constant_41 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_10, constant_41)
        mul_11 = ops.mul(load, add_9)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf19', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[3] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1204224}, None)]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1204224, 1)
op20.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op20_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        sub_1 = ops.sub(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(sub_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_2)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(2, torch.int64)
        add_2 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_2, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(sub_6, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_7 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_9)
        sub_10 = ops.sub(sub_8, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_10, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(2.0, torch.float32)
        sub_11 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_7, sub_11)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_7 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_8, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_9, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_13 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_13)
        sub_14 = ops.sub(sub_12, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_14, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(2.0, torch.float32)
        sub_15 = ops.sub(constant_41, minimum_4)
        mul_10 = ops.mul(add_7, sub_15)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_16 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_16)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf20', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[4] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 1204224}, None)]
op22.unmet_dependencies = []
op22.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (1204224, 1)
op22.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op22_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype, constant_3)
        constant_4 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_5 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_5)
        constant_6 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_7)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_8 = ops.constant(1, torch.int64)
        sub_2 = ops.sub(to_dtype_1, constant_8)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_2, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_2, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_3, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        add_4 = ops.add(minimum_2, constant_19)
        constant_20 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(add_4, constant_20)
        constant_21 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_21)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_22 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_22)
        constant_23 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_24)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_25 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_25)
        constant_26 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_26)
        constant_27 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_27)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_28 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_28)
        constant_29 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(minimum_3, constant_30)
        mul_7 = ops.mul(sub_6, add_7)
        constant_31 = ops.constant(-6.0, torch.float32)
        add_8 = ops.add(mul_7, constant_31)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_6, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_9, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_8, constant_34)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_7, constant_35)
        constant_36 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_10, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_9, constant_37)
        floor_4 = ops.floor(sub_11)
        sub_12 = ops.sub(sub_10, floor_4)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_12, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        add_11 = ops.add(minimum_4, constant_40)
        mul_10 = ops.mul(add_8, add_11)
        constant_41 = ops.constant(-3.0, torch.float32)
        sub_13 = ops.sub(mul_10, constant_41)
        mul_11 = ops.mul(load, sub_13)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf22', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[5] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1204224}, None)]
op23.unmet_dependencies = []
op23.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1204224, 1)
op23.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op23_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype, constant_3)
        constant_4 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_5 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_5)
        constant_6 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_7)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_8 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_1, constant_8)
        constant_9 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_9)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_10 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_2, constant_10)
        constant_11 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_2, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_12)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_13 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_3, constant_13)
        constant_14 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_3, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_15)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_16 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_16)
        constant_17 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_17)
        constant_18 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(minimum_2, constant_18)
        constant_19 = ops.constant(2.25, torch.float32)
        sub_5 = ops.sub(mul_4, constant_19)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_20 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_4, constant_20)
        constant_21 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_4, constant_21)
        constant_22 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_5, constant_22)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_5, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_5, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_6, constant_25)
        floor_3 = ops.floor(sub_7)
        sub_8 = ops.sub(sub_6, floor_3)
        constant_26 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_8, constant_26)
        constant_27 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_27)
        mul_7 = ops.mul(sub_5, minimum_3)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_28 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_6, constant_28)
        constant_29 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_6, constant_29)
        constant_30 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_8, constant_30)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_31 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_7, constant_31)
        constant_32 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_7, constant_32)
        constant_33 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_9, constant_33)
        floor_4 = ops.floor(sub_10)
        sub_11 = ops.sub(sub_9, floor_4)
        constant_34 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_11, constant_34)
        constant_35 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_35)
        mul_10 = ops.mul(mul_7, minimum_4)
        constant_36 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(mul_10, constant_36)
        mul_11 = ops.mul(load, add_8)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf23', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[6] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1204224}, None)]
op24.unmet_dependencies = []
op24.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1204224, 1)
op24.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op24_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype, constant_3)
        constant_4 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_5 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_5)
        constant_6 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_7)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_8 = ops.constant(1, torch.int64)
        add_2 = ops.add(to_dtype_1, constant_8)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_2, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        sub_5 = ops.sub(constant_19, minimum_2)
        constant_20 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(sub_5, constant_20)
        constant_21 = ops.constant(2.25, torch.float32)
        sub_6 = ops.sub(mul_4, constant_21)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_22 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_22)
        constant_23 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_24)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_25 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_25)
        constant_26 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_26)
        constant_27 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_27)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_28 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_28)
        constant_29 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        sub_10 = ops.sub(constant_30, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_31 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_6, constant_31)
        constant_32 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_7, constant_32)
        constant_33 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_33)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_34 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_7, constant_34)
        constant_35 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_8, constant_35)
        constant_36 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_36)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_37 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_37)
        constant_38 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        sub_14 = ops.sub(constant_39, minimum_4)
        mul_10 = ops.mul(mul_7, sub_14)
        constant_40 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_10, constant_40)
        mul_11 = ops.mul(load, add_9)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf24', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[7] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1204224}, None)]
op25.unmet_dependencies = []
op25.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1204224, 1)
op25.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op25_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype, constant_3)
        constant_4 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_4)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_5 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_5)
        constant_6 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_6)
        constant_7 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_7)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_8 = ops.constant(2, torch.int64)
        add_2 = ops.add(to_dtype_1, constant_8)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_2, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(2.0, torch.float32)
        sub_5 = ops.sub(constant_19, minimum_2)
        constant_20 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(sub_5, constant_20)
        constant_21 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_21)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_22 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_22)
        constant_23 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_23)
        constant_24 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_24)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_25 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_25)
        constant_26 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_26)
        constant_27 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_27)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_28 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_28)
        constant_29 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_29)
        constant_30 = ops.constant(2.0, torch.float32)
        sub_10 = ops.sub(constant_30, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        constant_31 = ops.constant(-6.0, torch.float32)
        add_7 = ops.add(mul_7, constant_31)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_6, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_8, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_34)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_7, constant_35)
        constant_36 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_9, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_37)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_39)
        constant_40 = ops.constant(2.0, torch.float32)
        sub_14 = ops.sub(constant_40, minimum_4)
        mul_10 = ops.mul(add_7, sub_14)
        constant_41 = ops.constant(-3.0, torch.float32)
        sub_15 = ops.sub(mul_10, constant_41)
        mul_11 = ops.mul(load, sub_15)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf25', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[8] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1204224}, None)]
op27.unmet_dependencies = []
op27.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1204224, 1)
op27.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op27_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        sub_2 = ops.sub(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_2, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(minimum_2, constant_20)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(add_5, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(minimum_3, constant_31)
        mul_7 = ops.mul(sub_6, add_8)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_9 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_10, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_11, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_11)
        sub_12 = ops.sub(sub_10, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_12, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(minimum_4, constant_41)
        mul_10 = ops.mul(add_9, add_12)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_13 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_13)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf27', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[9] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1204224}, None)]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1204224, 1)
op28.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op28_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_1, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(minimum_2, constant_19)
        constant_20 = ops.constant(2.25, torch.float32)
        sub_5 = ops.sub(mul_4, constant_20)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_5, constant_23)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_24)
        constant_25 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_6, constant_26)
        floor_3 = ops.floor(sub_7)
        sub_8 = ops.sub(sub_6, floor_3)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_28)
        mul_7 = ops.mul(sub_5, minimum_3)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_29 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_6, constant_29)
        constant_30 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_7, constant_30)
        constant_31 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_8, constant_31)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_7, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_8, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_9, constant_34)
        floor_4 = ops.floor(sub_10)
        sub_11 = ops.sub(sub_9, floor_4)
        constant_35 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_11, constant_35)
        constant_36 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_36)
        mul_10 = ops.mul(mul_7, minimum_4)
        constant_37 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_10, constant_37)
        mul_11 = ops.mul(load, add_9)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf28', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[10] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1204224}, None)]
op29.unmet_dependencies = []
op29.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1204224, 1)
op29.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op29_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        add_3 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_3, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_4, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        sub_5 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(sub_5, constant_21)
        constant_22 = ops.constant(2.25, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        sub_10 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_6, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_8, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_34)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_7, constant_35)
        constant_36 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_9, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_37)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        sub_14 = ops.sub(constant_40, minimum_4)
        mul_10 = ops.mul(mul_7, sub_14)
        constant_41 = ops.constant(1.0, torch.float32)
        add_10 = ops.add(mul_10, constant_41)
        mul_11 = ops.mul(load, add_10)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf29', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[11] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 1204224}, None)]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (1204224, 1)
op30.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op30_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(2, torch.int64)
        add_3 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_3, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_4, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(2.0, torch.float32)
        sub_5 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(sub_5, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(2.0, torch.float32)
        sub_10 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_8 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_9, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_10, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(2.0, torch.float32)
        sub_14 = ops.sub(constant_41, minimum_4)
        mul_10 = ops.mul(add_8, sub_14)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_15 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_15)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf30', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[12] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1204224}, None)]
op32.unmet_dependencies = []
op32.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1204224, 1)
op32.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op32_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(2, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        sub_2 = ops.sub(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(sub_2, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_4)
        sub_5 = ops.sub(sub_3, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_5, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(minimum_2, constant_20)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(add_5, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(minimum_3, constant_31)
        mul_7 = ops.mul(sub_6, add_8)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_9 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_10, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_11, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_11)
        sub_12 = ops.sub(sub_10, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_12, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(minimum_4, constant_41)
        mul_10 = ops.mul(add_9, add_12)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_13 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_13)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf32', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[13] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1204224}, None)]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1204224, 1)
op33.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op33_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(2, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_1, constant_9)
        constant_10 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_10)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_3, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_4, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_16)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_18)
        constant_19 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(minimum_2, constant_19)
        constant_20 = ops.constant(2.25, torch.float32)
        sub_5 = ops.sub(mul_4, constant_20)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_4, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_5, constant_23)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_5, constant_24)
        constant_25 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_6, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_6, constant_26)
        floor_3 = ops.floor(sub_7)
        sub_8 = ops.sub(sub_6, floor_3)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_8, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_28)
        mul_7 = ops.mul(sub_5, minimum_3)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_29 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_6, constant_29)
        constant_30 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_7, constant_30)
        constant_31 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_8, constant_31)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_7, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_8, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_9, constant_34)
        floor_4 = ops.floor(sub_10)
        sub_11 = ops.sub(sub_9, floor_4)
        constant_35 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_11, constant_35)
        constant_36 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_36)
        mul_10 = ops.mul(mul_7, minimum_4)
        constant_37 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_10, constant_37)
        mul_11 = ops.mul(load, add_9)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf33', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[14] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1204224}, None)]
op34.unmet_dependencies = []
op34.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (1204224, 1)
op34.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op34_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(2, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(1, torch.int64)
        add_3 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_3, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_4, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(1.0, torch.float32)
        sub_5 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(1.25, torch.float32)
        mul_4 = ops.mul(sub_5, constant_21)
        constant_22 = ops.constant(2.25, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(1.0, torch.float32)
        sub_10 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_32 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_6, constant_32)
        constant_33 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_8, constant_33)
        constant_34 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_34)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_7, constant_35)
        constant_36 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_9, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_37)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_38)
        constant_39 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        sub_14 = ops.sub(constant_40, minimum_4)
        mul_10 = ops.mul(mul_7, sub_14)
        constant_41 = ops.constant(1.0, torch.float32)
        add_10 = ops.add(mul_10, constant_41)
        mul_11 = ops.mul(load, add_10)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf34', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[15] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1204224}, None)]
op35.unmet_dependencies = []
op35.met_dependencies = [MemoryDep('arg0_1', 57600*c0 + 240*tmp0 + tmp1, {c0: 24}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1204224, 1)
op35.sizes = ([24, 224, 224], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 240, 240], stride=[172800, 57600, 240, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op35_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 240*indirect0 + indirect1 + 57600*z0
    index3 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        floor = ops.floor(sub)
        to_dtype = ops.to_dtype(floor, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(2, torch.int64)
        add_1 = ops.add(to_dtype, constant_3)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(add_1, constant_4)
        constant_5 = ops.constant(239, torch.int64)
        minimum = ops.minimum(maximum, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(index_expr_1, constant_6)
        constant_7 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        floor_1 = ops.floor(sub_1)
        to_dtype_1 = ops.to_dtype(floor_1, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(2, torch.int64)
        add_3 = ops.add(to_dtype_1, constant_9)
        constant_10 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(add_3, constant_10)
        constant_11 = ops.constant(239, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_2, constant_12)
        constant_13 = ops.constant(1.0714285714285714, torch.float32)
        mul_2 = ops.mul(add_4, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_3, constant_15)
        constant_16 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_3, constant_17)
        floor_2 = ops.floor(sub_3)
        sub_4 = ops.sub(sub_2, floor_2)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_19)
        constant_20 = ops.constant(2.0, torch.float32)
        sub_5 = ops.sub(constant_20, minimum_2)
        constant_21 = ops.constant(-0.75, torch.float32)
        mul_4 = ops.mul(sub_5, constant_21)
        constant_22 = ops.constant(-3.75, torch.float32)
        sub_6 = ops.sub(mul_4, constant_22)
        get_index_5 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_5, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_4, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_5 = ops.mul(add_6, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_5, constant_25)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.float32)
        constant_26 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_5, constant_26)
        constant_27 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_6, constant_28)
        floor_3 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_3)
        constant_29 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_9, constant_29)
        constant_30 = ops.constant(1.0, torch.float32)
        minimum_3 = ops.minimum(maximum_3, constant_30)
        constant_31 = ops.constant(2.0, torch.float32)
        sub_10 = ops.sub(constant_31, minimum_3)
        mul_7 = ops.mul(sub_6, sub_10)
        constant_32 = ops.constant(-6.0, torch.float32)
        add_8 = ops.add(mul_7, constant_32)
        get_index_7 = self.get_index('index1')
        index_expr_6 = ops.index_expr(get_index_7, torch.float32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_6, constant_33)
        constant_34 = ops.constant(1.0714285714285714, torch.float32)
        mul_8 = ops.mul(add_9, constant_34)
        constant_35 = ops.constant(0.5, torch.float32)
        sub_11 = ops.sub(mul_8, constant_35)
        get_index_8 = self.get_index('index1')
        index_expr_7 = ops.index_expr(get_index_8, torch.float32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_7, constant_36)
        constant_37 = ops.constant(1.0714285714285714, torch.float32)
        mul_9 = ops.mul(add_10, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_12 = ops.sub(mul_9, constant_38)
        floor_4 = ops.floor(sub_12)
        sub_13 = ops.sub(sub_11, floor_4)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_13, constant_39)
        constant_40 = ops.constant(1.0, torch.float32)
        minimum_4 = ops.minimum(maximum_4, constant_40)
        constant_41 = ops.constant(2.0, torch.float32)
        sub_14 = ops.sub(constant_41, minimum_4)
        mul_10 = ops.mul(add_8, sub_14)
        constant_42 = ops.constant(-3.0, torch.float32)
        sub_15 = ops.sub(mul_10, constant_42)
        mul_11 = ops.mul(load, sub_15)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf35', get_index_9, mul_11, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[16] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1204224}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1204224}, None),
        MemoryDep('buf18', c0, {c0: 1204224}, None),
        MemoryDep('buf19', c0, {c0: 1204224}, None),
        MemoryDep('buf20', c0, {c0: 1204224}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (1204224, 1)
op21.sizes = ([24, 224, 224], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op21_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = 50176*z0 + 224*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf20', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_4, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        get_index_5 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_5, torch.float32)
        constant_3 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_1, constant_3)
        constant_4 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_4, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_5)
        floor = ops.floor(sub_1)
        sub_2 = ops.sub(sub, floor)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(minimum, constant_8)
        constant_9 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_5, constant_9)
        constant_10 = ops.constant(-3.75, torch.float32)
        sub_3 = ops.sub(mul_2, constant_10)
        get_index_6 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_6, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_6, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_13)
        get_index_7 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_7, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_4 = ops.mul(add_7, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_4, constant_16)
        floor_1 = ops.floor(sub_5)
        sub_6 = ops.sub(sub_4, floor_1)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_6, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(minimum_1, constant_19)
        mul_5 = ops.mul(sub_3, add_8)
        constant_20 = ops.constant(-6.0, torch.float32)
        add_9 = ops.add(mul_5, constant_20)
        get_index_8 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_8, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(index_expr_4, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_10, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_6, constant_23)
        get_index_9 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_9, torch.float32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(index_expr_5, constant_24)
        constant_25 = ops.constant(1.0714285714285714, torch.float32)
        mul_7 = ops.mul(add_11, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_7, constant_26)
        floor_2 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_2)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_9, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_28)
        constant_29 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(minimum_2, constant_29)
        mul_8 = ops.mul(add_9, add_12)
        constant_30 = ops.constant(-3.0, torch.float32)
        sub_10 = ops.sub(mul_8, constant_30)
        mul_9 = ops.mul(add_2, sub_10)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf21', get_index_10, mul_9, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[17] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1204224}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 1204224}, None),
        MemoryDep('buf22', c0, {c0: 1204224}, None),
        MemoryDep('buf23', c0, {c0: 1204224}, None),
        MemoryDep('buf24', c0, {c0: 1204224}, None),
        MemoryDep('buf25', c0, {c0: 1204224}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1204224, 1)
op26.sizes = ([24, 224, 224], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op26_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = 50176*z0 + 224*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf25', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_5, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        get_index_6 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_6, torch.float32)
        constant_3 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_1, constant_3)
        constant_4 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_4, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_5)
        floor = ops.floor(sub_1)
        sub_2 = ops.sub(sub, floor)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_7)
        constant_8 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(minimum, constant_8)
        constant_9 = ops.constant(2.25, torch.float32)
        sub_3 = ops.sub(mul_2, constant_9)
        get_index_7 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_7, torch.float32)
        constant_10 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_2, constant_10)
        constant_11 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_11)
        constant_12 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_3, constant_12)
        get_index_8 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_8, torch.float32)
        constant_13 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_3, constant_13)
        constant_14 = ops.constant(1.0714285714285714, torch.float32)
        mul_4 = ops.mul(add_6, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_4, constant_15)
        floor_1 = ops.floor(sub_5)
        sub_6 = ops.sub(sub_4, floor_1)
        constant_16 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_6, constant_16)
        constant_17 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_17)
        mul_5 = ops.mul(sub_3, minimum_1)
        get_index_9 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_9, torch.float32)
        constant_18 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_4, constant_18)
        constant_19 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_19)
        constant_20 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_6, constant_20)
        get_index_10 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_10, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_5, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_7 = ops.mul(add_8, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_7, constant_23)
        floor_2 = ops.floor(sub_8)
        sub_9 = ops.sub(sub_7, floor_2)
        constant_24 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_9, constant_24)
        constant_25 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_25)
        mul_8 = ops.mul(mul_5, minimum_2)
        constant_26 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_8, constant_26)
        mul_9 = ops.mul(add_2, add_9)
        add_10 = ops.add(load, mul_9)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf26', get_index_11, add_10, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[18] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1204224}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 1204224}, None),
        MemoryDep('buf27', c0, {c0: 1204224}, None),
        MemoryDep('buf28', c0, {c0: 1204224}, None),
        MemoryDep('buf29', c0, {c0: 1204224}, None),
        MemoryDep('buf30', c0, {c0: 1204224}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (1204224, 1)
op31.sizes = ([24, 224, 224], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op31_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = 50176*z0 + 224*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf28', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf29', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf30', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_5, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        get_index_6 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_6, torch.float32)
        constant_3 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_1, constant_3)
        constant_4 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_4, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_5)
        floor = ops.floor(sub_1)
        sub_2 = ops.sub(sub, floor)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_8, minimum)
        constant_9 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_3, constant_9)
        constant_10 = ops.constant(2.25, torch.float32)
        sub_4 = ops.sub(mul_2, constant_10)
        get_index_7 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_7, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_3, constant_13)
        get_index_8 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_8, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_4 = ops.mul(add_6, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_4, constant_16)
        floor_1 = ops.floor(sub_6)
        sub_7 = ops.sub(sub_5, floor_1)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_7, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_18)
        constant_19 = ops.constant(1.0, torch.float32)
        sub_8 = ops.sub(constant_19, minimum_1)
        mul_5 = ops.mul(sub_4, sub_8)
        get_index_9 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_9, torch.float32)
        constant_20 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(index_expr_4, constant_20)
        constant_21 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_7, constant_21)
        constant_22 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_6, constant_22)
        get_index_10 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_10, torch.float32)
        constant_23 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_5, constant_23)
        constant_24 = ops.constant(1.0714285714285714, torch.float32)
        mul_7 = ops.mul(add_8, constant_24)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_7, constant_25)
        floor_2 = ops.floor(sub_10)
        sub_11 = ops.sub(sub_9, floor_2)
        constant_26 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_11, constant_26)
        constant_27 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        sub_12 = ops.sub(constant_28, minimum_2)
        mul_8 = ops.mul(mul_5, sub_12)
        constant_29 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_8, constant_29)
        mul_9 = ops.mul(add_2, add_9)
        add_10 = ops.add(load, mul_9)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf31', get_index_11, add_10, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[19] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1204224}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1204224}, None),
        MemoryDep('buf33', c0, {c0: 1204224}, None),
        MemoryDep('buf34', c0, {c0: 1204224}, None),
        MemoryDep('buf35', c0, {c0: 1204224}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1204224, 1)
op36.sizes = ([24, 224, 224], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op36_loop_body:
    var_ranges = {z0: 24, z1: 224, z2: 224}
    index0 = 50176*z0 + 224*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf34', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf35', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_4, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add_3 = ops.add(index_expr, constant)
        constant_1 = ops.constant(1.0714285714285714, torch.float32)
        mul = ops.mul(add_3, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        get_index_5 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_5, torch.float32)
        constant_3 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(index_expr_1, constant_3)
        constant_4 = ops.constant(1.0714285714285714, torch.float32)
        mul_1 = ops.mul(add_4, constant_4)
        constant_5 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_5)
        floor = ops.floor(sub_1)
        sub_2 = ops.sub(sub, floor)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum, constant_7)
        constant_8 = ops.constant(2.0, torch.float32)
        sub_3 = ops.sub(constant_8, minimum)
        constant_9 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_3, constant_9)
        constant_10 = ops.constant(-3.75, torch.float32)
        sub_4 = ops.sub(mul_2, constant_10)
        get_index_6 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_6, torch.float32)
        constant_11 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(index_expr_2, constant_11)
        constant_12 = ops.constant(1.0714285714285714, torch.float32)
        mul_3 = ops.mul(add_5, constant_12)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_3, constant_13)
        get_index_7 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_7, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(index_expr_3, constant_14)
        constant_15 = ops.constant(1.0714285714285714, torch.float32)
        mul_4 = ops.mul(add_6, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_4, constant_16)
        floor_1 = ops.floor(sub_6)
        sub_7 = ops.sub(sub_5, floor_1)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_7, constant_17)
        constant_18 = ops.constant(1.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_18)
        constant_19 = ops.constant(2.0, torch.float32)
        sub_8 = ops.sub(constant_19, minimum_1)
        mul_5 = ops.mul(sub_4, sub_8)
        constant_20 = ops.constant(-6.0, torch.float32)
        add_7 = ops.add(mul_5, constant_20)
        get_index_8 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_8, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(index_expr_4, constant_21)
        constant_22 = ops.constant(1.0714285714285714, torch.float32)
        mul_6 = ops.mul(add_8, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_6, constant_23)
        get_index_9 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_9, torch.float32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(index_expr_5, constant_24)
        constant_25 = ops.constant(1.0714285714285714, torch.float32)
        mul_7 = ops.mul(add_9, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_10 = ops.sub(mul_7, constant_26)
        floor_2 = ops.floor(sub_10)
        sub_11 = ops.sub(sub_9, floor_2)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_11, constant_27)
        constant_28 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(maximum_2, constant_28)
        constant_29 = ops.constant(2.0, torch.float32)
        sub_12 = ops.sub(constant_29, minimum_2)
        mul_8 = ops.mul(add_7, sub_12)
        constant_30 = ops.constant(-3.0, torch.float32)
        sub_13 = ops.sub(mul_8, constant_30)
        mul_9 = ops.mul(add_2, sub_13)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf36', get_index_10, mul_9, None)
        return store
op17_op18_op19_op20_op22_op23_op24_op25_op27_op28_op29_op30_op32_op33_op34_op35_op21_op26_op31_op36_op37.snodes[20] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1204224}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 1204224}, None),
        MemoryDep('buf36', c0, {c0: 1204224}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1204224, 1)
op37.sizes = ([1204224], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
class op37_loop_body:
    var_ranges = {z0: 1204224}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf37', get_index_2, add, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op38.node.kernel = extern_kernels.convolution


op39_op40_op41: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op39_op40_op41.writes = 
    [   MemoryDep('buf39', c0, {c0: 3152}, None),
        MemoryDep('buf40', c0, {c0: 3152}, None),
        MemoryDep('buf41', c0, {c0: 3152}, None)]
op39_op40_op41.unmet_dependencies = [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None)]
op39_op40_op41.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op39_op40_op41.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op39_op40_op41.snodes[0] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 3152}, None)]
op39.unmet_dependencies = [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (3152, 128)
op39.sizes = ([8, 197, 2], [128])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 256], stride=[50432, 256, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 256*z1 + 128*z2 + z3
    index4 = 394*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg8_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf39', get_index_5, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg7_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op39_op40_op41.snodes[1] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 3152}, None)]
op40.unmet_dependencies = [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (3152, 128)
op40.sizes = ([8, 197, 2], [128])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 256], stride=[50432, 256, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 256*z1 + 128*z2 + z3
    index4 = 394*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg8_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf40', get_index_5, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg7_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op39_op40_op41.snodes[2] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 3152}, None)]
op41.unmet_dependencies = [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (3152, 128)
op41.sizes = ([8, 197, 2], [128])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 256], stride=[50432, 256, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 50176*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 256*z1 + 128*z2 + z3
    index4 = 394*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg8_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf41', get_index_5, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg7_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op42_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op42_op43.writes = 
    [   MemoryDep('buf42', c0, {c0: 1576}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None)]
op42_op43.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3152}, None),
        MemoryDep('buf40', c0, {c0: 3152}, None),
        MemoryDep('buf41', c0, {c0: 3152}, None)]
op42_op43.met_dependencies = []
op42_op43.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42_op43.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1576}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3152}, None),
        MemoryDep('buf40', c0, {c0: 3152}, None),
        MemoryDep('buf41', c0, {c0: 3152}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1576, 2)
op42.sizes = ([1576], [2])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op42_loop_body:
    var_ranges = {z0: 1576, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf42', get_index_3, getitem)
        return store_reduction
op42_op43.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1576}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 3152}, None),
        MemoryDep('buf40', c0, {c0: 3152}, None),
        MemoryDep('buf41', c0, {c0: 3152}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1576, 2)
op43.sizes = ([1576], [2])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 2], stride=[394, 2, 3168, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op43_loop_body:
    var_ranges = {z0: 1576, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf40', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem_1)
        return store_reduction


op45_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op45_op46.writes = 
    [   MemoryDep('buf45', c0, {c0: 403456}, None),
        MemoryDep('buf46', c0, {c0: 403456}, None)]
op45_op46.unmet_dependencies = 
    [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf42', c0, {c0: 1576}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None)]
op45_op46.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op45_op46.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45_op46.snodes[0] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 403456}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf42', c0, {c0: 1576}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (403456, 1)
op45.sizes = ([8, 197, 256], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 256], stride=[50432, 256, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = z2
    index2 = 50176*z0 + 196*z2 + ModularIndexing(I, 1, 196)
    index3 = 256*z1 + z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg8_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf42', get_index_5)
        sub = ops.sub(add, load_1)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('buf43', get_index_6)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_7)
        mul_1 = ops.mul(mul, load_3)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf45', get_index_8, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg7_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op45_op46.snodes[1] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 403456}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 403456}, None)]
op46.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 1576, c1: 256}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (403456, 1)
op46.sizes = ([1576, 256], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op46_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf46', get_index_2, add, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg23_1', mode=None), StarDep(name='arg24_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.addmm


op48: ExternKernelSchedulerNode(FallbackKernel)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: FallbackKernel
    buf48.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op49: ExternKernelSchedulerNode(MultiOutput)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: MultiOutput
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = None


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op53.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54_op55_op56_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op54_op55_op56_op58.writes = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf55', c0, {c0: 1576}, None),
        MemoryDep('buf56', c0, {c0: 1576}, None),
        MemoryDep('buf58', c0, {c0: 403456}, None)]
op54_op55_op56_op58.unmet_dependencies = 
    [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf53', c0, {c0: 403456}, None)]
op54_op55_op56_op58.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg27_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg28_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op54_op55_op56_op58.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op54_op55_op56_op58.snodes[0] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 403456}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf38', 50176*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf53', c0, {c0: 403456}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg6_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg7_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 50432}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (403456, 1)
op54.sizes = ([8, 197, 256], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 196, 14, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 256], stride=[50432, 256, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = z2
    index2 = 50176*z0 + 196*z2 + ModularIndexing(I, 1, 196)
    index3 = 256*z1 + z2
    index4 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg8_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf53', get_index_5)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg26_1', get_index_6)
        add_1 = ops.add(load_1, load_2)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf54', get_index_7, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg7_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op54_op55_op56_op58.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 1576}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 403456}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (1576, 256)
op55.sizes = ([1576], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op55_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_1, getitem)
        return store_reduction
op54_op55_op56_op58.snodes[2] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1576}, None)]
op56.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 403456}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1576, 256)
op56.sizes = ([1576], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op56_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_1, getitem_1)
        return store_reduction
op54_op55_op56_op58.snodes[3] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 403456}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf55', c0, {c0: 1576}, None),
        MemoryDep('buf56', c0, {c0: 1576}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg28_1', c1, {c0: 1576, c1: 256}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (403456, 1)
op58.sizes = ([1576, 256], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op58_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf55', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf56', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg27_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg28_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_1, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1210368}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 1210368}, None)]
op60.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 1576, c1: 768}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1210368, 1)
op60.sizes = ([1576, 768], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op60_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg30_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf60', get_index_4, mul_2, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op65.writes = 
    [   MemoryDep('buf62', c0, {c0: 1576}, None),
        MemoryDep('buf63', c0, {c0: 1576}, None),
        MemoryDep('buf65', c0, {c0: 403456}, None)]
op62_op63_op65.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None)]
op62_op63_op65.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 1576, c1: 256}, None)]
op62_op63_op65.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op62_op63_op65.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1576}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None)]
op62.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1576, 256)
op62.sizes = ([1576], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op62_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction
op62_op63_op65.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1576}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None)]
op63.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1576, 256)
op63.sizes = ([1576], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op63_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction
op62_op63_op65.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 403456}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None),
        MemoryDep('buf62', c0, {c0: 1576}, None),
        MemoryDep('buf63', c0, {c0: 1576}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 1576, c1: 256}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (403456, 1)
op65.sizes = ([1576, 256], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op65_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf63', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf65', get_index_7, add_3, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg35_1', mode=None), StarDep(name='arg36_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.addmm


op67: ExternKernelSchedulerNode(FallbackKernel)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: FallbackKernel
    buf67.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op67.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op68: ExternKernelSchedulerNode(MultiOutput)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: MultiOutput
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = None


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op72.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73_op74_op75_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op73_op74_op75_op77.writes = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf74', c0, {c0: 1576}, None),
        MemoryDep('buf75', c0, {c0: 1576}, None),
        MemoryDep('buf77', c0, {c0: 403456}, None)]
op73_op74_op75_op77.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None),
        MemoryDep('buf72', c0, {c0: 403456}, None)]
op73_op74_op75_op77.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 1576, c1: 256}, None)]
op73_op74_op75_op77.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op73_op74_op75_op77.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 403456}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 403456}, None),
        MemoryDep('buf61', c0, {c0: 403456}, None),
        MemoryDep('buf72', c0, {c0: 403456}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 1576, c1: 256}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (403456, 1)
op73.sizes = ([1576, 256], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op73_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf72', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_3, None)
        return store
op73_op74_op75_op77.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1576}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 403456}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1576, 256)
op74.sizes = ([1576], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op74_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf74', get_index_1, getitem)
        return store_reduction
op73_op74_op75_op77.snodes[2] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1576}, None)]
op75.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 403456}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1576, 256)
op75.sizes = ([1576], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op75_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf75', get_index_1, getitem_1)
        return store_reduction
op73_op74_op75_op77.snodes[3] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 403456}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf74', c0, {c0: 1576}, None),
        MemoryDep('buf75', c0, {c0: 1576}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 1576, c1: 256}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (403456, 1)
op77.sizes = ([1576, 256], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op77_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_1, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1210368}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1210368}, None)]
op79.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 1576, c1: 768}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1210368, 1)
op79.sizes = ([1576, 768], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op79_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg42_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf79', get_index_4, mul_2, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81_op82_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op81_op82_op84.writes = 
    [   MemoryDep('buf81', c0, {c0: 1576}, None),
        MemoryDep('buf82', c0, {c0: 1576}, None),
        MemoryDep('buf84', c0, {c0: 403456}, None)]
op81_op82_op84.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None)]
op81_op82_op84.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg46_1', c1, {c0: 1576, c1: 256}, None)]
op81_op82_op84.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op81_op82_op84.snodes[0] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1576}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None)]
op81.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1576, 256)
op81.sizes = ([1576], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op81_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem)
        return store_reduction
op81_op82_op84.snodes[1] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1576}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None)]
op82.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1576, 256)
op82.sizes = ([1576], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op82_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_3, getitem_1)
        return store_reduction
op81_op82_op84.snodes[2] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 403456}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None),
        MemoryDep('buf81', c0, {c0: 1576}, None),
        MemoryDep('buf82', c0, {c0: 1576}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg46_1', c1, {c0: 1576, c1: 256}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (403456, 1)
op84.sizes = ([1576, 256], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op84_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf81', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf82', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf84', get_index_7, add_3, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg47_1', mode=None), StarDep(name='arg48_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.addmm


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = None


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op91.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op94_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op94_op103.writes = 
    [   MemoryDep('buf103', c0, {c0: 403456}, None),
        MemoryDep('buf92', c0, {c0: 403456}, None),
        MemoryDep('buf93', c0, {c0: 1576}, None),
        MemoryDep('buf94', c0, {c0: 1576}, None)]
op92_op93_op94_op103.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None),
        MemoryDep('buf91', c0, {c0: 403456}, None)]
op92_op93_op94_op103.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg50_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg51_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 1576, c1: 256}, None)]
op92_op93_op94_op103.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf93.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf94.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op92_op93_op94_op103.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 403456}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 403456}, None),
        MemoryDep('buf80', c0, {c0: 403456}, None),
        MemoryDep('buf91', c0, {c0: 403456}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg50_1', c1, {c0: 1576, c1: 256}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (403456, 1)
op92.sizes = ([1576, 256], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op92_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store
op92_op93_op94_op103.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1576}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 403456}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf93.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1576, 256)
op93.sizes = ([1576], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op93_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op92_op93_op94_op103.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1576}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 403456}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf94.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (1576, 256)
op94.sizes = ([1576], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op94_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op92_op93_op94_op103.snodes[3] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 403456}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 403456}, None),
        MemoryDep('buf93', c0, {c0: 1576}, None),
        MemoryDep('buf94', c0, {c0: 1576}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 1576, c1: 256}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (403456, 1)
op103.sizes = ([1576, 256], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op103_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg51_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg52_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf103', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1231872}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 1231872}, None)]
op98.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 3208, c1: 384}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1231872, 1)
op98.sizes = ([3208, 384], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
class op98_loop_body:
    var_ranges = {z0: 3208, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg18_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100_op101_op110_op111: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op100_op101_op110_op111.writes = 
    [   MemoryDep('buf100', c0, {c0: 8}, None),
        MemoryDep('buf101', c0, {c0: 8}, None),
        MemoryDep('buf110', c0, {c0: 1024}, None),
        MemoryDep('buf111', c0, {c0: 1024}, None)]
op100_op101_op110_op111.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf99', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op100_op101_op110_op111.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 128}, None)]
op100_op101_op110_op111.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf100.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf101.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op100_op101_op110_op111.snodes[0] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 8}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf99', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op100.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf100.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (8, 128)
op100.sizes = ([8], [128])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100_op101_op110_op111.snodes[1] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 8}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf99', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op101.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf101.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (8, 128)
op101.sizes = ([8], [128])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op100_op101_op110_op111.snodes[2] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1024}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 8}, None),
        MemoryDep('buf101', c0, {c0: 8}, None),
        MemoryDep('buf13', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf99', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 128}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1024, 1)
op110.sizes = ([8, 128], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg57_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg58_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf110', get_index_7, add_3, None)
        return store
op100_op101_op110_op111.snodes[3] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1024}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1024}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1024, 1)
op111.sizes = ([1024], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op111_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf111', get_index_2, mul_2, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 1210368}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 1210368}, None)]
op105.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 1576, c1: 768}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (1210368, 1)
op105.sizes = ([1576, 768], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op105_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf104', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf105', get_index_4, mul_2, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op106.node.kernel = extern_kernels.mm


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg59_1', mode=None), StarDep(name='arg60_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.addmm


op113_op114_op116_op117: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op116_op117.writes = 
    [   MemoryDep('buf113', c0, {c0: 1576}, None),
        MemoryDep('buf114', c0, {c0: 1576}, None),
        MemoryDep('buf116', c0, {c0: 403456}, None),
        MemoryDep('buf117', c0, {c0: 403456}, None)]
op113_op114_op116_op117.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf112', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op113_op114_op116_op117.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg65_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg66_1', c1, {c0: 1576, c1: 256}, None)]
op113_op114_op116_op117.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf117.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
]
op113_op114_op116_op117.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 1576}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf112', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op113.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (1576, 256)
op113.sizes = ([8, 197], [256])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op113_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf113', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf112', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op113_op114_op116_op117.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 1576}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf112', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op114.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (1576, 256)
op114.sizes = ([8, 197], [256])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf114', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf112', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op113_op114_op116_op117.snodes[2] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 403456}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf112', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf113', c0, {c0: 1576}, None),
        MemoryDep('buf114', c0, {c0: 1576}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg65_1', c1, {c0: 1576, c1: 256}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (403456, 1)
op116.sizes = ([8, 197, 256], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf113', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf114', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg65_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf116', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf112', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op113_op114_op116_op117.snodes[3] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 403456}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 403456}, None)]
op117.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 1576, c1: 256}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf117.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (403456, 1)
op117.sizes = ([1576, 256], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op117_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf117', get_index_2, add, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2048}, None)]
op120.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 2048}, None)]
op120.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 8, c1: 256}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (2048, 1)
op120.sizes = ([8, 256], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf120', get_index_2, add, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op119.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 403456}, None)]
op121.unmet_dependencies = [MemoryDep('buf119', 50432*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 197}, None)]
op121.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 8, c1: 256}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (403456, 1)
op121.sizes = ([8, 256, 197], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 197}
    index0 = 50432*z0 + z1 + 256*z2
    index1 = z1
    index2 = 50432*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf121', get_index_2, add, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf120', mode=None), StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op122.node.kernel = extern_kernels.bmm


op123_op124_op126: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op123_op124_op126.writes = 
    [   MemoryDep('buf123', c0, {c0: 32}, None),
        MemoryDep('buf124', c0, {c0: 32}, None),
        MemoryDep('buf126', c0, {c0: 6304}, None)]
op123_op124_op126.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 6304}, None)]
op123_op124_op126.met_dependencies = []
op123_op124_op126.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op123_op124_op126.snodes[0] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 32}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 6304}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (32, 197)
op123.sizes = ([32], [197])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op123_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf123', get_index_1, reduction)
        return store_reduction
op123_op124_op126.snodes[1] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 32}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 6304}, None),
        MemoryDep('buf123', c0, {c0: 32}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (32, 197)
op124.sizes = ([32], [197])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op124_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_2, reduction)
        return store_reduction
op123_op124_op126.snodes[2] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 6304}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 6304}, None),
        MemoryDep('buf123', c0, {c0: 32}, None),
        MemoryDep('buf124', c0, {c0: 32}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (6304, 1)
op126.sizes = ([32, 197], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
class op126_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf124', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf126', get_index_3, truediv, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op125.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 403456}, None)]
op127.unmet_dependencies = [   MemoryDep('buf125', 50432*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op127.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (403456, 1)
op127.sizes = ([8, 4, 197, 64], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 197, z3: 64}
    index0 = 50432*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 50432*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf127', get_index_2, add, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 64], stride=[64, 64, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.bmm


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op107_op108_op130_op134_op135_op131_op132_op159_op160: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op107_op108_op130_op134_op135_op131_op132_op159_op160.writes = 
    [   MemoryDep('buf107', c0, {c0: 8}, None),
        MemoryDep('buf108', c0, {c0: 8}, None),
        MemoryDep('buf130', c0, {c0: 2048}, None),
        MemoryDep('buf131', c0, {c0: 8}, None),
        MemoryDep('buf132', c0, {c0: 8}, None),
        MemoryDep('buf134', c0, {c0: 2048}, None),
        MemoryDep('buf135', c0, {c0: 2048}, None),
        MemoryDep('buf159', c0, {c0: 2048}, None),
        MemoryDep('buf160', c0, {c0: 2048}, None)]
op107_op108_op130_op134_op135_op131_op132_op159_op160.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf106', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf112', c0, {c0: 2048}, None),
        MemoryDep('buf129', c0, {c0: 2048}, None),
        MemoryDep('buf92', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf92', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op107_op108_op130_op134_op135_op131_op132_op159_op160.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg61_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 256}, None)]
op107_op108_op130_op134_op135_op131_op132_op159_op160.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf107.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf108.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf131.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf132.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 8}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf92', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op107.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 8, c1: 256}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf107.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (8, 256)
op107.sizes = ([8], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem)
        return store_reduction
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 8}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf92', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op108.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 8, c1: 256}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf108.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (8, 256)
op108.sizes = ([8], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op108_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, getitem_1)
        return store_reduction
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[2] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 2048}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf112', c0, {c0: 2048}, None),
        MemoryDep('buf129', c0, {c0: 2048}, None),
        MemoryDep('buf92', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 256}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (2048, 1)
op130.sizes = ([8, 256], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = 50432*z0 + z1 + 256*I + 256
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf130', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[3] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 2048}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf107', c0, {c0: 8}, None),
        MemoryDep('buf108', c0, {c0: 8}, None),
        MemoryDep('buf92', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg61_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 256}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (2048, 1)
op134.sizes = ([8, 256], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op134_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf107', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf108', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg61_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg62_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf134', get_index_7, add_3, None)
        return store
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[4] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 2048}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 2048}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (2048, 1)
op135.sizes = ([2048], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op135_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul_2, None)
        return store
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[5] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 8}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 2048}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf131.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (8, 256)
op131.sizes = ([8], [256])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_1, getitem)
        return store_reduction
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[6] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 8}, None)]
op132.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 2048}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf132.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (8, 256)
op132.sizes = ([8], [256])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op132_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem_1)
        return store_reduction
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[7] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 2048}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 2048}, None),
        MemoryDep('buf131', c0, {c0: 8}, None),
        MemoryDep('buf132', c0, {c0: 8}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 256}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (2048, 1)
op159.sizes = ([8, 256], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf159', get_index_5, add_1, None)
        return store
op107_op108_op130_op134_op135_op131_op132_op159_op160.snodes[8] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 2048}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 2048}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (2048, 1)
op160.sizes = ([2048], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op160_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf160', get_index_2, mul_2, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg63_1', mode=None), StarDep(name='arg64_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.addmm


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg77_1', mode=None), StarDep(name='arg78_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op161.node.kernel = extern_kernels.addmm


op137_op138_op162_op163_op140_op165_op141_op166: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op162_op163_op140_op165_op141_op166.writes = 
    [   MemoryDep('buf137', c0, {c0: 3208}, None),
        MemoryDep('buf138', c0, {c0: 3208}, None),
        MemoryDep('buf140', c0, {c0: 410624}, None),
        MemoryDep('buf141', c0, {c0: 410624}, None),
        MemoryDep('buf162', c0, {c0: 3208}, None),
        MemoryDep('buf163', c0, {c0: 3208}, None),
        MemoryDep('buf165', c0, {c0: 410624}, None),
        MemoryDep('buf166', c0, {c0: 410624}, None)]
op137_op138_op162_op163_op140_op165_op141_op166.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf136', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op137_op138_op162_op163_op140_op165_op141_op166.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg79_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg80_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg93_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg94_1', c1, {c0: 3208, c1: 128}, None)]
op137_op138_op162_op163_op140_op165_op141_op166.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf141.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op137_op138_op162_op163_op140_op165_op141_op166.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 3208}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf136', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op137.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (3208, 128)
op137.sizes = ([8, 401], [128])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf137', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 3208}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf136', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op138.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (3208, 128)
op138.sizes = ([8, 401], [128])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf138', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[2] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 3208}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op162.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf162.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (3208, 128)
op162.sizes = ([8, 401], [128])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf162', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf161', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[3] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 3208}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op163.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (3208, 128)
op163.sizes = ([8, 401], [128])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf163', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf161', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[4] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 410624}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf136', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf137', c0, {c0: 3208}, None),
        MemoryDep('buf138', c0, {c0: 3208}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg79_1', c1, {c0: 3208, c1: 128}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (410624, 1)
op140.sizes = ([8, 401, 128], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf137', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf138', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg79_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf140', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[5] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 410624}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf162', c0, {c0: 3208}, None),
        MemoryDep('buf163', c0, {c0: 3208}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg93_1', c1, {c0: 3208, c1: 128}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (410624, 1)
op165.sizes = ([8, 401, 128], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf162', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf163', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg93_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf165', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf161', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op137_op138_op162_op163_op140_op165_op141_op166.snodes[6] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 410624}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 410624}, None)]
op141.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 3208, c1: 128}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf141.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (410624, 1)
op141.sizes = ([3208, 128], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op141_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, add, None)
        return store
op137_op138_op162_op163_op140_op165_op141_op166.snodes[7] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 410624}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 410624}, None)]
op166.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 3208, c1: 128}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (410624, 1)
op166.sizes = ([3208, 128], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op166_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf166', get_index_2, add, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.mm


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op143.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1024}, None)]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1024}, None)]
op144.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 8, c1: 128}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1024, 1)
op144.sizes = ([8, 128], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, add, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 410624}, None)]
op145.unmet_dependencies = [MemoryDep('buf143', 51328*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 401}, None)]
op145.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 8, c1: 128}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (410624, 1)
op145.sizes = ([8, 128, 401], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 401}
    index0 = 51328*z0 + z1 + 128*z2
    index1 = z1
    index2 = 51328*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf145', get_index_2, add, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op146.node.kernel = extern_kernels.bmm


op147_op148_op150: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op147_op148_op150.writes = 
    [   MemoryDep('buf147', c0, {c0: 32}, None),
        MemoryDep('buf148', c0, {c0: 32}, None),
        MemoryDep('buf150', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op147_op148_op150.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 12832}, None)]
op147_op148_op150.met_dependencies = []
op147_op148_op150.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op147_op148_op150.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 32}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 12832}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (32, 401)
op147.sizes = ([32], [401])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op147_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, reduction)
        return store_reduction
op147_op148_op150.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 32}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 12832}, None),
        MemoryDep('buf147', c0, {c0: 32}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (32, 401)
op148.sizes = ([32], [401])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op148_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_2, reduction)
        return store_reduction
op147_op148_op150.snodes[2] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 12832}, None),
        MemoryDep('buf147', c0, {c0: 32}, None),
        MemoryDep('buf148', c0, {c0: 32}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (12832, 1)
op150.sizes = ([8, 4, 401], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401}
    index0 = 1604*z0 + 401*z1 + z2
    index1 = 4*z0 + z1
    index2 = 1632*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf148', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf150', get_index_3, truediv, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op149.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 12832}, None)]
op151.unmet_dependencies = [   MemoryDep('buf150', c1 + 1632*((c0//4)) + 401*ModularIndexing(c0, 1, 4), {c0: 32, c1: 401}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (12832, 1)
op151.sizes = ([32, 401], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
class op151_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = z1 + 1632*((z0//4)) + 401*ModularIndexing(z0, 1, 4)
    index1 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, load, None)
        return store


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 410624}, None)]
op152.unmet_dependencies = [   MemoryDep('buf149', 51328*c0 + 32*c1 + 128*c2 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op152.met_dependencies = [MemoryDep('arg86_1', 32*c1 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (410624, 1)
op152.sizes = ([8, 4, 401, 32], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401, z3: 32}
    index0 = 51328*z0 + 32*z1 + 128*z2 + z3
    index1 = 32*z1 + z3
    index2 = 51328*z0 + 12832*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf152', get_index_2, add, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf151', mode=None), StarDep(name='buf152', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 32], stride=[32, 32, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.node.kernel = extern_kernels.bmm


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155_op156_op157_op178_op179: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op155_op156_op157_op178_op179.writes = 
    [   MemoryDep('buf155', c0, {c0: 1024}, None),
        MemoryDep('buf156', c0, {c0: 8}, None),
        MemoryDep('buf157', c0, {c0: 8}, None),
        MemoryDep('buf178', c0, {c0: 1024}, None),
        MemoryDep('buf179', c0, {c0: 1024}, None)]
op155_op156_op157_op178_op179.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf136', c0, {c0: 1024}, None),
        MemoryDep('buf154', c0, {c0: 1024}, None),
        MemoryDep('buf99', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None)]
op155_op156_op157_op178_op179.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg89_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg90_1', c1, {c0: 8, c1: 128}, None)]
op155_op156_op157_op178_op179.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf156.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf157.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op155_op156_op157_op178_op179.snodes[0] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1024}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf136', c0, {c0: 1024}, None),
        MemoryDep('buf154', c0, {c0: 1024}, None),
        MemoryDep('buf99', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 128}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (1024, 1)
op155.sizes = ([8, 128], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op155_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = 51328*z0 + z1 + 128*I + 128
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf155', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op155_op156_op157_op178_op179.snodes[1] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 8}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 1024}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf156.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (8, 128)
op156.sizes = ([8], [128])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_1, getitem)
        return store_reduction
op155_op156_op157_op178_op179.snodes[2] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 8}, None)]
op157.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 1024}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf157.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (8, 128)
op157.sizes = ([8], [128])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, getitem_1)
        return store_reduction
op155_op156_op157_op178_op179.snodes[3] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 1024}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf155', c0, {c0: 1024}, None),
        MemoryDep('buf156', c0, {c0: 8}, None),
        MemoryDep('buf157', c0, {c0: 8}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg89_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg90_1', c1, {c0: 8, c1: 128}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (1024, 1)
op178.sizes = ([8, 128], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op178_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf156', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf157', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf178', get_index_5, add_1, None)
        return store
op155_op156_op157_op178_op179.snodes[4] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 1024}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1024}, None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (1024, 1)
op179.sizes = ([1024], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op179_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf179', get_index_2, mul_2, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg95_1', mode=None), StarDep(name='arg96_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.addmm


op168: ExternKernelSchedulerNode(FallbackKernel)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: FallbackKernel
    buf168.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op169: ExternKernelSchedulerNode(MultiOutput)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: MultiOutput
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 32, 128, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = None


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op173.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174_op175_op176_op235: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op174_op175_op176_op235.writes = 
    [   MemoryDep('buf174', c0, {c0: 410624}, None),
        MemoryDep('buf175', c0, {c0: 3208}, None),
        MemoryDep('buf176', c0, {c0: 3208}, None),
        MemoryDep('buf235', c0, {c0: 410624}, None)]
op174_op175_op176_op235.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf173', c0, {c0: 410624}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op174_op175_op176_op235.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg99_1', c1, {c0: 3208, c1: 128}, None)]
op174_op175_op176_op235.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf175.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf176.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op174_op175_op176_op235.snodes[0] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 410624}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf13', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf161', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf173', c0, {c0: 410624}, None),
        MemoryDep('buf99', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 3208, c1: 128}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (410624, 1)
op174.sizes = ([8, 401, 128], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf173', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg98_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf174', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf161', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op174_op175_op176_op235.snodes[1] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 3208}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 410624}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf175.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (3208, 128)
op175.sizes = ([3208], [128])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op175_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf175', get_index_1, getitem)
        return store_reduction
op174_op175_op176_op235.snodes[2] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 3208}, None)]
op176.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 410624}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf176.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (3208, 128)
op176.sizes = ([3208], [128])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op176_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_1, getitem_1)
        return store_reduction
op174_op175_op176_op235.snodes[3] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 410624}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf174', c0, {c0: 410624}, None),
        MemoryDep('buf175', c0, {c0: 3208}, None),
        MemoryDep('buf176', c0, {c0: 3208}, None)]
op235.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg99_1', c1, {c0: 3208, c1: 128}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (410624, 1)
op235.sizes = ([3208, 128], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op235_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf175', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf176', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf235', get_index_5, add_1, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg91_1', mode=None), StarDep(name='arg92_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op180.node.kernel = extern_kernels.addmm


op181_op182_op184_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op181_op182_op184_op185.writes = 
    [   MemoryDep('buf181', c0, {c0: 1576}, None),
        MemoryDep('buf182', c0, {c0: 1576}, None),
        MemoryDep('buf184', c0, {c0: 403456}, None),
        MemoryDep('buf185', c0, {c0: 403456}, None)]
op181_op182_op184_op185.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op181_op182_op184_op185.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg106_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op181_op182_op184_op185.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op181_op182_op184_op185.snodes[0] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 1576}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op181.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf181.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (1576, 256)
op181.sizes = ([8, 197], [256])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op181_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf181', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf180', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op181_op182_op184_op185.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1576}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op182.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf182.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1576, 256)
op182.sizes = ([8, 197], [256])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf182', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf180', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op181_op182_op184_op185.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 403456}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf181', c0, {c0: 1576}, None),
        MemoryDep('buf182', c0, {c0: 1576}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (403456, 1)
op184.sizes = ([8, 197, 256], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf181', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf182', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg105_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf184', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf180', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op181_op182_op184_op185.snodes[3] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 403456}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 403456}, None)]
op185.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 1576, c1: 256}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (403456, 1)
op185.sizes = ([1576, 256], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op185_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, add, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg107_1', mode=None), StarDep(name='arg108_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.addmm


op187: ExternKernelSchedulerNode(FallbackKernel)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: FallbackKernel
    buf187.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
    ]
]
op187.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op188: ExternKernelSchedulerNode(MultiOutput)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: MultiOutput
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = None


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op192.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193_op194_op195_op197: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op193_op194_op195_op197.writes = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf194', c0, {c0: 1576}, None),
        MemoryDep('buf195', c0, {c0: 1576}, None),
        MemoryDep('buf197', c0, {c0: 403456}, None)]
op193_op194_op195_op197.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf192', c0, {c0: 403456}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op193_op194_op195_op197.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg111_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg112_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op193_op194_op195_op197.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op193_op194_op195_op197.snodes[0] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 403456}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf106', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf180', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf192', c0, {c0: 403456}, None),
        MemoryDep('buf92', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 1576, c1: 256}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (403456, 1)
op193.sizes = ([8, 197, 256], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf192', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg110_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf193', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf180', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf106', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op193_op194_op195_op197.snodes[1] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1576}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 403456}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf194.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (1576, 256)
op194.sizes = ([1576], [256])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op194_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem)
        return store_reduction
op193_op194_op195_op197.snodes[2] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 1576}, None)]
op195.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 403456}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (1576, 256)
op195.sizes = ([1576], [256])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op195_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf195', get_index_1, getitem_1)
        return store_reduction
op193_op194_op195_op197.snodes[3] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 403456}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf194', c0, {c0: 1576}, None),
        MemoryDep('buf195', c0, {c0: 1576}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg112_1', c1, {c0: 1576, c1: 256}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (403456, 1)
op197.sizes = ([1576, 256], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op197_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf194', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf197', get_index_5, add_1, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 1210368}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 1210368}, None)]
op199.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 1576, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (1210368, 1)
op199.sizes = ([1576, 768], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op199_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf198', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf199', get_index_4, mul_2, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.mm


op201_op202_op204: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op201_op202_op204.writes = 
    [   MemoryDep('buf201', c0, {c0: 1576}, None),
        MemoryDep('buf202', c0, {c0: 1576}, None),
        MemoryDep('buf204', c0, {c0: 403456}, None)]
op201_op202_op204.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None)]
op201_op202_op204.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg117_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg118_1', c1, {c0: 1576, c1: 256}, None)]
op201_op202_op204.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op201_op202_op204.snodes[0] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 1576}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None)]
op201.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (1576, 256)
op201.sizes = ([1576], [256])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op201_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem)
        return store_reduction
op201_op202_op204.snodes[1] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1576}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None)]
op202.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1576, 256)
op202.sizes = ([1576], [256])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op202_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf202', get_index_3, getitem_1)
        return store_reduction
op201_op202_op204.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 403456}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None),
        MemoryDep('buf201', c0, {c0: 1576}, None),
        MemoryDep('buf202', c0, {c0: 1576}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg117_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg118_1', c1, {c0: 1576, c1: 256}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (403456, 1)
op204.sizes = ([1576, 256], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op204_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf201', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf202', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf204', get_index_7, add_3, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf204', mode=None)]
op205.met_dependencies = [StarDep(name='arg119_1', mode=None), StarDep(name='arg120_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.addmm


op206: ExternKernelSchedulerNode(FallbackKernel)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: FallbackKernel
    buf206.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op206.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op207: ExternKernelSchedulerNode(MultiOutput)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: MultiOutput
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = None


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op211.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op214_op216: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op214_op216.writes = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf213', c0, {c0: 1576}, None),
        MemoryDep('buf214', c0, {c0: 1576}, None),
        MemoryDep('buf216', c0, {c0: 403456}, None)]
op212_op213_op214_op216.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None),
        MemoryDep('buf211', c0, {c0: 403456}, None)]
op212_op213_op214_op216.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 1576, c1: 256}, None)]
op212_op213_op214_op216.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf213.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op212_op213_op214_op216.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 403456}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 403456}, None),
        MemoryDep('buf200', c0, {c0: 403456}, None),
        MemoryDep('buf211', c0, {c0: 403456}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 1576, c1: 256}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (403456, 1)
op212.sizes = ([1576, 256], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op212_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf211', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf212', get_index_5, add_3, None)
        return store
op212_op213_op214_op216.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1576}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 403456}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf213.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (1576, 256)
op213.sizes = ([1576], [256])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op213_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, getitem)
        return store_reduction
op212_op213_op214_op216.snodes[2] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1576}, None)]
op214.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 403456}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1576, 256)
op214.sizes = ([1576], [256])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op214_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_1, getitem_1)
        return store_reduction
op212_op213_op214_op216.snodes[3] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 403456}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf213', c0, {c0: 1576}, None),
        MemoryDep('buf214', c0, {c0: 1576}, None)]
op216.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 1576, c1: 256}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (403456, 1)
op216.sizes = ([1576, 256], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op216_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf214', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf216', get_index_5, add_1, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 1210368}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1210368}, None)]
op218.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 1576, c1: 768}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (1210368, 1)
op218.sizes = ([1576, 768], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op218_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf218', get_index_4, mul_2, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op219.node.kernel = extern_kernels.mm


op220_op221_op223: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op220_op221_op223.writes = 
    [   MemoryDep('buf220', c0, {c0: 1576}, None),
        MemoryDep('buf221', c0, {c0: 1576}, None),
        MemoryDep('buf223', c0, {c0: 403456}, None)]
op220_op221_op223.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None)]
op220_op221_op223.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg129_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg130_1', c1, {c0: 1576, c1: 256}, None)]
op220_op221_op223.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op220_op221_op223.snodes[0] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 1576}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None)]
op220.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (1576, 256)
op220.sizes = ([1576], [256])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op220_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf220', get_index_3, getitem)
        return store_reduction
op220_op221_op223.snodes[1] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1576}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None)]
op221.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1576, 256)
op221.sizes = ([1576], [256])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op221_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_3, getitem_1)
        return store_reduction
op220_op221_op223.snodes[2] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 403456}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None),
        MemoryDep('buf220', c0, {c0: 1576}, None),
        MemoryDep('buf221', c0, {c0: 1576}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg129_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg130_1', c1, {c0: 1576, c1: 256}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (403456, 1)
op223.sizes = ([1576, 256], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op223_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf220', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf221', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg129_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg130_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf223', get_index_7, add_3, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg131_1', mode=None), StarDep(name='arg132_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.addmm


op225: ExternKernelSchedulerNode(FallbackKernel)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: FallbackKernel
    buf225.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf225.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op225.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op226: ExternKernelSchedulerNode(MultiOutput)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: MultiOutput
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = None


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op230.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231_op232_op233_op242: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op231_op232_op233_op242.writes = 
    [   MemoryDep('buf231', c0, {c0: 403456}, None),
        MemoryDep('buf232', c0, {c0: 1576}, None),
        MemoryDep('buf233', c0, {c0: 1576}, None),
        MemoryDep('buf242', c0, {c0: 403456}, None)]
op231_op232_op233_op242.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None),
        MemoryDep('buf230', c0, {c0: 403456}, None)]
op231_op232_op233_op242.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg134_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg135_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg136_1', c1, {c0: 1576, c1: 256}, None)]
op231_op232_op233_op242.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf232.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf233.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op231_op232_op233_op242.snodes[0] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 403456}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 403456}, None),
        MemoryDep('buf219', c0, {c0: 403456}, None),
        MemoryDep('buf230', c0, {c0: 403456}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg134_1', c1, {c0: 1576, c1: 256}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (403456, 1)
op231.sizes = ([1576, 256], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op231_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg134_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, add_3, None)
        return store
op231_op232_op233_op242.snodes[1] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 1576}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 403456}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf232.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1576, 256)
op232.sizes = ([1576], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op232_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, getitem)
        return store_reduction
op231_op232_op233_op242.snodes[2] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1576}, None)]
op233.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 403456}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf233.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (1576, 256)
op233.sizes = ([1576], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op233_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem_1)
        return store_reduction
op231_op232_op233_op242.snodes[3] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 403456}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 403456}, None),
        MemoryDep('buf232', c0, {c0: 1576}, None),
        MemoryDep('buf233', c0, {c0: 1576}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg136_1', c1, {c0: 1576, c1: 256}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (403456, 1)
op242.sizes = ([1576, 256], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op242_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf233', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg135_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg136_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_1, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op236.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1231872}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 1231872}, None)]
op237.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 3208, c1: 384}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1231872, 1)
op237.sizes = ([3208, 384], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
class op237_loop_body:
    var_ranges = {z0: 3208, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg102_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf237', get_index_4, mul_2, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op238.node.kernel = extern_kernels.mm


op239_op240_op249_op250: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op239_op240_op249_op250.writes = 
    [   MemoryDep('buf239', c0, {c0: 8}, None),
        MemoryDep('buf240', c0, {c0: 8}, None),
        MemoryDep('buf249', c0, {c0: 1024}, None),
        MemoryDep('buf250', c0, {c0: 1024}, None)]
op239_op240_op249_op250.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op239_op240_op249_op250.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg141_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg142_1', c1, {c0: 8, c1: 128}, None)]
op239_op240_op249_op250.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf239.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf240.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op239_op240_op249_op250.snodes[0] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 8}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op239.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf239.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (8, 128)
op239.sizes = ([8], [128])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem)
        return store_reduction
op239_op240_op249_op250.snodes[1] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 8}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op240.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf240.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (8, 128)
op240.sizes = ([8], [128])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op240_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, getitem_1)
        return store_reduction
op239_op240_op249_op250.snodes[2] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 1024}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf239', c0, {c0: 8}, None),
        MemoryDep('buf240', c0, {c0: 8}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg141_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg142_1', c1, {c0: 8, c1: 128}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (1024, 1)
op249.sizes = ([8, 128], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op249_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf239', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf240', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg141_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf249', get_index_7, add_3, None)
        return store
op239_op240_op249_op250.snodes[3] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 1024}, None)]
op250.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 1024}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (1024, 1)
op250.sizes = ([1024], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op250_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf250', get_index_2, mul_2, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
]
op243.node.kernel = extern_kernels.mm


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 1210368}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 1210368}, None)]
op244.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 1576, c1: 768}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (1210368, 1)
op244.sizes = ([1576, 768], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op244_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf243', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg138_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf244', get_index_4, mul_2, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
]
op245.node.kernel = extern_kernels.mm


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg143_1', mode=None), StarDep(name='arg144_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False),
    ]
]
op251.node.kernel = extern_kernels.addmm


op252_op253_op255_op256: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op252_op253_op255_op256.writes = 
    [   MemoryDep('buf252', c0, {c0: 1576}, None),
        MemoryDep('buf253', c0, {c0: 1576}, None),
        MemoryDep('buf255', c0, {c0: 403456}, None),
        MemoryDep('buf256', c0, {c0: 403456}, None)]
op252_op253_op255_op256.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf251', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op252_op253_op255_op256.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg149_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg150_1', c1, {c0: 1576, c1: 256}, None)]
op252_op253_op255_op256.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op252_op253_op255_op256.snodes[0] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1576}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf251', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op252.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1576, 256)
op252.sizes = ([8, 197], [256])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf252', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op252_op253_op255_op256.snodes[1] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 1576}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf251', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op253.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (1576, 256)
op253.sizes = ([8, 197], [256])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op253_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf253', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op252_op253_op255_op256.snodes[2] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 403456}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf251', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf252', c0, {c0: 1576}, None),
        MemoryDep('buf253', c0, {c0: 1576}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg149_1', c1, {c0: 1576, c1: 256}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (403456, 1)
op255.sizes = ([8, 197, 256], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf252', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf253', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg149_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf255', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op252_op253_op255_op256.snodes[3] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 403456}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 403456}, None)]
op256.met_dependencies = [MemoryDep('arg150_1', c1, {c0: 1576, c1: 256}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (403456, 1)
op256.sizes = ([1576, 256], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op256_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf256', get_index_2, add, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 2048}, None)]
op259.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 2048}, None)]
op259.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 8, c1: 256}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (2048, 1)
op259.sizes = ([8, 256], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf259', get_index_2, add, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op258.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf258.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op258.node.kernel = extern_kernels.mm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 403456}, None)]
op260.unmet_dependencies = [MemoryDep('buf258', 50432*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 197}, None)]
op260.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 8, c1: 256}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (403456, 1)
op260.sizes = ([8, 256, 197], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 197}
    index0 = 50432*z0 + z1 + 256*z2
    index1 = z1
    index2 = 50432*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf260', get_index_2, add, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf259', mode=None), StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.bmm


op262_op263_op265: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op262_op263_op265.writes = 
    [   MemoryDep('buf262', c0, {c0: 32}, None),
        MemoryDep('buf263', c0, {c0: 32}, None),
        MemoryDep('buf265', c0, {c0: 6304}, None)]
op262_op263_op265.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 6304}, None)]
op262_op263_op265.met_dependencies = []
op262_op263_op265.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op262_op263_op265.snodes[0] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 32}, None)]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 6304}, None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (32, 197)
op262.sizes = ([32], [197])
buf261_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op262_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf262', get_index_1, reduction)
        return store_reduction
op262_op263_op265.snodes[1] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 32}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 6304}, None),
        MemoryDep('buf262', c0, {c0: 32}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (32, 197)
op263.sizes = ([32], [197])
buf261_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op263_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf262', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf263', get_index_2, reduction)
        return store_reduction
op262_op263_op265.snodes[2] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 6304}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 6304}, None),
        MemoryDep('buf262', c0, {c0: 32}, None),
        MemoryDep('buf263', c0, {c0: 32}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (6304, 1)
op265.sizes = ([32, 197], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
class op265_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf262', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf263', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf265', get_index_3, truediv, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op264.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 403456}, None)]
op266.unmet_dependencies = [   MemoryDep('buf264', 50432*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op266.met_dependencies = [MemoryDep('arg156_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (403456, 1)
op266.sizes = ([8, 4, 197, 64], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 197, z3: 64}
    index0 = 50432*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 50432*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf266', get_index_2, add, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None), StarDep(name='buf266', mode=None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 64], stride=[64, 64, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.bmm


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op246_op247_op269_op273_op274_op270_op271_op298_op299: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op246_op247_op269_op273_op274_op270_op271_op298_op299.writes = 
    [   MemoryDep('buf246', c0, {c0: 8}, None),
        MemoryDep('buf247', c0, {c0: 8}, None),
        MemoryDep('buf269', c0, {c0: 2048}, None),
        MemoryDep('buf270', c0, {c0: 8}, None),
        MemoryDep('buf271', c0, {c0: 8}, None),
        MemoryDep('buf273', c0, {c0: 2048}, None),
        MemoryDep('buf274', c0, {c0: 2048}, None),
        MemoryDep('buf298', c0, {c0: 2048}, None),
        MemoryDep('buf299', c0, {c0: 2048}, None)]
op246_op247_op269_op273_op274_op270_op271_op298_op299.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf231', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf251', c0, {c0: 2048}, None),
        MemoryDep('buf268', c0, {c0: 2048}, None)]
op246_op247_op269_op273_op274_op270_op271_op298_op299.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg159_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg160_1', c1, {c0: 8, c1: 256}, None)]
op246_op247_op269_op273_op274_op270_op271_op298_op299.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf246.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf247.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf270.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf271.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[0] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 8}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op246.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 8, c1: 256}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf246.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (8, 256)
op246.sizes = ([8], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_3, getitem)
        return store_reduction
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[1] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 8}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op247.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 8, c1: 256}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf247.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (8, 256)
op247.sizes = ([8], [256])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op247_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_3, getitem_1)
        return store_reduction
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 2048}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf251', c0, {c0: 2048}, None),
        MemoryDep('buf268', c0, {c0: 2048}, None)]
op269.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 256}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (2048, 1)
op269.sizes = ([8, 256], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op269_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = 50432*z0 + z1 + 256*I + 256
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[3] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 2048}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf245', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf246', c0, {c0: 8}, None),
        MemoryDep('buf247', c0, {c0: 8}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 256}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (2048, 1)
op273.sizes = ([8, 256], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf246', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf247', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg145_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg146_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf273', get_index_7, add_3, None)
        return store
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[4] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 2048}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 2048}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (2048, 1)
op274.sizes = ([2048], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op274_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf273', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf274', get_index_2, mul_2, None)
        return store
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[5] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 8}, None)]
op270.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 2048}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf270.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (8, 256)
op270.sizes = ([8], [256])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op270_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf270', get_index_1, getitem)
        return store_reduction
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[6] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 8}, None)]
op271.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 2048}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf271.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (8, 256)
op271.sizes = ([8], [256])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op271_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf271', get_index_1, getitem_1)
        return store_reduction
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[7] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 2048}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 2048}, None),
        MemoryDep('buf270', c0, {c0: 8}, None),
        MemoryDep('buf271', c0, {c0: 8}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg160_1', c1, {c0: 8, c1: 256}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (2048, 1)
op298.sizes = ([8, 256], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf270', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf271', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf298', get_index_5, add_1, None)
        return store
op246_op247_op269_op273_op274_op270_op271_op298_op299.snodes[8] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 2048}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 2048}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (2048, 1)
op299.sizes = ([2048], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op299_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf298', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf299', get_index_2, mul_2, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg147_1', mode=None), StarDep(name='arg148_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.addmm


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg161_1', mode=None), StarDep(name='arg162_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.addmm


op276_op277_op301_op302_op279_op304_op280_op305: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op276_op277_op301_op302_op279_op304_op280_op305.writes = 
    [   MemoryDep('buf276', c0, {c0: 3208}, None),
        MemoryDep('buf277', c0, {c0: 3208}, None),
        MemoryDep('buf279', c0, {c0: 410624}, None),
        MemoryDep('buf280', c0, {c0: 410624}, None),
        MemoryDep('buf301', c0, {c0: 3208}, None),
        MemoryDep('buf302', c0, {c0: 3208}, None),
        MemoryDep('buf304', c0, {c0: 410624}, None),
        MemoryDep('buf305', c0, {c0: 410624}, None)]
op276_op277_op301_op302_op279_op304_op280_op305.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf275', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op276_op277_op301_op302_op279_op304_op280_op305.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg163_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg164_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg177_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg178_1', c1, {c0: 3208, c1: 128}, None)]
op276_op277_op301_op302_op279_op304_op280_op305.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf280.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op276_op277_op301_op302_op279_op304_op280_op305.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 3208}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf275', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op276.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (3208, 128)
op276.sizes = ([8, 401], [128])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf276', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf275', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 3208}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf275', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op277.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf277.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (3208, 128)
op277.sizes = ([8, 401], [128])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf277', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf275', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[2] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 3208}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op301.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (3208, 128)
op301.sizes = ([8, 401], [128])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op301_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf301', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf300', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[3] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 3208}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op302.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (3208, 128)
op302.sizes = ([8, 401], [128])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf302', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf300', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[4] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 410624}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf275', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf276', c0, {c0: 3208}, None),
        MemoryDep('buf277', c0, {c0: 3208}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg163_1', c1, {c0: 3208, c1: 128}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (410624, 1)
op279.sizes = ([8, 401, 128], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf276', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf277', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg163_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf279', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf275', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[5] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 410624}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf301', c0, {c0: 3208}, None),
        MemoryDep('buf302', c0, {c0: 3208}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg177_1', c1, {c0: 3208, c1: 128}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (410624, 1)
op304.sizes = ([8, 401, 128], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf301', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf302', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg177_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf304', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf300', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op276_op277_op301_op302_op279_op304_op280_op305.snodes[6] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 410624}, None)]
op280.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 410624}, None)]
op280.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 3208, c1: 128}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf280.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (410624, 1)
op280.sizes = ([3208, 128], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op280_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf280', get_index_2, add, None)
        return store
op276_op277_op301_op302_op279_op304_op280_op305.snodes[7] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 410624}, None)]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 410624}, None)]
op305.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 3208, c1: 128}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (410624, 1)
op305.sizes = ([3208, 128], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op305_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf305', get_index_2, add, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op282.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.node.kernel = extern_kernels.mm


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 1024}, None)]
op283.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 1024}, None)]
op283.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 8, c1: 128}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (1024, 1)
op283.sizes = ([8, 128], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op283_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf283', get_index_2, add, None)
        return store


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 410624}, None)]
op284.unmet_dependencies = [MemoryDep('buf282', 51328*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 401}, None)]
op284.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 8, c1: 128}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (410624, 1)
op284.sizes = ([8, 128, 401], [])
buf282_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
class op284_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 401}
    index0 = 51328*z0 + z1 + 128*z2
    index1 = z1
    index2 = 51328*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf284', get_index_2, add, None)
        return store


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf283', mode=None), StarDep(name='buf284', mode=None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op285.node.kernel = extern_kernels.bmm


op286_op287_op289: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op286_op287_op289.writes = 
    [   MemoryDep('buf286', c0, {c0: 32}, None),
        MemoryDep('buf287', c0, {c0: 32}, None),
        MemoryDep('buf289', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op286_op287_op289.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 12832}, None)]
op286_op287_op289.met_dependencies = []
op286_op287_op289.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf287.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op286_op287_op289.snodes[0] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 32}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 12832}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (32, 401)
op286.sizes = ([32], [401])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op286_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf286', get_index_1, reduction)
        return store_reduction
op286_op287_op289.snodes[1] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 32}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 12832}, None),
        MemoryDep('buf286', c0, {c0: 32}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf287.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (32, 401)
op287.sizes = ([32], [401])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op287_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf286', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf287', get_index_2, reduction)
        return store_reduction
op286_op287_op289.snodes[2] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 12832}, None),
        MemoryDep('buf286', c0, {c0: 32}, None),
        MemoryDep('buf287', c0, {c0: 32}, None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (12832, 1)
op289.sizes = ([8, 4, 401], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401}
    index0 = 1604*z0 + 401*z1 + z2
    index1 = 4*z0 + z1
    index2 = 1632*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf286', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf287', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf289', get_index_3, truediv, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op288.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 12832}, None)]
op290.unmet_dependencies = [   MemoryDep('buf289', c1 + 1632*((c0//4)) + 401*ModularIndexing(c0, 1, 4), {c0: 32, c1: 401}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (12832, 1)
op290.sizes = ([32, 401], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
class op290_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = z1 + 1632*((z0//4)) + 401*ModularIndexing(z0, 1, 4)
    index1 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 410624}, None)]
op291.unmet_dependencies = [   MemoryDep('buf288', 51328*c0 + 32*c1 + 128*c2 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op291.met_dependencies = [MemoryDep('arg170_1', 32*c1 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (410624, 1)
op291.sizes = ([8, 4, 401, 32], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
class op291_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401, z3: 32}
    index0 = 51328*z0 + 32*z1 + 128*z2 + z3
    index1 = 32*z1 + z3
    index2 = 51328*z0 + 12832*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf291', get_index_2, add, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None), StarDep(name='buf291', mode=None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 32], stride=[32, 32, 1])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.node.kernel = extern_kernels.bmm


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.mm


op294_op295_op296_op317_op318: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op294_op295_op296_op317_op318.writes = 
    [   MemoryDep('buf294', c0, {c0: 1024}, None),
        MemoryDep('buf295', c0, {c0: 8}, None),
        MemoryDep('buf296', c0, {c0: 8}, None),
        MemoryDep('buf317', c0, {c0: 1024}, None),
        MemoryDep('buf318', c0, {c0: 1024}, None)]
op294_op295_op296_op317_op318.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf275', c0, {c0: 1024}, None),
        MemoryDep('buf293', c0, {c0: 1024}, None)]
op294_op295_op296_op317_op318.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 128}, None)]
op294_op295_op296_op317_op318.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf295.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf296.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op294_op295_op296_op317_op318.snodes[0] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 1024}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf238', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf275', c0, {c0: 1024}, None),
        MemoryDep('buf293', c0, {c0: 1024}, None)]
op294.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 128}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (1024, 1)
op294.sizes = ([8, 128], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op294_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = 51328*z0 + z1 + 128*I + 128
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf294', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op294_op295_op296_op317_op318.snodes[1] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 8}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1024}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf295.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (8, 128)
op295.sizes = ([8], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op295_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem)
        return store_reduction
op294_op295_op296_op317_op318.snodes[2] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 8}, None)]
op296.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1024}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf296.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (8, 128)
op296.sizes = ([8], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf296', get_index_1, getitem_1)
        return store_reduction
op294_op295_op296_op317_op318.snodes[3] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 1024}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 1024}, None),
        MemoryDep('buf295', c0, {c0: 8}, None),
        MemoryDep('buf296', c0, {c0: 8}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 128}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (1024, 1)
op317.sizes = ([8, 128], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op317_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf295', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf296', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg173_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg174_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, add_1, None)
        return store
op294_op295_op296_op317_op318.snodes[4] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1024}, None)]
op318.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1024}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1024, 1)
op318.sizes = ([1024], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op318_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf318', get_index_2, mul_2, None)
        return store


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = [StarDep(name='arg179_1', mode=None), StarDep(name='arg180_1', mode=None)]
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.node.kernel = extern_kernels.addmm


op307: ExternKernelSchedulerNode(FallbackKernel)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: FallbackKernel
    buf307.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf307.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
    ]
]
op307.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op308: ExternKernelSchedulerNode(MultiOutput)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf307', mode=None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: MultiOutput
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 32, 128, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op308.node.kernel = None


op312: ExternKernelSchedulerNode(ExternKernelOut)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op312.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op312.outputs = [
    buf312: ExternKernelOut
    buf312.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op312.node.kernel = extern_kernels.mm


op313_op314_op315_op374: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op313_op314_op315_op374.writes = 
    [   MemoryDep('buf313', c0, {c0: 410624}, None),
        MemoryDep('buf314', c0, {c0: 3208}, None),
        MemoryDep('buf315', c0, {c0: 3208}, None),
        MemoryDep('buf374', c0, {c0: 410624}, None)]
op313_op314_op315_op374.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf312', c0, {c0: 410624}, None)]
op313_op314_op315_op374.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg182_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg183_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg184_1', c1, {c0: 3208, c1: 128}, None)]
op313_op314_op315_op374.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
    ]
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf314.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf315.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op313_op314_op315_op374.snodes[0] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 410624}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf174', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf238', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf300', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf312', c0, {c0: 410624}, None)]
op313.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg182_1', c1, {c0: 3208, c1: 128}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (410624, 1)
op313.sizes = ([8, 401, 128], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op313_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf312', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg182_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf313', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf300', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf238', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op313_op314_op315_op374.snodes[1] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 3208}, None)]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 410624}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf314.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (3208, 128)
op314.sizes = ([3208], [128])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op314_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf314', get_index_1, getitem)
        return store_reduction
op313_op314_op315_op374.snodes[2] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 3208}, None)]
op315.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 410624}, None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf315.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (3208, 128)
op315.sizes = ([3208], [128])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op315_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf315', get_index_1, getitem_1)
        return store_reduction
op313_op314_op315_op374.snodes[3] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 410624}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf313', c0, {c0: 410624}, None),
        MemoryDep('buf314', c0, {c0: 3208}, None),
        MemoryDep('buf315', c0, {c0: 3208}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg184_1', c1, {c0: 3208, c1: 128}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (410624, 1)
op374.sizes = ([3208, 128], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op374_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf314', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf315', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf374', get_index_5, add_1, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelOut)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg175_1', mode=None), StarDep(name='arg176_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelOut
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
]
op319.node.kernel = extern_kernels.addmm


op320_op321_op323_op324: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op320_op321_op323_op324.writes = 
    [   MemoryDep('buf320', c0, {c0: 1576}, None),
        MemoryDep('buf321', c0, {c0: 1576}, None),
        MemoryDep('buf323', c0, {c0: 403456}, None),
        MemoryDep('buf324', c0, {c0: 403456}, None)]
op320_op321_op323_op324.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op320_op321_op323_op324.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg189_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg190_1', c1, {c0: 1576, c1: 256}, None)]
op320_op321_op323_op324.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf320.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf321.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op320_op321_op323_op324.snodes[0] =
op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1576}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op320.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf320.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1576, 256)
op320.sizes = ([8, 197], [256])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf320', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf319', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op320_op321_op323_op324.snodes[1] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 1576}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op321.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf321.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (1576, 256)
op321.sizes = ([8, 197], [256])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op321_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf321', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf319', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op320_op321_op323_op324.snodes[2] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 403456}, None)]
op323.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf320', c0, {c0: 1576}, None),
        MemoryDep('buf321', c0, {c0: 1576}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg189_1', c1, {c0: 1576, c1: 256}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (403456, 1)
op323.sizes = ([8, 197, 256], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op323_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf320', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf321', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg189_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf323', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf319', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op320_op321_op323_op324.snodes[3] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 403456}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 403456}, None)]
op324.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 1576, c1: 256}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (403456, 1)
op324.sizes = ([1576, 256], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op324_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf324', get_index_2, add, None)
        return store


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg191_1', mode=None), StarDep(name='arg192_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.node.kernel = extern_kernels.addmm


op326: ExternKernelSchedulerNode(FallbackKernel)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: FallbackKernel
    buf326.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op326.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op327: ExternKernelSchedulerNode(MultiOutput)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: MultiOutput
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op327.node.kernel = None


op331: ExternKernelSchedulerNode(ExternKernelOut)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op331.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelOut
    buf331.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.mm


op332_op333_op334_op336: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op332_op333_op334_op336.writes = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf333', c0, {c0: 1576}, None),
        MemoryDep('buf334', c0, {c0: 1576}, None),
        MemoryDep('buf336', c0, {c0: 403456}, None)]
op332_op333_op334_op336.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf331', c0, {c0: 403456}, None)]
op332_op333_op334_op336.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg194_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg195_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg196_1', c1, {c0: 1576, c1: 256}, None)]
op332_op333_op334_op336.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf333.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf334.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op332_op333_op334_op336.snodes[0] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 403456}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf231', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf245', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf319', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf331', c0, {c0: 403456}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg194_1', c1, {c0: 1576, c1: 256}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (403456, 1)
op332.sizes = ([8, 197, 256], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op332_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf331', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg194_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf332', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf319', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf245', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op332_op333_op334_op336.snodes[1] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1576}, None)]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 403456}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf333.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1576, 256)
op333.sizes = ([1576], [256])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op333_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_1, getitem)
        return store_reduction
op332_op333_op334_op336.snodes[2] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 1576}, None)]
op334.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 403456}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf334.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (1576, 256)
op334.sizes = ([1576], [256])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op334_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_1, getitem_1)
        return store_reduction
op332_op333_op334_op336.snodes[3] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 403456}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf333', c0, {c0: 1576}, None),
        MemoryDep('buf334', c0, {c0: 1576}, None)]
op336.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg196_1', c1, {c0: 1576, c1: 256}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (403456, 1)
op336.sizes = ([1576, 256], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op336_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf333', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf334', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg195_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg196_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf336', get_index_5, add_1, None)
        return store


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False)]
]
op337.node.kernel = extern_kernels.mm


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1210368}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 1210368}, None)]
op338.met_dependencies = [MemoryDep('arg198_1', c1, {c0: 1576, c1: 768}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1210368, 1)
op338.sizes = ([1576, 768], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op338_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg198_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf337', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg198_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf338', get_index_4, mul_2, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf338', mode=None)]
op339.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
    ]
]
op339.node.kernel = extern_kernels.mm


op340_op341_op343: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op340_op341_op343.writes = 
    [   MemoryDep('buf340', c0, {c0: 1576}, None),
        MemoryDep('buf341', c0, {c0: 1576}, None),
        MemoryDep('buf343', c0, {c0: 403456}, None)]
op340_op341_op343.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None)]
op340_op341_op343.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg201_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg202_1', c1, {c0: 1576, c1: 256}, None)]
op340_op341_op343.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op340_op341_op343.snodes[0] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1576}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None)]
op340.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1576, 256)
op340.sizes = ([1576], [256])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op340_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf339', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem)
        return store_reduction
op340_op341_op343.snodes[1] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 1576}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None)]
op341.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (1576, 256)
op341.sizes = ([1576], [256])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op341_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf339', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf341', get_index_3, getitem_1)
        return store_reduction
op340_op341_op343.snodes[2] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 403456}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None),
        MemoryDep('buf340', c0, {c0: 1576}, None),
        MemoryDep('buf341', c0, {c0: 1576}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg201_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg202_1', c1, {c0: 1576, c1: 256}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (403456, 1)
op343.sizes = ([1576, 256], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op343_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf339', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf340', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf341', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg201_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg202_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf343', get_index_7, add_3, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg203_1', mode=None), StarDep(name='arg204_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = extern_kernels.addmm


op345: ExternKernelSchedulerNode(FallbackKernel)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: FallbackKernel
    buf345.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
]
op345.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op346: ExternKernelSchedulerNode(MultiOutput)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: MultiOutput
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op346.node.kernel = None


op350: ExternKernelSchedulerNode(ExternKernelOut)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op350.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op350.outputs = [
    buf350: ExternKernelOut
    buf350.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False)]
]
op350.node.kernel = extern_kernels.mm


op351_op352_op353_op355: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op351_op352_op353_op355.writes = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf352', c0, {c0: 1576}, None),
        MemoryDep('buf353', c0, {c0: 1576}, None),
        MemoryDep('buf355', c0, {c0: 403456}, None)]
op351_op352_op353_op355.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None),
        MemoryDep('buf350', c0, {c0: 403456}, None)]
op351_op352_op353_op355.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg206_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg207_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg208_1', c1, {c0: 1576, c1: 256}, None)]
op351_op352_op353_op355.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf352.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf353.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op351_op352_op353_op355.snodes[0] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 403456}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 403456}, None),
        MemoryDep('buf339', c0, {c0: 403456}, None),
        MemoryDep('buf350', c0, {c0: 403456}, None)]
op351.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg206_1', c1, {c0: 1576, c1: 256}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op351.group.device = cuda:0
op351.group.iteration = (403456, 1)
op351.sizes = ([1576, 256], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op351_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf339', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf350', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf351', get_index_5, add_3, None)
        return store
op351_op352_op353_op355.snodes[1] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 1576}, None)]
op352.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 403456}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf352.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (1576, 256)
op352.sizes = ([1576], [256])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op352_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf352', get_index_1, getitem)
        return store_reduction
op351_op352_op353_op355.snodes[2] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 1576}, None)]
op353.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 403456}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf353.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (1576, 256)
op353.sizes = ([1576], [256])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op353_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf353', get_index_1, getitem_1)
        return store_reduction
op351_op352_op353_op355.snodes[3] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 403456}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf352', c0, {c0: 1576}, None),
        MemoryDep('buf353', c0, {c0: 1576}, None)]
op355.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg208_1', c1, {c0: 1576, c1: 256}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (403456, 1)
op355.sizes = ([1576, 256], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op355_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf352', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf353', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg207_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg208_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf355', get_index_5, add_1, None)
        return store


op356: ExternKernelSchedulerNode(ExternKernelOut)
op356.writes = [StarDep(name='buf356', mode=None)]
op356.unmet_dependencies = [StarDep(name='buf355', mode=None)]
op356.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op356.outputs = [
    buf356: ExternKernelOut
    buf356.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False)]
]
op356.node.kernel = extern_kernels.mm


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1210368}, None)]
op357.unmet_dependencies = [MemoryDep('buf356', c0, {c0: 1210368}, None)]
op357.met_dependencies = [MemoryDep('arg210_1', c1, {c0: 1576, c1: 768}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1210368, 1)
op357.sizes = ([1576, 768], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op357_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg210_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf357', get_index_4, mul_2, None)
        return store


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf357', mode=None)]
op358.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op358.node.kernel = extern_kernels.mm


op359_op360_op362: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op359_op360_op362.writes = 
    [   MemoryDep('buf359', c0, {c0: 1576}, None),
        MemoryDep('buf360', c0, {c0: 1576}, None),
        MemoryDep('buf362', c0, {c0: 403456}, None)]
op359_op360_op362.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None)]
op359_op360_op362.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg214_1', c1, {c0: 1576, c1: 256}, None)]
op359_op360_op362.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf359.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf360.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op359_op360_op362.snodes[0] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 1576}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None)]
op359.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf359.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (1576, 256)
op359.sizes = ([1576], [256])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op359_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf358', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf359', get_index_3, getitem)
        return store_reduction
op359_op360_op362.snodes[1] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 1576}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None)]
op360.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf360.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (1576, 256)
op360.sizes = ([1576], [256])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op360_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf358', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf360', get_index_3, getitem_1)
        return store_reduction
op359_op360_op362.snodes[2] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 403456}, None)]
op362.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None),
        MemoryDep('buf359', c0, {c0: 1576}, None),
        MemoryDep('buf360', c0, {c0: 1576}, None)]
op362.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg214_1', c1, {c0: 1576, c1: 256}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (403456, 1)
op362.sizes = ([1576, 256], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op362_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf358', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf359', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf360', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg213_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg214_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf362', get_index_7, add_3, None)
        return store


op363: ExternKernelSchedulerNode(ExternKernelOut)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg215_1', mode=None), StarDep(name='arg216_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelOut
    buf363.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.node.kernel = extern_kernels.addmm


op364: ExternKernelSchedulerNode(FallbackKernel)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: FallbackKernel
    buf364.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False),
    ]
]
op364.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op365: ExternKernelSchedulerNode(MultiOutput)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: MultiOutput
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 64, 256, 1])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = None


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op369.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370_op371_op372_op381: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op370_op371_op372_op381.writes = 
    [   MemoryDep('buf370', c0, {c0: 403456}, None),
        MemoryDep('buf371', c0, {c0: 1576}, None),
        MemoryDep('buf372', c0, {c0: 1576}, None),
        MemoryDep('buf381', c0, {c0: 403456}, None)]
op370_op371_op372_op381.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None),
        MemoryDep('buf369', c0, {c0: 403456}, None)]
op370_op371_op372_op381.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg218_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg219_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg220_1', c1, {c0: 1576, c1: 256}, None)]
op370_op371_op372_op381.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
    ]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf371.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf372.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op370_op371_op372_op381.snodes[0] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 403456}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 403456}, None),
        MemoryDep('buf358', c0, {c0: 403456}, None),
        MemoryDep('buf369', c0, {c0: 403456}, None)]
op370.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg218_1', c1, {c0: 1576, c1: 256}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (403456, 1)
op370.sizes = ([1576, 256], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op370_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf358', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf369', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg218_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf370', get_index_5, add_3, None)
        return store
op370_op371_op372_op381.snodes[1] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1576}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 403456}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf371.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (1576, 256)
op371.sizes = ([1576], [256])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op371_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_1, getitem)
        return store_reduction
op370_op371_op372_op381.snodes[2] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1576}, None)]
op372.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 403456}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf372.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (1576, 256)
op372.sizes = ([1576], [256])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op372_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf372', get_index_1, getitem_1)
        return store_reduction
op370_op371_op372_op381.snodes[3] =
op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 403456}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 403456}, None),
        MemoryDep('buf371', c0, {c0: 1576}, None),
        MemoryDep('buf372', c0, {c0: 1576}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg220_1', c1, {c0: 1576, c1: 256}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (403456, 1)
op381.sizes = ([1576, 256], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op381_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf371', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf372', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf381', get_index_5, add_1, None)
        return store


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op375.node.kernel = extern_kernels.mm


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 1231872}, None)]
op376.unmet_dependencies = [MemoryDep('buf375', c0, {c0: 1231872}, None)]
op376.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 3208, c1: 384}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (1231872, 1)
op376.sizes = ([3208, 384], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[3208, 384], stride=[384, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 384], stride=[153984, 384, 1])
class op376_loop_body:
    var_ranges = {z0: 3208, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf375', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf376', get_index_4, mul_2, None)
        return store


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf377.users = [
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
    ]
]
op377.node.kernel = extern_kernels.mm


op378_op379_op388_op389: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op378_op379_op388_op389.writes = 
    [   MemoryDep('buf378', c0, {c0: 8}, None),
        MemoryDep('buf379', c0, {c0: 8}, None),
        MemoryDep('buf388', c0, {c0: 1024}, None),
        MemoryDep('buf389', c0, {c0: 1024}, None)]
op378_op379_op388_op389.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op378_op379_op388_op389.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg225_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 128}, None)]
op378_op379_op388_op389.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf378.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf379.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op378_op379_op388_op389.snodes[0] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 8}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op378.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf378.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (8, 128)
op378.sizes = ([8], [128])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf378', get_index_3, getitem)
        return store_reduction
op378_op379_op388_op389.snodes[1] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 8}, None)]
op379.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op379.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf379.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (8, 128)
op379.sizes = ([8], [128])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf379', get_index_3, getitem_1)
        return store_reduction
op378_op379_op388_op389.snodes[2] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1024}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1, {c0: 8, c1: 128}, None),
        MemoryDep('buf378', c0, {c0: 8}, None),
        MemoryDep('buf379', c0, {c0: 8}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg225_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 128}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1024, 1)
op388.sizes = ([8, 128], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op388_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf378', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf379', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg225_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg226_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf388', get_index_7, add_3, None)
        return store
op378_op379_op388_op389.snodes[3] =
op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1024}, None)]
op389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 1024}, None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (1024, 1)
op389.sizes = ([1024], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op389_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, mul_2, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelOut)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelOut
    buf382.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op382.node.kernel = extern_kernels.mm


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1210368}, None)]
op383.unmet_dependencies = [MemoryDep('buf382', c0, {c0: 1210368}, None)]
op383.met_dependencies = [MemoryDep('arg222_1', c1, {c0: 1576, c1: 768}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (1210368, 1)
op383.sizes = ([1576, 768], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op383_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf382', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg222_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf383', get_index_4, mul_2, None)
        return store


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf383', mode=None)]
op384.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
    ]
]
op384.node.kernel = extern_kernels.mm


op390: ExternKernelSchedulerNode(ExternKernelOut)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op390.met_dependencies = [StarDep(name='arg227_1', mode=None), StarDep(name='arg228_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelOut
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf390.users = [
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False),
    ]
]
op390.node.kernel = extern_kernels.addmm


op391_op392_op394_op395: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op391_op392_op394_op395.writes = 
    [   MemoryDep('buf391', c0, {c0: 1576}, None),
        MemoryDep('buf392', c0, {c0: 1576}, None),
        MemoryDep('buf394', c0, {c0: 403456}, None),
        MemoryDep('buf395', c0, {c0: 403456}, None)]
op391_op392_op394_op395.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf390', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op391_op392_op394_op395.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg233_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg234_1', c1, {c0: 1576, c1: 256}, None)]
op391_op392_op394_op395.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf391.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf392.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf395.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
    ]
]
op391_op392_op394_op395.snodes[0] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 1576}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf390', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op391.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf391.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (1576, 256)
op391.sizes = ([8, 197], [256])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op391_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf391', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf390', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op391_op392_op394_op395.snodes[1] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 1576}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf390', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op392.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf392.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (1576, 256)
op392.sizes = ([8, 197], [256])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op392_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf392', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf390', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op391_op392_op394_op395.snodes[2] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 403456}, None)]
op394.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf390', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf391', c0, {c0: 1576}, None),
        MemoryDep('buf392', c0, {c0: 1576}, None)]
op394.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg233_1', c1, {c0: 1576, c1: 256}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (403456, 1)
op394.sizes = ([8, 197, 256], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op394_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf391', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf392', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg233_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf394', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf390', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op391_op392_op394_op395.snodes[3] =
op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 403456}, None)]
op395.unmet_dependencies = [MemoryDep('buf394', c0, {c0: 403456}, None)]
op395.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 1576, c1: 256}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf395.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (403456, 1)
op395.sizes = ([1576, 256], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op395_loop_body:
    var_ranges = {z0: 1576, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf395', get_index_2, add, None)
        return store


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf396.users = [NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False)]
]
op396.node.kernel = extern_kernels.mm


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 2048}, None)]
op398.unmet_dependencies = [MemoryDep('buf396', c0, {c0: 2048}, None)]
op398.met_dependencies = [MemoryDep('arg236_1', c1, {c0: 8, c1: 256}, None)]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (2048, 1)
op398.sizes = ([8, 256], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf398', get_index_2, add, None)
        return store


op397: ExternKernelSchedulerNode(ExternKernelOut)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op397.met_dependencies = [StarDep(name='arg237_1', mode=None)]
op397.outputs = [
    buf397: ExternKernelOut
    buf397.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.node.kernel = extern_kernels.mm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 403456}, None)]
op399.unmet_dependencies = [MemoryDep('buf397', 50432*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 197}, None)]
op399.met_dependencies = [MemoryDep('arg238_1', c1, {c0: 8, c1: 256}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (403456, 1)
op399.sizes = ([8, 256, 197], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 64, 197], stride=[50432, 12608, 197, 1])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 197}
    index0 = 50432*z0 + z1 + 256*z2
    index1 = z1
    index2 = 50432*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg238_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf399', get_index_2, add, None)
        return store


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf398', mode=None), StarDep(name='buf399', mode=None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
    buf400.users = [
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
    ]
]
op400.node.kernel = extern_kernels.bmm


op401_op402_op404: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op401_op402_op404.writes = 
    [   MemoryDep('buf401', c0, {c0: 32}, None),
        MemoryDep('buf402', c0, {c0: 32}, None),
        MemoryDep('buf404', c0, {c0: 6304}, None)]
op401_op402_op404.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 6304}, None)]
op401_op402_op404.met_dependencies = []
op401_op402_op404.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
    ]
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf402.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op401_op402_op404.snodes[0] =
op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 32}, None)]
op401.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 6304}, None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
    ]
]
op401.group.device = cuda:0
op401.group.iteration = (32, 197)
op401.sizes = ([32], [197])
buf400_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op401_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf401', get_index_1, reduction)
        return store_reduction
op401_op402_op404.snodes[1] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 32}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf400', c0, {c0: 6304}, None),
        MemoryDep('buf401', c0, {c0: 32}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf402.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (32, 197)
op402.sizes = ([32], [197])
buf400_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op402_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf401', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf402', get_index_2, reduction)
        return store_reduction
op401_op402_op404.snodes[2] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 6304}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf400', c0, {c0: 6304}, None),
        MemoryDep('buf401', c0, {c0: 32}, None),
        MemoryDep('buf402', c0, {c0: 32}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (6304, 1)
op404.sizes = ([32, 197], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 197], stride=[197, 197, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 197], stride=[788, 197, 197, 1])
class op404_loop_body:
    var_ranges = {z0: 32, z1: 197}
    index0 = 197*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf401', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf402', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf404', get_index_3, truediv, None)
        return store


op403: ExternKernelSchedulerNode(ExternKernelOut)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op403.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op403.outputs = [
    buf403: ExternKernelOut
    buf403.layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
    buf403.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op403.node.kernel = extern_kernels.mm


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 403456}, None)]
op405.unmet_dependencies = [   MemoryDep('buf403', 50432*c0 + 64*c1 + 256*c2 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op405.met_dependencies = [MemoryDep('arg240_1', 64*c1 + c3, {c0: 8, c1: 4, c2: 197, c3: 64}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (403456, 1)
op405.sizes = ([8, 4, 197, 64], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 197, 64], stride=[50432, 12608, 64, 1])
class op405_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 197, z3: 64}
    index0 = 50432*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 50432*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf405', get_index_2, add, None)
        return store


op406: ExternKernelSchedulerNode(ExternKernelOut)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = [StarDep(name='buf404', mode=None), StarDep(name='buf405', mode=None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ExternKernelOut
    buf406.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 64], stride=[64, 64, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.node.kernel = extern_kernels.bmm


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False)]
]
op407.node.kernel = extern_kernels.mm


op385_op386_op408_op412_op413_op409_op410_op437_op438: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op385_op386_op408_op412_op413_op409_op410_op437_op438.writes = 
    [   MemoryDep('buf385', c0, {c0: 8}, None),
        MemoryDep('buf386', c0, {c0: 8}, None),
        MemoryDep('buf408', c0, {c0: 2048}, None),
        MemoryDep('buf409', c0, {c0: 8}, None),
        MemoryDep('buf410', c0, {c0: 8}, None),
        MemoryDep('buf412', c0, {c0: 2048}, None),
        MemoryDep('buf413', c0, {c0: 2048}, None),
        MemoryDep('buf437', c0, {c0: 2048}, None),
        MemoryDep('buf438', c0, {c0: 2048}, None)]
op385_op386_op408_op412_op413_op409_op410_op437_op438.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf370', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf390', c0, {c0: 2048}, None),
        MemoryDep('buf407', c0, {c0: 2048}, None)]
op385_op386_op408_op412_op413_op409_op410_op437_op438.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg242_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg243_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg244_1', c1, {c0: 8, c1: 256}, None)]
op385_op386_op408_op412_op413_op409_op410_op437_op438.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf385.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf386.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False),
    ]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf409.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf410.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[0] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 8}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op385.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 8, c1: 256}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf385.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (8, 256)
op385.sizes = ([8], [256])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op385_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf385', get_index_3, getitem)
        return store_reduction
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[1] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 8}, None)]
op386.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op386.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 8, c1: 256}, None)]
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf386.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (8, 256)
op386.sizes = ([8], [256])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op386_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf386', get_index_3, getitem_1)
        return store_reduction
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[2] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 2048}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1 + 256*I + 256, {c0: 8, c1: 256}, None),
        MemoryDep('buf390', c0, {c0: 2048}, None),
        MemoryDep('buf407', c0, {c0: 2048}, None)]
op408.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg242_1', c1, {c0: 8, c1: 256}, None)]
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False),
    ]
]
op408.group.device = cuda:0
op408.group.iteration = (2048, 1)
op408.sizes = ([8, 256], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op408_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = 50432*z0 + z1 + 256*I + 256
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf408', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[3] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 2048}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf384', 50432*c0 + c1, {c0: 8, c1: 256}, None),
        MemoryDep('buf385', c0, {c0: 8}, None),
        MemoryDep('buf386', c0, {c0: 8}, None)]
op412.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 256}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (2048, 1)
op412.sizes = ([8, 256], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op412_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf385', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf386', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg229_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg230_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf412', get_index_7, add_3, None)
        return store
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[4] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 2048}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', c0, {c0: 2048}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (2048, 1)
op413.sizes = ([2048], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op413_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf412', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf413', get_index_2, mul_2, None)
        return store
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[5] =
op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 8}, None)]
op409.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 2048}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf409.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (8, 256)
op409.sizes = ([8], [256])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op409_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf409', get_index_1, getitem)
        return store_reduction
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[6] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 8}, None)]
op410.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 2048}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf410.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (8, 256)
op410.sizes = ([8], [256])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op410_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf410', get_index_1, getitem_1)
        return store_reduction
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[7] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 2048}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 2048}, None),
        MemoryDep('buf409', c0, {c0: 8}, None),
        MemoryDep('buf410', c0, {c0: 8}, None)]
op437.met_dependencies = 
    [   MemoryDep('arg243_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg244_1', c1, {c0: 8, c1: 256}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (2048, 1)
op437.sizes = ([8, 256], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
class op437_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf409', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf410', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg243_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg244_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf437', get_index_5, add_1, None)
        return store
op385_op386_op408_op412_op413_op409_op410_op437_op438.snodes[8] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 2048}, None)]
op438.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 2048}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (2048, 1)
op438.sizes = ([2048], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 2048, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
class op438_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf437', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf438', get_index_2, mul_2, None)
        return store


op414: ExternKernelSchedulerNode(ExternKernelOut)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf413', mode=None)]
op414.met_dependencies = [StarDep(name='arg231_1', mode=None), StarDep(name='arg232_1', mode=None)]
op414.outputs = [
    buf414: ExternKernelOut
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf414.users = [
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
    ]
]
op414.node.kernel = extern_kernels.addmm


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg245_1', mode=None), StarDep(name='arg246_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
    ]
]
op439.node.kernel = extern_kernels.addmm


op415_op416_op440_op441_op418_op449_op419: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op415_op416_op440_op441_op418_op449_op419.writes = 
    [   MemoryDep('buf415', c0, {c0: 3208}, None),
        MemoryDep('buf416', c0, {c0: 3208}, None),
        MemoryDep('buf418', c0, {c0: 410624}, None),
        MemoryDep('buf419', c0, {c0: 410624}, None),
        MemoryDep('buf440', c0, {c0: 3208}, None),
        MemoryDep('buf441', c0, {c0: 3208}, None),
        MemoryDep('buf449', c0, {c0: 410624}, None)]
op415_op416_op440_op441_op418_op449_op419.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf414', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf439', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op415_op416_op440_op441_op418_op449_op419.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg247_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg248_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg261_1', c1, {c0: 3208, c1: 128}, None)]
op415_op416_op440_op441_op418_op449_op419.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf415.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf416.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf440.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf441.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf418.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False)]
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf419.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op415_op416_op440_op441_op418_op449_op419.snodes[0] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 3208}, None)]
op415.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf414', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op415.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf415.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (3208, 128)
op415.sizes = ([8, 401], [128])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op415_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf415', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[1] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 3208}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf414', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op416.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf416.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (3208, 128)
op416.sizes = ([8, 401], [128])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op416_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf416', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[2] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 3208}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf439', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op440.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf440.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (3208, 128)
op440.sizes = ([8, 401], [128])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op440_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf440', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf439', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[3] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 3208}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf439', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None)]
op441.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
    buf441.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (3208, 128)
op441.sizes = ([8, 401], [128])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf441', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf439', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[4] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 410624}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf414', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf415', c0, {c0: 3208}, None),
        MemoryDep('buf416', c0, {c0: 3208}, None)]
op418.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg247_1', c1, {c0: 3208, c1: 128}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf418.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (410624, 1)
op418.sizes = ([8, 401, 128], [])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op418_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf415', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf416', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg247_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf418', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[5] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 410624}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf377', 51328*c0 + c2 + 128*I + 128, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf439', 128*c0 + c2, {c0: 8, c1: 401, c2: 128}, None),
        MemoryDep('buf440', c0, {c0: 3208}, None),
        MemoryDep('buf441', c0, {c0: 3208}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 3208, c1: 128}, None),
        MemoryDep('arg261_1', c1, {c0: 3208, c1: 128}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (410624, 1)
op449.sizes = ([8, 401, 128], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 1], stride=[401, 1, 3232])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op449_loop_body:
    var_ranges = {z0: 8, z1: 401, z2: 128}
    index0 = z1
    index1 = 128*z0 + z2
    index2 = 51328*z0 + z2 + 128*I + 128
    index3 = z2
    index4 = 401*z0 + z1
    index5 = 51328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf440', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf441', get_index_5)
        constant_4 = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg261_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf449', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf439', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op415_op416_op440_op441_op418_op449_op419.snodes[6] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 410624}, None)]
op419.unmet_dependencies = [MemoryDep('buf418', c0, {c0: 410624}, None)]
op419.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 3208, c1: 128}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
    buf419.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op419.group.device = cuda:0
op419.group.iteration = (410624, 1)
op419.sizes = ([3208, 128], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
class op419_loop_body:
    var_ranges = {z0: 3208, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf419', get_index_2, add, None)
        return store


op420: ExternKernelSchedulerNode(ExternKernelOut)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf419', mode=None)]
op420.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op420.outputs = [
    buf420: ExternKernelOut
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf420.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op420.node.kernel = extern_kernels.mm


op421: ExternKernelSchedulerNode(ExternKernelOut)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf419', mode=None)]
op421.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op421.outputs = [
    buf421: ExternKernelOut
    buf421.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op421.node.kernel = extern_kernels.mm


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 1024}, None)]
op422.unmet_dependencies = [MemoryDep('buf420', c0, {c0: 1024}, None)]
op422.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 8, c1: 128}, None)]
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (1024, 1)
op422.sizes = ([8, 128], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op422_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg250_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf422', get_index_2, add, None)
        return store


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 410624}, None)]
op423.unmet_dependencies = [MemoryDep('buf421', 51328*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 401}, None)]
op423.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 8, c1: 128}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (410624, 1)
op423.sizes = ([8, 128, 401], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 32, 401], stride=[51328, 12832, 401, 1])
class op423_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 401}
    index0 = 51328*z0 + z1 + 128*z2
    index1 = z1
    index2 = 51328*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf423', get_index_2, add, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelOut)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf422', mode=None), StarDep(name='buf423', mode=None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ExternKernelOut
    buf424.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
    ]
]
op424.node.kernel = extern_kernels.bmm


op425_op426_op428: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op425_op426_op428.writes = 
    [   MemoryDep('buf425', c0, {c0: 32}, None),
        MemoryDep('buf426', c0, {c0: 32}, None),
        MemoryDep('buf428', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op425_op426_op428.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 12832}, None)]
op425_op426_op428.met_dependencies = []
op425_op426_op428.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
    ]
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf426.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op425_op426_op428.snodes[0] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 32}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 12832}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
    ]
]
op425.group.device = cuda:0
op425.group.iteration = (32, 401)
op425.sizes = ([32], [401])
buf424_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op425_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf425', get_index_1, reduction)
        return store_reduction
op425_op426_op428.snodes[1] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 32}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 12832}, None),
        MemoryDep('buf425', c0, {c0: 32}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
    buf426.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (32, 401)
op426.sizes = ([32], [401])
buf424_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
class op426_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = 401*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf425', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf426', get_index_2, reduction)
        return store_reduction
op425_op426_op428.snodes[2] =
op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', 1632*c0 + c1, {c0: 8, c1: 1604}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 12832}, None),
        MemoryDep('buf425', c0, {c0: 32}, None),
        MemoryDep('buf426', c0, {c0: 32}, None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (12832, 1)
op428.sizes = ([8, 4, 401], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 401, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 32, 32])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
class op428_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401}
    index0 = 1604*z0 + 401*z1 + z2
    index1 = 4*z0 + z1
    index2 = 1632*z0 + 401*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf425', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.1767766952966369, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf426', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf428', get_index_3, truediv, None)
        return store


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf419', mode=None)]
op427.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 12832}, None)]
op429.unmet_dependencies = [   MemoryDep('buf428', c1 + 1632*((c0//4)) + 401*ModularIndexing(c0, 1, 4), {c0: 32, c1: 401}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (12832, 1)
op429.sizes = ([32, 401], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 401], stride=[1632, 401, 401, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 401], stride=[401, 12832, 1])
class op429_loop_body:
    var_ranges = {z0: 32, z1: 401}
    index0 = z1 + 1632*((z0//4)) + 401*ModularIndexing(z0, 1, 4)
    index1 = 401*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf429', get_index_1, load, None)
        return store


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 410624}, None)]
op430.unmet_dependencies = [   MemoryDep('buf427', 51328*c0 + 32*c1 + 128*c2 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op430.met_dependencies = [MemoryDep('arg254_1', 32*c1 + c3, {c0: 8, c1: 4, c2: 401, c3: 32}, None)]
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
    buf430.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (410624, 1)
op430.sizes = ([8, 4, 401, 32], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 401, 32], stride=[51328, 12832, 32, 1])
class op430_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 401, z3: 32}
    index0 = 51328*z0 + 32*z1 + 128*z2 + z3
    index1 = 32*z1 + z3
    index2 = 51328*z0 + 12832*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf430', get_index_2, add, None)
        return store


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf429', mode=None), StarDep(name='buf430', mode=None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[32, 1, 32], stride=[32, 32, 1])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op431.node.kernel = extern_kernels.bmm


op432: ExternKernelSchedulerNode(ExternKernelOut)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf431', mode=None)]
op432.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op432.outputs = [
    buf432: ExternKernelOut
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False)]
]
op432.node.kernel = extern_kernels.mm


op433_op434_op435_op443_op444: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op433_op434_op435_op443_op444.writes = 
    [   MemoryDep('buf433', c0, {c0: 1024}, None),
        MemoryDep('buf434', c0, {c0: 8}, None),
        MemoryDep('buf435', c0, {c0: 8}, None),
        MemoryDep('buf443', c0, {c0: 1024}, None),
        MemoryDep('buf444', c0, {c0: 1024}, None)]
op433_op434_op435_op443_op444.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf414', c0, {c0: 1024}, None),
        MemoryDep('buf432', c0, {c0: 1024}, None)]
op433_op434_op435_op443_op444.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg257_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg258_1', c1, {c0: 8, c1: 128}, None)]
op433_op434_op435_op443_op444.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf434.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf435.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op433_op434_op435_op443_op444.snodes[0] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 1024}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf313', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf377', 51328*c0 + c1 + 128*I + 128, {c0: 8, c1: 128}, None),
        MemoryDep('buf414', c0, {c0: 1024}, None),
        MemoryDep('buf432', c0, {c0: 1024}, None)]
op433.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 128}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
    ]
]
op433.group.device = cuda:0
op433.group.iteration = (1024, 1)
op433.sizes = ([8, 128], [])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[3208, 128], stride=[128, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op433_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = 51328*z0 + z1 + 128*I + 128
    index2 = z1
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(constant, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(constant_2, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_4 = ops.constant(0, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(constant_4, constant_5)
        constant_6 = ops.constant(0, torch.int64)
        constant_7 = ops.constant(401, torch.int64)
        lt_1 = ops.lt(constant_6, constant_7)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf433', get_index_2, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf377', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op433_op434_op435_op443_op444.snodes[1] =
op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 8}, None)]
op434.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 1024}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf434.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (8, 128)
op434.sizes = ([8], [128])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op434_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf434', get_index_1, getitem)
        return store_reduction
op433_op434_op435_op443_op444.snodes[2] =
op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 8}, None)]
op435.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 1024}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf435.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (8, 128)
op435.sizes = ([8], [128])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op435_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf435', get_index_1, getitem_1)
        return store_reduction
op433_op434_op435_op443_op444.snodes[3] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 1024}, None)]
op443.unmet_dependencies = 
    [   MemoryDep('buf433', c0, {c0: 1024}, None),
        MemoryDep('buf434', c0, {c0: 8}, None),
        MemoryDep('buf435', c0, {c0: 8}, None)]
op443.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 8, c1: 128}, None),
        MemoryDep('arg258_1', c1, {c0: 8, c1: 128}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (1024, 1)
op443.sizes = ([8, 128], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
class op443_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf434', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf435', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg257_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg258_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf443', get_index_5, add_1, None)
        return store
op433_op434_op435_op443_op444.snodes[4] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 1024}, None)]
op444.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 1024}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (1024, 1)
op444.sizes = ([1024], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
class op444_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf443', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf444', get_index_2, mul_2, None)
        return store


op445: ExternKernelSchedulerNode(ExternKernelOut)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf444', mode=None)]
op445.met_dependencies = [StarDep(name='arg259_1', mode=None), StarDep(name='arg260_1', mode=None)]
op445.outputs = [
    buf445: ExternKernelOut
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
    ]
]
op445.node.kernel = extern_kernels.addmm


op446_op447_op452: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op446_op447_op452.writes = 
    [   MemoryDep('buf446', c0, {c0: 1576}, None),
        MemoryDep('buf447', c0, {c0: 1576}, None),
        MemoryDep('buf452', c0, {c0: 403456}, None)]
op446_op447_op452.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf445', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op446_op447_op452.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg263_1', c1, {c0: 1576, c1: 256}, None)]
op446_op447_op452.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf446.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf447.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op446_op447_op452.snodes[0] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 1576}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf445', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op446.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf446.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (1576, 256)
op446.sizes = ([8, 197], [256])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op446_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf446', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf445', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op446_op447_op452.snodes[1] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 1576}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf445', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None)]
op447.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf447.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (1576, 256)
op447.sizes = ([8, 197], [256])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op447_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf447', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf445', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op446_op447_op452.snodes[2] =
op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 403456}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf370', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf384', 50432*c0 + c2 + 256*I + 256, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf445', 256*c0 + c2, {c0: 8, c1: 197, c2: 256}, None),
        MemoryDep('buf446', c0, {c0: 1576}, None),
        MemoryDep('buf447', c0, {c0: 1576}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 1576, c1: 256}, None),
        MemoryDep('arg263_1', c1, {c0: 1576, c1: 256}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (403456, 1)
op452.sizes = ([8, 197, 256], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1576, 256], stride=[256, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
class op452_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 256}
    index0 = z1
    index1 = 256*z0 + z2
    index2 = 50432*z0 + z2 + 256*I + 256
    index3 = z2
    index4 = 197*z0 + z1
    index5 = 50432*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf446', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf447', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('arg263_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf452', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf445', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 1024}, None)]
op450.unmet_dependencies = [MemoryDep('buf449', 51328*c0 + c1, {c0: 8, c1: 128}, None)]
op450.met_dependencies = [MemoryDep('arg262_1', c1, {c0: 8, c1: 128}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (1024, 1)
op450.sizes = ([8, 128], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 401, 128], stride=[51328, 128, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 51328*z0 + z1
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf450', get_index_2, add, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg265_1', mode=None), StarDep(name='arg266_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf451.aliases = ['buf455']
    buf451.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.addmm


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 2048}, None)]
op453.unmet_dependencies = [MemoryDep('buf452', 50432*c0 + c1, {c0: 8, c1: 256}, None)]
op453.met_dependencies = [MemoryDep('arg264_1', c1, {c0: 8, c1: 256}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (2048, 1)
op453.sizes = ([8, 256], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 256], stride=[50432, 256, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
class op453_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 50432*z0 + z1
    index1 = z1
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf453', get_index_2, add, None)
        return store


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op454.met_dependencies = [StarDep(name='arg267_1', mode=None), StarDep(name='arg268_1', mode=None)]
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf454.aliases = ['buf455']
    buf454.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]
op454.node.kernel = extern_kernels.addmm


op455: NopKernelSchedulerNode(ConcatKernel)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf451', mode=None), StarDep(name='buf454', mode=None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ConcatKernel
    buf455.layout = FixedLayout('cuda', torch.float32, size=[16, 1000], stride=[1000, 1])
    buf455.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 8000}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf455', c0 + 8000, {c0: 8000}, None),
        MemoryDep('buf455', c0, {c0: 8000}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf456.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (8000, 1)
op456.sizes = ([8000], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 1000], stride=[1000, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 1000], stride=[1000, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
class op456_loop_body:
    var_ranges = {z0: 8000}
    index0 = z0
    index1 = z0 + 8000
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf455', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(2.0, torch.float32)
        truediv = ops.truediv(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf456', get_index_2, truediv, None)
        return store



op0_op1_op3: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op3.writes = 
    [   MemoryDep('buf0', c0, {c0: 4096}, None),
        MemoryDep('buf1', c0, {c0: 4096}, None),
        MemoryDep('buf3', c0, {c0: 4194304}, None)]
op0_op1_op3.unmet_dependencies = []
op0_op1_op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg3_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg4_1', c1, {c0: 4096, c1: 1024}, None)]
op0_op1_op3.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op0_op1_op3.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 4096}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (4096, 1024)
op0.sizes = ([32, 128], [1024])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op0_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp12, None)
op0_op1_op3.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 4096}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (4096, 1024)
op1.sizes = ([32, 128], [1024])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op0_op1_op3.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4194304}, None)]
op3.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 4096}, None),
        MemoryDep('buf1', c0, {c0: 4096}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None),
        MemoryDep('arg3_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg4_1', c1, {c0: 4096, c1: 1024}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (4194304, 1)
op3.sizes = ([32, 128, 1024], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op3_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = z2
    index6 = 131072*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg3_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg4_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x3), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 1024.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x5), tmp23, None)
op0_op1_op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
            tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp23 = tl.load(in_ptr2 + (r2 + (1024*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp32 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp34 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp15 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp16 = tmp0 + tmp15
            tmp17 = tmp0 < 0
            tmp18 = tl.where(tmp17, tmp16, tmp0)
            tl.device_assert((0 <= tmp18) & (tmp18 < 50265), "index out of bounds: 0 <= tmp18 < 50265")
            tmp20 = tl.load(in_ptr1 + (r2 + (1024*tmp18)), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = 1.0
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tmp25 = tmp24 - tmp12
            tmp26 = 1024.0
            tmp27 = tmp13 / tmp26
            tmp28 = 1e-05
            tmp29 = tmp27 + tmp28
            tmp30 = libdevice.rsqrt(tmp29)
            tmp31 = tmp25 * tmp30
            tmp33 = tmp31 * tmp32
            tmp35 = tmp33 + tmp34
            tl.store(out_ptr2 + (r2 + (1024*x3)), tmp35, rmask)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op6.unmet_dependencies = [   MemoryDep('buf5', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op6.met_dependencies = [MemoryDep('arg8_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (4194304, 1)
op6.sizes = ([32, 16, 128, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op6_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, add, None)
        return store
op6 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op7.unmet_dependencies = [   MemoryDep('buf4', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op7.met_dependencies = [MemoryDep('arg6_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4194304, 1)
op7.sizes = ([32, 16, 128, 64], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op7_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf7', get_index_2, mul, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9_op10_op13: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op13.writes = 
    [   MemoryDep('buf10', c0, {c0: 65536}, None),
        MemoryDep('buf13', c0, {c0: 8388608}, None),
        MemoryDep('buf9', c0, {c0: 65536}, None)]
op9_op10_op13.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 8388608}, None)]
op9_op10_op13.met_dependencies = []
op9_op10_op13.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op9_op10_op13.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 65536}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 8388608}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (65536, 128)
op9.sizes = ([512, 128], [128])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op9_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf9', get_index_3, reduction)
        return store_reduction
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op9_op10_op13.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 65536}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', c0, {c0: 8388608}, None),
        MemoryDep('buf9', c0, {c0: 65536}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (65536, 128)
op10.sizes = ([512, 128], [128])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf10_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op10_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf9', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf10', get_index_4, reduction)
        return store_reduction
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op9_op10_op13.snodes[2] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 8388608}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 65536}, None),
        MemoryDep('buf8', c0, {c0: 8388608}, None),
        MemoryDep('buf9', c0, {c0: 65536}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (8388608, 1)
op13.sizes = ([512, 128, 128], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf10_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf13_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op13_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf9', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf10', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, truediv, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op9_op10_op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op11.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 4194304}, None)]
op12.unmet_dependencies = [   MemoryDep('buf11', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op12.met_dependencies = [MemoryDep('arg10_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (4194304, 1)
op12.sizes = ([32, 16, 128, 64], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op12_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf12', get_index_2, add, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 4194304}, None)]
op15.unmet_dependencies = [   MemoryDep('buf14', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (4194304, 1)
op15.sizes = ([32, 128, 16, 64], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op15_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17_op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op19_op21.writes = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf18', c0, {c0: 4096}, None),
        MemoryDep('buf19', c0, {c0: 4096}, None),
        MemoryDep('buf21', c0, {c0: 4194304}, None)]
op17_op18_op19_op21.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4194304}, None)]
op17_op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg13_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg14_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None)]
op17_op18_op19_op21.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op17_op18_op19_op21.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4194304}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 4096}, None),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg2_1', c1, {c0: 32, c1: 131072}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (4194304, 1)
op17.sizes = ([32, 128, 1024], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 1024], stride=[1024, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op17_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 1024}
    index0 = 128*z0 + z1
    index1 = 1024*indirect0 + z2
    index2 = z1
    index3 = 1024
    index4 = 1024*z1 + z2
    index5 = 131072*z0 + 1024*z1 + z2
    index6 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf16', get_index_5)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg12_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf17', get_index_7, add_2, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 1024)
        x0 = xindex % 1024
        x4 = xindex % 131072
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_out_ptr0 + (x5), None)
        tmp12 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp13 = tmp11 + tmp12
        tmp14 = tmp10 + tmp13
        tl.store(in_out_ptr0 + (x5), tmp14, None)
op17_op18_op19_op21.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4096}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4096, 1024)
op18.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op18_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op17_op18_op19_op21.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4096}, None)]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4194304}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4096, 1024)
op19.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op19_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op17_op18_op19_op21.snodes[3] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 4194304}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf18', c0, {c0: 4096}, None),
        MemoryDep('buf19', c0, {c0: 4096}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg14_1', c1, {c0: 4096, c1: 1024}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (4194304, 1)
op21.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf19_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op21_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg13_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg14_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op17_op18_op19_op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x3 = xindex
        r2 = rindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (r2 + (1024*x0)), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_out_ptr0 + (r2 + (1024*x3)), None)
        tmp12 = tl.load(in_ptr3 + (r2), None, eviction_policy='evict_last')
        tmp35 = tl.load(in_ptr4 + (r2), None, eviction_policy='evict_last')
        tmp37 = tl.load(in_ptr5 + (r2), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 50265, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 50265), "index out of bounds: 0 <= tmp4 < 50265")
        tmp6 = tl.load(in_ptr1 + (r2 + (1024*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp13 = tmp11 + tmp12
        tmp14 = tmp10 + tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = tl.broadcast_to(tmp15, [RBLOCK])
        tmp19 = triton_helpers.promote_to_tensor(tl.sum(tmp17, 0))
        tmp20 = tl.full([1], 1024, tl.int32)
        tmp21 = tmp20.to(tl.float32)
        tmp22 = tmp19 / tmp21
        tmp23 = tmp15 - tmp22
        tmp24 = tmp23 * tmp23
        tmp25 = tl.broadcast_to(tmp24, [RBLOCK])
        tmp27 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
        tmp28 = tmp14 - tmp22
        tmp29 = 1024.0
        tmp30 = tmp27 / tmp29
        tmp31 = 1e-05
        tmp32 = tmp30 + tmp31
        tmp33 = libdevice.rsqrt(tmp32)
        tmp34 = tmp28 * tmp33
        tmp36 = tmp34 * tmp35
        tmp38 = tmp36 + tmp37
        tl.store(in_out_ptr0 + (r2 + (1024*x3)), tmp14, None)
        tl.store(out_ptr2 + (r2 + (1024*x3)), tmp38, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 16777216}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 16777216}, None)]
op23.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 4096}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (16777216, 1)
op23.sizes = ([4096, 4096], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op23_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op28.writes = 
    [   MemoryDep('buf25', c0, {c0: 4096}, None),
        MemoryDep('buf26', c0, {c0: 4096}, None),
        MemoryDep('buf28', c0, {c0: 4194304}, None)]
op25_op26_op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None)]
op25_op26_op28.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg20_1', c1, {c0: 4096, c1: 1024}, None)]
op25_op26_op28.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op28.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4096}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None)]
op25.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (4096, 1024)
op25.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op25_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op25_op26_op28.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 4096}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None)]
op26.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (4096, 1024)
op26.sizes = ([4096], [1024])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op26_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op25_op26_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 4194304}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf25', c0, {c0: 4096}, None),
        MemoryDep('buf26', c0, {c0: 4096}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg19_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg20_1', c1, {c0: 4096, c1: 1024}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (4194304, 1)
op28.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op28_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg19_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg20_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op25_op26_op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 4194304}, None)]
op31.unmet_dependencies = [   MemoryDep('buf30', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op31.met_dependencies = [MemoryDep('arg24_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (4194304, 1)
op31.sizes = ([32, 16, 128, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op31_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf31', get_index_2, add, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 4194304}, None)]
op32.unmet_dependencies = [   MemoryDep('buf29', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op32.met_dependencies = [MemoryDep('arg22_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (4194304, 1)
op32.sizes = ([32, 16, 128, 64], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op32_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf32', get_index_2, mul, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.bmm


op34_op35_op38: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op34_op35_op38.writes = 
    [   MemoryDep('buf34', c0, {c0: 65536}, None),
        MemoryDep('buf35', c0, {c0: 65536}, None),
        MemoryDep('buf38', c0, {c0: 8388608}, None)]
op34_op35_op38.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 8388608}, None)]
op34_op35_op38.met_dependencies = []
op34_op35_op38.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op34_op35_op38.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 65536}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 8388608}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (65536, 128)
op34.sizes = ([512, 128], [128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op34_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf34', get_index_3, reduction)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op34_op35_op38.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 65536}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 8388608}, None),
        MemoryDep('buf34', c0, {c0: 65536}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (65536, 128)
op35.sizes = ([512, 128], [128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf35_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op35_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf34', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf35', get_index_4, reduction)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op34_op35_op38.snodes[2] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 8388608}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 8388608}, None),
        MemoryDep('buf34', c0, {c0: 65536}, None),
        MemoryDep('buf35', c0, {c0: 65536}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (8388608, 1)
op38.sizes = ([512, 128, 128], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf35_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf38_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op38_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf34', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf35', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, truediv, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op34_op35_op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op36.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 4194304}, None)]
op37.unmet_dependencies = [   MemoryDep('buf36', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op37.met_dependencies = [MemoryDep('arg26_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (4194304, 1)
op37.sizes = ([32, 16, 128, 64], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.bmm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 4194304}, None)]
op40.unmet_dependencies = [   MemoryDep('buf39', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (4194304, 1)
op40.sizes = ([32, 128, 16, 64], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op40_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42_op43_op44_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op44_op46.writes = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf43', c0, {c0: 4096}, None),
        MemoryDep('buf44', c0, {c0: 4096}, None),
        MemoryDep('buf46', c0, {c0: 4194304}, None)]
op42_op43_op44_op46.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf41', c0, {c0: 4194304}, None)]
op42_op43_op44_op46.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg28_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg29_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg30_1', c1, {c0: 4096, c1: 1024}, None)]
op42_op43_op44_op46.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op42_op43_op44_op46.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 4194304}, None),
        MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf41', c0, {c0: 4194304}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg28_1', c1, {c0: 4096, c1: 1024}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (4194304, 1)
op42.sizes = ([4096, 1024], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op42_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf41', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg28_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op42_op43_op44_op46.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 4096}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (4096, 1024)
op43.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op43_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op42_op43_op44_op46.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 4096}, None)]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (4096, 1024)
op44.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op44_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op42_op43_op44_op46.snodes[3] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 4194304}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf43', c0, {c0: 4096}, None),
        MemoryDep('buf44', c0, {c0: 4096}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg30_1', c1, {c0: 4096, c1: 1024}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (4194304, 1)
op46.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf44_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op46_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, add_1, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op42_op43_op44_op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 16777216}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 16777216}, None)]
op48.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 4096, c1: 4096}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (16777216, 1)
op48.sizes = ([4096, 4096], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op48_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg32_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, mul_2, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 4096}, None),
        MemoryDep('buf51', c0, {c0: 4096}, None),
        MemoryDep('buf53', c0, {c0: 4194304}, None)]
op50_op51_op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None)]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg36_1', c1, {c0: 4096, c1: 1024}, None)]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 4096}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None)]
op50.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (4096, 1024)
op50.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op50_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 4096}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None)]
op51.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (4096, 1024)
op51.sizes = ([4096], [1024])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op51_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 4194304}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None),
        MemoryDep('buf50', c0, {c0: 4096}, None),
        MemoryDep('buf51', c0, {c0: 4096}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg35_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg36_1', c1, {c0: 4096, c1: 1024}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (4194304, 1)
op53.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op53_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg35_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op50_op51_op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 4194304}, None)]
op56.unmet_dependencies = [   MemoryDep('buf55', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op56.met_dependencies = [MemoryDep('arg40_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (4194304, 1)
op56.sizes = ([32, 16, 128, 64], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op56_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 4194304}, None)]
op57.unmet_dependencies = [   MemoryDep('buf54', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op57.met_dependencies = [MemoryDep('arg38_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (4194304, 1)
op57.sizes = ([32, 16, 128, 64], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op57_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, mul, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59_op60_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op63.writes = 
    [   MemoryDep('buf59', c0, {c0: 65536}, None),
        MemoryDep('buf60', c0, {c0: 65536}, None),
        MemoryDep('buf63', c0, {c0: 8388608}, None)]
op59_op60_op63.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 8388608}, None)]
op59_op60_op63.met_dependencies = []
op59_op60_op63.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op59_op60_op63.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 65536}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 8388608}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (65536, 128)
op59.sizes = ([512, 128], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op59_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf59', get_index_3, reduction)
        return store_reduction
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op59_op60_op63.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 65536}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 8388608}, None),
        MemoryDep('buf59', c0, {c0: 65536}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (65536, 128)
op60.sizes = ([512, 128], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf60_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op60_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf59', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf60', get_index_4, reduction)
        return store_reduction
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op59_op60_op63.snodes[2] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 8388608}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 8388608}, None),
        MemoryDep('buf59', c0, {c0: 65536}, None),
        MemoryDep('buf60', c0, {c0: 65536}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (8388608, 1)
op63.sizes = ([512, 128, 128], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf60_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf63_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op63_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf59', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf60', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, truediv, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op59_op60_op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 4194304}, None)]
op62.unmet_dependencies = [   MemoryDep('buf61', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op62.met_dependencies = [MemoryDep('arg42_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (4194304, 1)
op62.sizes = ([32, 16, 128, 64], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op62_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf62', get_index_2, add, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 4194304}, None)]
op65.unmet_dependencies = [   MemoryDep('buf64', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (4194304, 1)
op65.sizes = ([32, 128, 16, 64], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op65_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67_op68_op69_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op67_op68_op69_op71.writes = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf68', c0, {c0: 4096}, None),
        MemoryDep('buf69', c0, {c0: 4096}, None),
        MemoryDep('buf71', c0, {c0: 4194304}, None)]
op67_op68_op69_op71.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None),
        MemoryDep('buf66', c0, {c0: 4194304}, None)]
op67_op68_op69_op71.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg44_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg45_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None)]
op67_op68_op69_op71.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op67_op68_op69_op71.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 4194304}, None),
        MemoryDep('buf49', c0, {c0: 4194304}, None),
        MemoryDep('buf66', c0, {c0: 4194304}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg44_1', c1, {c0: 4096, c1: 1024}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (4194304, 1)
op67.sizes = ([4096, 1024], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op67_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf66', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg44_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_3, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op67_op68_op69_op71.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 4096}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (4096, 1024)
op68.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op68_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, getitem)
        return store_reduction
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op67_op68_op69_op71.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 4096}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 4194304}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (4096, 1024)
op69.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op69_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem_1)
        return store_reduction
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op67_op68_op69_op71.snodes[3] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 4194304}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf68', c0, {c0: 4096}, None),
        MemoryDep('buf69', c0, {c0: 4096}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (4194304, 1)
op71.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op71_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg45_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg46_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op67_op68_op69_op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 16777216}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 16777216}, None)]
op73.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 4096, c1: 4096}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (16777216, 1)
op73.sizes = ([4096, 4096], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op73_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf73', get_index_4, mul_2, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op74.node.kernel = extern_kernels.mm


op75_op76_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op78.writes = 
    [   MemoryDep('buf75', c0, {c0: 4096}, None),
        MemoryDep('buf76', c0, {c0: 4096}, None),
        MemoryDep('buf78', c0, {c0: 4194304}, None)]
op75_op76_op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None)]
op75_op76_op78.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg52_1', c1, {c0: 4096, c1: 1024}, None)]
op75_op76_op78.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op75_op76_op78.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 4096}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None)]
op75.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (4096, 1024)
op75.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op75_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op75_op76_op78.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 4096}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None)]
op76.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (4096, 1024)
op76.sizes = ([4096], [1024])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op76_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op75_op76_op78.snodes[2] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 4194304}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None),
        MemoryDep('buf75', c0, {c0: 4096}, None),
        MemoryDep('buf76', c0, {c0: 4096}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg51_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg52_1', c1, {c0: 4096, c1: 1024}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (4194304, 1)
op78.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf76_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op78_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf76', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf78', get_index_7, add_3, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op75_op76_op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 4194304}, None)]
op81.unmet_dependencies = [   MemoryDep('buf80', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op81.met_dependencies = [MemoryDep('arg56_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (4194304, 1)
op81.sizes = ([32, 16, 128, 64], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op81_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf81', get_index_2, add, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 4194304}, None)]
op82.unmet_dependencies = [   MemoryDep('buf79', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op82.met_dependencies = [MemoryDep('arg54_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (4194304, 1)
op82.sizes = ([32, 16, 128, 64], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op82_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, mul, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.bmm


op84_op85_op88: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op88.writes = 
    [   MemoryDep('buf84', c0, {c0: 65536}, None),
        MemoryDep('buf85', c0, {c0: 65536}, None),
        MemoryDep('buf88', c0, {c0: 8388608}, None)]
op84_op85_op88.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 8388608}, None)]
op84_op85_op88.met_dependencies = []
op84_op85_op88.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op84_op85_op88.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 65536}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 8388608}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (65536, 128)
op84.sizes = ([512, 128], [128])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op84_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf84', get_index_3, reduction)
        return store_reduction
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op84_op85_op88.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 65536}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 8388608}, None),
        MemoryDep('buf84', c0, {c0: 65536}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (65536, 128)
op85.sizes = ([512, 128], [128])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf85_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op85_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf84', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf85', get_index_4, reduction)
        return store_reduction
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op84_op85_op88.snodes[2] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 8388608}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 8388608}, None),
        MemoryDep('buf84', c0, {c0: 65536}, None),
        MemoryDep('buf85', c0, {c0: 65536}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (8388608, 1)
op88.sizes = ([512, 128, 128], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf85_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf88_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op88_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf84', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf85', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf88', get_index_5, truediv, None)
        return store
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op84_op85_op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op86.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 4194304}, None)]
op87.unmet_dependencies = [   MemoryDep('buf86', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op87.met_dependencies = [MemoryDep('arg58_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (4194304, 1)
op87.sizes = ([32, 16, 128, 64], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op87_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf87', get_index_2, add, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 4194304}, None)]
op90.unmet_dependencies = [   MemoryDep('buf89', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (4194304, 1)
op90.sizes = ([32, 128, 16, 64], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op90_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op94_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op94_op96.writes = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf93', c0, {c0: 4096}, None),
        MemoryDep('buf94', c0, {c0: 4096}, None),
        MemoryDep('buf96', c0, {c0: 4194304}, None)]
op92_op93_op94_op96.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None),
        MemoryDep('buf91', c0, {c0: 4194304}, None)]
op92_op93_op94_op96.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg60_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg62_1', c1, {c0: 4096, c1: 1024}, None)]
op92_op93_op94_op96.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op92_op93_op94_op96.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 4194304}, None),
        MemoryDep('buf74', c0, {c0: 4194304}, None),
        MemoryDep('buf91', c0, {c0: 4194304}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg60_1', c1, {c0: 4096, c1: 1024}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (4194304, 1)
op92.sizes = ([4096, 1024], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op92_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op92_op93_op94_op96.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 4096}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (4096, 1024)
op93.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op93_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op92_op93_op94_op96.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 4096}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 4194304}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (4096, 1024)
op94.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op94_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op92_op93_op94_op96.snodes[3] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 4194304}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf93', c0, {c0: 4096}, None),
        MemoryDep('buf94', c0, {c0: 4096}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg62_1', c1, {c0: 4096, c1: 1024}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (4194304, 1)
op96.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf94_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op96_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op92_op93_op94_op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 16777216}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 16777216}, None)]
op98.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4096, c1: 4096}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (16777216, 1)
op98.sizes = ([4096, 4096], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op98_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100_op101_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op100_op101_op103.writes = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf101', c0, {c0: 4096}, None),
        MemoryDep('buf103', c0, {c0: 4194304}, None)]
op100_op101_op103.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op100_op101_op103.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg68_1', c1, {c0: 4096, c1: 1024}, None)]
op100_op101_op103.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op100_op101_op103.snodes[0] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 4096}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op100.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (4096, 1024)
op100.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op100_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op100_op101_op103.snodes[1] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 4096}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op101.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (4096, 1024)
op101.sizes = ([4096], [1024])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op101_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op100_op101_op103.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4194304}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf101', c0, {c0: 4096}, None),
        MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg68_1', c1, {c0: 4096, c1: 1024}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (4194304, 1)
op103.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf101_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op103_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg67_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg68_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op100_op101_op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 4194304}, None)]
op106.unmet_dependencies = [   MemoryDep('buf105', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op106.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (4194304, 1)
op106.sizes = ([32, 16, 128, 64], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op106_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf106', get_index_2, add, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4194304}, None)]
op107.unmet_dependencies = [   MemoryDep('buf104', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op107.met_dependencies = [MemoryDep('arg70_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (4194304, 1)
op107.sizes = ([32, 16, 128, 64], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op107_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf107', get_index_2, mul, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.bmm


op109_op110_op113: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op109_op110_op113.writes = 
    [   MemoryDep('buf109', c0, {c0: 65536}, None),
        MemoryDep('buf110', c0, {c0: 65536}, None),
        MemoryDep('buf113', c0, {c0: 8388608}, None)]
op109_op110_op113.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 8388608}, None)]
op109_op110_op113.met_dependencies = []
op109_op110_op113.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op109_op110_op113.snodes[0] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 65536}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 8388608}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (65536, 128)
op109.sizes = ([512, 128], [128])
buf108_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op109_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf109', get_index_3, reduction)
        return store_reduction
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op109_op110_op113.snodes[1] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 65536}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 8388608}, None),
        MemoryDep('buf109', c0, {c0: 65536}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (65536, 128)
op110.sizes = ([512, 128], [128])
buf108_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf110_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op110_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf109', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf110', get_index_4, reduction)
        return store_reduction
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op109_op110_op113.snodes[2] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 8388608}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 8388608}, None),
        MemoryDep('buf109', c0, {c0: 65536}, None),
        MemoryDep('buf110', c0, {c0: 65536}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (8388608, 1)
op113.sizes = ([512, 128, 128], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf110_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf113_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op113_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf109', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf110', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, truediv, None)
        return store
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op109_op110_op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op111.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 4194304}, None)]
op112.unmet_dependencies = [   MemoryDep('buf111', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op112.met_dependencies = [MemoryDep('arg74_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (4194304, 1)
op112.sizes = ([32, 16, 128, 64], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op112_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf112', get_index_2, add, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.bmm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 4194304}, None)]
op115.unmet_dependencies = [   MemoryDep('buf114', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (4194304, 1)
op115.sizes = ([32, 128, 16, 64], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op115_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117_op118_op119_op121: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op117_op118_op119_op121.writes = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf118', c0, {c0: 4096}, None),
        MemoryDep('buf119', c0, {c0: 4096}, None),
        MemoryDep('buf121', c0, {c0: 4194304}, None)]
op117_op118_op119_op121.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 4194304}, None),
        MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op117_op118_op119_op121.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg76_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg77_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg78_1', c1, {c0: 4096, c1: 1024}, None)]
op117_op118_op119_op121.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op117_op118_op119_op121.snodes[0] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 4194304}, None),
        MemoryDep('buf92', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4194304}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg76_1', c1, {c0: 4096, c1: 1024}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (4194304, 1)
op117.sizes = ([4096, 1024], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op117_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf116', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg76_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op117_op118_op119_op121.snodes[1] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 4096}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (4096, 1024)
op118.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op118_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op117_op118_op119_op121.snodes[2] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 4096}, None)]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 4194304}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (4096, 1024)
op119.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op119_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op117_op118_op119_op121.snodes[3] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 4194304}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf118', c0, {c0: 4096}, None),
        MemoryDep('buf119', c0, {c0: 4096}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg78_1', c1, {c0: 4096, c1: 1024}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (4194304, 1)
op121.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op121_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg77_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg78_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op117_op118_op119_op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 16777216}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 16777216}, None)]
op123.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 4096, c1: 4096}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (16777216, 1)
op123.sizes = ([4096, 4096], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op123_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, mul_2, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125_op126_op128: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op125_op126_op128.writes = 
    [   MemoryDep('buf125', c0, {c0: 4096}, None),
        MemoryDep('buf126', c0, {c0: 4096}, None),
        MemoryDep('buf128', c0, {c0: 4194304}, None)]
op125_op126_op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op125_op126_op128.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg84_1', c1, {c0: 4096, c1: 1024}, None)]
op125_op126_op128.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op125_op126_op128.snodes[0] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 4096}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op125.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (4096, 1024)
op125.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op125_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op125_op126_op128.snodes[1] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 4096}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op126.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (4096, 1024)
op126.sizes = ([4096], [1024])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op126_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op125_op126_op128.snodes[2] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4194304}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf125', c0, {c0: 4096}, None),
        MemoryDep('buf126', c0, {c0: 4096}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg84_1', c1, {c0: 4096, c1: 1024}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (4194304, 1)
op128.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf126_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op128_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf126', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg83_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg84_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add_3, None)
        return store
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op125_op126_op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 4194304}, None)]
op131.unmet_dependencies = [   MemoryDep('buf130', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op131.met_dependencies = [MemoryDep('arg88_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (4194304, 1)
op131.sizes = ([32, 16, 128, 64], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op131_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf131', get_index_2, add, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4194304}, None)]
op132.unmet_dependencies = [   MemoryDep('buf129', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op132.met_dependencies = [MemoryDep('arg86_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4194304, 1)
op132.sizes = ([32, 16, 128, 64], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op132_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, mul, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.bmm


op134_op135_op138: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op134_op135_op138.writes = 
    [   MemoryDep('buf134', c0, {c0: 65536}, None),
        MemoryDep('buf135', c0, {c0: 65536}, None),
        MemoryDep('buf138', c0, {c0: 8388608}, None)]
op134_op135_op138.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 8388608}, None)]
op134_op135_op138.met_dependencies = []
op134_op135_op138.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op134_op135_op138.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 65536}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 8388608}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (65536, 128)
op134.sizes = ([512, 128], [128])
buf133_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op134_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf134', get_index_3, reduction)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op134_op135_op138.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 65536}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 8388608}, None),
        MemoryDep('buf134', c0, {c0: 65536}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (65536, 128)
op135.sizes = ([512, 128], [128])
buf133_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op135_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf134', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf135', get_index_4, reduction)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op134_op135_op138.snodes[2] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 8388608}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 8388608}, None),
        MemoryDep('buf134', c0, {c0: 65536}, None),
        MemoryDep('buf135', c0, {c0: 65536}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (8388608, 1)
op138.sizes = ([512, 128, 128], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf138_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op138_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf134', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf135', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, truediv, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op134_op135_op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op136.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 4194304}, None)]
op137.unmet_dependencies = [   MemoryDep('buf136', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op137.met_dependencies = [MemoryDep('arg90_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (4194304, 1)
op137.sizes = ([32, 16, 128, 64], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op137_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf137', get_index_2, add, None)
        return store
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 4194304}, None)]
op140.unmet_dependencies = [   MemoryDep('buf139', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (4194304, 1)
op140.sizes = ([32, 128, 16, 64], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op140_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op144_op146.writes = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf143', c0, {c0: 4096}, None),
        MemoryDep('buf144', c0, {c0: 4096}, None),
        MemoryDep('buf146', c0, {c0: 4194304}, None)]
op142_op143_op144_op146.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf141', c0, {c0: 4194304}, None)]
op142_op143_op144_op146.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg92_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg93_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg94_1', c1, {c0: 4096, c1: 1024}, None)]
op142_op143_op144_op146.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op142_op143_op144_op146.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf141', c0, {c0: 4194304}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg92_1', c1, {c0: 4096, c1: 1024}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (4194304, 1)
op142.sizes = ([4096, 1024], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op142_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf141', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op142_op143_op144_op146.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 4096}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (4096, 1024)
op143.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op143_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op142_op143_op144_op146.snodes[2] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 4096}, None)]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 4194304}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (4096, 1024)
op144.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op144_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op142_op143_op144_op146.snodes[3] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 4194304}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf143', c0, {c0: 4096}, None),
        MemoryDep('buf144', c0, {c0: 4096}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg94_1', c1, {c0: 4096, c1: 1024}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (4194304, 1)
op146.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op146_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg93_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg94_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op142_op143_op144_op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 16777216}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 16777216}, None)]
op148.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 4096, c1: 4096}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (16777216, 1)
op148.sizes = ([4096, 4096], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op148_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, mul_2, None)
        return store
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op153: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153.writes = 
    [   MemoryDep('buf150', c0, {c0: 4096}, None),
        MemoryDep('buf151', c0, {c0: 4096}, None),
        MemoryDep('buf153', c0, {c0: 4194304}, None)]
op150_op151_op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None)]
op150_op151_op153.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op150_op151_op153.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op150_op151_op153.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 4096}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None)]
op150.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (4096, 1024)
op150.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op150_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op150_op151_op153.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 4096}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None)]
op151.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4096, 1024)
op151.sizes = ([4096], [1024])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op151_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op150_op151_op153.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 4194304}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None),
        MemoryDep('buf150', c0, {c0: 4096}, None),
        MemoryDep('buf151', c0, {c0: 4096}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (4194304, 1)
op153.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf151_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op153_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg100_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op150_op151_op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op155.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 4194304}, None)]
op156.unmet_dependencies = [   MemoryDep('buf155', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op156.met_dependencies = [MemoryDep('arg104_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (4194304, 1)
op156.sizes = ([32, 16, 128, 64], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op156_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 4194304}, None)]
op157.unmet_dependencies = [   MemoryDep('buf154', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op157.met_dependencies = [MemoryDep('arg102_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (4194304, 1)
op157.sizes = ([32, 16, 128, 64], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op157_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, mul, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op158.node.kernel = extern_kernels.bmm


op159_op160_op163: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op159_op160_op163.writes = 
    [   MemoryDep('buf159', c0, {c0: 65536}, None),
        MemoryDep('buf160', c0, {c0: 65536}, None),
        MemoryDep('buf163', c0, {c0: 8388608}, None)]
op159_op160_op163.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 8388608}, None)]
op159_op160_op163.met_dependencies = []
op159_op160_op163.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op159_op160_op163.snodes[0] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 65536}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 8388608}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (65536, 128)
op159.sizes = ([512, 128], [128])
buf158_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op159_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf159', get_index_3, reduction)
        return store_reduction
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op159_op160_op163.snodes[1] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 65536}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 8388608}, None),
        MemoryDep('buf159', c0, {c0: 65536}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (65536, 128)
op160.sizes = ([512, 128], [128])
buf158_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf160_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op160_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf160', get_index_4, reduction)
        return store_reduction
op160 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op159_op160_op163.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 8388608}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 8388608}, None),
        MemoryDep('buf159', c0, {c0: 65536}, None),
        MemoryDep('buf160', c0, {c0: 65536}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (8388608, 1)
op163.sizes = ([512, 128, 128], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf160_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf163_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op163_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf160', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf163', get_index_5, truediv, None)
        return store
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op159_op160_op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op161.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 4194304}, None)]
op162.unmet_dependencies = [   MemoryDep('buf161', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op162.met_dependencies = [MemoryDep('arg106_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (4194304, 1)
op162.sizes = ([32, 16, 128, 64], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op162_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf162', get_index_2, add, None)
        return store
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 4194304}, None)]
op165.unmet_dependencies = [   MemoryDep('buf164', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (4194304, 1)
op165.sizes = ([32, 128, 16, 64], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op165_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op169_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op169_op171.writes = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None),
        MemoryDep('buf169', c0, {c0: 4096}, None),
        MemoryDep('buf171', c0, {c0: 4194304}, None)]
op167_op168_op169_op171.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None),
        MemoryDep('buf166', c0, {c0: 4194304}, None)]
op167_op168_op169_op171.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg109_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None)]
op167_op168_op169_op171.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op167_op168_op169_op171.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 4194304}, None),
        MemoryDep('buf149', c0, {c0: 4194304}, None),
        MemoryDep('buf166', c0, {c0: 4194304}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (4194304, 1)
op167.sizes = ([4096, 1024], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op167_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf166', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg108_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_3, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op167_op168_op169_op171.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 4096}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (4096, 1024)
op168.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op168_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op167_op168_op169_op171.snodes[2] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 4096}, None)]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (4096, 1024)
op169.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op169_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op167_op168_op169_op171.snodes[3] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 4194304}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf168', c0, {c0: 4096}, None),
        MemoryDep('buf169', c0, {c0: 4096}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 4096, c1: 1024}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (4194304, 1)
op171.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op171_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_1, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op167_op168_op169_op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 16777216}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 16777216}, None)]
op173.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 4096}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (16777216, 1)
op173.sizes = ([4096, 4096], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op173_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf173', get_index_4, mul_2, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op174.node.kernel = extern_kernels.mm


op175_op176_op178: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op175_op176_op178.writes = 
    [   MemoryDep('buf175', c0, {c0: 4096}, None),
        MemoryDep('buf176', c0, {c0: 4096}, None),
        MemoryDep('buf178', c0, {c0: 4194304}, None)]
op175_op176_op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None)]
op175_op176_op178.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg116_1', c1, {c0: 4096, c1: 1024}, None)]
op175_op176_op178.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op175_op176_op178.snodes[0] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 4096}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None)]
op175.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (4096, 1024)
op175.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op175_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op175_op176_op178.snodes[1] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 4096}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None)]
op176.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (4096, 1024)
op176.sizes = ([4096], [1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op176_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op175_op176_op178.snodes[2] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 4194304}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None),
        MemoryDep('buf175', c0, {c0: 4096}, None),
        MemoryDep('buf176', c0, {c0: 4096}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg116_1', c1, {c0: 4096, c1: 1024}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (4194304, 1)
op178.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf176_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op178_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf175', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg116_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf178', get_index_7, add_3, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op175_op176_op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op180.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 4194304}, None)]
op181.unmet_dependencies = [   MemoryDep('buf180', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op181.met_dependencies = [MemoryDep('arg120_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (4194304, 1)
op181.sizes = ([32, 16, 128, 64], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op181_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf181', get_index_2, add, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 4194304}, None)]
op182.unmet_dependencies = [   MemoryDep('buf179', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op182.met_dependencies = [MemoryDep('arg118_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (4194304, 1)
op182.sizes = ([32, 16, 128, 64], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op182_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf182', get_index_2, mul, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.bmm


op184_op185_op188: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op188.writes = 
    [   MemoryDep('buf184', c0, {c0: 65536}, None),
        MemoryDep('buf185', c0, {c0: 65536}, None),
        MemoryDep('buf188', c0, {c0: 8388608}, None)]
op184_op185_op188.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 8388608}, None)]
op184_op185_op188.met_dependencies = []
op184_op185_op188.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
    ]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op184_op185_op188.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 65536}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 8388608}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (65536, 128)
op184.sizes = ([512, 128], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op184_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf184', get_index_3, reduction)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op184_op185_op188.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 65536}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 8388608}, None),
        MemoryDep('buf184', c0, {c0: 65536}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (65536, 128)
op185.sizes = ([512, 128], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf185_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op185_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf184', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf185', get_index_4, reduction)
        return store_reduction
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op184_op185_op188.snodes[2] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 8388608}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 8388608}, None),
        MemoryDep('buf184', c0, {c0: 65536}, None),
        MemoryDep('buf185', c0, {c0: 65536}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (8388608, 1)
op188.sizes = ([512, 128, 128], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf185_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf188_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op188_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf184', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf185', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, truediv, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op184_op185_op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op186.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 4194304}, None)]
op187.unmet_dependencies = [   MemoryDep('buf186', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op187.met_dependencies = [MemoryDep('arg122_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (4194304, 1)
op187.sizes = ([32, 16, 128, 64], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op187_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf187', get_index_2, add, None)
        return store
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 4194304}, None)]
op190.unmet_dependencies = [   MemoryDep('buf189', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (4194304, 1)
op190.sizes = ([32, 128, 16, 64], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op190_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192_op193_op194_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194_op196.writes = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf193', c0, {c0: 4096}, None),
        MemoryDep('buf194', c0, {c0: 4096}, None),
        MemoryDep('buf196', c0, {c0: 4194304}, None)]
op192_op193_op194_op196.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None),
        MemoryDep('buf191', c0, {c0: 4194304}, None)]
op192_op193_op194_op196.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg124_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg125_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 4096, c1: 1024}, None)]
op192_op193_op194_op196.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op192_op193_op194_op196.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 4194304}, None),
        MemoryDep('buf174', c0, {c0: 4194304}, None),
        MemoryDep('buf191', c0, {c0: 4194304}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg124_1', c1, {c0: 4096, c1: 1024}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (4194304, 1)
op192.sizes = ([4096, 1024], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op192_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf191', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg124_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op192_op193_op194_op196.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4096}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4096, 1024)
op193.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op193_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op192_op193_op194_op196.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 4096}, None)]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (4096, 1024)
op194.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op194_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op192_op193_op194_op196.snodes[3] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 4194304}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf193', c0, {c0: 4096}, None),
        MemoryDep('buf194', c0, {c0: 4096}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 4096, c1: 1024}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (4194304, 1)
op196.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op196_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg125_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg126_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op192_op193_op194_op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 16777216}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 16777216}, None)]
op198.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 4096}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (16777216, 1)
op198.sizes = ([4096, 4096], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op198_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg128_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, mul_2, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200_op201_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op200_op201_op203.writes = 
    [   MemoryDep('buf200', c0, {c0: 4096}, None),
        MemoryDep('buf201', c0, {c0: 4096}, None),
        MemoryDep('buf203', c0, {c0: 4194304}, None)]
op200_op201_op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None)]
op200_op201_op203.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg132_1', c1, {c0: 4096, c1: 1024}, None)]
op200_op201_op203.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op200_op201_op203.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 4096}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None)]
op200.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (4096, 1024)
op200.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op200_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op200_op201_op203.snodes[1] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 4096}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None)]
op201.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (4096, 1024)
op201.sizes = ([4096], [1024])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op201_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op200_op201_op203.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 4194304}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None),
        MemoryDep('buf200', c0, {c0: 4096}, None),
        MemoryDep('buf201', c0, {c0: 4096}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg132_1', c1, {c0: 4096, c1: 1024}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (4194304, 1)
op203.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf201_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op203_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg131_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg132_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, add_3, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op200_op201_op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 4194304}, None)]
op206.unmet_dependencies = [   MemoryDep('buf205', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op206.met_dependencies = [MemoryDep('arg136_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (4194304, 1)
op206.sizes = ([32, 16, 128, 64], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op206_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf206', get_index_2, add, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 4194304}, None)]
op207.unmet_dependencies = [   MemoryDep('buf204', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op207.met_dependencies = [MemoryDep('arg134_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (4194304, 1)
op207.sizes = ([32, 16, 128, 64], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op207_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, mul, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.bmm


op209_op210_op213: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op209_op210_op213.writes = 
    [   MemoryDep('buf209', c0, {c0: 65536}, None),
        MemoryDep('buf210', c0, {c0: 65536}, None),
        MemoryDep('buf213', c0, {c0: 8388608}, None)]
op209_op210_op213.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 8388608}, None)]
op209_op210_op213.met_dependencies = []
op209_op210_op213.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op209_op210_op213.snodes[0] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 65536}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 8388608}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (65536, 128)
op209.sizes = ([512, 128], [128])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op209_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf209', get_index_3, reduction)
        return store_reduction
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op209_op210_op213.snodes[1] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 65536}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 8388608}, None),
        MemoryDep('buf209', c0, {c0: 65536}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (65536, 128)
op210.sizes = ([512, 128], [128])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf210_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op210_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf209', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf210', get_index_4, reduction)
        return store_reduction
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op209_op210_op213.snodes[2] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 8388608}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 8388608}, None),
        MemoryDep('buf209', c0, {c0: 65536}, None),
        MemoryDep('buf210', c0, {c0: 65536}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (8388608, 1)
op213.sizes = ([512, 128, 128], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf210_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op213_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf209', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf210', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf213', get_index_5, truediv, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op209_op210_op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op211.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 4194304}, None)]
op212.unmet_dependencies = [   MemoryDep('buf211', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op212.met_dependencies = [MemoryDep('arg138_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (4194304, 1)
op212.sizes = ([32, 16, 128, 64], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op212_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf212', get_index_2, add, None)
        return store
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf212', mode=None), StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.bmm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 4194304}, None)]
op215.unmet_dependencies = [   MemoryDep('buf214', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (4194304, 1)
op215.sizes = ([32, 128, 16, 64], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op215_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op221.writes = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf218', c0, {c0: 4096}, None),
        MemoryDep('buf219', c0, {c0: 4096}, None),
        MemoryDep('buf221', c0, {c0: 4194304}, None)]
op217_op218_op219_op221.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None),
        MemoryDep('buf216', c0, {c0: 4194304}, None)]
op217_op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg141_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 4096, c1: 1024}, None)]
op217_op218_op219_op221.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op217_op218_op219_op221.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 4194304}, None),
        MemoryDep('buf199', c0, {c0: 4194304}, None),
        MemoryDep('buf216', c0, {c0: 4194304}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 4096, c1: 1024}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (4194304, 1)
op217.sizes = ([4096, 1024], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op217_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op217_op218_op219_op221.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 4096}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (4096, 1024)
op218.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op218_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op217_op218_op219_op221.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 4096}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 4194304}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (4096, 1024)
op219.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op219_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op217_op218_op219_op221.snodes[3] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4194304}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf218', c0, {c0: 4096}, None),
        MemoryDep('buf219', c0, {c0: 4096}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg142_1', c1, {c0: 4096, c1: 1024}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (4194304, 1)
op221.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op221_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op217_op218_op219_op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 16777216}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 16777216}, None)]
op223.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 4096, c1: 4096}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (16777216, 1)
op223.sizes = ([4096, 4096], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op223_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225_op226_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op225_op226_op228.writes = 
    [   MemoryDep('buf225', c0, {c0: 4096}, None),
        MemoryDep('buf226', c0, {c0: 4096}, None),
        MemoryDep('buf228', c0, {c0: 4194304}, None)]
op225_op226_op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op225_op226_op228.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg148_1', c1, {c0: 4096, c1: 1024}, None)]
op225_op226_op228.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op225_op226_op228.snodes[0] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 4096}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op225.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (4096, 1024)
op225.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op225_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op225_op226_op228.snodes[1] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 4096}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op226.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (4096, 1024)
op226.sizes = ([4096], [1024])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op226_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op225_op226_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 4194304}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None),
        MemoryDep('buf225', c0, {c0: 4096}, None),
        MemoryDep('buf226', c0, {c0: 4096}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg148_1', c1, {c0: 4096, c1: 1024}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (4194304, 1)
op228.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op228_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg147_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg148_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op225_op226_op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 4194304}, None)]
op231.unmet_dependencies = [   MemoryDep('buf230', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op231.met_dependencies = [MemoryDep('arg152_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (4194304, 1)
op231.sizes = ([32, 16, 128, 64], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op231_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf231', get_index_2, add, None)
        return store
op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 4194304}, None)]
op232.unmet_dependencies = [   MemoryDep('buf229', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op232.met_dependencies = [MemoryDep('arg150_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (4194304, 1)
op232.sizes = ([32, 16, 128, 64], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf232', get_index_2, mul, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.bmm


op234_op235_op238: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op234_op235_op238.writes = 
    [   MemoryDep('buf234', c0, {c0: 65536}, None),
        MemoryDep('buf235', c0, {c0: 65536}, None),
        MemoryDep('buf238', c0, {c0: 8388608}, None)]
op234_op235_op238.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 8388608}, None)]
op234_op235_op238.met_dependencies = []
op234_op235_op238.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op234_op235_op238.snodes[0] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 65536}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 8388608}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (65536, 128)
op234.sizes = ([512, 128], [128])
buf233_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op234_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf234', get_index_3, reduction)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op234_op235_op238.snodes[1] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 65536}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 8388608}, None),
        MemoryDep('buf234', c0, {c0: 65536}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (65536, 128)
op235.sizes = ([512, 128], [128])
buf233_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf235_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op235_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf234', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf235', get_index_4, reduction)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op234_op235_op238.snodes[2] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 8388608}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 8388608}, None),
        MemoryDep('buf234', c0, {c0: 65536}, None),
        MemoryDep('buf235', c0, {c0: 65536}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (8388608, 1)
op238.sizes = ([512, 128, 128], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf235_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf238_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op238_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf234', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf235', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, truediv, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op234_op235_op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op236.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 4194304}, None)]
op237.unmet_dependencies = [   MemoryDep('buf236', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op237.met_dependencies = [MemoryDep('arg154_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf237.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (4194304, 1)
op237.sizes = ([32, 16, 128, 64], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op237_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf237', get_index_2, add, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf237', mode=None), StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.bmm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 4194304}, None)]
op240.unmet_dependencies = [   MemoryDep('buf239', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (4194304, 1)
op240.sizes = ([32, 128, 16, 64], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op240_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242_op243_op244_op246: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op242_op243_op244_op246.writes = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf243', c0, {c0: 4096}, None),
        MemoryDep('buf244', c0, {c0: 4096}, None),
        MemoryDep('buf246', c0, {c0: 4194304}, None)]
op242_op243_op244_op246.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None),
        MemoryDep('buf241', c0, {c0: 4194304}, None)]
op242_op243_op244_op246.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg156_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg157_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg158_1', c1, {c0: 4096, c1: 1024}, None)]
op242_op243_op244_op246.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op242_op243_op244_op246.snodes[0] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None),
        MemoryDep('buf241', c0, {c0: 4194304}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg156_1', c1, {c0: 4096, c1: 1024}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (4194304, 1)
op242.sizes = ([4096, 1024], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op242_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf241', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg156_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_3, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op242_op243_op244_op246.snodes[1] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 4096}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (4096, 1024)
op243.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op243_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op242_op243_op244_op246.snodes[2] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 4096}, None)]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (4096, 1024)
op244.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op244_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem_1)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op242_op243_op244_op246.snodes[3] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 4194304}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf243', c0, {c0: 4096}, None),
        MemoryDep('buf244', c0, {c0: 4096}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg158_1', c1, {c0: 4096, c1: 1024}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (4194304, 1)
op246.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf244_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op246_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg157_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg158_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf246', get_index_5, add_1, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op242_op243_op244_op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 16777216}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 16777216}, None)]
op248.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 4096, c1: 4096}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (16777216, 1)
op248.sizes = ([4096, 4096], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op248_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf248', get_index_4, mul_2, None)
        return store
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250_op251_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op250_op251_op253.writes = 
    [   MemoryDep('buf250', c0, {c0: 4096}, None),
        MemoryDep('buf251', c0, {c0: 4096}, None),
        MemoryDep('buf253', c0, {c0: 4194304}, None)]
op250_op251_op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None)]
op250_op251_op253.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg164_1', c1, {c0: 4096, c1: 1024}, None)]
op250_op251_op253.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op250_op251_op253.snodes[0] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 4096}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None)]
op250.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (4096, 1024)
op250.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op250_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op250_op251_op253.snodes[1] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 4096}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None)]
op251.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (4096, 1024)
op251.sizes = ([4096], [1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op251_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op250_op251_op253.snodes[2] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 4194304}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None),
        MemoryDep('buf250', c0, {c0: 4096}, None),
        MemoryDep('buf251', c0, {c0: 4096}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg163_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg164_1', c1, {c0: 4096, c1: 1024}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (4194304, 1)
op253.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op253_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg163_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg164_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op250_op251_op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 4194304}, None)]
op256.unmet_dependencies = [   MemoryDep('buf255', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op256.met_dependencies = [MemoryDep('arg168_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (4194304, 1)
op256.sizes = ([32, 16, 128, 64], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op256_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf256', get_index_2, add, None)
        return store
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 4194304}, None)]
op257.unmet_dependencies = [   MemoryDep('buf254', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op257.met_dependencies = [MemoryDep('arg166_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (4194304, 1)
op257.sizes = ([32, 16, 128, 64], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op257_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf257', get_index_2, mul, None)
        return store
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf256', mode=None), StarDep(name='buf257', mode=None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.bmm


op259_op260_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op259_op260_op263.writes = 
    [   MemoryDep('buf259', c0, {c0: 65536}, None),
        MemoryDep('buf260', c0, {c0: 65536}, None),
        MemoryDep('buf263', c0, {c0: 8388608}, None)]
op259_op260_op263.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 8388608}, None)]
op259_op260_op263.met_dependencies = []
op259_op260_op263.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op259_op260_op263.snodes[0] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 65536}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 8388608}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (65536, 128)
op259.sizes = ([512, 128], [128])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op259_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf259', get_index_3, reduction)
        return store_reduction
op259 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op259_op260_op263.snodes[1] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 65536}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 8388608}, None),
        MemoryDep('buf259', c0, {c0: 65536}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (65536, 128)
op260.sizes = ([512, 128], [128])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf260_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op260_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf259', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf260', get_index_4, reduction)
        return store_reduction
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op259_op260_op263.snodes[2] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 8388608}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 8388608}, None),
        MemoryDep('buf259', c0, {c0: 65536}, None),
        MemoryDep('buf260', c0, {c0: 65536}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (8388608, 1)
op263.sizes = ([512, 128, 128], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf260_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op263_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf259', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf260', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf263', get_index_5, truediv, None)
        return store
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op259_op260_op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op261.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = extern_kernels.mm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 4194304}, None)]
op262.unmet_dependencies = [   MemoryDep('buf261', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op262.met_dependencies = [MemoryDep('arg170_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (4194304, 1)
op262.sizes = ([32, 16, 128, 64], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op262_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf262', get_index_2, add, None)
        return store
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.bmm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 4194304}, None)]
op265.unmet_dependencies = [   MemoryDep('buf264', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (4194304, 1)
op265.sizes = ([32, 128, 16, 64], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op265_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf268', c0, {c0: 4096}, None),
        MemoryDep('buf269', c0, {c0: 4096}, None),
        MemoryDep('buf271', c0, {c0: 4194304}, None)]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None),
        MemoryDep('buf266', c0, {c0: 4194304}, None)]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg172_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg173_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg174_1', c1, {c0: 4096, c1: 1024}, None)]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 4194304}, None),
        MemoryDep('buf249', c0, {c0: 4194304}, None),
        MemoryDep('buf266', c0, {c0: 4194304}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg172_1', c1, {c0: 4096, c1: 1024}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (4194304, 1)
op267.sizes = ([4096, 1024], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op267_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg172_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 4096}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (4096, 1024)
op268.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op268_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 4096}, None)]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4194304}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (4096, 1024)
op269.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op269_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 4194304}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf268', c0, {c0: 4096}, None),
        MemoryDep('buf269', c0, {c0: 4096}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg174_1', c1, {c0: 4096, c1: 1024}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (4194304, 1)
op271.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf269_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op271_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg173_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg174_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op267_op268_op269_op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 16777216}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 16777216}, None)]
op273.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 4096, c1: 4096}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (16777216, 1)
op273.sizes = ([4096, 4096], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op273_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, mul_2, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275_op276_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op278.writes = 
    [   MemoryDep('buf275', c0, {c0: 4096}, None),
        MemoryDep('buf276', c0, {c0: 4096}, None),
        MemoryDep('buf278', c0, {c0: 4194304}, None)]
op275_op276_op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None)]
op275_op276_op278.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg180_1', c1, {c0: 4096, c1: 1024}, None)]
op275_op276_op278.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op275_op276_op278.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 4096}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None)]
op275.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (4096, 1024)
op275.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op275_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op275_op276_op278.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 4096}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None)]
op276.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (4096, 1024)
op276.sizes = ([4096], [1024])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op276_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op275_op276_op278.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 4194304}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None),
        MemoryDep('buf275', c0, {c0: 4096}, None),
        MemoryDep('buf276', c0, {c0: 4096}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg179_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg180_1', c1, {c0: 4096, c1: 1024}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (4194304, 1)
op278.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf276_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op278_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg180_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add_3, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op275_op276_op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 4194304}, None)]
op281.unmet_dependencies = [   MemoryDep('buf280', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op281.met_dependencies = [MemoryDep('arg184_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf281.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (4194304, 1)
op281.sizes = ([32, 16, 128, 64], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op281_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf281', get_index_2, add, None)
        return store
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 4194304}, None)]
op282.unmet_dependencies = [   MemoryDep('buf279', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op282.met_dependencies = [MemoryDep('arg182_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (4194304, 1)
op282.sizes = ([32, 16, 128, 64], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op282_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf282', get_index_2, mul, None)
        return store
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf281', mode=None), StarDep(name='buf282', mode=None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.bmm


op284_op285_op288: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op288.writes = 
    [   MemoryDep('buf284', c0, {c0: 65536}, None),
        MemoryDep('buf285', c0, {c0: 65536}, None),
        MemoryDep('buf288', c0, {c0: 8388608}, None)]
op284_op285_op288.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 8388608}, None)]
op284_op285_op288.met_dependencies = []
op284_op285_op288.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf285.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op284_op285_op288.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 65536}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 8388608}, None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (65536, 128)
op284.sizes = ([512, 128], [128])
buf283_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op284_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf284', get_index_3, reduction)
        return store_reduction
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op284_op285_op288.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 65536}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 8388608}, None),
        MemoryDep('buf284', c0, {c0: 65536}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
    buf285.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (65536, 128)
op285.sizes = ([512, 128], [128])
buf283_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf285_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
class op285_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf284', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf285', get_index_4, reduction)
        return store_reduction
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op284_op285_op288.snodes[2] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 8388608}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 8388608}, None),
        MemoryDep('buf284', c0, {c0: 65536}, None),
        MemoryDep('buf285', c0, {c0: 65536}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (8388608, 1)
op288.sizes = ([512, 128, 128], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf285_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 1], stride=[128, 1, 65536])
buf288_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 128], stride=[16384, 128, 1])
class op288_loop_body:
    var_ranges = {z0: 512, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf284', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf285', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf288', get_index_5, truediv, None)
        return store
op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op284_op285_op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[65536, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op286.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 4194304}, None)]
op287.unmet_dependencies = [   MemoryDep('buf286', 131072*c0 + 64*c1 + 1024*c2 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op287.met_dependencies = [MemoryDep('arg186_1', 64*c1 + c3, {c0: 32, c1: 16, c2: 128, c3: 64}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (4194304, 1)
op287.sizes = ([32, 16, 128, 64], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 128, 64], stride=[131072, 8192, 64, 1])
class op287_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 128, z3: 64}
    index0 = 131072*z0 + 64*z1 + 1024*z2 + z3
    index1 = 64*z1 + z3
    index2 = 131072*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf287', get_index_2, add, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 16
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (1024*x1) + (131072*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.bmm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 4194304}, None)]
op290.unmet_dependencies = [   MemoryDep('buf289', 131072*c0 + 64*c1 + 8192*c2 + c3, {c0: 32, c1: 128, c2: 16, c3: 64}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (4194304, 1)
op290.sizes = ([32, 128, 16, 64], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[512, 128, 64], stride=[8192, 64, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 16, 64], stride=[131072, 1024, 64, 1])
class op290_loop_body:
    var_ranges = {z0: 32, z1: 128, z2: 16, z3: 64}
    index0 = 131072*z0 + 64*z1 + 8192*z2 + z3
    index1 = 131072*z0 + 1024*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 16
        x2 = (xindex // 1024) % 128
        x3 = (xindex // 131072)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (131072*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292_op293_op294_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op292_op293_op294_op296.writes = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf293', c0, {c0: 4096}, None),
        MemoryDep('buf294', c0, {c0: 4096}, None),
        MemoryDep('buf296', c0, {c0: 4194304}, None)]
op292_op293_op294_op296.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None),
        MemoryDep('buf291', c0, {c0: 4194304}, None)]
op292_op293_op294_op296.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg188_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg189_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg190_1', c1, {c0: 4096, c1: 1024}, None)]
op292_op293_op294_op296.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op292_op293_op294_op296.snodes[0] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 4194304}, None),
        MemoryDep('buf274', c0, {c0: 4194304}, None),
        MemoryDep('buf291', c0, {c0: 4194304}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg188_1', c1, {c0: 4096, c1: 1024}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (4194304, 1)
op292.sizes = ([4096, 1024], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op292_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf291', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg188_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf292', get_index_5, add_3, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op292_op293_op294_op296.snodes[1] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 4096}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (4096, 1024)
op293.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op293_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op292_op293_op294_op296.snodes[2] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 4096}, None)]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (4096, 1024)
op294.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op294_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))
        tmp6 = tl.full([1], 1024, tl.int32)
        tmp7 = tmp6.to(tl.float32)
        tmp8 = tmp5 / tmp7
        tmp9 = tmp1 - tmp8
        tmp10 = tmp9 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op292_op293_op294_op296.snodes[3] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 4194304}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf293', c0, {c0: 4096}, None),
        MemoryDep('buf294', c0, {c0: 4096}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg190_1', c1, {c0: 4096, c1: 1024}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (4194304, 1)
op296.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf294_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op296_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, add_1, None)
        return store
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 1024.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op292_op293_op294_op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (r1 + (1024*x0)), None)
        tmp6 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp29 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp31 = tl.load(in_ptr5 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tmp9 = tl.broadcast_to(tmp8, [RBLOCK])
        tmp11 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))
        tmp14 = tl.full([1], 1024, tl.int32)
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp13 / tmp15
        tmp17 = tmp9 - tmp16
        tmp18 = tmp17 * tmp17
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp8 - tmp16
        tmp23 = 1024.0
        tmp24 = tmp21 / tmp23
        tmp25 = 1e-05
        tmp26 = tmp24 + tmp25
        tmp27 = libdevice.rsqrt(tmp26)
        tmp28 = tmp22 * tmp27
        tmp30 = tmp28 * tmp29
        tmp32 = tmp30 + tmp31
        tl.store(in_out_ptr0 + (r1 + (1024*x0)), tmp8, None)
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp32, None)


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 16777216}, None)]
op298.unmet_dependencies = [MemoryDep('buf297', c0, {c0: 16777216}, None)]
op298.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 4096, c1: 4096}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (16777216, 1)
op298.sizes = ([4096, 4096], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 4096], stride=[524288, 4096, 1])
class op298_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg192_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf298', get_index_4, mul_2, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.mm


op300_op301_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op303.writes = 
    [   MemoryDep('buf300', c0, {c0: 4096}, None),
        MemoryDep('buf301', c0, {c0: 4096}, None),
        MemoryDep('buf303', c0, {c0: 4194304}, None)]
op300_op301_op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None)]
op300_op301_op303.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg195_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None)]
op300_op301_op303.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op300_op301_op303.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 4096}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None)]
op300.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 4096, c1: 1024}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (4096, 1024)
op300.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op300_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem)
        return store_reduction
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op300_op301_op303.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 4096}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None)]
op301.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 4096, c1: 1024}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (4096, 1024)
op301.sizes = ([4096], [1024])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
class op301_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem_1)
        return store_reduction
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)
op300_op301_op303.snodes[2] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 4194304}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 4194304}, None),
        MemoryDep('buf299', c0, {c0: 4194304}, None),
        MemoryDep('buf300', c0, {c0: 4096}, None),
        MemoryDep('buf301', c0, {c0: 4096}, None)]
op303.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg195_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (4194304, 1)
op303.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
buf301_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1], stride=[128, 1, 4096])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[32, 128, 1024], stride=[131072, 1024, 1])
class op303_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg195_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg196_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf303', get_index_7, add_3, None)
        return store
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op300_op301_op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp25 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp27 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tmp18 = tmp4 - tmp12
        tmp19 = 1024.0
        tmp20 = tmp17 / tmp19
        tmp21 = 1e-05
        tmp22 = tmp20 + tmp21
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp18 * tmp23
        tmp26 = tmp24 * tmp25
        tmp28 = tmp26 + tmp27
        tl.store(out_ptr2 + (r1 + (1024*x0)), tmp28, None)


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', 50272*c0 + c1, {c0: 1024, c1: 50268}, None)]
op304.unmet_dependencies = []
op304.met_dependencies = [MemoryDep('arg1_1', c0 + 1024*I, {c0: 1024, c1: 50268}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (51474432, 1)
op304.sizes = ([1024, 50268], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[50265, 1024], stride=[1024, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[1024, 50268], stride=[50272, 1])
class op304_loop_body:
    var_ranges = {z0: 1024, z1: 50268}
    index0 = z1
    index1 = z0 + 1024*I
    index2 = 50272*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(50265, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(50265, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(50268, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf304', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 51474432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 50268
        x1 = (xindex // 50268)
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 50265, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (1024*x0)), tmp4, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 50268, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0 + (50272*x1)), tmp12, None)


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf303', mode=None), StarDep(name='buf304', mode=None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.node.kernel = extern_kernels.mm


op306_op307: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op306_op307.writes = 
    [   MemoryDep('buf306', c0, {c0: 4096}, None),
        MemoryDep('buf307', c0, {c0: 4096}, None)]
op306_op307.unmet_dependencies = [MemoryDep('buf305', 50272*c0 + c1, {c0: 4096, c1: 50265}, None)]
op306_op307.met_dependencies = []
op306_op307.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op306_op307.snodes[0] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 4096}, None)]
op306.unmet_dependencies = [MemoryDep('buf305', 50272*c0 + c1, {c0: 4096, c1: 50265}, None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (4096, 50265)
op306.sizes = ([4096], [50265])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op306_loop_body:
    var_ranges = {z0: 4096, z1: 50265}
    index0 = 50272*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf306', get_index_1, reduction)
        return store_reduction
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50272*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
op306_op307.snodes[1] =
op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 4096}, None)]
op307.unmet_dependencies = 
    [   MemoryDep('buf305', 50272*c0 + c1, {c0: 4096, c1: 50265}, None),
        MemoryDep('buf306', c0, {c0: 4096}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (4096, 50265)
op307.sizes = ([4096], [50265])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op307_loop_body:
    var_ranges = {z0: 4096, z1: 50265}
    index0 = 50272*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf306', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf307', get_index_2, reduction)
        return store_reduction
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50272*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)
op306_op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 65536],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 50265
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (50272*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
        _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp4 = tl.load(in_ptr0 + (r1 + (50272*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tmp4 - tmp2
            tmp6 = tl_math.exp(tmp5)
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = _tmp8 + tmp7
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = tl.sum(_tmp8, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp8, None)


op308_op309_op310: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op308_op309_op310.writes = 
    [   MemoryDep('buf308', 0, {}, None),
        MemoryDep('buf309', 0, {}, None),
        MemoryDep('buf310', 0, {}, None)]
op308_op309_op310.unmet_dependencies = 
    [   MemoryDep('buf305', 50272*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf306', c0, {c0: 4096}, None),
        MemoryDep('buf307', c0, {c0: 4096}, None)]
op308_op309_op310.met_dependencies = [MemoryDep('arg197_1', c0, {c0: 4096}, None)]
op308_op309_op310.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf310.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op308_op309_op310.snodes[0] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', 0, {}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf305', 50272*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf306', c0, {c0: 4096}, None),
        MemoryDep('buf307', c0, {c0: 4096}, None)]
op308.met_dependencies = [MemoryDep('arg197_1', c0, {c0: 4096}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1, 4096)
op308.sizes = ([], [4096])
arg197_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4096, 50268], stride=[50272, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf308_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op308_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = indirect0 + 50272*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg197_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg197_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg197_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf305', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf306', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf307', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf308', get_index_6, reduction)
        return store_reduction
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 50265")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (50272*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)
op308_op309_op310.snodes[1] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', 0, {}, None)]
op309.unmet_dependencies = []
op309.met_dependencies = [MemoryDep('arg197_1', c0, {c0: 4096}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (1, 4096)
op309.sizes = ([], [4096])
arg197_1_layout = FixedLayout('cuda', torch.int64, size=[32, 128], stride=[128, 1])
buf309_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op309_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg197_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_1, reduction)
        return store_reduction
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)
op308_op309_op310.snodes[2] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', 0, {}, None)]
op310.unmet_dependencies = [MemoryDep('buf308', 0, {}, None), MemoryDep('buf309', 0, {}, None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf310.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (1, 1)
op310.sizes = ([], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf309_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf310_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op310_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf310', get_index_2, truediv, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op308_op309_op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 50265, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 50265)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 50265")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (50272*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
            tmp22 = tmp2.to(tl.int64)
            tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
            tmp25 = _tmp24 + tmp23
            _tmp24 = tl.where(rmask, tmp25, _tmp24)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tmp24 = tl.sum(_tmp24, 1)[:, None]
        tmp26 = tmp24.to(tl.float32)
        tmp27 = tmp20 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp27, None)



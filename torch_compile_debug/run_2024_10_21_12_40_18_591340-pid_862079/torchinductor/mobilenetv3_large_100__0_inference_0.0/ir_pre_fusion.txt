op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 432}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (432, 1)
op1.sizes = ([16, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 1605632}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 16}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (1605632, 1)
op3.sizes = ([100352, 16], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1605632}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 1605632}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (1605632, 1)
op4.sizes = ([1605632], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op4_loop_body:
    var_ranges = {z0: 1605632}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul_1, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 1605632}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg7_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg8_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg9_1', c1, {c0: 100352, c1: 16}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (1605632, 1)
op6.sizes = ([100352, 16], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op6_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.node.kernel = extern_kernels.convolution


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1605632}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf4', c0, {c0: 1605632}, None),
        MemoryDep('buf7', c0, {c0: 1605632}, None)]
op8.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg13_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg14_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg15_1', c1, {c0: 100352, c1: 16}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1605632, 1)
op8.sizes = ([100352, 16], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op8_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf4', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf8', get_index_6, add_2, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 6422528}, None)]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 6422528}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 100352, c1: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (6422528, 1)
op10.sizes = ([100352, 64], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
class op10_loop_body:
    var_ranges = {z0: 100352, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf10', get_index_5, relu, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.node.kernel = extern_kernels.convolution


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 1605632}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 1605632}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 64}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (1605632, 1)
op12.sizes = ([25088, 64], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op12_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf12', get_index_5, relu, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 602112}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 602112}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg30_1', c1, {c0: 25088, c1: 24}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (602112, 1)
op14.sizes = ([25088, 24], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op14_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 1806336}, None)]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 1806336}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 72}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (1806336, 1)
op16.sizes = ([25088, 72], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
class op16_loop_body:
    var_ranges = {z0: 25088, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf16', get_index_5, relu, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1806336}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 1806336}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 72}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1806336, 1)
op18.sizes = ([25088, 72], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
class op18_loop_body:
    var_ranges = {z0: 25088, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, relu, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 602112}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 602112}, None),
        MemoryDep('buf19', c0, {c0: 602112}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 24}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (602112, 1)
op20.sizes = ([25088, 24], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op20_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf14', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf20', get_index_6, add_2, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 1806336}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 1806336}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 72}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 72}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (1806336, 1)
op22.sizes = ([25088, 72], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
class op22_loop_body:
    var_ranges = {z0: 25088, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, relu, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 451584}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 451584}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg53_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg54_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg55_1', c1, {c0: 6272, c1: 72}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (451584, 1)
op24.sizes = ([6272, 72], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op24_loop_body:
    var_ranges = {z0: 6272, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf24', get_index_5, relu, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4032}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', 8064*c0 + c1 + 72*c2, {c0: 56, c1: 72, c2: 112}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (4032, 112)
op25.sizes = ([56, 72], [112])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
class op25_loop_body:
    var_ranges = {z0: 56, z1: 72, z2: 112}
    index0 = 8064*z0 + z1 + 72*z2
    index1 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, reduction)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 576}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', 504*c0 + c1 + 72*c2, {c0: 8, c1: 72, c2: 7}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (576, 7)
op26.sizes = ([8, 72], [7])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 72, z2: 7}
    index0 = 504*z0 + z1 + 72*z2
    index1 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_1, reduction)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 576}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 576}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (576, 1)
op27.sizes = ([576], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
class op27_loop_body:
    var_ranges = {z0: 576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf27', get_index_1, truediv, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 192}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 192}, None)]
op29.met_dependencies = [MemoryDep('arg57_1', c1, {c0: 8, c1: 24}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (192, 1)
op29.sizes = ([8, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf29', get_index_2, relu, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 451584}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 451584}, None),
        MemoryDep('buf30', 72*c0 + c2, {c0: 8, c1: 784, c2: 72}, None)]
op31.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 6272, c1: 72}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (451584, 1)
op31.sizes = ([8, 784, 72], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 72}
    index0 = 56448*z0 + 72*z1 + z2
    index1 = 72*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf30', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf31', get_index_3, mul_1, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 250880}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 250880}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg62_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg63_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 40}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (250880, 1)
op33.sizes = ([6272, 40], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op33_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg62_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg63_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg64_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, add_1, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 752640}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 752640}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg67_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 120}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (752640, 1)
op35.sizes = ([6272, 120], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op35_loop_body:
    var_ranges = {z0: 6272, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg67_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, relu, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelAlloc)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelAlloc
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.convolution


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 752640}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 752640}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 120}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (752640, 1)
op37.sizes = ([6272, 120], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op37_loop_body:
    var_ranges = {z0: 6272, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg72_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg73_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg74_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf37', get_index_5, relu, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 6720}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', 13440*c0 + c1 + 120*c2, {c0: 56, c1: 120, c2: 112}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (6720, 112)
op38.sizes = ([56, 120], [112])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
class op38_loop_body:
    var_ranges = {z0: 56, z1: 120, z2: 112}
    index0 = 13440*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf38', get_index_1, reduction)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 960}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', 840*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 7}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (960, 7)
op39.sizes = ([8, 120], [7])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 7}
    index0 = 840*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf39', get_index_1, reduction)
        return store_reduction


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 960}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 960}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (960, 1)
op40.sizes = ([960], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op40_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf40', get_index_1, truediv, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 256}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 256}, None)]
op42.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 8, c1: 32}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (256, 1)
op42.sizes = ([8, 32], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf42', get_index_2, relu, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelAlloc)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelAlloc
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.convolution


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 752640}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 752640}, None),
        MemoryDep('buf43', 120*c0 + c2, {c0: 8, c1: 784, c2: 120}, None)]
op44.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 6272, c1: 120}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (752640, 1)
op44.sizes = ([8, 784, 120], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 120}
    index0 = 94080*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg78_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf44', get_index_3, mul_1, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 250880}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 250880}, None),
        MemoryDep('buf45', c0, {c0: 250880}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg81_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg82_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg83_1', c1, {c0: 6272, c1: 40}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (250880, 1)
op46.sizes = ([6272, 40], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op46_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg81_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg82_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg83_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf33', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf46', get_index_6, add_2, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 752640}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 752640}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg85_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg86_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg87_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg88_1', c1, {c0: 6272, c1: 120}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (752640, 1)
op48.sizes = ([6272, 120], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op48_loop_body:
    var_ranges = {z0: 6272, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg86_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg87_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg88_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, relu, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 752640}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 752640}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg91_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg92_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 120}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (752640, 1)
op50.sizes = ([6272, 120], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op50_loop_body:
    var_ranges = {z0: 6272, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg91_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg93_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf50', get_index_5, relu, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 6720}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', 13440*c0 + c1 + 120*c2, {c0: 56, c1: 120, c2: 112}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (6720, 112)
op51.sizes = ([56, 120], [112])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
class op51_loop_body:
    var_ranges = {z0: 56, z1: 120, z2: 112}
    index0 = 13440*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, reduction)
        return store_reduction


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 960}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', 840*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 7}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (960, 7)
op52.sizes = ([8, 120], [7])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 7], stride=[840, 1, 6720, 6720, 120])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 7}
    index0 = 840*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_1, reduction)
        return store_reduction


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 960}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 960}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (960, 1)
op53.sizes = ([960], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op53_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf53', get_index_1, truediv, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 256}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 256}, None)]
op55.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 8, c1: 32}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (256, 1)
op55.sizes = ([8, 32], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, relu, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 752640}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 752640}, None),
        MemoryDep('buf56', 120*c0 + c2, {c0: 8, c1: 784, c2: 120}, None)]
op57.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 6272, c1: 120}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (752640, 1)
op57.sizes = ([8, 784, 120], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 120}
    index0 = 94080*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf56', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg97_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf57', get_index_3, mul_1, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.convolution


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 250880}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 250880}, None),
        MemoryDep('buf58', c0, {c0: 250880}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg101_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg102_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg99_1', c1, {c0: 6272, c1: 40}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (250880, 1)
op59.sizes = ([6272, 40], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op59_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg100_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg101_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg102_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf46', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf59', get_index_6, add_2, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 1505280}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 1505280}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg105_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg106_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg107_1', c1, {c0: 6272, c1: 240}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1505280, 1)
op61.sizes = ([6272, 240], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op61_loop_body:
    var_ranges = {z0: 6272, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg105_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg106_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg107_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf61', get_index_5, add_1, None)
        return store


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1505280}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 1505280}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1505280, 1)
op62.sizes = ([1505280], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op62_loop_body:
    var_ranges = {z0: 1505280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf62', get_index_2, mul_1, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 376320}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 376320}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg111_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 240}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (376320, 1)
op64.sizes = ([1568, 240], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op64_loop_body:
    var_ranges = {z0: 1568, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg110_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, add_1, None)
        return store


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 376320}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 376320}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (376320, 1)
op65.sizes = ([376320], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op65_loop_body:
    var_ranges = {z0: 376320}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf64', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf65', get_index_2, mul_1, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 125440}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 125440}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg115_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg116_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 80}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (125440, 1)
op67.sizes = ([1568, 80], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op67_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg117_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_1, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 313600}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 313600}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg120_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg121_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 200}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (313600, 1)
op69.sizes = ([1568, 200], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
class op69_loop_body:
    var_ranges = {z0: 1568, z1: 200}
    index0 = 200*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf69', get_index_5, add_1, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 313600}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 313600}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (313600, 1)
op70.sizes = ([313600], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
class op70_loop_body:
    var_ranges = {z0: 313600}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf70', get_index_2, mul_1, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 313600}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 313600}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg125_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg126_1', c1, {c0: 1568, c1: 200}, None),
        MemoryDep('arg127_1', c1, {c0: 1568, c1: 200}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (313600, 1)
op72.sizes = ([1568, 200], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
class op72_loop_body:
    var_ranges = {z0: 1568, z1: 200}
    index0 = 200*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg124_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, add_1, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 313600}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 313600}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (313600, 1)
op73.sizes = ([313600], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
class op73_loop_body:
    var_ranges = {z0: 313600}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf72', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf73', get_index_2, mul_1, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 125440}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 125440}, None),
        MemoryDep('buf74', c0, {c0: 125440}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg130_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg131_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg132_1', c1, {c0: 1568, c1: 80}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf75.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (125440, 1)
op75.sizes = ([1568, 80], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op75_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf67', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf75', get_index_6, add_2, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 288512}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 288512}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg136_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 184}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (288512, 1)
op77.sizes = ([1568, 184], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op77_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_1, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 288512}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 288512}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (288512, 1)
op78.sizes = ([288512], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op78_loop_body:
    var_ranges = {z0: 288512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, mul_1, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 288512}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 288512}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 184}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (288512, 1)
op80.sizes = ([1568, 184], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op80_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf80', get_index_5, add_1, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 288512}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 288512}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (288512, 1)
op81.sizes = ([288512], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op81_loop_body:
    var_ranges = {z0: 288512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf81', get_index_2, mul_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 125440}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 125440}, None),
        MemoryDep('buf82', c0, {c0: 125440}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg146_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 80}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (125440, 1)
op83.sizes = ([1568, 80], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg145_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf83', get_index_6, add_2, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 288512}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 288512}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg151_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg152_1', c1, {c0: 1568, c1: 184}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (288512, 1)
op85.sizes = ([1568, 184], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op85_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add_1, None)
        return store


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 288512}, None)]
op86.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 288512}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (288512, 1)
op86.sizes = ([288512], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op86_loop_body:
    var_ranges = {z0: 288512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf86', get_index_2, mul_1, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 288512}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 288512}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 184}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 184}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (288512, 1)
op88.sizes = ([1568, 184], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op88_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg155_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf88', get_index_5, add_1, None)
        return store


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 288512}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 288512}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (288512, 1)
op89.sizes = ([288512], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op89_loop_body:
    var_ranges = {z0: 288512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf89', get_index_2, mul_1, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 125440}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 125440}, None),
        MemoryDep('buf90', c0, {c0: 125440}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg161_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 80}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (125440, 1)
op91.sizes = ([1568, 80], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op91_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf83', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf91', get_index_6, add_2, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 752640}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 752640}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg166_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg167_1', c1, {c0: 1568, c1: 480}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (752640, 1)
op93.sizes = ([1568, 480], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op93_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg167_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, add_1, None)
        return store


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 752640}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 752640}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (752640, 1)
op94.sizes = ([752640], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op94_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf94', get_index_2, mul_1, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 752640}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 752640}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg169_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg171_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg172_1', c1, {c0: 1568, c1: 480}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (752640, 1)
op96.sizes = ([1568, 480], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op96_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg170_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg171_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg172_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 7680}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', 47040*c0 + c1 + 480*c2, {c0: 16, c1: 480, c2: 98}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (7680, 98)
op97.sizes = ([16, 480], [98])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
class op97_loop_body:
    var_ranges = {z0: 16, z1: 480, z2: 98}
    index0 = 47040*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_2, reduction)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 3840}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', 960*c0 + c1 + 480*c2, {c0: 8, c1: 480, c2: 2}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (3840, 2)
op98.sizes = ([8, 480], [2])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 2}
    index0 = 960*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, reduction)
        return store_reduction


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 3840}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 3840}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (3840, 1)
op99.sizes = ([3840], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op99_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, truediv, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 960}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 960}, None)]
op101.met_dependencies = [MemoryDep('arg174_1', c1, {c0: 8, c1: 120}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (960, 1)
op101.sizes = ([8, 120], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf101', get_index_2, relu, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 752640}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', 480*c0 + c2, {c0: 8, c1: 196, c2: 480}, None),
        MemoryDep('buf96', c0, {c0: 752640}, None)]
op103.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 1568, c1: 480}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (752640, 1)
op103.sizes = ([8, 196, 480], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 480}
    index0 = 94080*z0 + 480*z1 + z2
    index1 = 480*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf102', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf103', get_index_4, mul_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 175616}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 175616}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg179_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg180_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 112}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (175616, 1)
op105.sizes = ([1568, 112], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op105_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg180_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, add_1, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 1053696}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 1053696}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg185_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg186_1', c1, {c0: 1568, c1: 672}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (1053696, 1)
op107.sizes = ([1568, 672], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op107_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg184_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg185_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg186_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf107', get_index_5, add_1, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1053696}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 1053696}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (1053696, 1)
op108.sizes = ([1053696], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op108_loop_body:
    var_ranges = {z0: 1053696}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf108', get_index_2, mul_1, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.convolution


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1053696}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 1053696}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg190_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg191_1', c1, {c0: 1568, c1: 672}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (1053696, 1)
op110.sizes = ([1568, 672], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op110_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg189_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg190_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg191_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf110', get_index_5, add_1, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 10752}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', 65856*c0 + c1 + 672*c2, {c0: 16, c1: 672, c2: 98}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (10752, 98)
op111.sizes = ([16, 672], [98])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
class op111_loop_body:
    var_ranges = {z0: 16, z1: 672, z2: 98}
    index0 = 65856*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf111', get_index_2, reduction)
        return store_reduction


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 5376}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', 1344*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 2}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (5376, 2)
op112.sizes = ([8, 672], [2])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 2}
    index0 = 1344*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf112', get_index_1, reduction)
        return store_reduction


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 5376}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 5376}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (5376, 1)
op113.sizes = ([5376], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op113_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf113', get_index_1, truediv, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1344}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 1344}, None)]
op115.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 8, c1: 168}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (1344, 1)
op115.sizes = ([8, 168], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[168], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
class op115_loop_body:
    var_ranges = {z0: 8, z1: 168}
    index0 = 168*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf115', get_index_2, relu, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1053696}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 1053696}, None),
        MemoryDep('buf116', 672*c0 + c2, {c0: 8, c1: 196, c2: 672}, None)]
op117.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 1568, c1: 672}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (1053696, 1)
op117.sizes = ([8, 196, 672], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 672}
    index0 = 131712*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf116', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg195_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf117', get_index_4, mul_3, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.convolution


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 175616}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 175616}, None),
        MemoryDep('buf118', c0, {c0: 175616}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 112}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (175616, 1)
op119.sizes = ([1568, 112], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op119_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf105', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf119', get_index_6, add_2, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 1053696}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 1053696}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg203_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 672}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (1053696, 1)
op121.sizes = ([1568, 672], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op121_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1053696}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 1053696}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1053696, 1)
op122.sizes = ([1053696], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op122_loop_body:
    var_ranges = {z0: 1053696}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf121', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf122', get_index_2, mul_1, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 263424}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 263424}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg208_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg209_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg210_1', c1, {c0: 392, c1: 672}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (263424, 1)
op124.sizes = ([392, 672], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op124_loop_body:
    var_ranges = {z0: 392, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, add_1, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 5376}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', 32928*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 49}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (5376, 49)
op125.sizes = ([8, 672], [49])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 49}
    index0 = 32928*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_2, reduction)
        return store_reduction


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 5376}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 5376}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (5376, 1)
op126.sizes = ([5376], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op126_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf126', get_index_1, truediv, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1344}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1344}, None)]
op128.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 8, c1: 168}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1344, 1)
op128.sizes = ([8, 168], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[168], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 168}
    index0 = 168*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, relu, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 263424}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 263424}, None),
        MemoryDep('buf129', 672*c0 + c2, {c0: 8, c1: 49, c2: 672}, None)]
op130.met_dependencies = [MemoryDep('arg214_1', c1, {c0: 392, c1: 672}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (263424, 1)
op130.sizes = ([8, 49, 672], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 672}
    index0 = 32928*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf129', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg214_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf130', get_index_4, mul_3, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 62720}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 62720}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg217_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg218_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg219_1', c1, {c0: 392, c1: 160}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (62720, 1)
op132.sizes = ([392, 160], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op132_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg217_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg218_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg219_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, add_1, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 376320}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 376320}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg222_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg223_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg224_1', c1, {c0: 392, c1: 960}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (376320, 1)
op134.sizes = ([392, 960], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op134_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg222_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg223_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg224_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_1, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 376320}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 376320}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (376320, 1)
op135.sizes = ([376320], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op135_loop_body:
    var_ranges = {z0: 376320}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 376320}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 376320}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg227_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg228_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg229_1', c1, {c0: 392, c1: 960}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (376320, 1)
op137.sizes = ([392, 960], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op137_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg227_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg228_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg229_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf137', get_index_5, add_1, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 7680}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (7680, 49)
op138.sizes = ([8, 960], [49])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + z1 + 960*z2
    index1 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf138', get_index_2, reduction)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 7680}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 7680}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (7680, 1)
op139.sizes = ([7680], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op139_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf139', get_index_1, truediv, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg230_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1920}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 1920}, None)]
op141.met_dependencies = [MemoryDep('arg231_1', c1, {c0: 8, c1: 240}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1920, 1)
op141.sizes = ([8, 240], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, relu, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 376320}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 376320}, None),
        MemoryDep('buf142', 960*c0 + c2, {c0: 8, c1: 49, c2: 960}, None)]
op143.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 392, c1: 960}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (376320, 1)
op143.sizes = ([8, 49, 960], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 960}
    index0 = 47040*z0 + 960*z1 + z2
    index1 = 960*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf142', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg233_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf143', get_index_4, mul_3, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.convolution


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 62720}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 62720}, None),
        MemoryDep('buf144', c0, {c0: 62720}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg236_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg237_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg238_1', c1, {c0: 392, c1: 160}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf145.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (62720, 1)
op145.sizes = ([392, 160], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op145_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg235_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg238_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf132', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf145', get_index_6, add_2, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelAlloc)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelAlloc
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.convolution


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 376320}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 376320}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg241_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg242_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg243_1', c1, {c0: 392, c1: 960}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (376320, 1)
op147.sizes = ([392, 960], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op147_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg241_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg242_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg243_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_1, None)
        return store


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 376320}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 376320}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (376320, 1)
op148.sizes = ([376320], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op148_loop_body:
    var_ranges = {z0: 376320}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf147', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf148', get_index_2, mul_1, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 376320}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 376320}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg246_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg247_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg248_1', c1, {c0: 392, c1: 960}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (376320, 1)
op150.sizes = ([392, 960], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op150_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg246_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg247_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg248_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf150', get_index_5, add_1, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 7680}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (7680, 49)
op151.sizes = ([8, 960], [49])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + z1 + 960*z2
    index1 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf150', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_2, reduction)
        return store_reduction


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 7680}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 7680}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (7680, 1)
op152.sizes = ([7680], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op152_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf152', get_index_1, truediv, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelAlloc)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelAlloc
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.convolution


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1920}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1920}, None)]
op154.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 8, c1: 240}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1920, 1)
op154.sizes = ([8, 240], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg250_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf154', get_index_2, relu, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 376320}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 376320}, None),
        MemoryDep('buf155', 960*c0 + c2, {c0: 8, c1: 49, c2: 960}, None)]
op156.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 392, c1: 960}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (376320, 1)
op156.sizes = ([8, 49, 960], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 960}
    index0 = 47040*z0 + 960*z1 + z2
    index1 = 960*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf150', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg252_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf156', get_index_4, mul_3, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 62720}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 62720}, None),
        MemoryDep('buf157', c0, {c0: 62720}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg255_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg256_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg257_1', c1, {c0: 392, c1: 160}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (62720, 1)
op158.sizes = ([392, 160], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op158_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg257_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf145', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf158', get_index_6, add_2, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.convolution


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 376320}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 376320}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg260_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg261_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg262_1', c1, {c0: 392, c1: 960}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (376320, 1)
op160.sizes = ([392, 960], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op160_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg261_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg262_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_1, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 7680}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (7680, 49)
op161.sizes = ([8, 960], [49])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + z1 + 960*z2
    index1 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_2, reduction)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 7680}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 7680}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (7680, 1)
op162.sizes = ([7680], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op162_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, truediv, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 1, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.convolution


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 10240}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 10240}, None)]
op164.met_dependencies = [MemoryDep('arg264_1', c1, {c0: 8, c1: 1280}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (10240, 1)
op164.sizes = ([8, 1280], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 1, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf163', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf164', get_index_4, mul_1, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg265_1', mode=None), StarDep(name='arg266_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf165.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.addmm



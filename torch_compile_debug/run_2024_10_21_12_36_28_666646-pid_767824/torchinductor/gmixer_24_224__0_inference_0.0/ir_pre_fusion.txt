op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 4704}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op1.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (4704, 128)
op1.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, getitem)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 4704}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op2.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (4704, 128)
op2.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf2', get_index_2, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4704}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op3.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (4704, 128)
op3.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem_2)
        return store_reduction


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1568}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf2', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf3', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1568, 3)
op4.sizes = ([8, 196], [3])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1568}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf2', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf3', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1568, 3)
op5.sizes = ([8, 196], [3])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 602112}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 602112}, None),
        MemoryDep('buf4', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf5', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 384}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (602112, 1)
op7.sizes = ([8, 384, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 196*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf5', get_index_3)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf7', get_index_6, add_2, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 589824}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf8', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf8', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg6_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg6_1', c1, {c0: 3072, c1: 192}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (589824, 1)
op9.sizes = ([3072, 192], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op9_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf8', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg6_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf9', get_index_6, mul_1, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.mm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 4704}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 24, c1: 196}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (4704, 128)
op11.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf11', get_index_4, getitem)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 4704}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 24, c1: 196}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (4704, 128)
op12.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf12', get_index_4, getitem_1)
        return store_reduction


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 4704}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 3, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 24, c1: 196}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (4704, 128)
op13.sizes = ([8, 3, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 196, z3: 128}
    index0 = 75264*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 588*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf13', get_index_4, getitem_2)
        return store_reduction


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1568}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf11', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf12', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf13', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf14.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1568, 3)
op14.sizes = ([8, 196], [3])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf13', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf14', get_index_3, getitem)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 1568}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf11', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf12', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf13', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf15.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1568, 3)
op15.sizes = ([8, 196], [3])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf13', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_3, getitem_1)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 602112}, None),
        MemoryDep('buf10', c0, {c0: 602112}, None),
        MemoryDep('buf14', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf15', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg2_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg8_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 384}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (602112, 1)
op17.sizes = ([8, 384, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = z2
    index3 = 196*z0 + z2
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf14', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf15', get_index_5)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg9_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg10_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf17', get_index_8, add_4, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1204224}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf18', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf18', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg12_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 1568, c1: 768}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1204224, 1)
op19.sizes = ([1568, 768], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op19_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf18', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf18', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg12_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf19', get_index_6, mul_1, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 602112}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 602112}, None),
        MemoryDep('buf10', c0, {c0: 602112}, None),
        MemoryDep('buf20', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg2_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg8_1', c1, {c0: 3072, c1: 196}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (602112, 1)
op21.sizes = ([8, 384, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = z2
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf20', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg14_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf21', get_index_6, add_4, None)
        return store


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 4704}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (4704, 128)
op22.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op22_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, getitem)
        return store_reduction


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 4704}, None)]
op23.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (4704, 128)
op23.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op23_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, getitem_1)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 4704}, None)]
op24.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (4704, 128)
op24.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op24_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem_2)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1568}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf22', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf23', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf24', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1568, 3)
op25.sizes = ([8, 196], [3])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1568}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf22', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf23', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf24', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1568, 3)
op26.sizes = ([8, 196], [3])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 602112}, None),
        MemoryDep('buf25', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf26', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg16_1', c1, {c0: 8, c1: 384}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (602112, 1)
op28.sizes = ([8, 384, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf26', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg15_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg16_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf28', get_index_5, add_1, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 589824}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf29', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf29', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg18_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg18_1', c1, {c0: 3072, c1: 192}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (589824, 1)
op30.sizes = ([3072, 192], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op30_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf29', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg18_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf29', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg18_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf30', get_index_6, mul_1, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 4704}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op32.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 24, c1: 196}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (4704, 128)
op32.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op32_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf32', get_index_3, getitem)
        return store_reduction


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 4704}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op33.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 24, c1: 196}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (4704, 128)
op33.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op33_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_3, getitem_1)
        return store_reduction


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 4704}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op34.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 24, c1: 196}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (4704, 128)
op34.sizes = ([24, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op34_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem_2)
        return store_reduction


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1568}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf33', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf34', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1568, 3)
op35.sizes = ([8, 196], [3])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf34', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_3, getitem)
        return store_reduction


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1568}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf33', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf34', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1568, 3)
op36.sizes = ([8, 196], [3])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf34', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem_1)
        return store_reduction


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 602112}, None),
        MemoryDep('buf31', c0, {c0: 602112}, None),
        MemoryDep('buf35', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf36', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg21_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg22_1', c1, {c0: 8, c1: 384}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (602112, 1)
op38.sizes = ([8, 384, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf35', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf36', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg21_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg22_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf38', get_index_7, add_3, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1204224}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf39', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf39', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg24_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 1568, c1: 768}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1204224, 1)
op40.sizes = ([1568, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op40_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf39', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf39', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg24_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf40', get_index_6, mul_1, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 602112}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 602112}, None),
        MemoryDep('buf31', c0, {c0: 602112}, None),
        MemoryDep('buf41', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg26_1', c1, {c0: 8, c1: 384}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (602112, 1)
op42.sizes = ([8, 384, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf41', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg26_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 4704}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (4704, 128)
op43.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op43_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 4704}, None)]
op44.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (4704, 128)
op44.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op44_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 4704}, None)]
op45.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (4704, 128)
op45.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op45_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, getitem_2)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1568}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf43', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf44', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf45', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf46.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1568, 3)
op46.sizes = ([8, 196], [3])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op46_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf46', get_index_3, getitem)
        return store_reduction


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 1568}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf43', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf44', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf45', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf47.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (1568, 3)
op47.sizes = ([8, 196], [3])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem_1)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 602112}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 602112}, None),
        MemoryDep('buf46', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf47', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg28_1', c1, {c0: 8, c1: 384}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (602112, 1)
op49.sizes = ([8, 384, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf47', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg27_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg28_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, add_1, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 589824}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf50', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf50', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg30_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg30_1', c1, {c0: 3072, c1: 192}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (589824, 1)
op51.sizes = ([3072, 192], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op51_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf50', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg30_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf50', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg30_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf51', get_index_6, mul_1, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 4704}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op53.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 24, c1: 196}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (4704, 128)
op53.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op53_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf53', get_index_3, getitem)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 4704}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op54.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 24, c1: 196}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (4704, 128)
op54.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op54_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_3, getitem_1)
        return store_reduction


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 4704}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op55.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 24, c1: 196}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (4704, 128)
op55.sizes = ([24, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op55_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_3, getitem_2)
        return store_reduction


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1568}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf53', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf54', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf55', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1568, 3)
op56.sizes = ([8, 196], [3])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_3, getitem)
        return store_reduction


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1568}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf53', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf54', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf55', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1568, 3)
op57.sizes = ([8, 196], [3])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_3, getitem_1)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 602112}, None),
        MemoryDep('buf52', c0, {c0: 602112}, None),
        MemoryDep('buf56', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf57', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg34_1', c1, {c0: 8, c1: 384}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (602112, 1)
op59.sizes = ([8, 384, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf56', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf57', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf59', get_index_7, add_3, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 1204224}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf60', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf60', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg36_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg36_1', c1, {c0: 1568, c1: 768}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1204224, 1)
op61.sizes = ([1568, 768], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op61_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf60', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg36_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf61', get_index_6, mul_1, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 602112}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 602112}, None),
        MemoryDep('buf52', c0, {c0: 602112}, None),
        MemoryDep('buf62', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg38_1', c1, {c0: 8, c1: 384}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (602112, 1)
op63.sizes = ([8, 384, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg38_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, add_3, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 4704}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (4704, 128)
op64.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op64_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 4704}, None)]
op65.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (4704, 128)
op65.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op65_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf65', get_index_1, getitem_1)
        return store_reduction


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 4704}, None)]
op66.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (4704, 128)
op66.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op66_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf66', get_index_1, getitem_2)
        return store_reduction


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1568}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf64', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf65', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf66', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1568, 3)
op67.sizes = ([8, 196], [3])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem)
        return store_reduction


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1568}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf64', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf65', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf66', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf68.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (1568, 3)
op68.sizes = ([8, 196], [3])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem_1)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 602112}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 602112}, None),
        MemoryDep('buf67', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf68', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 384}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (602112, 1)
op70.sizes = ([8, 384, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf67', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf70', get_index_5, add_1, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 589824}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf71', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf71', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg42_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg42_1', c1, {c0: 3072, c1: 192}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (589824, 1)
op72.sizes = ([3072, 192], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op72_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg42_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf71', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg42_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf72', get_index_6, mul_1, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 4704}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op74.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 24, c1: 196}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (4704, 128)
op74.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op74_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem)
        return store_reduction


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 4704}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op75.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 24, c1: 196}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (4704, 128)
op75.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op75_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem_1)
        return store_reduction


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 4704}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op76.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 24, c1: 196}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (4704, 128)
op76.sizes = ([24, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op76_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_2)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1568}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf74', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf75', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf76', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf77.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (1568, 3)
op77.sizes = ([8, 196], [3])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_3, getitem)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1568}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf74', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf75', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf76', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf78.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (1568, 3)
op78.sizes = ([8, 196], [3])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_3, getitem_1)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 602112}, None),
        MemoryDep('buf73', c0, {c0: 602112}, None),
        MemoryDep('buf77', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf78', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg45_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg46_1', c1, {c0: 8, c1: 384}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (602112, 1)
op80.sizes = ([8, 384, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf77', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf78', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf80', get_index_7, add_3, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1204224}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf81', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf81', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg48_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1568, c1: 768}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1204224, 1)
op82.sizes = ([1568, 768], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op82_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf81', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf81', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg48_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf82', get_index_6, mul_1, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 602112}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 602112}, None),
        MemoryDep('buf73', c0, {c0: 602112}, None),
        MemoryDep('buf83', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg50_1', c1, {c0: 8, c1: 384}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (602112, 1)
op84.sizes = ([8, 384, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf83', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg50_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf84', get_index_5, add_3, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 4704}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (4704, 128)
op85.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op85_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, getitem)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 4704}, None)]
op86.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (4704, 128)
op86.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op86_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf86', get_index_1, getitem_1)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 4704}, None)]
op87.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (4704, 128)
op87.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op87_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, getitem_2)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1568}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf85', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf86', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf87', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1568, 3)
op88.sizes = ([8, 196], [3])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem)
        return store_reduction


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1568}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf85', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf86', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf87', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1568, 3)
op89.sizes = ([8, 196], [3])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem_1)
        return store_reduction


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 602112}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 602112}, None),
        MemoryDep('buf88', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf89', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 384}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (602112, 1)
op91.sizes = ([8, 384, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf89', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg51_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg52_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, add_1, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 589824}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf92', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf92', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg54_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg54_1', c1, {c0: 3072, c1: 192}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (589824, 1)
op93.sizes = ([3072, 192], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op93_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf92', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf92', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg54_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf93', get_index_6, mul_1, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 4704}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op95.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 24, c1: 196}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (4704, 128)
op95.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op95_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 4704}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op96.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 24, c1: 196}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (4704, 128)
op96.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op96_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem_1)
        return store_reduction


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 4704}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op97.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 24, c1: 196}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (4704, 128)
op97.sizes = ([24, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op97_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem_2)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1568}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf95', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf96', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf97', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1568, 3)
op98.sizes = ([8, 196], [3])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem)
        return store_reduction


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1568}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf95', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf96', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf97', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (1568, 3)
op99.sizes = ([8, 196], [3])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_3, getitem_1)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 602112}, None),
        MemoryDep('buf94', c0, {c0: 602112}, None),
        MemoryDep('buf98', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf99', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 384}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (602112, 1)
op101.sizes = ([8, 384, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf98', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg57_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg58_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf101', get_index_7, add_3, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 1204224}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf102', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg60_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 1568, c1: 768}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (1204224, 1)
op103.sizes = ([1568, 768], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op103_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf102', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg60_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf102', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg60_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf103', get_index_6, mul_1, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 602112}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf104', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf84', c0, {c0: 602112}, None),
        MemoryDep('buf94', c0, {c0: 602112}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 384}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (602112, 1)
op105.sizes = ([8, 384, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf104', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg62_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, add_3, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 4704}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (4704, 128)
op106.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op106_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, getitem)
        return store_reduction


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4704}, None)]
op107.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (4704, 128)
op107.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op107_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, getitem_1)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 4704}, None)]
op108.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (4704, 128)
op108.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op108_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, getitem_2)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1568}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf106', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf107', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf108', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf109.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1568, 3)
op109.sizes = ([8, 196], [3])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_3, getitem)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1568}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf107', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf108', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1568, 3)
op110.sizes = ([8, 196], [3])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_3, getitem_1)
        return store_reduction


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 602112}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 602112}, None),
        MemoryDep('buf109', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf110', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op112.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 384}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (602112, 1)
op112.sizes = ([8, 384, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf110', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg63_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg64_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf112', get_index_5, add_1, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 589824}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf113', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf113', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg66_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg66_1', c1, {c0: 3072, c1: 192}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (589824, 1)
op114.sizes = ([3072, 192], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op114_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf113', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf113', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg66_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf114', get_index_6, mul_1, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 4704}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op116.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 24, c1: 196}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (4704, 128)
op116.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op116_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 4704}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op117.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 24, c1: 196}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (4704, 128)
op117.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op117_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 4704}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op118.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 24, c1: 196}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (4704, 128)
op118.sizes = ([24, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op118_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_3, getitem_2)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1568}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf117', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf118', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1568, 3)
op119.sizes = ([8, 196], [3])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1568}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf117', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf118', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1568, 3)
op120.sizes = ([8, 196], [3])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 602112}, None),
        MemoryDep('buf115', c0, {c0: 602112}, None),
        MemoryDep('buf119', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf120', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg69_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 384}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (602112, 1)
op122.sizes = ([8, 384, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg69_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 1204224}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf123', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf123', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg72_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 1568, c1: 768}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (1204224, 1)
op124.sizes = ([1568, 768], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg72_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf124', get_index_6, mul_1, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 602112}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 602112}, None),
        MemoryDep('buf115', c0, {c0: 602112}, None),
        MemoryDep('buf125', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 384}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (602112, 1)
op126.sizes = ([8, 384, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg74_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf126', get_index_5, add_3, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 4704}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (4704, 128)
op127.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op127_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf127', get_index_1, getitem)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4704}, None)]
op128.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (4704, 128)
op128.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op128_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_1, getitem_1)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 4704}, None)]
op129.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (4704, 128)
op129.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op129_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, getitem_2)
        return store_reduction


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1568}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf127', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf128', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf129', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1568, 3)
op130.sizes = ([8, 196], [3])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_3, getitem)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1568}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf128', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf129', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (1568, 3)
op131.sizes = ([8, 196], [3])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_3, getitem_1)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 602112}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 602112}, None),
        MemoryDep('buf130', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf131', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op133.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 384}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (602112, 1)
op133.sizes = ([8, 384, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf133', get_index_5, add_1, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 589824}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf134', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf134', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg78_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg78_1', c1, {c0: 3072, c1: 192}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (589824, 1)
op135.sizes = ([3072, 192], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op135_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf134', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg78_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf134', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg78_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf135', get_index_6, mul_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 4704}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op137.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 24, c1: 196}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (4704, 128)
op137.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op137_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem)
        return store_reduction


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 4704}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op138.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 24, c1: 196}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (4704, 128)
op138.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op138_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem_1)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 4704}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op139.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 24, c1: 196}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (4704, 128)
op139.sizes = ([24, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op139_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem_2)
        return store_reduction


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 1568}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf137', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf138', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf139', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1568, 3)
op140.sizes = ([8, 196], [3])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem)
        return store_reduction


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1568}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf137', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf138', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf139', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1568, 3)
op141.sizes = ([8, 196], [3])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem_1)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 602112}, None),
        MemoryDep('buf136', c0, {c0: 602112}, None),
        MemoryDep('buf140', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf141', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg81_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg82_1', c1, {c0: 8, c1: 384}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (602112, 1)
op143.sizes = ([8, 384, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf141', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg81_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg82_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf143', get_index_7, add_3, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 1204224}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf144', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf144', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg84_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg84_1', c1, {c0: 1568, c1: 768}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (1204224, 1)
op145.sizes = ([1568, 768], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg84_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf144', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg84_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf145', get_index_6, mul_1, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 602112}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 602112}, None),
        MemoryDep('buf136', c0, {c0: 602112}, None),
        MemoryDep('buf146', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg86_1', c1, {c0: 8, c1: 384}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (602112, 1)
op147.sizes = ([8, 384, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg86_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_3, None)
        return store


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 4704}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (4704, 128)
op148.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op148_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, getitem)
        return store_reduction


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 4704}, None)]
op149.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (4704, 128)
op149.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op149_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_1, getitem_1)
        return store_reduction


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 4704}, None)]
op150.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (4704, 128)
op150.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op150_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, getitem_2)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 1568}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf148', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf149', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf150', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (1568, 3)
op151.sizes = ([8, 196], [3])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem)
        return store_reduction


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 1568}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf148', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf149', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf150', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (1568, 3)
op152.sizes = ([8, 196], [3])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_3, getitem_1)
        return store_reduction


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 602112}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 602112}, None),
        MemoryDep('buf151', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf152', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 384}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (602112, 1)
op154.sizes = ([8, 384, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf151', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf152', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg87_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg88_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, add_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 589824}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf155', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf155', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg90_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg90_1', c1, {c0: 3072, c1: 192}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (589824, 1)
op156.sizes = ([3072, 192], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op156_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg90_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf155', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg90_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf156', get_index_6, mul_1, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 4704}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op158.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 24, c1: 196}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (4704, 128)
op158.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op158_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf158', get_index_3, getitem)
        return store_reduction


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 4704}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op159.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 24, c1: 196}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (4704, 128)
op159.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op159_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf159', get_index_3, getitem_1)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 4704}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op160.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 24, c1: 196}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (4704, 128)
op160.sizes = ([24, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op160_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf160', get_index_3, getitem_2)
        return store_reduction


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 1568}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf158', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf159', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf160', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (1568, 3)
op161.sizes = ([8, 196], [3])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1568}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf159', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf160', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (1568, 3)
op162.sizes = ([8, 196], [3])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 602112}, None),
        MemoryDep('buf157', c0, {c0: 602112}, None),
        MemoryDep('buf161', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf162', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg93_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 384}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (602112, 1)
op164.sizes = ([8, 384, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 1204224}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf165', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf165', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op166.met_dependencies = 
    [   MemoryDep('arg96_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 1568, c1: 768}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (1204224, 1)
op166.sizes = ([1568, 768], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op166_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf165', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg96_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf166', get_index_6, mul_1, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 602112}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 602112}, None),
        MemoryDep('buf157', c0, {c0: 602112}, None),
        MemoryDep('buf167', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 384}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (602112, 1)
op168.sizes = ([8, 384, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf167', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg98_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, add_3, None)
        return store


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 4704}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (4704, 128)
op169.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op169_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem)
        return store_reduction


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 4704}, None)]
op170.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (4704, 128)
op170.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op170_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, getitem_1)
        return store_reduction


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 4704}, None)]
op171.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (4704, 128)
op171.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op171_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf171', get_index_1, getitem_2)
        return store_reduction


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1568}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf169', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf170', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf171', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (1568, 3)
op172.sizes = ([8, 196], [3])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 1568}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf169', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf170', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf171', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (1568, 3)
op173.sizes = ([8, 196], [3])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op173_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 602112}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 602112}, None),
        MemoryDep('buf172', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf173', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 384}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (602112, 1)
op175.sizes = ([8, 384, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 589824}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf176', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf176', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg102_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg102_1', c1, {c0: 3072, c1: 192}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (589824, 1)
op177.sizes = ([3072, 192], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op177_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg102_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg102_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf177', get_index_6, mul_1, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 4704}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op179.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 24, c1: 196}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (4704, 128)
op179.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op179_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_3, getitem)
        return store_reduction


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 4704}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op180.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 24, c1: 196}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (4704, 128)
op180.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op180_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, getitem_1)
        return store_reduction


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 4704}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op181.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 24, c1: 196}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (4704, 128)
op181.sizes = ([24, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op181_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_3, getitem_2)
        return store_reduction


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1568}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf179', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf180', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf181', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1568, 3)
op182.sizes = ([8, 196], [3])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_3, getitem)
        return store_reduction


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 1568}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf180', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf181', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (1568, 3)
op183.sizes = ([8, 196], [3])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf183', get_index_3, getitem_1)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 602112}, None),
        MemoryDep('buf178', c0, {c0: 602112}, None),
        MemoryDep('buf182', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf183', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 384}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (602112, 1)
op185.sizes = ([8, 384, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op185_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf182', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf183', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg105_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg106_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf185', get_index_7, add_3, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1204224}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf186', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf186', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg108_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1568, c1: 768}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (1204224, 1)
op187.sizes = ([1568, 768], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg108_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf186', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg108_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf187', get_index_6, mul_1, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 602112}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 602112}, None),
        MemoryDep('buf178', c0, {c0: 602112}, None),
        MemoryDep('buf188', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 384}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (602112, 1)
op189.sizes = ([8, 384, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf188', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg110_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, add_3, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 4704}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (4704, 128)
op190.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op190_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_1, getitem)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 4704}, None)]
op191.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (4704, 128)
op191.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op191_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf191', get_index_1, getitem_1)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 4704}, None)]
op192.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (4704, 128)
op192.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op192_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_1, getitem_2)
        return store_reduction


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 1568}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf190', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf191', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf192', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (1568, 3)
op193.sizes = ([8, 196], [3])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf191', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_3, getitem)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1568}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf190', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf191', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf192', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (1568, 3)
op194.sizes = ([8, 196], [3])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf191', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem_1)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 602112}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 602112}, None),
        MemoryDep('buf193', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf194', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg112_1', c1, {c0: 8, c1: 384}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (602112, 1)
op196.sizes = ([8, 384, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 589824}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf197', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf197', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg114_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg114_1', c1, {c0: 3072, c1: 192}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (589824, 1)
op198.sizes = ([3072, 192], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op198_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg114_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf197', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg114_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf198', get_index_6, mul_1, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 4704}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op200.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 24, c1: 196}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (4704, 128)
op200.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op200_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 4704}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op201.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 24, c1: 196}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (4704, 128)
op201.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op201_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 4704}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op202.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 24, c1: 196}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (4704, 128)
op202.sizes = ([24, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op202_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf202', get_index_3, getitem_2)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1568}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf200', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf201', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf202', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1568, 3)
op203.sizes = ([8, 196], [3])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op203_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_3, getitem)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1568}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf200', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf201', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf202', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1568, 3)
op204.sizes = ([8, 196], [3])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem_1)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 602112}, None),
        MemoryDep('buf199', c0, {c0: 602112}, None),
        MemoryDep('buf203', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf204', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg117_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 8, c1: 384}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (602112, 1)
op206.sizes = ([8, 384, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf203', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf204', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf206', get_index_7, add_3, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 1204224}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf207', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf207', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg120_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 1568, c1: 768}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (1204224, 1)
op208.sizes = ([1568, 768], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg120_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf207', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg120_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf208', get_index_6, mul_1, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 602112}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 602112}, None),
        MemoryDep('buf199', c0, {c0: 602112}, None),
        MemoryDep('buf209', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 384}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (602112, 1)
op210.sizes = ([8, 384, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf209', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg122_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_3, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 4704}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (4704, 128)
op211.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op211_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf211', get_index_1, getitem)
        return store_reduction


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 4704}, None)]
op212.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (4704, 128)
op212.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op212_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf212', get_index_1, getitem_1)
        return store_reduction


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 4704}, None)]
op213.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (4704, 128)
op213.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op213_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, getitem_2)
        return store_reduction


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1568}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf211', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf212', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf213', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1568, 3)
op214.sizes = ([8, 196], [3])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op214_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_3, getitem)
        return store_reduction


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1568}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf211', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf212', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf213', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (1568, 3)
op215.sizes = ([8, 196], [3])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem_1)
        return store_reduction


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 602112}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 602112}, None),
        MemoryDep('buf214', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf215', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg124_1', c1, {c0: 8, c1: 384}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (602112, 1)
op217.sizes = ([8, 384, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf215', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_1, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 589824}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf218', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf218', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg126_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg126_1', c1, {c0: 3072, c1: 192}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (589824, 1)
op219.sizes = ([3072, 192], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op219_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf218', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf218', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg126_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf219', get_index_6, mul_1, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4704}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op221.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 24, c1: 196}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (4704, 128)
op221.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op221_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_3, getitem)
        return store_reduction


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 4704}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op222.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 24, c1: 196}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op222.group.device = cuda:0
op222.group.iteration = (4704, 128)
op222.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op222_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem_1)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 4704}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op223.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 24, c1: 196}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (4704, 128)
op223.sizes = ([24, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op223_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_2)
        return store_reduction


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 1568}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf221', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf222', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf223', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (1568, 3)
op224.sizes = ([8, 196], [3])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1568}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf221', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf222', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf223', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1568, 3)
op225.sizes = ([8, 196], [3])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op225_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem_1)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 602112}, None),
        MemoryDep('buf220', c0, {c0: 602112}, None),
        MemoryDep('buf224', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf225', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op227.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 384}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (602112, 1)
op227.sizes = ([8, 384, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf224', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf225', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg129_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg130_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf227', get_index_7, add_3, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1204224}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf228', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf228', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg132_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg132_1', c1, {c0: 1568, c1: 768}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (1204224, 1)
op229.sizes = ([1568, 768], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op229_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf228', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg132_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf228', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg132_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf229', get_index_6, mul_1, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 602112}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 602112}, None),
        MemoryDep('buf220', c0, {c0: 602112}, None),
        MemoryDep('buf230', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg134_1', c1, {c0: 8, c1: 384}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (602112, 1)
op231.sizes = ([8, 384, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg134_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, add_3, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 4704}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (4704, 128)
op232.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op232_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, getitem)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 4704}, None)]
op233.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (4704, 128)
op233.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op233_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem_1)
        return store_reduction


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 4704}, None)]
op234.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (4704, 128)
op234.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op234_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem_2)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1568}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf232', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf233', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf234', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1568, 3)
op235.sizes = ([8, 196], [3])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op235_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 1568}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf233', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf234', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (1568, 3)
op236.sizes = ([8, 196], [3])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem_1)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 602112}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 602112}, None),
        MemoryDep('buf235', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf236', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op238.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg136_1', c1, {c0: 8, c1: 384}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (602112, 1)
op238.sizes = ([8, 384, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op238_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf235', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf236', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg135_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg136_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, add_1, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 589824}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf239', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf239', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg138_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg138_1', c1, {c0: 3072, c1: 192}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (589824, 1)
op240.sizes = ([3072, 192], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op240_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf239', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg138_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf239', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg138_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf240', get_index_6, mul_1, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 4704}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op242.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 24, c1: 196}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (4704, 128)
op242.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op242_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 4704}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op243.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 24, c1: 196}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (4704, 128)
op243.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op243_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, getitem_1)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 4704}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op244.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 24, c1: 196}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (4704, 128)
op244.sizes = ([24, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op244_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem_2)
        return store_reduction


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1568}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf242', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf243', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf244', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1568, 3)
op245.sizes = ([8, 196], [3])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op245_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem)
        return store_reduction


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1568}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf243', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf244', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1568, 3)
op246.sizes = ([8, 196], [3])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_3, getitem_1)
        return store_reduction


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 602112}, None),
        MemoryDep('buf241', c0, {c0: 602112}, None),
        MemoryDep('buf245', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf246', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg141_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg142_1', c1, {c0: 8, c1: 384}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (602112, 1)
op248.sizes = ([8, 384, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf245', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf246', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg141_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf248', get_index_7, add_3, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 1204224}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf249', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf249', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg144_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 768}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (1204224, 1)
op250.sizes = ([1568, 768], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op250_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf249', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf249', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg144_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf250', get_index_6, mul_1, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 602112}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 602112}, None),
        MemoryDep('buf241', c0, {c0: 602112}, None),
        MemoryDep('buf251', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 384}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (602112, 1)
op252.sizes = ([8, 384, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf251', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg146_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 4704}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (4704, 128)
op253.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op253_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
        return store_reduction


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 4704}, None)]
op254.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (4704, 128)
op254.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op254_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
        return store_reduction


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 4704}, None)]
op255.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (4704, 128)
op255.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op255_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_1, getitem_2)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 1568}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf253', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf254', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf255', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1568, 3)
op256.sizes = ([8, 196], [3])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_3, getitem)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1568}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf253', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf254', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf255', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1568, 3)
op257.sizes = ([8, 196], [3])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem_1)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 602112}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 602112}, None),
        MemoryDep('buf256', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf257', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg148_1', c1, {c0: 8, c1: 384}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (602112, 1)
op259.sizes = ([8, 384, 196], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf256', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf257', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg147_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg148_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf259', get_index_5, add_1, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 589824}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf260', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf260', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg150_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg150_1', c1, {c0: 3072, c1: 192}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (589824, 1)
op261.sizes = ([3072, 192], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op261_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf260', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg150_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf260', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg150_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf261', get_index_6, mul_1, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 4704}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf262', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op263.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 24, c1: 196}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (4704, 128)
op263.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf262_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op263_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 4704}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf262', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op264.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 24, c1: 196}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (4704, 128)
op264.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf262_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op264_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 4704}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf262', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op265.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 24, c1: 196}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (4704, 128)
op265.sizes = ([24, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf262_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op265_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf265', get_index_3, getitem_2)
        return store_reduction


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 1568}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf263', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf264', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf265', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf266.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (1568, 3)
op266.sizes = ([8, 196], [3])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf264', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf265', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf266', get_index_3, getitem)
        return store_reduction


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1568}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf263', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf264', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf265', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf267.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (1568, 3)
op267.sizes = ([8, 196], [3])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op267_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf264', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf265', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf267', get_index_3, getitem_1)
        return store_reduction


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op269.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None),
        MemoryDep('buf266', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf267', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op269.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg153_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg154_1', c1, {c0: 8, c1: 384}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (602112, 1)
op269.sizes = ([8, 384, 196], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf262_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op269_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf266', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf267', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg153_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg154_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf269', get_index_7, add_3, None)
        return store


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.mm


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 1204224}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf270', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf270', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg156_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 768}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (1204224, 1)
op271.sizes = ([1568, 768], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op271_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf270', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf270', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg156_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf271', get_index_6, mul_1, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 602112}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 602112}, None),
        MemoryDep('buf262', c0, {c0: 602112}, None),
        MemoryDep('buf272', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 384}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (602112, 1)
op273.sizes = ([8, 384, 196], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf262_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf272', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg158_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf273', get_index_5, add_3, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 4704}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (4704, 128)
op274.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op274_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_1, getitem)
        return store_reduction


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 4704}, None)]
op275.unmet_dependencies = [MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (4704, 128)
op275.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op275_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf275', get_index_1, getitem_1)
        return store_reduction


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 4704}, None)]
op276.unmet_dependencies = [MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (4704, 128)
op276.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op276_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_1, getitem_2)
        return store_reduction


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 1568}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf274', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf275', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf276', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf277.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (1568, 3)
op277.sizes = ([8, 196], [3])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf276', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_3, getitem)
        return store_reduction


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1568}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf274', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf275', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf276', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf278.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (1568, 3)
op278.sizes = ([8, 196], [3])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf276', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_3, getitem_1)
        return store_reduction


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 602112}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 602112}, None),
        MemoryDep('buf277', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf278', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op280.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg160_1', c1, {c0: 8, c1: 384}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (602112, 1)
op280.sizes = ([8, 384, 196], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf277', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf278', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf280', get_index_5, add_1, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 589824}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf281', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf281', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg162_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg162_1', c1, {c0: 3072, c1: 192}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (589824, 1)
op282.sizes = ([3072, 192], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op282_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf281', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg162_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf281', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg162_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf282', get_index_6, mul_1, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 4704}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf283', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op284.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 24, c1: 196}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (4704, 128)
op284.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf283_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op284_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem)
        return store_reduction


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 4704}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf283', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op285.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 24, c1: 196}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (4704, 128)
op285.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf283_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op285_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, getitem_1)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 4704}, None)]
op286.unmet_dependencies = 
    [   MemoryDep('buf273', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf283', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op286.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 24, c1: 196}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (4704, 128)
op286.sizes = ([24, 196], [128])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf283_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op286_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf286', get_index_3, getitem_2)
        return store_reduction


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 1568}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf284', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf285', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf286', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf287.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (1568, 3)
op287.sizes = ([8, 196], [3])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op287_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf285', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf287', get_index_3, getitem)
        return store_reduction


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1568}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf284', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf285', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf286', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (1568, 3)
op288.sizes = ([8, 196], [3])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op288_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf285', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem_1)
        return store_reduction


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 602112}, None),
        MemoryDep('buf283', c0, {c0: 602112}, None),
        MemoryDep('buf287', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf288', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op290.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg165_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 384}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (602112, 1)
op290.sizes = ([8, 384, 196], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf283_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op290_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf287', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf288', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg165_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg166_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf290', get_index_7, add_3, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 1204224}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf291', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf291', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg168_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 768}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (1204224, 1)
op292.sizes = ([1568, 768], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op292_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf291', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg168_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf291', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg168_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf292', get_index_6, mul_1, None)
        return store


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.node.kernel = extern_kernels.mm


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 602112}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 602112}, None),
        MemoryDep('buf283', c0, {c0: 602112}, None),
        MemoryDep('buf293', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op294.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg170_1', c1, {c0: 8, c1: 384}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (602112, 1)
op294.sizes = ([8, 384, 196], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf283_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op294_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf293', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg170_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf294', get_index_5, add_3, None)
        return store


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 4704}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (4704, 128)
op295.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op295_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem)
        return store_reduction


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 4704}, None)]
op296.unmet_dependencies = [MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (4704, 128)
op296.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op296_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf296', get_index_1, getitem_1)
        return store_reduction


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 4704}, None)]
op297.unmet_dependencies = [MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op297.group.device = cuda:0
op297.group.iteration = (4704, 128)
op297.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op297_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf297', get_index_1, getitem_2)
        return store_reduction


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 1568}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf295', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf296', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf297', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf298.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (1568, 3)
op298.sizes = ([8, 196], [3])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf296', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf298', get_index_3, getitem)
        return store_reduction


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 1568}, None)]
op299.unmet_dependencies = 
    [   MemoryDep('buf295', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf296', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf297', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf299.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (1568, 3)
op299.sizes = ([8, 196], [3])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op299_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf296', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf299', get_index_3, getitem_1)
        return store_reduction


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 602112}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 602112}, None),
        MemoryDep('buf298', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf299', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op301.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 384}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (602112, 1)
op301.sizes = ([8, 384, 196], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op301_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf298', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf299', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg171_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg172_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf301', get_index_5, add_1, None)
        return store


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf301', mode=None)]
op302.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.mm


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 589824}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf302', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf302', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op303.met_dependencies = 
    [   MemoryDep('arg174_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg174_1', c1, {c0: 3072, c1: 192}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (589824, 1)
op303.sizes = ([3072, 192], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op303_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf302', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg174_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf302', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg174_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf303', get_index_6, mul_1, None)
        return store


op304: ExternKernelSchedulerNode(ExternKernelOut)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op304.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op304.outputs = [
    buf304: ExternKernelOut
    buf304.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf304.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op304.node.kernel = extern_kernels.mm


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 4704}, None)]
op305.unmet_dependencies = 
    [   MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf304', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op305.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 24, c1: 196}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (4704, 128)
op305.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf304_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op305_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf305', get_index_3, getitem)
        return store_reduction


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 4704}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf304', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op306.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 24, c1: 196}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (4704, 128)
op306.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf304_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op306_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf306', get_index_3, getitem_1)
        return store_reduction


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 4704}, None)]
op307.unmet_dependencies = 
    [   MemoryDep('buf294', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf304', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op307.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 24, c1: 196}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (4704, 128)
op307.sizes = ([24, 196], [128])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf304_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op307_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf307', get_index_3, getitem_2)
        return store_reduction


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1568}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf305', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf306', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf307', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf308.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1568, 3)
op308.sizes = ([8, 196], [3])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf307', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf308', get_index_3, getitem)
        return store_reduction


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 1568}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf305', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf306', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf307', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (1568, 3)
op309.sizes = ([8, 196], [3])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op309_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf306', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf307', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_3, getitem_1)
        return store_reduction


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 602112}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None),
        MemoryDep('buf308', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf309', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op311.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg177_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 384}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (602112, 1)
op311.sizes = ([8, 384, 196], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf304_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf308', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf309', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg177_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg178_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf311', get_index_7, add_3, None)
        return store


op312: ExternKernelSchedulerNode(ExternKernelOut)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf311', mode=None)]
op312.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op312.outputs = [
    buf312: ExternKernelOut
    buf312.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.node.kernel = extern_kernels.mm


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1204224}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf312', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf312', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op313.met_dependencies = 
    [   MemoryDep('arg180_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg180_1', c1, {c0: 1568, c1: 768}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (1204224, 1)
op313.sizes = ([1568, 768], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op313_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf312', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg180_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf312', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg180_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf313', get_index_6, mul_1, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 602112}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 602112}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None),
        MemoryDep('buf314', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg182_1', c1, {c0: 8, c1: 384}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (602112, 1)
op315.sizes = ([8, 384, 196], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf304_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op315_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg176_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf314', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg182_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf315', get_index_5, add_3, None)
        return store


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 4704}, None)]
op316.unmet_dependencies = [MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (4704, 128)
op316.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op316_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf316', get_index_1, getitem)
        return store_reduction


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 4704}, None)]
op317.unmet_dependencies = [MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (4704, 128)
op317.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op317_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf317', get_index_1, getitem_1)
        return store_reduction


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 4704}, None)]
op318.unmet_dependencies = [MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (4704, 128)
op318.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op318_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf318', get_index_1, getitem_2)
        return store_reduction


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 1568}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf316', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf317', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf318', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf319.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (1568, 3)
op319.sizes = ([8, 196], [3])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op319_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf318', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf319', get_index_3, getitem)
        return store_reduction


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1568}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf316', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf317', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf318', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf320.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1568, 3)
op320.sizes = ([8, 196], [3])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf318', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf320', get_index_3, getitem_1)
        return store_reduction


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 602112}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 602112}, None),
        MemoryDep('buf319', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf320', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op322.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg184_1', c1, {c0: 8, c1: 384}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (602112, 1)
op322.sizes = ([8, 384, 196], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op322_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf319', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf320', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg183_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg184_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf322', get_index_5, add_1, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = extern_kernels.mm


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 589824}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf323', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf323', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg186_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg186_1', c1, {c0: 3072, c1: 192}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (589824, 1)
op324.sizes = ([3072, 192], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op324_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf323', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg186_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf324', get_index_6, mul_1, None)
        return store


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
    ]
]
op325.node.kernel = extern_kernels.mm


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 4704}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf325', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op326.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 24, c1: 196}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (4704, 128)
op326.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf325_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op326_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf326', get_index_3, getitem)
        return store_reduction


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 4704}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf325', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op327.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 24, c1: 196}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op327.group.device = cuda:0
op327.group.iteration = (4704, 128)
op327.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf325_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op327_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf327', get_index_3, getitem_1)
        return store_reduction


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 4704}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf315', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf325', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op328.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 24, c1: 196}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (4704, 128)
op328.sizes = ([24, 196], [128])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf325_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op328_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf328', get_index_3, getitem_2)
        return store_reduction


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 1568}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf326', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf327', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf328', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf329.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (1568, 3)
op329.sizes = ([8, 196], [3])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf327', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf328', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf329', get_index_3, getitem)
        return store_reduction


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 1568}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf326', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf327', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf328', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf330.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (1568, 3)
op330.sizes = ([8, 196], [3])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf327', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf328', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf330', get_index_3, getitem_1)
        return store_reduction


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 602112}, None),
        MemoryDep('buf325', c0, {c0: 602112}, None),
        MemoryDep('buf329', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf330', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg190_1', c1, {c0: 8, c1: 384}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (602112, 1)
op332.sizes = ([8, 384, 196], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf325_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op332_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf329', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf330', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg189_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg190_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf332', get_index_7, add_3, None)
        return store


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.node.kernel = extern_kernels.mm


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 1204224}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf333', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf333', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op334.met_dependencies = 
    [   MemoryDep('arg192_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg192_1', c1, {c0: 1568, c1: 768}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (1204224, 1)
op334.sizes = ([1568, 768], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op334_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf333', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg192_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf333', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg192_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf334', get_index_6, mul_1, None)
        return store


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf335.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.node.kernel = extern_kernels.mm


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 602112}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 602112}, None),
        MemoryDep('buf325', c0, {c0: 602112}, None),
        MemoryDep('buf335', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op336.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg194_1', c1, {c0: 8, c1: 384}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
    ]
]
op336.group.device = cuda:0
op336.group.iteration = (602112, 1)
op336.sizes = ([8, 384, 196], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf325_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op336_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf325', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf335', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg194_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf336', get_index_5, add_3, None)
        return store


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 4704}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (4704, 128)
op337.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op337_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf337', get_index_1, getitem)
        return store_reduction


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 4704}, None)]
op338.unmet_dependencies = [MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (4704, 128)
op338.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op338_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf338', get_index_1, getitem_1)
        return store_reduction


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 4704}, None)]
op339.unmet_dependencies = [MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (4704, 128)
op339.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op339_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf339', get_index_1, getitem_2)
        return store_reduction


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1568}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf337', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf338', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf339', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1568, 3)
op340.sizes = ([8, 196], [3])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op340_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf339', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem)
        return store_reduction


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 1568}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf337', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf338', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf339', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (1568, 3)
op341.sizes = ([8, 196], [3])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf339', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf341', get_index_3, getitem_1)
        return store_reduction


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 602112}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 602112}, None),
        MemoryDep('buf340', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf341', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 384}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (602112, 1)
op343.sizes = ([8, 384, 196], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op343_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf341', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg195_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg196_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, add_1, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = extern_kernels.mm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 589824}, None)]
op345.unmet_dependencies = 
    [   MemoryDep('buf344', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf344', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg198_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg198_1', c1, {c0: 3072, c1: 192}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (589824, 1)
op345.sizes = ([3072, 192], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op345_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg198_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf344', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg198_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf344', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg198_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf345', get_index_6, mul_1, None)
        return store


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf346.users = [
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
    ]
]
op346.node.kernel = extern_kernels.mm


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 4704}, None)]
op347.unmet_dependencies = 
    [   MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf346', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op347.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 24, c1: 196}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op347.group.device = cuda:0
op347.group.iteration = (4704, 128)
op347.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf346_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op347_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf346', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf347', get_index_3, getitem)
        return store_reduction


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 4704}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf346', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op348.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 24, c1: 196}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (4704, 128)
op348.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf346_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op348_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf346', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf348', get_index_3, getitem_1)
        return store_reduction


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 4704}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf336', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf346', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op349.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 24, c1: 196}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (4704, 128)
op349.sizes = ([24, 196], [128])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf346_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op349_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf346', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf349', get_index_3, getitem_2)
        return store_reduction


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 1568}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf347', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf348', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf349', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (1568, 3)
op350.sizes = ([8, 196], [3])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf348', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf349', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf350', get_index_3, getitem)
        return store_reduction


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 1568}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf347', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf348', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf349', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (1568, 3)
op351.sizes = ([8, 196], [3])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf348', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf349', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_3, getitem_1)
        return store_reduction


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 602112}, None),
        MemoryDep('buf346', c0, {c0: 602112}, None),
        MemoryDep('buf350', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf351', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op353.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg201_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg202_1', c1, {c0: 8, c1: 384}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (602112, 1)
op353.sizes = ([8, 384, 196], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf346_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op353_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf346', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf350', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf351', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg201_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg202_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf353', get_index_7, add_3, None)
        return store


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op354.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf354.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.node.kernel = extern_kernels.mm


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 1204224}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf354', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf354', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op355.met_dependencies = 
    [   MemoryDep('arg204_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 768}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (1204224, 1)
op355.sizes = ([1568, 768], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op355_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf354', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg204_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf354', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg204_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf355', get_index_6, mul_1, None)
        return store


op356: ExternKernelSchedulerNode(ExternKernelOut)
op356.writes = [StarDep(name='buf356', mode=None)]
op356.unmet_dependencies = [StarDep(name='buf355', mode=None)]
op356.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op356.outputs = [
    buf356: ExternKernelOut
    buf356.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.node.kernel = extern_kernels.mm


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 602112}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 602112}, None),
        MemoryDep('buf346', c0, {c0: 602112}, None),
        MemoryDep('buf356', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op357.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg206_1', c1, {c0: 8, c1: 384}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (602112, 1)
op357.sizes = ([8, 384, 196], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf346_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf346', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg200_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf356', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg206_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf357', get_index_5, add_3, None)
        return store


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 4704}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (4704, 128)
op358.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op358_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf358', get_index_1, getitem)
        return store_reduction


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 4704}, None)]
op359.unmet_dependencies = [MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
    ]
]
op359.group.device = cuda:0
op359.group.iteration = (4704, 128)
op359.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op359_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf359', get_index_1, getitem_1)
        return store_reduction


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 4704}, None)]
op360.unmet_dependencies = [MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
    ]
]
op360.group.device = cuda:0
op360.group.iteration = (4704, 128)
op360.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op360_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf360', get_index_1, getitem_2)
        return store_reduction


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 1568}, None)]
op361.unmet_dependencies = 
    [   MemoryDep('buf358', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf359', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf360', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf361.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (1568, 3)
op361.sizes = ([8, 196], [3])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op361_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf359', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf361', get_index_3, getitem)
        return store_reduction


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 1568}, None)]
op362.unmet_dependencies = 
    [   MemoryDep('buf358', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf359', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf360', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf362.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (1568, 3)
op362.sizes = ([8, 196], [3])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf359', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf362', get_index_3, getitem_1)
        return store_reduction


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 602112}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf361', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf362', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg208_1', c1, {c0: 8, c1: 384}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (602112, 1)
op364.sizes = ([8, 384, 196], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op364_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf361', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf362', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg207_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg208_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf364', get_index_5, add_1, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 589824}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf365', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf365', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op366.met_dependencies = 
    [   MemoryDep('arg210_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg210_1', c1, {c0: 3072, c1: 192}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (589824, 1)
op366.sizes = ([3072, 192], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op366_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf365', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg210_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf365', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg210_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf366', get_index_6, mul_1, None)
        return store


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
    ]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 4704}, None)]
op368.unmet_dependencies = 
    [   MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf367', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op368.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 24, c1: 196}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (4704, 128)
op368.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf367_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op368_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf368', get_index_3, getitem)
        return store_reduction


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 4704}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf367', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op369.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 24, c1: 196}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf369.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op369.group.device = cuda:0
op369.group.iteration = (4704, 128)
op369.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf367_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op369_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf369', get_index_3, getitem_1)
        return store_reduction


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 4704}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf357', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf367', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op370.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 24, c1: 196}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (4704, 128)
op370.sizes = ([24, 196], [128])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf367_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op370_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf370', get_index_3, getitem_2)
        return store_reduction


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1568}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf368', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf369', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf370', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf371.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (1568, 3)
op371.sizes = ([8, 196], [3])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op371_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf370', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_3, getitem)
        return store_reduction


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1568}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf368', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf369', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf370', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf372.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (1568, 3)
op372.sizes = ([8, 196], [3])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf370', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf372', get_index_3, getitem_1)
        return store_reduction


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf367', c0, {c0: 602112}, None),
        MemoryDep('buf371', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf372', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg213_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg214_1', c1, {c0: 8, c1: 384}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (602112, 1)
op374.sizes = ([8, 384, 196], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf367_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op374_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf371', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf372', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg213_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg214_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf374', get_index_7, add_3, None)
        return store


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.node.kernel = extern_kernels.mm


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 1204224}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf375', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf375', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op376.met_dependencies = 
    [   MemoryDep('arg216_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg216_1', c1, {c0: 1568, c1: 768}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (1204224, 1)
op376.sizes = ([1568, 768], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op376_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf375', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf375', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg216_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf376', get_index_6, mul_1, None)
        return store


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.node.kernel = extern_kernels.mm


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 602112}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf357', c0, {c0: 602112}, None),
        MemoryDep('buf367', c0, {c0: 602112}, None),
        MemoryDep('buf377', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op378.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg218_1', c1, {c0: 8, c1: 384}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (602112, 1)
op378.sizes = ([8, 384, 196], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf367_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf377', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg218_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf378', get_index_5, add_3, None)
        return store


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 4704}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (4704, 128)
op379.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op379_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf379', get_index_1, getitem)
        return store_reduction


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 4704}, None)]
op380.unmet_dependencies = [MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf380.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (4704, 128)
op380.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op380_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf380', get_index_1, getitem_1)
        return store_reduction


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 4704}, None)]
op381.unmet_dependencies = [MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (4704, 128)
op381.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op381_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf381', get_index_1, getitem_2)
        return store_reduction


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 1568}, None)]
op382.unmet_dependencies = 
    [   MemoryDep('buf379', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf380', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf381', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf382.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1568, 3)
op382.sizes = ([8, 196], [3])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op382_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf382', get_index_3, getitem)
        return store_reduction


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1568}, None)]
op383.unmet_dependencies = 
    [   MemoryDep('buf379', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf380', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf381', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (1568, 3)
op383.sizes = ([8, 196], [3])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op383_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf380', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf383', get_index_3, getitem_1)
        return store_reduction


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 602112}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 602112}, None),
        MemoryDep('buf382', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf383', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op385.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 384}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (602112, 1)
op385.sizes = ([8, 384, 196], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op385_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf383', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf385', get_index_5, add_1, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 589824}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf386', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf386', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg222_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg222_1', c1, {c0: 3072, c1: 192}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (589824, 1)
op387.sizes = ([3072, 192], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op387_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf386', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg222_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf386', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg222_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf387', get_index_6, mul_1, None)
        return store


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op388.node.kernel = extern_kernels.mm


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 4704}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf388', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op389.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 24, c1: 196}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf389.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op389.group.device = cuda:0
op389.group.iteration = (4704, 128)
op389.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf388_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op389_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf389', get_index_3, getitem)
        return store_reduction


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 4704}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf388', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op390.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 24, c1: 196}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf390.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op390.group.device = cuda:0
op390.group.iteration = (4704, 128)
op390.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf388_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op390_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf390', get_index_3, getitem_1)
        return store_reduction


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 4704}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf378', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf388', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op391.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 24, c1: 196}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (4704, 128)
op391.sizes = ([24, 196], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf388_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op391_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf391', get_index_3, getitem_2)
        return store_reduction


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 1568}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf389', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf390', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf391', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf392.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (1568, 3)
op392.sizes = ([8, 196], [3])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op392_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf390', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf391', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf392', get_index_3, getitem)
        return store_reduction


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 1568}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf389', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf390', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf391', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf393.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (1568, 3)
op393.sizes = ([8, 196], [3])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op393_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf390', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf391', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf393', get_index_3, getitem_1)
        return store_reduction


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op395.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 602112}, None),
        MemoryDep('buf388', c0, {c0: 602112}, None),
        MemoryDep('buf392', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf393', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op395.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg225_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (602112, 1)
op395.sizes = ([8, 384, 196], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf388_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op395_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf392', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf393', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg225_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg226_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf395', get_index_7, add_3, None)
        return store


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf396.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op396.node.kernel = extern_kernels.mm


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 1204224}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf396', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf396', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op397.met_dependencies = 
    [   MemoryDep('arg228_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 768}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (1204224, 1)
op397.sizes = ([1568, 768], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op397_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf396', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg228_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf396', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg228_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf397', get_index_6, mul_1, None)
        return store


op398: ExternKernelSchedulerNode(ExternKernelOut)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf397', mode=None)]
op398.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op398.outputs = [
    buf398: ExternKernelOut
    buf398.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.node.kernel = extern_kernels.mm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 602112}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 602112}, None),
        MemoryDep('buf388', c0, {c0: 602112}, None),
        MemoryDep('buf398', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 384}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf399.users = [
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
    ]
]
op399.group.device = cuda:0
op399.group.iteration = (602112, 1)
op399.sizes = ([8, 384, 196], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf388_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf398', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg230_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf399', get_index_5, add_3, None)
        return store


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 4704}, None)]
op400.unmet_dependencies = [MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf400.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
    ]
]
op400.group.device = cuda:0
op400.group.iteration = (4704, 128)
op400.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op400_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf400', get_index_1, getitem)
        return store_reduction


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 4704}, None)]
op401.unmet_dependencies = [MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
    ]
]
op401.group.device = cuda:0
op401.group.iteration = (4704, 128)
op401.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op401_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf401', get_index_1, getitem_1)
        return store_reduction


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 4704}, None)]
op402.unmet_dependencies = [MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf402.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
    ]
]
op402.group.device = cuda:0
op402.group.iteration = (4704, 128)
op402.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op402_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf402', get_index_1, getitem_2)
        return store_reduction


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 1568}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf400', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf401', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf402', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf403.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (1568, 3)
op403.sizes = ([8, 196], [3])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op403_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf403', get_index_3, getitem)
        return store_reduction


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 1568}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf400', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf401', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf402', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf404.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (1568, 3)
op404.sizes = ([8, 196], [3])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op404_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf401', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf404', get_index_3, getitem_1)
        return store_reduction


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 602112}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 602112}, None),
        MemoryDep('buf403', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf404', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op406.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg232_1', c1, {c0: 8, c1: 384}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (602112, 1)
op406.sizes = ([8, 384, 196], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf403', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf404', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg231_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg232_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf406', get_index_5, add_1, None)
        return store


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.node.kernel = extern_kernels.mm


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 589824}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf407', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf407', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op408.met_dependencies = 
    [   MemoryDep('arg234_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg234_1', c1, {c0: 3072, c1: 192}, None)]
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (589824, 1)
op408.sizes = ([3072, 192], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op408_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf407', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg234_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf407', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg234_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf408', get_index_6, mul_1, None)
        return store


op409: ExternKernelSchedulerNode(ExternKernelOut)
op409.writes = [StarDep(name='buf409', mode=None)]
op409.unmet_dependencies = [StarDep(name='buf408', mode=None)]
op409.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op409.outputs = [
    buf409: ExternKernelOut
    buf409.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
    ]
]
op409.node.kernel = extern_kernels.mm


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 4704}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf409', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op410.met_dependencies = [MemoryDep('arg236_1', c1, {c0: 24, c1: 196}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
    ]
]
op410.group.device = cuda:0
op410.group.iteration = (4704, 128)
op410.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf409_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op410_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf410', get_index_3, getitem)
        return store_reduction


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 4704}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf409', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op411.met_dependencies = [MemoryDep('arg236_1', c1, {c0: 24, c1: 196}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
    ]
]
op411.group.device = cuda:0
op411.group.iteration = (4704, 128)
op411.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf409_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op411_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf411', get_index_3, getitem_1)
        return store_reduction


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 4704}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf399', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf409', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op412.met_dependencies = [MemoryDep('arg236_1', c1, {c0: 24, c1: 196}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf412.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
    ]
]
op412.group.device = cuda:0
op412.group.iteration = (4704, 128)
op412.sizes = ([24, 196], [128])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf409_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op412_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf412', get_index_3, getitem_2)
        return store_reduction


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 1568}, None)]
op413.unmet_dependencies = 
    [   MemoryDep('buf410', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf411', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf412', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf413.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (1568, 3)
op413.sizes = ([8, 196], [3])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op413_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf411', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf412', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf413', get_index_3, getitem)
        return store_reduction


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 1568}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf410', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf411', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf412', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf414.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (1568, 3)
op414.sizes = ([8, 196], [3])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf411', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf412', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf414', get_index_3, getitem_1)
        return store_reduction


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 602112}, None),
        MemoryDep('buf409', c0, {c0: 602112}, None),
        MemoryDep('buf413', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf414', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg237_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg238_1', c1, {c0: 8, c1: 384}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (602112, 1)
op416.sizes = ([8, 384, 196], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf409_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op416_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf413', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf414', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg237_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg238_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf416', get_index_7, add_3, None)
        return store


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.node.kernel = extern_kernels.mm


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 1204224}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf417', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf417', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op418.met_dependencies = 
    [   MemoryDep('arg240_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg240_1', c1, {c0: 1568, c1: 768}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (1204224, 1)
op418.sizes = ([1568, 768], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op418_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf417', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg240_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf417', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg240_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf418', get_index_6, mul_1, None)
        return store


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf419.users = [NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.node.kernel = extern_kernels.mm


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 602112}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 602112}, None),
        MemoryDep('buf409', c0, {c0: 602112}, None),
        MemoryDep('buf419', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op420.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg242_1', c1, {c0: 8, c1: 384}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf420.users = [
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
    ]
]
op420.group.device = cuda:0
op420.group.iteration = (602112, 1)
op420.sizes = ([8, 384, 196], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf409_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op420_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf419', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg242_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf420', get_index_5, add_3, None)
        return store


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 4704}, None)]
op421.unmet_dependencies = [MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
    ]
]
op421.group.device = cuda:0
op421.group.iteration = (4704, 128)
op421.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op421_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf421', get_index_1, getitem)
        return store_reduction


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 4704}, None)]
op422.unmet_dependencies = [MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf422.users = [
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
    ]
]
op422.group.device = cuda:0
op422.group.iteration = (4704, 128)
op422.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op422_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf422', get_index_1, getitem_1)
        return store_reduction


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 4704}, None)]
op423.unmet_dependencies = [MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf423.users = [
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
    ]
]
op423.group.device = cuda:0
op423.group.iteration = (4704, 128)
op423.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op423_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf423', get_index_1, getitem_2)
        return store_reduction


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 1568}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf421', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf422', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf423', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf424.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (1568, 3)
op424.sizes = ([8, 196], [3])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op424_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf422', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf423', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf424', get_index_3, getitem)
        return store_reduction


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 1568}, None)]
op425.unmet_dependencies = 
    [   MemoryDep('buf421', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf422', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf423', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf425.users = [NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (1568, 3)
op425.sizes = ([8, 196], [3])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op425_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf422', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf423', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf425', get_index_3, getitem_1)
        return store_reduction


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 602112}, None)]
op427.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 602112}, None),
        MemoryDep('buf424', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf425', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op427.met_dependencies = 
    [   MemoryDep('arg243_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg244_1', c1, {c0: 8, c1: 384}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (602112, 1)
op427.sizes = ([8, 384, 196], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op427_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf425', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg243_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg244_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf427', get_index_5, add_1, None)
        return store


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf427', mode=None)]
op428.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 589824}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf428', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf428', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op429.met_dependencies = 
    [   MemoryDep('arg246_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg246_1', c1, {c0: 3072, c1: 192}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (589824, 1)
op429.sizes = ([3072, 192], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op429_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf428', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg246_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf428', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg246_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf429', get_index_6, mul_1, None)
        return store


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
    ]
]
op430.node.kernel = extern_kernels.mm


op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 4704}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf430', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op431.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 24, c1: 196}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (4704, 128)
op431.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf430_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op431_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf431', get_index_3, getitem)
        return store_reduction


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 4704}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf430', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op432.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 24, c1: 196}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (4704, 128)
op432.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf430_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op432_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf432', get_index_3, getitem_1)
        return store_reduction


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 4704}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf420', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf430', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op433.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 24, c1: 196}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op433.group.device = cuda:0
op433.group.iteration = (4704, 128)
op433.sizes = ([24, 196], [128])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf430_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op433_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf433', get_index_3, getitem_2)
        return store_reduction


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 1568}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf431', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf432', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf433', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf434.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (1568, 3)
op434.sizes = ([8, 196], [3])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op434_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf432', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf433', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf434', get_index_3, getitem)
        return store_reduction


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 1568}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf431', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf432', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf433', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf435.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (1568, 3)
op435.sizes = ([8, 196], [3])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op435_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf432', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf433', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf435', get_index_3, getitem_1)
        return store_reduction


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 602112}, None),
        MemoryDep('buf430', c0, {c0: 602112}, None),
        MemoryDep('buf434', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf435', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op437.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg249_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg250_1', c1, {c0: 8, c1: 384}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf437.users = [NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (602112, 1)
op437.sizes = ([8, 384, 196], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf430_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op437_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf434', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf435', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg249_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg250_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf437', get_index_7, add_3, None)
        return store


op438: ExternKernelSchedulerNode(ExternKernelOut)
op438.writes = [StarDep(name='buf438', mode=None)]
op438.unmet_dependencies = [StarDep(name='buf437', mode=None)]
op438.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op438.outputs = [
    buf438: ExternKernelOut
    buf438.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf438.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.node.kernel = extern_kernels.mm


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 1204224}, None)]
op439.unmet_dependencies = 
    [   MemoryDep('buf438', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf438', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op439.met_dependencies = 
    [   MemoryDep('arg252_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg252_1', c1, {c0: 1568, c1: 768}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (1204224, 1)
op439.sizes = ([1568, 768], [])
buf438_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op439_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf438', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg252_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf438', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg252_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf439', get_index_6, mul_1, None)
        return store


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf439', mode=None)]
op440.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf440.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op440.node.kernel = extern_kernels.mm


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 602112}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 602112}, None),
        MemoryDep('buf430', c0, {c0: 602112}, None),
        MemoryDep('buf440', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op441.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg254_1', c1, {c0: 8, c1: 384}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf441.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False),
    ]
]
op441.group.device = cuda:0
op441.group.iteration = (602112, 1)
op441.sizes = ([8, 384, 196], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf430_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf440', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg254_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf441', get_index_5, add_3, None)
        return store


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 4704}, None)]
op442.unmet_dependencies = [MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf442.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op442.group.device = cuda:0
op442.group.iteration = (4704, 128)
op442.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op442_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf442', get_index_1, getitem)
        return store_reduction


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 4704}, None)]
op443.unmet_dependencies = [MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf443.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op443.group.device = cuda:0
op443.group.iteration = (4704, 128)
op443.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op443_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf443', get_index_1, getitem_1)
        return store_reduction


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 4704}, None)]
op444.unmet_dependencies = [MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op444.group.device = cuda:0
op444.group.iteration = (4704, 128)
op444.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op444_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf444', get_index_1, getitem_2)
        return store_reduction


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 1568}, None)]
op445.unmet_dependencies = 
    [   MemoryDep('buf442', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf443', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf444', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf445.users = [NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (1568, 3)
op445.sizes = ([8, 196], [3])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op445_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf443', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf444', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf445', get_index_3, getitem)
        return store_reduction


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 1568}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf442', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf443', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf444', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf446.users = [NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (1568, 3)
op446.sizes = ([8, 196], [3])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op446_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf443', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf444', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf446', get_index_3, getitem_1)
        return store_reduction


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 602112}, None)]
op448.unmet_dependencies = 
    [   MemoryDep('buf441', c0, {c0: 602112}, None),
        MemoryDep('buf445', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf446', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op448.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 384}, None)]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf448.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (602112, 1)
op448.sizes = ([8, 384, 196], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op448_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf445', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf446', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg255_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg256_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf448', get_index_5, add_1, None)
        return store


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf448', mode=None)]
op449.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = extern_kernels.mm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 589824}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf449', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf449', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op450.met_dependencies = 
    [   MemoryDep('arg258_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg258_1', c1, {c0: 3072, c1: 192}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (589824, 1)
op450.sizes = ([3072, 192], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op450_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf449', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg258_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf449', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg258_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf450', get_index_6, mul_1, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.mm


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 4704}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf451', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op452.met_dependencies = [MemoryDep('arg260_1', c1, {c0: 24, c1: 196}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf452.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (4704, 128)
op452.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf451_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op452_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf452', get_index_3, getitem)
        return store_reduction


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 4704}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf451', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op453.met_dependencies = [MemoryDep('arg260_1', c1, {c0: 24, c1: 196}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (4704, 128)
op453.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf451_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op453_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf453', get_index_3, getitem_1)
        return store_reduction


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 4704}, None)]
op454.unmet_dependencies = 
    [   MemoryDep('buf441', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf451', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op454.met_dependencies = [MemoryDep('arg260_1', c1, {c0: 24, c1: 196}, None)]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (4704, 128)
op454.sizes = ([24, 196], [128])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf451_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op454_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf454', get_index_3, getitem_2)
        return store_reduction


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 1568}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf452', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf453', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf454', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf455.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (1568, 3)
op455.sizes = ([8, 196], [3])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op455_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf454', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf455', get_index_3, getitem)
        return store_reduction


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 1568}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf452', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf453', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf454', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf456.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (1568, 3)
op456.sizes = ([8, 196], [3])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op456_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf454', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf456', get_index_3, getitem_1)
        return store_reduction


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op458.unmet_dependencies = 
    [   MemoryDep('buf441', c0, {c0: 602112}, None),
        MemoryDep('buf451', c0, {c0: 602112}, None),
        MemoryDep('buf455', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf456', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op458.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg261_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg262_1', c1, {c0: 8, c1: 384}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (602112, 1)
op458.sizes = ([8, 384, 196], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf451_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op458_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf455', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf456', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg261_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg262_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf458', get_index_7, add_3, None)
        return store


op459: ExternKernelSchedulerNode(ExternKernelOut)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf458', mode=None)]
op459.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op459.outputs = [
    buf459: ExternKernelOut
    buf459.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.node.kernel = extern_kernels.mm


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 1204224}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf459', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf459', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op460.met_dependencies = 
    [   MemoryDep('arg264_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 768}, None)]
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (1204224, 1)
op460.sizes = ([1568, 768], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op460_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf459', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg264_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf459', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg264_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf460', get_index_6, mul_1, None)
        return store


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf461.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.node.kernel = extern_kernels.mm


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 602112}, None)]
op462.unmet_dependencies = 
    [   MemoryDep('buf441', c0, {c0: 602112}, None),
        MemoryDep('buf451', c0, {c0: 602112}, None),
        MemoryDep('buf461', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op462.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg266_1', c1, {c0: 8, c1: 384}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op462.group.device = cuda:0
op462.group.iteration = (602112, 1)
op462.sizes = ([8, 384, 196], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf451_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op462_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf461', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg266_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf462', get_index_5, add_3, None)
        return store


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 4704}, None)]
op463.unmet_dependencies = [MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
    ]
]
op463.group.device = cuda:0
op463.group.iteration = (4704, 128)
op463.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op463_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf463', get_index_1, getitem)
        return store_reduction


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 4704}, None)]
op464.unmet_dependencies = [MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf464.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
    ]
]
op464.group.device = cuda:0
op464.group.iteration = (4704, 128)
op464.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op464_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf464', get_index_1, getitem_1)
        return store_reduction


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 4704}, None)]
op465.unmet_dependencies = [MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf465.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
    ]
]
op465.group.device = cuda:0
op465.group.iteration = (4704, 128)
op465.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op465_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf465', get_index_1, getitem_2)
        return store_reduction


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 1568}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf463', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf464', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf465', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf466.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (1568, 3)
op466.sizes = ([8, 196], [3])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op466_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf464', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf465', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf466', get_index_3, getitem)
        return store_reduction


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 1568}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf463', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf464', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf465', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf467.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (1568, 3)
op467.sizes = ([8, 196], [3])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op467_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf464', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf465', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf467', get_index_3, getitem_1)
        return store_reduction


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 602112}, None)]
op469.unmet_dependencies = 
    [   MemoryDep('buf462', c0, {c0: 602112}, None),
        MemoryDep('buf466', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf467', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op469.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg268_1', c1, {c0: 8, c1: 384}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (602112, 1)
op469.sizes = ([8, 384, 196], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op469_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf467', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg267_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg268_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf469', get_index_5, add_1, None)
        return store


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.mm


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 589824}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf470', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf470', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op471.met_dependencies = 
    [   MemoryDep('arg270_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg270_1', c1, {c0: 3072, c1: 192}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (589824, 1)
op471.sizes = ([3072, 192], [])
buf470_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op471_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf470', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf470', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg270_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf470', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg270_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf471', get_index_6, mul_1, None)
        return store


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf472.users = [
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op472.node.kernel = extern_kernels.mm


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 4704}, None)]
op473.unmet_dependencies = 
    [   MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf472', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op473.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 24, c1: 196}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (4704, 128)
op473.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf472_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op473_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf473', get_index_3, getitem)
        return store_reduction


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 4704}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf472', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op474.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 24, c1: 196}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf474.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
    ]
]
op474.group.device = cuda:0
op474.group.iteration = (4704, 128)
op474.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf472_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op474_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf474', get_index_3, getitem_1)
        return store_reduction


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 4704}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf462', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf472', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op475.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 24, c1: 196}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
    ]
]
op475.group.device = cuda:0
op475.group.iteration = (4704, 128)
op475.sizes = ([24, 196], [128])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf472_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op475_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf475', get_index_3, getitem_2)
        return store_reduction


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 1568}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf473', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf474', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf475', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op476.met_dependencies = []
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf476.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (1568, 3)
op476.sizes = ([8, 196], [3])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op476_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf475', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf476', get_index_3, getitem)
        return store_reduction


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 1568}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf473', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf474', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf475', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op477.met_dependencies = []
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (1568, 3)
op477.sizes = ([8, 196], [3])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf475', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf477', get_index_3, getitem_1)
        return store_reduction


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf462', c0, {c0: 602112}, None),
        MemoryDep('buf472', c0, {c0: 602112}, None),
        MemoryDep('buf476', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf477', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op479.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg273_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg274_1', c1, {c0: 8, c1: 384}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (602112, 1)
op479.sizes = ([8, 384, 196], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf472_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op479_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf476', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf477', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg273_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg274_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf479', get_index_7, add_3, None)
        return store


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op480.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = extern_kernels.mm


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 1204224}, None)]
op481.unmet_dependencies = 
    [   MemoryDep('buf480', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf480', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op481.met_dependencies = 
    [   MemoryDep('arg276_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg276_1', c1, {c0: 1568, c1: 768}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf481.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (1204224, 1)
op481.sizes = ([1568, 768], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op481_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf480', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg276_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf480', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg276_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf481', get_index_6, mul_1, None)
        return store


op482: ExternKernelSchedulerNode(ExternKernelOut)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf481', mode=None)]
op482.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op482.outputs = [
    buf482: ExternKernelOut
    buf482.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf482.users = [NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.node.kernel = extern_kernels.mm


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 602112}, None)]
op483.unmet_dependencies = 
    [   MemoryDep('buf462', c0, {c0: 602112}, None),
        MemoryDep('buf472', c0, {c0: 602112}, None),
        MemoryDep('buf482', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op483.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg278_1', c1, {c0: 8, c1: 384}, None)]
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (602112, 1)
op483.sizes = ([8, 384, 196], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf472_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op483_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf482', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg278_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf483', get_index_5, add_3, None)
        return store


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 4704}, None)]
op484.unmet_dependencies = [MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (4704, 128)
op484.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op484_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_1, getitem)
        return store_reduction


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 4704}, None)]
op485.unmet_dependencies = [MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf485.users = [
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
    ]
]
op485.group.device = cuda:0
op485.group.iteration = (4704, 128)
op485.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op485_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf485', get_index_1, getitem_1)
        return store_reduction


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 4704}, None)]
op486.unmet_dependencies = [MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf486.users = [
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
    ]
]
op486.group.device = cuda:0
op486.group.iteration = (4704, 128)
op486.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op486_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf486', get_index_1, getitem_2)
        return store_reduction


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 1568}, None)]
op487.unmet_dependencies = 
    [   MemoryDep('buf484', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf485', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf486', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op487.met_dependencies = []
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf487.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (1568, 3)
op487.sizes = ([8, 196], [3])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op487_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf485', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf486', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf487', get_index_3, getitem)
        return store_reduction


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 1568}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf484', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf485', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf486', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf488.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (1568, 3)
op488.sizes = ([8, 196], [3])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op488_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf485', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf486', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf488', get_index_3, getitem_1)
        return store_reduction


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 602112}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 602112}, None),
        MemoryDep('buf487', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf488', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op490.met_dependencies = 
    [   MemoryDep('arg279_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg280_1', c1, {c0: 8, c1: 384}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (602112, 1)
op490.sizes = ([8, 384, 196], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 196], stride=[75264, 196, 1])
class op490_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf487', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf488', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf490', get_index_5, add_1, None)
        return store


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op491.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op491.node.kernel = extern_kernels.mm


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 589824}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf491', 384*c0 + c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('buf491', 384*c0 + c1, {c0: 3072, c1: 192}, None)]
op492.met_dependencies = 
    [   MemoryDep('arg282_1', c1 + 192, {c0: 3072, c1: 192}, None),
        MemoryDep('arg282_1', c1, {c0: 3072, c1: 192}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
    buf492.users = [NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (589824, 1)
op492.sizes = ([3072, 192], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[3072, 384], stride=[384, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 192], stride=[73728, 192, 1])
class op492_loop_body:
    var_ranges = {z0: 3072, z1: 192}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = 384*z0 + z1 + 192
    index3 = z1 + 192
    index4 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf491', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg282_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf491', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg282_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf492', get_index_6, mul_1, None)
        return store


op493: ExternKernelSchedulerNode(ExternKernelOut)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op493.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op493.outputs = [
    buf493: ExternKernelOut
    buf493.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
    ]
]
op493.node.kernel = extern_kernels.mm


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 4704}, None)]
op494.unmet_dependencies = 
    [   MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf493', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op494.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 24, c1: 196}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op494.group.device = cuda:0
op494.group.iteration = (4704, 128)
op494.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf493_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op494_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf493', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg284_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf494', get_index_3, getitem)
        return store_reduction


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 4704}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf493', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op495.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 24, c1: 196}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op495.group.device = cuda:0
op495.group.iteration = (4704, 128)
op495.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf493_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op495_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf493', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg284_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf495', get_index_3, getitem_1)
        return store_reduction


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 4704}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf483', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None),
        MemoryDep('buf493', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op496.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 24, c1: 196}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf496.users = [
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op496.group.device = cuda:0
op496.group.iteration = (4704, 128)
op496.sizes = ([24, 196], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf493_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op496_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf493', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg284_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf496', get_index_3, getitem_2)
        return store_reduction


op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 1568}, None)]
op497.unmet_dependencies = 
    [   MemoryDep('buf494', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf495', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf496', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf497.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (1568, 3)
op497.sizes = ([8, 196], [3])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op497_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf495', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf496', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf497', get_index_3, getitem)
        return store_reduction


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 1568}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf494', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf495', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf496', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op498.met_dependencies = []
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf498.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (1568, 3)
op498.sizes = ([8, 196], [3])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op498_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf495', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf496', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf498', get_index_3, getitem_1)
        return store_reduction


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op500.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 602112}, None),
        MemoryDep('buf493', c0, {c0: 602112}, None),
        MemoryDep('buf497', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf498', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op500.met_dependencies = 
    [   MemoryDep('arg284_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg285_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 8, c1: 384}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf500.users = [NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (602112, 1)
op500.sizes = ([8, 384, 196], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf493_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op500_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf493', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg284_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf497', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf498', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg285_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg286_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf500', get_index_7, add_3, None)
        return store


op501: ExternKernelSchedulerNode(ExternKernelOut)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op501.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op501.outputs = [
    buf501: ExternKernelOut
    buf501.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf501.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.node.kernel = extern_kernels.mm


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 1204224}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf501', 1536*c0 + c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('buf501', 1536*c0 + c1, {c0: 1568, c1: 768}, None)]
op502.met_dependencies = 
    [   MemoryDep('arg288_1', c1 + 768, {c0: 1568, c1: 768}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 768}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (1204224, 1)
op502.sizes = ([1568, 768], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op502_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 1536*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1 + 768
    index3 = z1 + 768
    index4 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf501', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg288_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf501', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg288_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid = ops.sigmoid(add_2)
        mul = ops.mul(add_1, sigmoid)
        mul_1 = ops.mul(add, mul)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf502', get_index_6, mul_1, None)
        return store


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf502', mode=None)]
op503.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf503.users = [NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = extern_kernels.mm


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 602112}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 602112}, None),
        MemoryDep('buf493', c0, {c0: 602112}, None),
        MemoryDep('buf503', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op504.met_dependencies = 
    [   MemoryDep('arg284_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg290_1', c1, {c0: 8, c1: 384}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf504.users = [
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
    ]
]
op504.group.device = cuda:0
op504.group.iteration = (602112, 1)
op504.sizes = ([8, 384, 196], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf493_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op504_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf493', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg284_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf503', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg290_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf504', get_index_5, add_3, None)
        return store


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 4704}, None)]
op505.unmet_dependencies = [MemoryDep('buf504', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op505.met_dependencies = []
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf505.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op505.group.device = cuda:0
op505.group.iteration = (4704, 128)
op505.sizes = ([24, 196], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op505_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf505', get_index_1, getitem)
        return store_reduction


op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 4704}, None)]
op506.unmet_dependencies = [MemoryDep('buf504', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf506.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (4704, 128)
op506.sizes = ([24, 196], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op506_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf506', get_index_1, getitem_1)
        return store_reduction


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 4704}, None)]
op507.unmet_dependencies = [MemoryDep('buf504', 25088*c0 + c1 + 196*c2, {c0: 24, c1: 196, c2: 128}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (4704, 128)
op507.sizes = ([24, 196], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
class op507_loop_body:
    var_ranges = {z0: 24, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf507', get_index_1, getitem_2)
        return store_reduction


op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 1568}, None)]
op508.unmet_dependencies = 
    [   MemoryDep('buf505', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf506', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf507', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf508.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (1568, 3)
op508.sizes = ([8, 196], [3])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op508_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf506', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf508', get_index_3, getitem)
        return store_reduction


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 1568}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf505', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf506', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None),
        MemoryDep('buf507', 588*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 3}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (1568, 3)
op509.sizes = ([8, 196], [3])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 1, 4704, 196])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op509_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3}
    index0 = 588*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf506', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf509', get_index_3, getitem_1)
        return store_reduction


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 3072}, None)]
op511.unmet_dependencies = 
    [   MemoryDep('buf504', c0, {c0: 602112}, None),
        MemoryDep('buf508', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf509', 196*c0 + c2, {c0: 8, c1: 384, c2: 196}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg291_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg292_1', c1, {c0: 8, c1: 384}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf511.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (3072, 196)
op511.sizes = ([8, 384], [196])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op511_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    index3 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf508', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf509', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg291_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg292_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf511', get_index_5, reduction)
        return store_reduction


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 3072}, None)]
op512.unmet_dependencies = [MemoryDep('buf511', c0, {c0: 3072}, None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (3072, 1)
op512.sizes = ([3072], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op512_loop_body:
    var_ranges = {z0: 3072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf512', get_index_1, truediv, None)
        return store


op513: ExternKernelSchedulerNode(ExternKernelOut)
op513.writes = [StarDep(name='buf513', mode=None)]
op513.unmet_dependencies = [StarDep(name='buf512', mode=None)]
op513.met_dependencies = [StarDep(name='arg293_1', mode=None), StarDep(name='arg294_1', mode=None)]
op513.outputs = [
    buf513: ExternKernelOut
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf513.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op513.node.kernel = extern_kernels.addmm



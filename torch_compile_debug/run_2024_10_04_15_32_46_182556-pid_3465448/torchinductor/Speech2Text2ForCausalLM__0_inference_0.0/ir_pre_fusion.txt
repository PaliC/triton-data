op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 32768}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 32768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (256, 128)
op0.sizes = ([256], [128])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
class op0_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        constant = ops.constant(1, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.int64, src_dtype = torch.int32)
        scan1 = self.scan1((torch.int64,), (to_dtype_1,))
        getitem = scan1[0]
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, getitem, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton.jit
    def _triton_helper_fn_add0(arg0_0, arg1_0):
        tmp0 = arg0_0 + arg1_0
        return tmp0

    @triton_heuristics.persistent_reduction(
        size_hints=[256, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 256
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.full([1, 1], 1, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.int32)
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tmp4.to(tl.int64)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp7, = tl.associative_scan((tmp6,), 1, _triton_helper_fn_add0)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp7, xmask)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 8388608}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 32768}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 32768}, None),
        MemoryDep('arg1_1', c1 + 256*tmp0, {c0: 32768, c1: 256}, None),
        MemoryDep('arg2_1', c1 + 256*tmp15, {c0: 32768, c1: 256}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (8388608, 1)
op1.sizes = ([32768, 256], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[10000, 256], stride=[256, 1])
buf0_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[1026, 256], stride=[256, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op1_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = z0
    index1 = 256*indirect0 + z1
    index2 = 256*indirect1 + z1
    index3 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(16.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf0', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int32, src_dtype = torch.int64)
        constant_1 = ops.constant(0, torch.int32)
        add = ops.add(to_dtype, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg0_1', get_index_3)
        constant_2 = ops.constant(1, torch.int64)
        ne = ops.ne(load_3, constant_2)
        to_dtype_1 = ops.to_dtype(ne, torch.int32, src_dtype = torch.bool)
        mul_1 = ops.mul(add, to_dtype_1)
        to_dtype_2 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.int32)
        constant_3 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype_2, constant_3)
        set_indirect1 = self.set_indirect1(add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg2_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf1', get_index_5, add_2, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 256)
        x0 = xindex % 256
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 10000, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 10000), "index out of bounds: 0 <= tmp4 < 10000")
        tmp6 = tl.load(in_ptr1 + (x0 + (256*tmp4)), None)
        tmp7 = 16.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.full([1], 0, tl.int32)
        tmp12 = tmp10 + tmp11
        tmp13 = tl.full([1], 1, tl.int64)
        tmp14 = tmp0 != tmp13
        tmp15 = tmp14.to(tl.int32)
        tmp16 = tmp12 * tmp15
        tmp17 = tmp16.to(tl.int64)
        tmp18 = tmp17 + tmp13
        tmp19 = tl.full([XBLOCK], 1026, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 1026), "index out of bounds: 0 <= tmp22 < 1026")
        tmp24 = tl.load(in_ptr3 + (x0 + (256*tmp22)), None)
        tmp25 = tmp8 + tmp24
        tl.store(out_ptr0 + (x2), tmp25, None)


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='arg3_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.node.kernel = extern_kernels.mm


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op3.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 8388608}, None)]
op4.unmet_dependencies = [   MemoryDep('buf3', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op4.met_dependencies = [MemoryDep('arg6_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (8388608, 1)
op4.sizes = ([256, 4, 128, 64], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op4_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf4', get_index_2, add, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 8388608}, None)]
op5.unmet_dependencies = [   MemoryDep('buf2', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op5.met_dependencies = [MemoryDep('arg4_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (8388608, 1)
op5.sizes = ([256, 4, 128, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op5_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf5', get_index_2, mul, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.bmm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 131072}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 16777216}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (131072, 128)
op7.sizes = ([1024, 128], [128])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op7_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf7', get_index_3, reduction)
        return store_reduction
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 131072}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 16777216}, None),
        MemoryDep('buf7', c0, {c0: 131072}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf8.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (131072, 128)
op8.sizes = ([1024, 128], [128])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op8_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf7', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf8', get_index_4, reduction)
        return store_reduction
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op9.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.mm


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 8388608}, None)]
op10.unmet_dependencies = [   MemoryDep('buf9', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op10.met_dependencies = [MemoryDep('arg8_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (8388608, 1)
op10.sizes = ([256, 4, 128, 64], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op10_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf10', get_index_2, add, None)
        return store
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 16777216}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 16777216}, None),
        MemoryDep('buf7', c0, {c0: 131072}, None),
        MemoryDep('buf8', c0, {c0: 131072}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (16777216, 1)
op11.sizes = ([1024, 128, 128], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf11_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op11_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf7', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf8', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, truediv, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = extern_kernels.bmm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 8388608}, None)]
op13.unmet_dependencies = [   MemoryDep('buf12', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (8388608, 1)
op13.sizes = ([256, 128, 4, 64], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op13_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op14.node.kernel = extern_kernels.mm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 32768}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 8388608}, None),
        MemoryDep('buf14', c0, {c0: 8388608}, None)]
op15.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 32768, c1: 256}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf15.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (32768, 256)
op15.sizes = ([32768], [256])
buf1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op15_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg10_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_3, getitem)
        return store_reduction
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 32768}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 8388608}, None),
        MemoryDep('buf14', c0, {c0: 8388608}, None)]
op16.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 32768, c1: 256}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf16.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (32768, 256)
op16.sizes = ([32768], [256])
buf1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op16_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg10_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem_1)
        return store_reduction
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 8388608}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 8388608}, None),
        MemoryDep('buf14', c0, {c0: 8388608}, None),
        MemoryDep('buf15', c0, {c0: 32768}, None),
        MemoryDep('buf16', c0, {c0: 32768}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg11_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg12_1', c1, {c0: 32768, c1: 256}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (8388608, 1)
op18.sizes = ([32768, 256], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf16_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op18_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg10_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf15', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf16', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg11_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg12_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf18', get_index_7, add_3, None)
        return store
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 67108864}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 67108864}, None)]
op20.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 32768, c1: 2048}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (67108864, 1)
op20.sizes = ([32768, 2048], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op20_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf20', get_index_2, relu, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op21.node.kernel = extern_kernels.mm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 32768}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 8388608}, None),
        MemoryDep('buf21', c0, {c0: 8388608}, None)]
op22.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 32768, c1: 256}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf22.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (32768, 256)
op22.sizes = ([32768], [256])
buf18_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op22_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf21', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf22', get_index_3, getitem)
        return store_reduction
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 32768}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 8388608}, None),
        MemoryDep('buf21', c0, {c0: 8388608}, None)]
op23.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 32768, c1: 256}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (32768, 256)
op23.sizes = ([32768], [256])
buf18_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op23_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf21', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf23', get_index_3, getitem_1)
        return store_reduction
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 8388608}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 8388608}, None),
        MemoryDep('buf21', c0, {c0: 8388608}, None),
        MemoryDep('buf22', c0, {c0: 32768}, None),
        MemoryDep('buf23', c0, {c0: 32768}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg17_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg18_1', c1, {c0: 32768, c1: 256}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (8388608, 1)
op25.sizes = ([32768, 256], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op25_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf21', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf22', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf23', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf25', get_index_7, add_3, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.node.kernel = extern_kernels.mm


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op27.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 8388608}, None)]
op28.unmet_dependencies = [   MemoryDep('buf27', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op28.met_dependencies = [MemoryDep('arg22_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (8388608, 1)
op28.sizes = ([256, 4, 128, 64], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op28_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf28', get_index_2, add, None)
        return store
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 8388608}, None)]
op29.unmet_dependencies = [   MemoryDep('buf26', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op29.met_dependencies = [MemoryDep('arg20_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (8388608, 1)
op29.sizes = ([256, 4, 128, 64], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op29_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf29', get_index_2, mul, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None), StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.bmm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 131072}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 16777216}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (131072, 128)
op31.sizes = ([1024, 128], [128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op31_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf31', get_index_3, reduction)
        return store_reduction
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 131072}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 16777216}, None),
        MemoryDep('buf31', c0, {c0: 131072}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (131072, 128)
op32.sizes = ([1024, 128], [128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op32_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf31', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf32', get_index_4, reduction)
        return store_reduction
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op33.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 8388608}, None)]
op34.unmet_dependencies = [   MemoryDep('buf33', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op34.met_dependencies = [MemoryDep('arg24_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (8388608, 1)
op34.sizes = ([256, 4, 128, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op34_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf34', get_index_2, add, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 16777216}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 16777216}, None),
        MemoryDep('buf31', c0, {c0: 131072}, None),
        MemoryDep('buf32', c0, {c0: 131072}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (16777216, 1)
op35.sizes = ([1024, 128, 128], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf35_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op35_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf31', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf32', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, truediv, None)
        return store
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf34', mode=None), StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = extern_kernels.bmm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 8388608}, None)]
op37.unmet_dependencies = [   MemoryDep('buf36', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (8388608, 1)
op37.sizes = ([256, 128, 4, 64], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 32768}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 8388608}, None),
        MemoryDep('buf38', c0, {c0: 8388608}, None)]
op39.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 32768, c1: 256}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf39.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (32768, 256)
op39.sizes = ([32768], [256])
buf25_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op39_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg26_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf39', get_index_3, getitem)
        return store_reduction
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 32768}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 8388608}, None),
        MemoryDep('buf38', c0, {c0: 8388608}, None)]
op40.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 32768, c1: 256}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf40.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (32768, 256)
op40.sizes = ([32768], [256])
buf25_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op40_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg26_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem_1)
        return store_reduction
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 8388608}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 8388608}, None),
        MemoryDep('buf38', c0, {c0: 8388608}, None),
        MemoryDep('buf39', c0, {c0: 32768}, None),
        MemoryDep('buf40', c0, {c0: 32768}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg27_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg28_1', c1, {c0: 32768, c1: 256}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf42.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (8388608, 1)
op42.sizes = ([32768, 256], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf40_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op42_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg26_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf39', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf40', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg27_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg28_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf42', get_index_7, add_3, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 67108864}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 67108864}, None)]
op44.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 32768, c1: 2048}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (67108864, 1)
op44.sizes = ([32768, 2048], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op44_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf44', get_index_2, relu, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op45.node.kernel = extern_kernels.mm


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 32768}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 8388608}, None),
        MemoryDep('buf45', c0, {c0: 8388608}, None)]
op46.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 32768, c1: 256}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf46.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (32768, 256)
op46.sizes = ([32768], [256])
buf42_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op46_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf45', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf46', get_index_3, getitem)
        return store_reduction
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 32768}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 8388608}, None),
        MemoryDep('buf45', c0, {c0: 8388608}, None)]
op47.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 32768, c1: 256}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf47.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (32768, 256)
op47.sizes = ([32768], [256])
buf42_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op47_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf45', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem_1)
        return store_reduction
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 8388608}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 8388608}, None),
        MemoryDep('buf45', c0, {c0: 8388608}, None),
        MemoryDep('buf46', c0, {c0: 32768}, None),
        MemoryDep('buf47', c0, {c0: 32768}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 256}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf49.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (8388608, 1)
op49.sizes = ([32768, 256], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf47_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op49_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf45', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf46', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf47', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf49', get_index_7, add_3, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op51.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 8388608}, None)]
op52.unmet_dependencies = [   MemoryDep('buf51', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op52.met_dependencies = [MemoryDep('arg38_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (8388608, 1)
op52.sizes = ([256, 4, 128, 64], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op52_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf52', get_index_2, add, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 8388608}, None)]
op53.unmet_dependencies = [   MemoryDep('buf50', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op53.met_dependencies = [MemoryDep('arg36_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (8388608, 1)
op53.sizes = ([256, 4, 128, 64], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op53_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf53', get_index_2, mul, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf52', mode=None), StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
    ]
]
op54.node.kernel = extern_kernels.bmm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 131072}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 16777216}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (131072, 128)
op55.sizes = ([1024, 128], [128])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op55_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf55', get_index_3, reduction)
        return store_reduction
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 131072}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 16777216}, None),
        MemoryDep('buf55', c0, {c0: 131072}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (131072, 128)
op56.sizes = ([1024, 128], [128])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf56_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op56_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf55', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf56', get_index_4, reduction)
        return store_reduction
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op57.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 8388608}, None)]
op58.unmet_dependencies = [   MemoryDep('buf57', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op58.met_dependencies = [MemoryDep('arg40_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (8388608, 1)
op58.sizes = ([256, 4, 128, 64], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op58_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf58', get_index_2, add, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 16777216}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 16777216}, None),
        MemoryDep('buf55', c0, {c0: 131072}, None),
        MemoryDep('buf56', c0, {c0: 131072}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (16777216, 1)
op59.sizes = ([1024, 128, 128], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf56_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf59_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op59_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf55', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf56', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf59', get_index_5, truediv, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf58', mode=None), StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.node.kernel = extern_kernels.bmm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 8388608}, None)]
op61.unmet_dependencies = [   MemoryDep('buf60', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (8388608, 1)
op61.sizes = ([256, 128, 4, 64], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op61_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 32768}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 8388608}, None),
        MemoryDep('buf62', c0, {c0: 8388608}, None)]
op63.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 32768, c1: 256}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (32768, 256)
op63.sizes = ([32768], [256])
buf49_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op63_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem)
        return store_reduction
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 32768}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 8388608}, None),
        MemoryDep('buf62', c0, {c0: 8388608}, None)]
op64.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 32768, c1: 256}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (32768, 256)
op64.sizes = ([32768], [256])
buf49_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op64_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_3, getitem_1)
        return store_reduction
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 8388608}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 8388608}, None),
        MemoryDep('buf62', c0, {c0: 8388608}, None),
        MemoryDep('buf63', c0, {c0: 32768}, None),
        MemoryDep('buf64', c0, {c0: 32768}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 256}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (8388608, 1)
op66.sizes = ([32768, 256], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf64_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op66_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf63', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf64', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf66', get_index_7, add_3, None)
        return store
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 67108864}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 67108864}, None)]
op68.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 32768, c1: 2048}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (67108864, 1)
op68.sizes = ([32768, 2048], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op68_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf68', get_index_2, relu, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 32768}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 8388608}, None),
        MemoryDep('buf69', c0, {c0: 8388608}, None)]
op70.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 32768, c1: 256}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (32768, 256)
op70.sizes = ([32768], [256])
buf66_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op70_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem)
        return store_reduction
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 32768}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 8388608}, None),
        MemoryDep('buf69', c0, {c0: 8388608}, None)]
op71.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 32768, c1: 256}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (32768, 256)
op71.sizes = ([32768], [256])
buf66_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op71_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf71', get_index_3, getitem_1)
        return store_reduction
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 8388608}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 8388608}, None),
        MemoryDep('buf69', c0, {c0: 8388608}, None),
        MemoryDep('buf70', c0, {c0: 32768}, None),
        MemoryDep('buf71', c0, {c0: 32768}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg49_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg50_1', c1, {c0: 32768, c1: 256}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf73.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (8388608, 1)
op73.sizes = ([32768, 256], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf71_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op73_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf70', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf71', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg49_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg50_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf73', get_index_7, add_3, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op75.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.mm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 8388608}, None)]
op76.unmet_dependencies = [   MemoryDep('buf75', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op76.met_dependencies = [MemoryDep('arg54_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf76.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (8388608, 1)
op76.sizes = ([256, 4, 128, 64], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op76_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf76', get_index_2, add, None)
        return store
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 8388608}, None)]
op77.unmet_dependencies = [   MemoryDep('buf74', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op77.met_dependencies = [MemoryDep('arg52_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (8388608, 1)
op77.sizes = ([256, 4, 128, 64], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op77_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf77', get_index_2, mul, None)
        return store
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf76', mode=None), StarDep(name='buf77', mode=None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op78.node.kernel = extern_kernels.bmm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 131072}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 16777216}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (131072, 128)
op79.sizes = ([1024, 128], [128])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op79_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf79', get_index_3, reduction)
        return store_reduction
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 131072}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 16777216}, None),
        MemoryDep('buf79', c0, {c0: 131072}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (131072, 128)
op80.sizes = ([1024, 128], [128])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op80_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf79', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf80', get_index_4, reduction)
        return store_reduction
op80 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op81.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 8388608}, None)]
op82.unmet_dependencies = [   MemoryDep('buf81', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op82.met_dependencies = [MemoryDep('arg56_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf82.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (8388608, 1)
op82.sizes = ([256, 4, 128, 64], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op82_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, add, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 16777216}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 16777216}, None),
        MemoryDep('buf79', c0, {c0: 131072}, None),
        MemoryDep('buf80', c0, {c0: 131072}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (16777216, 1)
op83.sizes = ([1024, 128, 128], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op83_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf79', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf80', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf83', get_index_5, truediv, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf82', mode=None), StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.node.kernel = extern_kernels.bmm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 8388608}, None)]
op85.unmet_dependencies = [   MemoryDep('buf84', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (8388608, 1)
op85.sizes = ([256, 128, 4, 64], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op85_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, load, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 32768}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 8388608}, None),
        MemoryDep('buf86', c0, {c0: 8388608}, None)]
op87.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (32768, 256)
op87.sizes = ([32768], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op87_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_3, getitem)
        return store_reduction
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 32768}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 8388608}, None),
        MemoryDep('buf86', c0, {c0: 8388608}, None)]
op88.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (32768, 256)
op88.sizes = ([32768], [256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op88_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem_1)
        return store_reduction
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 8388608}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 8388608}, None),
        MemoryDep('buf86', c0, {c0: 8388608}, None),
        MemoryDep('buf87', c0, {c0: 32768}, None),
        MemoryDep('buf88', c0, {c0: 32768}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg60_1', c1, {c0: 32768, c1: 256}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (8388608, 1)
op90.sizes = ([32768, 256], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf88_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op90_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf87', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf88', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg59_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg60_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf90', get_index_7, add_3, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 67108864}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 67108864}, None)]
op92.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 32768, c1: 2048}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (67108864, 1)
op92.sizes = ([32768, 2048], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op92_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf92', get_index_2, relu, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 32768}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 8388608}, None),
        MemoryDep('buf93', c0, {c0: 8388608}, None)]
op94.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 32768, c1: 256}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (32768, 256)
op94.sizes = ([32768], [256])
buf90_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op94_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 32768}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 8388608}, None),
        MemoryDep('buf93', c0, {c0: 8388608}, None)]
op95.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 32768, c1: 256}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (32768, 256)
op95.sizes = ([32768], [256])
buf90_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op95_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem_1)
        return store_reduction
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 8388608}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 8388608}, None),
        MemoryDep('buf93', c0, {c0: 8388608}, None),
        MemoryDep('buf94', c0, {c0: 32768}, None),
        MemoryDep('buf95', c0, {c0: 32768}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg65_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg66_1', c1, {c0: 32768, c1: 256}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (8388608, 1)
op97.sizes = ([32768, 256], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf95_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op97_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf94', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf95', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg65_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg66_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf97', get_index_7, add_3, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op99.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 8388608}, None)]
op100.unmet_dependencies = [   MemoryDep('buf99', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op100.met_dependencies = [MemoryDep('arg70_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (8388608, 1)
op100.sizes = ([256, 4, 128, 64], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op100_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf100', get_index_2, add, None)
        return store
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 8388608}, None)]
op101.unmet_dependencies = [   MemoryDep('buf98', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op101.met_dependencies = [MemoryDep('arg68_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (8388608, 1)
op101.sizes = ([256, 4, 128, 64], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op101_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf101', get_index_2, mul, None)
        return store
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf101', mode=None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
    ]
]
op102.node.kernel = extern_kernels.bmm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 131072}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 16777216}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (131072, 128)
op103.sizes = ([1024, 128], [128])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op103_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf103', get_index_3, reduction)
        return store_reduction
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 131072}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 16777216}, None),
        MemoryDep('buf103', c0, {c0: 131072}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (131072, 128)
op104.sizes = ([1024, 128], [128])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op104_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf103', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf104', get_index_4, reduction)
        return store_reduction
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op105.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 8388608}, None)]
op106.unmet_dependencies = [   MemoryDep('buf105', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op106.met_dependencies = [MemoryDep('arg72_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (8388608, 1)
op106.sizes = ([256, 4, 128, 64], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op106_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf106', get_index_2, add, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 16777216}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 16777216}, None),
        MemoryDep('buf103', c0, {c0: 131072}, None),
        MemoryDep('buf104', c0, {c0: 131072}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (16777216, 1)
op107.sizes = ([1024, 128, 128], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op107_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf103', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf104', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf107', get_index_5, truediv, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.bmm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 8388608}, None)]
op109.unmet_dependencies = [   MemoryDep('buf108', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (8388608, 1)
op109.sizes = ([256, 128, 4, 64], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op110.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 32768}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 8388608}, None),
        MemoryDep('buf97', c0, {c0: 8388608}, None)]
op111.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 32768, c1: 256}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (32768, 256)
op111.sizes = ([32768], [256])
buf97_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op111_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf111', get_index_3, getitem)
        return store_reduction
op111 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 32768}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 8388608}, None),
        MemoryDep('buf97', c0, {c0: 8388608}, None)]
op112.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 32768, c1: 256}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (32768, 256)
op112.sizes = ([32768], [256])
buf97_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op112_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_3, getitem_1)
        return store_reduction
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8388608}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 8388608}, None),
        MemoryDep('buf111', c0, {c0: 32768}, None),
        MemoryDep('buf112', c0, {c0: 32768}, None),
        MemoryDep('buf97', c0, {c0: 8388608}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg76_1', c1, {c0: 32768, c1: 256}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf114.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (8388608, 1)
op114.sizes = ([32768, 256], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf112_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op114_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf111', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf112', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg75_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg76_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf114', get_index_7, add_3, None)
        return store
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 67108864}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 67108864}, None)]
op116.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 32768, c1: 2048}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (67108864, 1)
op116.sizes = ([32768, 2048], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op116_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf116', get_index_2, relu, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
    ]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 32768}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 8388608}, None),
        MemoryDep('buf117', c0, {c0: 8388608}, None)]
op118.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 32768, c1: 256}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (32768, 256)
op118.sizes = ([32768], [256])
buf114_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op118_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_3, getitem)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 32768}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 8388608}, None),
        MemoryDep('buf117', c0, {c0: 8388608}, None)]
op119.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 32768, c1: 256}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (32768, 256)
op119.sizes = ([32768], [256])
buf114_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op119_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem_1)
        return store_reduction
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 8388608}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 8388608}, None),
        MemoryDep('buf117', c0, {c0: 8388608}, None),
        MemoryDep('buf118', c0, {c0: 32768}, None),
        MemoryDep('buf119', c0, {c0: 32768}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg81_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg82_1', c1, {c0: 32768, c1: 256}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf121.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op121.group.device = cuda:0
op121.group.iteration = (8388608, 1)
op121.sizes = ([32768, 256], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf119_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op121_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf118', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf119', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg81_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg82_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf121', get_index_7, add_3, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op123.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 8388608}, None)]
op124.unmet_dependencies = [   MemoryDep('buf123', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op124.met_dependencies = [MemoryDep('arg86_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (8388608, 1)
op124.sizes = ([256, 4, 128, 64], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op124_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf124', get_index_2, add, None)
        return store
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 8388608}, None)]
op125.unmet_dependencies = [   MemoryDep('buf122', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op125.met_dependencies = [MemoryDep('arg84_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (8388608, 1)
op125.sizes = ([256, 4, 128, 64], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op125_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf125', get_index_2, mul, None)
        return store
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.125
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf124', mode=None), StarDep(name='buf125', mode=None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.bmm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 131072}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 16777216}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (131072, 128)
op127.sizes = ([1024, 128], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op127_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf127', get_index_3, reduction)
        return store_reduction
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 131072}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 16777216}, None),
        MemoryDep('buf127', c0, {c0: 131072}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (131072, 128)
op128.sizes = ([1024, 128], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf128_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
class op128_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf127', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf128', get_index_4, reduction)
        return store_reduction
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op129.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 8388608}, None)]
op130.unmet_dependencies = [   MemoryDep('buf129', 32768*c0 + 64*c1 + 256*c2 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op130.met_dependencies = [MemoryDep('arg88_1', 64*c1 + c3, {c0: 256, c1: 4, c2: 128, c3: 64}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
    buf130.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (8388608, 1)
op130.sizes = ([256, 4, 128, 64], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[256, 4, 128, 64], stride=[32768, 8192, 64, 1])
class op130_loop_body:
    var_ranges = {z0: 256, z1: 4, z2: 128, z3: 64}
    index0 = 32768*z0 + 64*z1 + 256*z2 + z3
    index1 = 64*z1 + z3
    index2 = 32768*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf130', get_index_2, add, None)
        return store
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 4
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (256*x1) + (32768*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 16777216}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 16777216}, None),
        MemoryDep('buf127', c0, {c0: 131072}, None),
        MemoryDep('buf128', c0, {c0: 131072}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (16777216, 1)
op131.sizes = ([1024, 128, 128], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf128_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 1], stride=[128, 1, 131072])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 128], stride=[16384, 128, 1])
class op131_loop_body:
    var_ranges = {z0: 1024, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf127', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf128', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, truediv, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf130', mode=None), StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.node.kernel = extern_kernels.bmm


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 8388608}, None)]
op133.unmet_dependencies = [   MemoryDep('buf132', 32768*c0 + 64*c1 + 8192*c2 + c3, {c0: 256, c1: 128, c2: 4, c3: 64}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (8388608, 1)
op133.sizes = ([256, 128, 4, 64], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1024, 128, 64], stride=[8192, 64, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 4, 64], stride=[32768, 256, 64, 1])
class op133_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4, z3: 64}
    index0 = 32768*z0 + 64*z1 + 8192*z2 + z3
    index1 = 32768*z0 + 256*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf133', get_index_1, load, None)
        return store
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 4
        x2 = (xindex // 256) % 128
        x3 = (xindex // 32768)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (32768*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 32768}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 8388608}, None),
        MemoryDep('buf134', c0, {c0: 8388608}, None)]
op135.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 32768, c1: 256}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (32768, 256)
op135.sizes = ([32768], [256])
buf121_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op135_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg90_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf135', get_index_3, getitem)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 32768}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 8388608}, None),
        MemoryDep('buf134', c0, {c0: 8388608}, None)]
op136.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 32768, c1: 256}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf136.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (32768, 256)
op136.sizes = ([32768], [256])
buf121_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op136_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg90_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf136', get_index_3, getitem_1)
        return store_reduction
op136 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 8388608}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 8388608}, None),
        MemoryDep('buf134', c0, {c0: 8388608}, None),
        MemoryDep('buf135', c0, {c0: 32768}, None),
        MemoryDep('buf136', c0, {c0: 32768}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg91_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg92_1', c1, {c0: 32768, c1: 256}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf138.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (8388608, 1)
op138.sizes = ([32768, 256], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf136_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op138_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg90_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf135', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf136', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg91_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg92_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf138', get_index_7, add_3, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False)]
]
op139.node.kernel = extern_kernels.mm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 67108864}, None)]
op140.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 67108864}, None)]
op140.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 32768, c1: 2048}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (67108864, 1)
op140.sizes = ([32768, 2048], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[32768, 2048], stride=[2048, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2048], stride=[262144, 2048, 1])
class op140_loop_body:
    var_ranges = {z0: 32768, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf140', get_index_2, relu, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 67108864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2048
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 32768}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 8388608}, None),
        MemoryDep('buf141', c0, {c0: 8388608}, None)]
op142.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 32768, c1: 256}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (32768, 256)
op142.sizes = ([32768], [256])
buf138_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op142_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg96_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem)
        return store_reduction
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 32768}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 8388608}, None),
        MemoryDep('buf141', c0, {c0: 8388608}, None)]
op143.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 32768, c1: 256}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (32768, 256)
op143.sizes = ([32768], [256])
buf138_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
class op143_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg96_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem_1)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[32768, 256],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 32768
        XBLOCK: tl.constexpr = 1
        rnumel = 256
        RBLOCK: tl.constexpr = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (256*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (256*x0)), None)
        tmp2 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 256, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 8388608}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 8388608}, None),
        MemoryDep('buf141', c0, {c0: 8388608}, None),
        MemoryDep('buf142', c0, {c0: 32768}, None),
        MemoryDep('buf143', c0, {c0: 32768}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg97_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg98_1', c1, {c0: 32768, c1: 256}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (8388608, 1)
op145.sizes = ([32768, 256], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[32768, 256], stride=[256, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
buf143_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1], stride=[128, 1, 32768])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 256], stride=[32768, 256, 1])
class op145_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg96_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf142', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf143', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg97_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg98_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf145', get_index_7, add_3, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 256
        x1 = (xindex // 256)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 256.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg1_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[32768, 10000], stride=[10016, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 32768}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', 10016*c0 + c1, {c0: 32768, c1: 10000}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (32768, 10000)
op147.sizes = ([32768], [10000])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32768, 10000], stride=[10016, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
class op147_loop_body:
    var_ranges = {z0: 32768, z1: 10000}
    index0 = 10016*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, reduction)
        return store_reduction
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[32768, 16384],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 32768
        rnumel = 10000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (10016*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 32768}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf146', 10016*c0 + c1, {c0: 32768, c1: 10000}, None),
        MemoryDep('buf147', c0, {c0: 32768}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (32768, 10000)
op148.sizes = ([32768], [10000])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32768, 10000], stride=[10016, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
class op148_loop_body:
    var_ranges = {z0: 32768, z1: 10000}
    index0 = 10016*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_2, reduction)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[32768, 16384],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 32768
        rnumel = 10000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (10016*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 4}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf146', 10016*c0 + tmp8, {c0: 32768}, None),
        MemoryDep('buf147', c0, {c0: 32768}, None),
        MemoryDep('buf148', c0, {c0: 32768}, None)]
op149.met_dependencies = [MemoryDep('arg99_1', c0, {c0: 32768}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[4], stride=[1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (4, 8192)
op149.sizes = ([4], [8192])
arg99_1_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[32768, 10000], stride=[10016, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[32768, 1], stride=[1, 32768])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4], stride=[1])
class op149_loop_body:
    var_ranges = {z0: 4, z1: 8192}
    index0 = 8192*z0 + z1
    index1 = indirect0 + 82051072*z0 + 10016*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg99_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg99_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg99_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf146', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf147', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf148', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_6, reduction)
        return store_reduction
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 10000, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 10000)) | ~(rmask & xmask), "index out of bounds: 0 <= tmp8 < 10000")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (10016*r1) + (82051072*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask & xmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp20, xmask)


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', 0, {}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 4}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1, 4)
op150.sizes = ([], [4])
buf149_layout = FixedLayout('cuda', torch.float32, size=[4], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op150_loop_body:
    var_ranges = {z0: 4}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, reduction)
        return store_reduction
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 4],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4
        RBLOCK: tl.constexpr = 4
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.sum(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp3, None)


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 4}, None)]
op151.unmet_dependencies = []
op151.met_dependencies = [MemoryDep('arg99_1', c0, {c0: 32768}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.int64, size=[4], stride=[1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4, 8192)
op151.sizes = ([4], [8192])
arg99_1_layout = FixedLayout('cuda', torch.int64, size=[256, 128], stride=[128, 1])
buf151_layout = FixedLayout('cuda', torch.int64, size=[4], stride=[1])
class op151_loop_body:
    var_ranges = {z0: 4, z1: 8192}
    index0 = 8192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg99_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_1, reduction)
        return store_reduction
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, xmask)


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', 0, {}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 4}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (1, 4)
op152.sizes = ([], [4])
buf151_layout = FixedLayout('cuda', torch.int64, size=[4], stride=[1])
buf152_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op152_loop_body:
    var_ranges = {z0: 4}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_1, reduction)
        return store_reduction
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 4],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4
        RBLOCK: tl.constexpr = 4
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.sum(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp3, None)


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', 0, {}, None)]
op153.unmet_dependencies = [MemoryDep('buf150', 0, {}, None), MemoryDep('buf152', 0, {}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf153.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1, 1)
op153.sizes = ([], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf152_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf153_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op153_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf153', get_index_2, truediv, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 151875*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50625}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', 50176*c0 + 224*c1 + c2, {c0: 24, c1: 225, c2: 225}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 225, 225], stride=[151875, 1, 675, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1215000, 1)
op0.sizes = ([8, 3, 225, 225], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 225, 225], stride=[151875, 1, 675, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 225, z3: 225}
    index0 = z2
    index1 = z3
    index2 = 150528*z0 + 50176*z1 + 224*z2 + z3
    index3 = 151875*z0 + z1 + 675*z2 + 3*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(224, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(224, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf0', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('arg1_1', get_index)
        return load


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 32, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 864}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (864, 1)
op1.sizes = ([32, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3211264}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 32}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (3211264, 1)
op3.sizes = ([100352, 32], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelAlloc)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelAlloc
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.node.kernel = extern_kernels.convolution


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 3211264}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 3211264}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 100352, c1: 32}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (3211264, 1)
op5.sizes = ([100352, 32], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op5_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 401408*c0 + c1 + 12544*c2, {c0: 8, c1: 12544, c2: 32}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 3211264}, None),
        MemoryDep('buf6', c0, {c0: 3211264}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg13_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg14_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg15_1', c1, {c0: 100352, c1: 32}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 12544, 112, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (3211264, 1)
op7.sizes = ([8, 12544, 32], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 12544, 112, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 12544, z2: 32}
    index0 = 401408*z0 + 32*z1 + z2
    index1 = z2
    index2 = 401408*z0 + z1 + 12544*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf3', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf7', get_index_6, add_2, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', 200704*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 12544}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', 401408*c0 + c1, {c0: 8, c1: 200704}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1605632, 1)
op8.sizes = ([8, 16, 12544], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 12544, 112, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op8_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 12544}
    index0 = 401408*z0 + 12544*z1 + z2
    index1 = 200704*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf8', get_index_1, load, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', 200704*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 12544}, None)]
op10.unmet_dependencies = [MemoryDep('buf7', 401408*c0 + c1 + 200704, {c0: 8, c1: 200704}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1605632, 1)
op10.sizes = ([8, 16, 12544], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 12544, 112, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 12544}
    index0 = 401408*z0 + 12544*z1 + z2 + 200704
    index1 = 200704*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelAlloc)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelAlloc
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.convolution


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 19267584}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf11', 1204224*c0 + 96*c2 + I, {c0: 8, c1: 192, c2: 12544}, None),
        MemoryDep('buf9', 1204224*c0 + 96*c2 + I, {c0: 8, c1: 192, c2: 12544}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg19_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg20_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg21_1', c1, {c0: 8, c1: 192}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 112, 112], stride=[2408448, 12544, 112, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (19267584, 1)
op12.sizes = ([8, 192, 12544], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 112, 112], stride=[2408448, 12544, 112, 1])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 12544}
    index0 = z1
    index1 = 1204224*z0 + 96*z2 + I
    index2 = 1204224*z0 + 96*z2 + I
    index3 = 2408448*z0 + 12544*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(96, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(96, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(192, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg18_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg19_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg20_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg21_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        relu = ops.relu(add_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf12', get_index_8, relu, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf9', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf11', get_index)
        return load


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 817216*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 12769}, None)]
op13.unmet_dependencies = [   MemoryDep('buf12', 2408448*c0 + 12544*c1 + 112*c2 + c3, {c0: 8, c1: 64, c2: 113, c3: 113}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 113, 113], stride=[817216, 1, 7232, 64])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (6537728, 1)
op13.sizes = ([8, 64, 113, 113], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 112, 112], stride=[2408448, 12544, 112, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 113, 113], stride=[817216, 1, 7232, 64])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 113, z3: 113}
    index0 = z2
    index1 = z3
    index2 = 2408448*z0 + 12544*z1 + 112*z2 + z3
    index3 = 817216*z0 + z1 + 7232*z2 + 64*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf13', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf12', get_index)
        return load


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf14.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 846400*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 13225}, None)]
op15.unmet_dependencies = [   MemoryDep('buf12', 2408448*c0 + 12544*c1 + 112*c2 + c3 + 802703, {c0: 8, c1: 64, c2: 115, c3: 115}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 115, 115], stride=[846400, 1, 7360, 64])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (6771200, 1)
op15.sizes = ([8, 64, 115, 115], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 112, 112], stride=[2408448, 12544, 112, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 115, 115], stride=[846400, 1, 7360, 64])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 115, z3: 115}
    index0 = z2 - 1
    index1 = z3 - 1
    index2 = 2408448*z0 + 12544*z1 + 112*z2 + z3 + 802703
    index3 = 846400*z0 + z1 + 7360*z2 + 64*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf15', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf12', get_index)
        return load


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 876096*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 13689}, None)]
op17.unmet_dependencies = [   MemoryDep('buf12', 2408448*c0 + 12544*c1 + 112*c2 + c3 + 1605406, {c0: 8, c1: 64, c2: 117, c3: 117}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 117, 117], stride=[876096, 1, 7488, 64])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (7008768, 1)
op17.sizes = ([8, 64, 117, 117], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 112, 112], stride=[2408448, 12544, 112, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 117, 117], stride=[876096, 1, 7488, 64])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 117, z3: 117}
    index0 = z2 - 2
    index1 = z3 - 2
    index2 = 2408448*z0 + 12544*z1 + 112*z2 + z3 + 1605406
    index3 = 876096*z0 + z1 + 7488*z2 + 64*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf17', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf12', get_index)
        return load


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op19_op20.writes = 
    [   MemoryDep('buf19', c0, {c0: 4816896}, None),
        MemoryDep('buf20', c0, {c0: 4816896}, None)]
op19_op20.unmet_dependencies = 
    [   MemoryDep('buf14', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None),
        MemoryDep('buf16', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None),
        MemoryDep('buf18', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None)]
op19_op20.met_dependencies = 
    [   MemoryDep('arg25_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg26_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg28_1', c1, {c0: 8, c1: 192}, None)]
op19_op20.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op19_op20.snodes[0] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4816896}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf14', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None),
        MemoryDep('buf16', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None),
        MemoryDep('buf18', 200704*c0 + 64*c2 + I, {c0: 8, c1: 192, c2: 3136}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg25_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg26_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 192}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4816896, 1)
op19.sizes = ([8, 192, 3136], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
class op19_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 3136}
    index0 = z1
    index1 = 200704*z0 + 64*z2 + I
    index2 = 200704*z0 + 64*z2 + I
    index3 = 200704*z0 + 64*z2 + I
    index4 = 602112*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(64, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(128, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(192, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index0')
        load = ops.load('arg25_1', get_index_6)
        sub = ops.sub(where_1, load)
        get_index_7 = self.get_index('index0')
        load_1 = ops.load('arg26_1', get_index_7)
        constant_6 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_6)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_7 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_7)
        mul_1 = ops.mul(sub, mul)
        get_index_8 = self.get_index('index0')
        load_2 = ops.load('arg27_1', get_index_8)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf19', get_index_9, mul_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf16', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf18', get_index)
        return load
op19_op20.snodes[1] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 4816896}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 4816896}, None)]
op20.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 8, c1: 192}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (4816896, 1)
op20.sizes = ([8, 192, 3136], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 3136}
    index0 = 602112*z0 + 3136*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf20', get_index_2, relu, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', 602112*c0 + c1, {c0: 8, c1: 301056}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2408448, 1)
op21.sizes = ([8, 96, 3136], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 602112*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf21', get_index_1, load, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf22.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op23.unmet_dependencies = [MemoryDep('buf20', 602112*c0 + c1 + 301056, {c0: 8, c1: 301056}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2408448, 1)
op23.sizes = ([8, 96, 3136], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 3136, 56, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 602112*z0 + 3136*z1 + z2 + 301056
    index1 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1003520}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf22', 62720*c0 + 20*c2 + I, {c0: 8, c1: 40, c2: 3136}, None),
        MemoryDep('buf24', 62720*c0 + 20*c2 + I, {c0: 8, c1: 40, c2: 3136}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg32_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg34_1', c1, {c0: 8, c1: 40}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 3136, 56, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (1003520, 1)
op25.sizes = ([8, 40, 3136], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 3136, 56, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 40, z2: 3136}
    index0 = z1
    index1 = 62720*z0 + 20*z2 + I
    index2 = 62720*z0 + 20*z2 + I
    index3 = 125440*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(20, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(20, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg31_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg32_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg33_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg34_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf25', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf22', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf24', get_index)
        return load


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 62720*c0 + c1 + 20*c2, {c0: 8, c1: 20, c2: 3136}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', 125440*c0 + c1, {c0: 8, c1: 62720}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (501760, 1)
op26.sizes = ([8, 20, 3136], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 3136, 56, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 20, z2: 3136}
    index0 = 125440*z0 + 3136*z1 + z2
    index1 = 62720*z0 + z1 + 20*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, load, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 56, 56], stride=[188160, 1, 3360, 60])
    buf27.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', 62720*c0 + c1 + 20*c2, {c0: 8, c1: 20, c2: 3136}, None)]
op28.unmet_dependencies = [MemoryDep('buf25', 125440*c0 + c1 + 62720, {c0: 8, c1: 62720}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (501760, 1)
op28.sizes = ([8, 20, 3136], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 3136, 56, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 20, z2: 3136}
    index0 = 125440*z0 + 3136*z1 + z2 + 62720
    index1 = 62720*z0 + z1 + 20*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf28', get_index_1, load, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 56, 56], stride=[188160, 1, 3360, 60])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 3010560}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf27', 60*c0 + I, {c0: 25088, c1: 120}, None),
        MemoryDep('buf29', 60*c0 + I, {c0: 25088, c1: 120}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 120}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (3010560, 1)
op30.sizes = ([25088, 120], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 56, 56], stride=[188160, 1, 3360, 60])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 56, 56], stride=[188160, 1, 3360, 60])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
class op30_loop_body:
    var_ranges = {z0: 25088, z1: 120}
    index0 = z1
    index1 = 60*z0 + I
    index2 = 60*z0 + I
    index3 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(60, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(60, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(120, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg37_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg38_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg39_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg40_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        relu = ops.relu(add_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf30', get_index_8, relu, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf27', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf29', get_index)
        return load


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 3010560}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 3010560}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 120}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 120}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (3010560, 1)
op32.sizes = ([25088, 120], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 56, 56], stride=[376320, 1, 6720, 120])
class op32_loop_body:
    var_ranges = {z0: 25088, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, relu, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op34.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', 125440*c0 + c1 + 40*c2, {c0: 8, c1: 40, c2: 3136}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 1003520}, None),
        MemoryDep('buf33', 62720*c0 + 20*c2 + I, {c0: 8, c1: 40, c2: 3136}, None),
        MemoryDep('buf34', 62720*c0 + 20*c2 + I, {c0: 8, c1: 40, c2: 3136}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg49_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg50_1', c1, {c0: 8, c1: 40}, None),
        MemoryDep('arg51_1', c1, {c0: 8, c1: 40}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 1, 2240, 40])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1003520, 1)
op35.sizes = ([8, 40, 3136], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 56, 56], stride=[62720, 1, 1120, 20])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 3136, 56, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 56, 56], stride=[125440, 1, 2240, 40])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 40, z2: 3136}
    index0 = z1
    index1 = 62720*z0 + 20*z2 + I
    index2 = 62720*z0 + 20*z2 + I
    index3 = 125440*z0 + 3136*z1 + z2
    index4 = 125440*z0 + z1 + 40*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(20, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(20, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg48_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg49_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg50_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg51_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf25', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf35', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf33', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf34', get_index)
        return load


op36: ExternKernelSchedulerNode(ExternKernelAlloc)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelAlloc
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.convolution


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 6021120}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 6021120}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg53_1', c1, {c0: 25088, c1: 240}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 240}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 240}, None),
        MemoryDep('arg56_1', c1, {c0: 25088, c1: 240}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (6021120, 1)
op37.sizes = ([25088, 240], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
class op37_loop_body:
    var_ranges = {z0: 25088, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg54_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg55_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf37', get_index_5, add_1, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 1559520}, None)]
op38.unmet_dependencies = [   MemoryDep('buf37', 752640*c0 + 13440*c1 + 240*c2 + c3, {c0: 8, c1: 57, c2: 57, c3: 60}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 57, 57], stride=[194940, 1, 3420, 60])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1559520, 1)
op38.sizes = ([8, 57, 57, 60], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 57, 57], stride=[194940, 1, 3420, 60])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 57, z2: 57, z3: 60}
    index0 = z1
    index1 = z2
    index2 = 752640*z0 + 13440*z1 + 240*z2 + z3
    index3 = 194940*z0 + 3420*z1 + 60*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf38', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf37', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op39: ExternKernelSchedulerNode(ExternKernelAlloc)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelAlloc
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf39.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.convolution


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1670880}, None)]
op40.unmet_dependencies = [   MemoryDep('buf37', 752640*c0 + 13440*c1 + 240*c2 + c3 - 13620, {c0: 8, c1: 59, c2: 59, c3: 60}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 59, 59], stride=[208860, 1, 3540, 60])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1670880, 1)
op40.sizes = ([8, 59, 59, 60], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 59, 59], stride=[208860, 1, 3540, 60])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 59, z2: 59, z3: 60}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 752640*z0 + 13440*z1 + 240*z2 + z3 - 13620
    index3 = 208860*z0 + 3540*z1 + 60*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf40', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf37', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf41.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1786080}, None)]
op42.unmet_dependencies = [   MemoryDep('buf37', 752640*c0 + 13440*c1 + 240*c2 + c3 - 27240, {c0: 8, c1: 61, c2: 61, c3: 60}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 61, 61], stride=[223260, 1, 3660, 60])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1786080, 1)
op42.sizes = ([8, 61, 61, 60], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 61, 61], stride=[223260, 1, 3660, 60])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 61, z2: 61, z3: 60}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 752640*z0 + 13440*z1 + 240*z2 + z3 - 27240
    index3 = 223260*z0 + 3660*z1 + 60*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf42', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf37', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op43: ExternKernelSchedulerNode(ExternKernelAlloc)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelAlloc
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.convolution


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1905120}, None)]
op44.unmet_dependencies = [   MemoryDep('buf37', 752640*c0 + 13440*c1 + 240*c2 + c3 - 40860, {c0: 8, c1: 63, c2: 63, c3: 60}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 63, 63], stride=[238140, 1, 3780, 60])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1905120, 1)
op44.sizes = ([8, 63, 63, 60], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 56, 56], stride=[752640, 1, 13440, 240])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 63, 63], stride=[238140, 1, 3780, 60])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 63, z2: 63, z3: 60}
    index0 = z1 - 3
    index1 = z2 - 3
    index2 = 752640*z0 + 13440*z1 + 240*z2 + z3 - 40860
    index3 = 238140*z0 + 3780*z1 + 60*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf44', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf37', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46_op47_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op46_op47_op48.writes = 
    [   MemoryDep('buf46', c0, {c0: 1505280}, None),
        MemoryDep('buf47', c0, {c0: 1920}, None),
        MemoryDep('buf48', c0, {c0: 1920}, None)]
op46_op47_op48.unmet_dependencies = 
    [   MemoryDep('buf39', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf41', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf43', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf45', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None)]
op46_op47_op48.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg63_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 240}, None)]
op46_op47_op48.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 784, 28, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op46_op47_op48.snodes[0] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1505280}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf39', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf41', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf43', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None),
        MemoryDep('buf45', 47040*c0 + 60*c2 + I, {c0: 8, c1: 240, c2: 784}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 240}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 784, 28, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (1505280, 1)
op46.sizes = ([8, 240, 784], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 784, 28, 1])
class op46_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 784}
    index0 = z1
    index1 = 47040*z0 + 60*z2 + I
    index2 = 47040*z0 + 60*z2 + I
    index3 = 47040*z0 + 60*z2 + I
    index4 = 47040*z0 + 60*z2 + I
    index5 = 188160*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(60, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(60, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(120, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(120, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(180, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(180, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(240, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg61_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg62_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf46', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf41', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf43', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf45', get_index)
        return load
op46_op47_op48.snodes[1] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 1920}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 1505280}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 240}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (1920, 784)
op47.sizes = ([8, 240], [784])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 784, 28, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 784}
    index0 = 188160*z0 + 784*z1 + z2
    index1 = z1
    index2 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf47', get_index_6, reduction)
        return store_reduction
op46_op47_op48.snodes[2] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 1920}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1920}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (1920, 1)
op48.sizes = ([1920], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op48_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf48', get_index_1, truediv, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 160}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 160}, None)]
op50.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 8, c1: 20}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (160, 1)
op50.sizes = ([8, 20], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
class op50_loop_body:
    var_ranges = {z0: 8, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf49', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf50', get_index_4, mul, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', 188160*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 784}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 1505280}, None),
        MemoryDep('buf51', c0, {c0: 1920}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 240}, None),
        MemoryDep('arg68_1', c1, {c0: 8, c1: 240}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1505280, 1)
op52.sizes = ([8, 240, 784], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 784, 28, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 784}
    index0 = 188160*z0 + 784*z1 + z2
    index1 = z1
    index2 = 240*z0 + z1
    index3 = 188160*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf46', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf51', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg68_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf52', get_index_8, mul_3, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 351232}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 351232}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg71_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 56}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (351232, 1)
op54.sizes = ([6272, 56], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
class op54_loop_body:
    var_ranges = {z0: 6272, z1: 56}
    index0 = 56*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_1, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op56.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op57_op58.writes = 
    [   MemoryDep('buf57', c0, {c0: 2107392}, None),
        MemoryDep('buf58', c0, {c0: 2107392}, None)]
op57_op58.unmet_dependencies = 
    [   MemoryDep('buf55', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf56', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op57_op58.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg77_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg78_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg79_1', c1, {c0: 8, c1: 336}, None)]
op57_op58.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op57_op58.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2107392}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf55', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf56', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg77_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg78_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg79_1', c1, {c0: 8, c1: 336}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2107392, 1)
op57.sizes = ([8, 336, 784], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg76_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg77_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg78_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg79_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf57', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf55', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf56', get_index)
        return load
op57_op58.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2107392}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 2107392}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (2107392, 1)
op58.sizes = ([2107392], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op58_loop_body:
    var_ranges = {z0: 2107392}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf58', get_index_2, mul, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1053696, 1)
op59.sizes = ([8, 168, 784], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, load, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op61.unmet_dependencies = [MemoryDep('buf58', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1053696, 1)
op61.sizes = ([8, 168, 784], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op61_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63_op64_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op63_op64_op65.writes = 
    [   MemoryDep('buf63', c0, {c0: 2107392}, None),
        MemoryDep('buf64', c0, {c0: 2688}, None),
        MemoryDep('buf65', c0, {c0: 2688}, None)]
op63_op64_op65.unmet_dependencies = 
    [   MemoryDep('buf60', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf62', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op63_op64_op65.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg83_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg85_1', c1, {c0: 8, c1: 336}, None)]
op63_op64_op65.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op63_op64_op65.snodes[0] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2107392}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf60', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf62', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg83_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg85_1', c1, {c0: 8, c1: 336}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (2107392, 1)
op63.sizes = ([8, 336, 784], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg82_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg83_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg84_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg85_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf63', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf60', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf62', get_index)
        return load
op63_op64_op65.snodes[1] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 2688}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 2107392}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (2688, 784)
op64.sizes = ([2688], [784])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
class op64_loop_body:
    var_ranges = {z0: 2688, z1: 784}
    index0 = 784*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_2, reduction)
        return store_reduction
op63_op64_op65.snodes[2] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 2688}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 2688}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (2688, 1)
op65.sizes = ([2688], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
class op65_loop_body:
    var_ranges = {z0: 2688}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, truediv, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 224}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 224}, None)]
op67.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 8, c1: 28}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (224, 1)
op67.sizes = ([8, 28], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg87_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2107392}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 2107392}, None),
        MemoryDep('buf68', c0, {c0: 2688}, None)]
op69.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 8, c1: 336}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (2107392, 1)
op69.sizes = ([8, 336, 784], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 336*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg89_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf69', get_index_4, mul_1, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1053696, 1)
op70.sizes = ([8, 168, 784], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf70', get_index_1, load, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf71.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op72.unmet_dependencies = [MemoryDep('buf69', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (1053696, 1)
op72.sizes = ([8, 168, 784], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op72_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf72', get_index_1, load, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.convolution


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 351232}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 351232}, None),
        MemoryDep('buf71', 28*c0 + I, {c0: 6272, c1: 56}, None),
        MemoryDep('buf73', 28*c0 + I, {c0: 6272, c1: 56}, None)]
op74.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 56}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (351232, 1)
op74.sizes = ([6272, 56], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
class op74_loop_body:
    var_ranges = {z0: 6272, z1: 56}
    index0 = z1
    index1 = 28*z0 + I
    index2 = 28*z0 + I
    index3 = 56*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(28, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg92_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg93_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg94_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg95_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf54', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf74', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf71', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf73', get_index)
        return load


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op76.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op77_op78.writes = 
    [   MemoryDep('buf77', c0, {c0: 2107392}, None),
        MemoryDep('buf78', c0, {c0: 2107392}, None)]
op77_op78.unmet_dependencies = 
    [   MemoryDep('buf75', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf76', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op77_op78.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg101_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 336}, None)]
op77_op78.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op77_op78.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 2107392}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf75', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf76', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg101_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 336}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (2107392, 1)
op77.sizes = ([8, 336, 784], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg98_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg99_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg100_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg101_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf77', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf75', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf76', get_index)
        return load
op77_op78.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 2107392}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 2107392}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (2107392, 1)
op78.sizes = ([2107392], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op78_loop_body:
    var_ranges = {z0: 2107392}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf78', get_index_2, mul, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1053696, 1)
op79.sizes = ([8, 168, 784], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op79_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op81.unmet_dependencies = [MemoryDep('buf78', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1053696, 1)
op81.sizes = ([8, 168, 784], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf81', get_index_1, load, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83_op84_op85: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op83_op84_op85.writes = 
    [   MemoryDep('buf83', c0, {c0: 2107392}, None),
        MemoryDep('buf84', c0, {c0: 2688}, None),
        MemoryDep('buf85', c0, {c0: 2688}, None)]
op83_op84_op85.unmet_dependencies = 
    [   MemoryDep('buf80', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf82', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op83_op84_op85.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 336}, None)]
op83_op84_op85.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op83_op84_op85.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2107392}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf80', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf82', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 336}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (2107392, 1)
op83.sizes = ([8, 336, 784], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op83_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg104_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg105_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg106_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg107_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf83', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf80', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf82', get_index)
        return load
op83_op84_op85.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2688}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 2107392}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2688, 784)
op84.sizes = ([2688], [784])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
class op84_loop_body:
    var_ranges = {z0: 2688, z1: 784}
    index0 = 784*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf84', get_index_2, reduction)
        return store_reduction
op83_op84_op85.snodes[2] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2688}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2688}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (2688, 1)
op85.sizes = ([2688], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
class op85_loop_body:
    var_ranges = {z0: 2688}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf85', get_index_1, truediv, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 224}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 224}, None)]
op87.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 8, c1: 28}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (224, 1)
op87.sizes = ([8, 28], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op87_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf87', get_index_4, mul, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 2107392}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 2107392}, None),
        MemoryDep('buf88', c0, {c0: 2688}, None)]
op89.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 8, c1: 336}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (2107392, 1)
op89.sizes = ([8, 336, 784], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 336*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, mul_1, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1053696, 1)
op90.sizes = ([8, 168, 784], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf91.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.convolution


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op92.unmet_dependencies = [MemoryDep('buf89', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1053696, 1)
op92.sizes = ([8, 168, 784], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf92', get_index_1, load, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelAlloc)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelAlloc
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.node.kernel = extern_kernels.convolution


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 351232}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf74', c0, {c0: 351232}, None),
        MemoryDep('buf91', 28*c0 + I, {c0: 6272, c1: 56}, None),
        MemoryDep('buf93', 28*c0 + I, {c0: 6272, c1: 56}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg115_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg116_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg117_1', c1, {c0: 6272, c1: 56}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
    buf94.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (351232, 1)
op94.sizes = ([6272, 56], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
class op94_loop_body:
    var_ranges = {z0: 6272, z1: 56}
    index0 = z1
    index1 = 28*z0 + I
    index2 = 28*z0 + I
    index3 = 56*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(28, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg114_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg115_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg116_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg117_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf74', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf94', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf91', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf93', get_index)
        return load


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op96.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97_op98: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op97_op98.writes = 
    [   MemoryDep('buf97', c0, {c0: 2107392}, None),
        MemoryDep('buf98', c0, {c0: 2107392}, None)]
op97_op98.unmet_dependencies = 
    [   MemoryDep('buf95', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf96', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op97_op98.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg121_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg123_1', c1, {c0: 8, c1: 336}, None)]
op97_op98.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op97_op98.snodes[0] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2107392}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf95', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf96', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg121_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg123_1', c1, {c0: 8, c1: 336}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (2107392, 1)
op97.sizes = ([8, 336, 784], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op97_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg120_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg121_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg122_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg123_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf97', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf95', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf96', get_index)
        return load
op97_op98.snodes[1] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 2107392}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 2107392}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (2107392, 1)
op98.sizes = ([2107392], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op98_loop_body:
    var_ranges = {z0: 2107392}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf97', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf98', get_index_2, mul, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (1053696, 1)
op99.sizes = ([8, 168, 784], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf99', get_index_1, load, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op101.unmet_dependencies = [MemoryDep('buf98', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1053696, 1)
op101.sizes = ([8, 168, 784], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf101', get_index_1, load, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103_op104_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op103_op104_op105.writes = 
    [   MemoryDep('buf103', c0, {c0: 2107392}, None),
        MemoryDep('buf104', c0, {c0: 2688}, None),
        MemoryDep('buf105', c0, {c0: 2688}, None)]
op103_op104_op105.unmet_dependencies = 
    [   MemoryDep('buf100', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf102', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op103_op104_op105.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg127_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg128_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 336}, None)]
op103_op104_op105.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op103_op104_op105.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 2107392}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None),
        MemoryDep('buf102', 131712*c0 + 168*c2 + I, {c0: 8, c1: 336, c2: 784}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg127_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg128_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 336}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (2107392, 1)
op103.sizes = ([8, 336, 784], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = z1
    index1 = 131712*z0 + 168*z2 + I
    index2 = 131712*z0 + 168*z2 + I
    index3 = 263424*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(168, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(168, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(336, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg126_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg127_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg128_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg129_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf103', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf102', get_index)
        return load
op103_op104_op105.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2688}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 2107392}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (2688, 784)
op104.sizes = ([2688], [784])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
class op104_loop_body:
    var_ranges = {z0: 2688, z1: 784}
    index0 = 784*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf104', get_index_2, reduction)
        return store_reduction
op103_op104_op105.snodes[2] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2688}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 2688}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2688, 1)
op105.sizes = ([2688], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
class op105_loop_body:
    var_ranges = {z0: 2688}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf105', get_index_1, truediv, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 224}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 224}, None)]
op107.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 8, c1: 28}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (224, 1)
op107.sizes = ([8, 28], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf106', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf107', get_index_4, mul, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 2107392}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 2107392}, None),
        MemoryDep('buf108', c0, {c0: 2688}, None)]
op109.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 8, c1: 336}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (2107392, 1)
op109.sizes = ([8, 336, 784], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 336*z0 + z1
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg133_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf109', get_index_4, mul_1, None)
        return store


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', 263424*c0 + c1, {c0: 8, c1: 131712}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1053696, 1)
op110.sizes = ([8, 168, 784], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelAlloc)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelAlloc
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.convolution


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', 131712*c0 + c1 + 168*c2, {c0: 8, c1: 168, c2: 784}, None)]
op112.unmet_dependencies = [MemoryDep('buf109', 263424*c0 + c1 + 131712, {c0: 8, c1: 131712}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (1053696, 1)
op112.sizes = ([8, 168, 784], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 784, 28, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 28, 28], stride=[131712, 1, 4704, 168])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 168, z2: 784}
    index0 = 263424*z0 + 784*z1 + z2 + 131712
    index1 = 131712*z0 + z1 + 168*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 351232}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf111', 28*c0 + I, {c0: 6272, c1: 56}, None),
        MemoryDep('buf113', 28*c0 + I, {c0: 6272, c1: 56}, None),
        MemoryDep('buf94', c0, {c0: 351232}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg137_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg138_1', c1, {c0: 6272, c1: 56}, None),
        MemoryDep('arg139_1', c1, {c0: 6272, c1: 56}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (351232, 1)
op114.sizes = ([6272, 56], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 28, 28], stride=[43904, 1, 1568, 56])
class op114_loop_body:
    var_ranges = {z0: 6272, z1: 56}
    index0 = z1
    index1 = 28*z0 + I
    index2 = 28*z0 + I
    index3 = 56*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(28, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg136_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg137_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg138_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg139_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf94', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf114', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf111', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf113', get_index)
        return load


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.convolution


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 2107392}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 2107392}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 6272, c1: 336}, None),
        MemoryDep('arg142_1', c1, {c0: 6272, c1: 336}, None),
        MemoryDep('arg143_1', c1, {c0: 6272, c1: 336}, None),
        MemoryDep('arg144_1', c1, {c0: 6272, c1: 336}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (2107392, 1)
op116.sizes = ([6272, 336], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
class op116_loop_body:
    var_ranges = {z0: 6272, z1: 336}
    index0 = 336*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg142_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf116', get_index_5, add_1, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 753536}, None)]
op117.unmet_dependencies = [   MemoryDep('buf116', 263424*c0 + 9408*c1 + 336*c2 + c3, {c0: 8, c1: 29, c2: 29, c3: 112}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 29, 29], stride=[94192, 1, 3248, 112])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (753536, 1)
op117.sizes = ([8, 29, 29, 112], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 29, 29], stride=[94192, 1, 3248, 112])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 29, z2: 29, z3: 112}
    index0 = z1
    index1 = z2
    index2 = 263424*z0 + 9408*z1 + 336*z2 + z3
    index3 = 94192*z0 + 3248*z1 + 112*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf117', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf116', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf118.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = extern_kernels.convolution


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 861056}, None)]
op119.unmet_dependencies = [   MemoryDep('buf116', 263424*c0 + 9408*c1 + 336*c2 + c3 - 9632, {c0: 8, c1: 31, c2: 31, c3: 112}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 31, 31], stride=[107632, 1, 3472, 112])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (861056, 1)
op119.sizes = ([8, 31, 31, 112], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 31, 31], stride=[107632, 1, 3472, 112])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 31, z2: 31, z3: 112}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 263424*z0 + 9408*z1 + 336*z2 + z3 - 9632
    index3 = 107632*z0 + 3472*z1 + 112*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf119', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf116', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf120.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 975744}, None)]
op121.unmet_dependencies = [   MemoryDep('buf116', 263424*c0 + 9408*c1 + 336*c2 + c3 - 19264, {c0: 8, c1: 33, c2: 33, c3: 112}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 33, 33], stride=[121968, 1, 3696, 112])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (975744, 1)
op121.sizes = ([8, 33, 33, 112], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 28, 28], stride=[263424, 1, 9408, 336])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 33, 33], stride=[121968, 1, 3696, 112])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 33, z2: 33, z3: 112}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 263424*z0 + 9408*z1 + 336*z2 + z3 - 19264
    index3 = 121968*z0 + 3696*z1 + 112*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf121', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf116', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123_op124_op125: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op123_op124_op125.writes = 
    [   MemoryDep('buf123', c0, {c0: 526848}, None),
        MemoryDep('buf124', c0, {c0: 2688}, None),
        MemoryDep('buf125', c0, {c0: 2688}, None)]
op123_op124_op125.unmet_dependencies = 
    [   MemoryDep('buf118', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None),
        MemoryDep('buf120', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None),
        MemoryDep('buf122', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None)]
op123_op124_op125.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg151_1', c1, {c0: 8, c1: 336}, None)]
op123_op124_op125.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 196, 14, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
    ]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op123_op124_op125.snodes[0] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 526848}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf118', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None),
        MemoryDep('buf120', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None),
        MemoryDep('buf122', 21952*c0 + 112*c2 + I, {c0: 8, c1: 336, c2: 196}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 336}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 196, 14, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (526848, 1)
op123.sizes = ([8, 336, 196], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 196, 14, 1])
class op123_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 196}
    index0 = z1
    index1 = 21952*z0 + 112*z2 + I
    index2 = 21952*z0 + 112*z2 + I
    index3 = 21952*z0 + 112*z2 + I
    index4 = 65856*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(112, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(224, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(224, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(336, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index0')
        load = ops.load('arg148_1', get_index_6)
        sub = ops.sub(where_1, load)
        get_index_7 = self.get_index('index0')
        load_1 = ops.load('arg149_1', get_index_7)
        constant_6 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_6)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_7 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_7)
        mul_1 = ops.mul(sub, mul)
        get_index_8 = self.get_index('index0')
        load_2 = ops.load('arg150_1', get_index_8)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf123', get_index_9, mul_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf118', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf120', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf122', get_index)
        return load
op123_op124_op125.snodes[1] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2688}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 526848}, None)]
op124.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 8, c1: 336}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2688, 196)
op124.sizes = ([8, 336], [196])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 196, 14, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 196}
    index0 = 65856*z0 + 196*z1 + z2
    index1 = z1
    index2 = 336*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf124', get_index_4, reduction)
        return store_reduction
op123_op124_op125.snodes[2] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2688}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 2688}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2688, 1)
op125.sizes = ([2688], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 2688, 2688])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
class op125_loop_body:
    var_ranges = {z0: 2688}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf125', get_index_1, truediv, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 1, 1], stride=[14, 1, 1, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 112}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 112}, None)]
op127.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 8, c1: 14}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 1, 1], stride=[14, 1, 1, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (112, 1)
op127.sizes = ([8, 14], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 1, 1], stride=[14, 1, 1, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 1, 1], stride=[14, 1, 1, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 14}
    index0 = 14*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf126', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg153_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf127', get_index_4, mul, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', 65856*c0 + c1 + 336*c2, {c0: 8, c1: 336, c2: 196}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 526848}, None),
        MemoryDep('buf128', c0, {c0: 2688}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 8, c1: 336}, None),
        MemoryDep('arg155_1', c1, {c0: 8, c1: 336}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (526848, 1)
op129.sizes = ([8, 336, 196], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 196, 14, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 1, 1], stride=[336, 1, 1, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 336, z2: 196}
    index0 = 65856*z0 + 196*z1 + z2
    index1 = z1
    index2 = 336*z0 + z1
    index3 = 65856*z0 + z1 + 336*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf128', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf129', get_index_6, mul_1, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 163072}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 163072}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 104}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (163072, 1)
op131.sizes = ([1568, 104], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
class op131_loop_body:
    var_ranges = {z0: 1568, z1: 104}
    index0 = 104*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, add_1, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelAlloc)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelAlloc
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf132.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.node.kernel = extern_kernels.convolution


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op133.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op134_op135.writes = 
    [   MemoryDep('buf134', c0, {c0: 978432}, None),
        MemoryDep('buf135', c0, {c0: 978432}, None)]
op134_op135.unmet_dependencies = 
    [   MemoryDep('buf132', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf133', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op134_op135.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg164_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg165_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 624}, None)]
op134_op135.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op134_op135.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 978432}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf132', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf133', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg164_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg165_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 624}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (978432, 1)
op134.sizes = ([8, 624, 196], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op134_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 61152*z0 + 312*z2 + I
    index2 = 61152*z0 + 312*z2 + I
    index3 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(312, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(312, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(624, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg163_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg164_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg165_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg166_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf134', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf132', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf133', get_index)
        return load
op134_op135.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 978432}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 978432}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (978432, 1)
op135.sizes = ([978432], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op135_loop_body:
    var_ranges = {z0: 978432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op136.unmet_dependencies = [MemoryDep('buf135', 122304*c0 + c1, {c0: 8, c1: 30576}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (244608, 1)
op136.sizes = ([8, 156, 196], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op136_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf137.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op138.unmet_dependencies = [MemoryDep('buf135', 122304*c0 + c1 + 30576, {c0: 8, c1: 30576}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (244608, 1)
op138.sizes = ([8, 156, 196], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 30576
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf139.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.convolution


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op140.unmet_dependencies = [MemoryDep('buf135', 122304*c0 + c1 + 61152, {c0: 8, c1: 30576}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (244608, 1)
op140.sizes = ([8, 156, 196], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelAlloc)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelAlloc
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf141.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.convolution


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op142.unmet_dependencies = [MemoryDep('buf135', 122304*c0 + c1 + 91728, {c0: 8, c1: 30576}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (244608, 1)
op142.sizes = ([8, 156, 196], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op142_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 91728
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144_op145_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op144_op145_op146.writes = 
    [   MemoryDep('buf144', c0, {c0: 978432}, None),
        MemoryDep('buf145', c0, {c0: 4992}, None),
        MemoryDep('buf146', c0, {c0: 4992}, None)]
op144_op145_op146.unmet_dependencies = 
    [   MemoryDep('buf137', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf139', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf141', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf143', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op144_op145_op146.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 624}, None)]
op144_op145_op146.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144_op145_op146.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 978432}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf137', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf139', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf141', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf143', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg172_1', c1, {c0: 8, c1: 624}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf144.users = [
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (978432, 1)
op144.sizes = ([8, 624, 196], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 30576*z0 + 156*z2 + I
    index2 = 30576*z0 + 156*z2 + I
    index3 = 30576*z0 + 156*z2 + I
    index4 = 30576*z0 + 156*z2 + I
    index5 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(156, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(156, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(312, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(312, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(468, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(468, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(624, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg171_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg172_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf144', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf137', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf139', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf141', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf143', get_index)
        return load
op144_op145_op146.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 4992}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 978432}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 624}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (4992, 196)
op145.sizes = ([8, 624], [196])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg174_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf144', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf145', get_index_6, reduction)
        return store_reduction
op144_op145_op146.snodes[2] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 4992}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 4992}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (4992, 1)
op146.sizes = ([4992], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
class op146_loop_body:
    var_ranges = {z0: 4992}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf146', get_index_1, truediv, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 208}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 208}, None)]
op148.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 8, c1: 26}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (208, 1)
op148.sizes = ([8, 26], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[26], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
class op148_loop_body:
    var_ranges = {z0: 8, z1: 26}
    index0 = 26*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, mul, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 978432}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 978432}, None),
        MemoryDep('buf149', c0, {c0: 4992}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 624}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (978432, 1)
op150.sizes = ([8, 624, 196], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg174_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf144', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf149', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg178_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf150', get_index_8, mul_3, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', 122304*c0 + c1, {c0: 8, c1: 61152}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (489216, 1)
op151.sizes = ([8, 312, 196], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, load, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf152.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op153.unmet_dependencies = [MemoryDep('buf150', 122304*c0 + c1 + 61152, {c0: 8, c1: 61152}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (489216, 1)
op153.sizes = ([8, 312, 196], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf153', get_index_1, load, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 163072}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 163072}, None),
        MemoryDep('buf152', 52*c0 + I, {c0: 1568, c1: 104}, None),
        MemoryDep('buf154', 52*c0 + I, {c0: 1568, c1: 104}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg181_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 104}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
    buf155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (163072, 1)
op155.sizes = ([1568, 104], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
class op155_loop_body:
    var_ranges = {z0: 1568, z1: 104}
    index0 = z1
    index1 = 52*z0 + I
    index2 = 52*z0 + I
    index3 = 104*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(52, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(52, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(104, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg181_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg182_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg183_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg184_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf131', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf155', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf152', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf154', get_index)
        return load


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op157.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158_op159: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op158_op159.writes = 
    [   MemoryDep('buf158', c0, {c0: 978432}, None),
        MemoryDep('buf159', c0, {c0: 978432}, None)]
op158_op159.unmet_dependencies = 
    [   MemoryDep('buf156', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf157', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op158_op159.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg188_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg190_1', c1, {c0: 8, c1: 624}, None)]
op158_op159.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
    ]
]
op158_op159.snodes[0] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 978432}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf156', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf157', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg188_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg190_1', c1, {c0: 8, c1: 624}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (978432, 1)
op158.sizes = ([8, 624, 196], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 61152*z0 + 312*z2 + I
    index2 = 61152*z0 + 312*z2 + I
    index3 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(312, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(312, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(624, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg187_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg188_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg189_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg190_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf158', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf156', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf157', get_index)
        return load
op158_op159.snodes[1] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 978432}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 978432}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (978432, 1)
op159.sizes = ([978432], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op159_loop_body:
    var_ranges = {z0: 978432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf158', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf159', get_index_2, mul, None)
        return store


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', 122304*c0 + c1, {c0: 8, c1: 30576}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (244608, 1)
op160.sizes = ([8, 156, 196], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf160', get_index_1, load, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelAlloc)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelAlloc
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf161.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.convolution


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op162.unmet_dependencies = [MemoryDep('buf159', 122304*c0 + c1 + 30576, {c0: 8, c1: 30576}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (244608, 1)
op162.sizes = ([8, 156, 196], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 30576
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf163.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op163.node.kernel = extern_kernels.convolution


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op164.unmet_dependencies = [MemoryDep('buf159', 122304*c0 + c1 + 61152, {c0: 8, c1: 30576}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (244608, 1)
op164.sizes = ([8, 156, 196], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf164', get_index_1, load, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op166.unmet_dependencies = [MemoryDep('buf159', 122304*c0 + c1 + 91728, {c0: 8, c1: 30576}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (244608, 1)
op166.sizes = ([8, 156, 196], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op166_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 91728
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf166', get_index_1, load, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelAlloc)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelAlloc
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.convolution


op168_op169_op170: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op168_op169_op170.writes = 
    [   MemoryDep('buf168', c0, {c0: 978432}, None),
        MemoryDep('buf169', c0, {c0: 4992}, None),
        MemoryDep('buf170', c0, {c0: 4992}, None)]
op168_op169_op170.unmet_dependencies = 
    [   MemoryDep('buf161', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf163', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf165', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf167', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op168_op169_op170.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg197_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg198_1', c1, {c0: 8, c1: 624}, None)]
op168_op169_op170.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
    ]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168_op169_op170.snodes[0] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 978432}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf161', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf163', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf165', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf167', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 624}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (978432, 1)
op168.sizes = ([8, 624, 196], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 30576*z0 + 156*z2 + I
    index2 = 30576*z0 + 156*z2 + I
    index3 = 30576*z0 + 156*z2 + I
    index4 = 30576*z0 + 156*z2 + I
    index5 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(156, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(156, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(312, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(312, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(468, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(468, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(624, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg195_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg196_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf168', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf161', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf163', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf165', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf167', get_index)
        return load
op168_op169_op170.snodes[1] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 4992}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 978432}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg198_1', c1, {c0: 8, c1: 624}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (4992, 196)
op169.sizes = ([8, 624], [196])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf168', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg198_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf169', get_index_6, reduction)
        return store_reduction
op168_op169_op170.snodes[2] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 4992}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 4992}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (4992, 1)
op170.sizes = ([4992], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
class op170_loop_body:
    var_ranges = {z0: 4992}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf170', get_index_1, truediv, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelAlloc)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelAlloc
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.convolution


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 208}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 208}, None)]
op172.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 8, c1: 26}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (208, 1)
op172.sizes = ([8, 26], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[26], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 26}
    index0 = 26*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg200_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf172', get_index_4, mul, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelAlloc)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelAlloc
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.node.kernel = extern_kernels.convolution


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 978432}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 978432}, None),
        MemoryDep('buf173', c0, {c0: 4992}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg198_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg202_1', c1, {c0: 8, c1: 624}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (978432, 1)
op174.sizes = ([8, 624, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf168', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg197_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg198_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf173', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg202_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf174', get_index_8, mul_3, None)
        return store


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', 122304*c0 + c1, {c0: 8, c1: 61152}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (489216, 1)
op175.sizes = ([8, 312, 196], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf175', get_index_1, load, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op177.unmet_dependencies = [MemoryDep('buf174', 122304*c0 + c1 + 61152, {c0: 8, c1: 61152}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (489216, 1)
op177.sizes = ([8, 312, 196], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 163072}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf155', c0, {c0: 163072}, None),
        MemoryDep('buf176', 52*c0 + I, {c0: 1568, c1: 104}, None),
        MemoryDep('buf178', 52*c0 + I, {c0: 1568, c1: 104}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg206_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg208_1', c1, {c0: 1568, c1: 104}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
    buf179.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (163072, 1)
op179.sizes = ([1568, 104], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
class op179_loop_body:
    var_ranges = {z0: 1568, z1: 104}
    index0 = z1
    index1 = 52*z0 + I
    index2 = 52*z0 + I
    index3 = 104*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(52, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(52, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(104, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg205_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg206_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg207_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg208_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf155', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf179', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf176', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf178', get_index)
        return load


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op181.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.convolution


op182_op183: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op182_op183.writes = 
    [   MemoryDep('buf182', c0, {c0: 978432}, None),
        MemoryDep('buf183', c0, {c0: 978432}, None)]
op182_op183.unmet_dependencies = 
    [   MemoryDep('buf180', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf181', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op182_op183.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg212_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg213_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg214_1', c1, {c0: 8, c1: 624}, None)]
op182_op183.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op182_op183.snodes[0] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 978432}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf180', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf181', 61152*c0 + 312*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg212_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg213_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg214_1', c1, {c0: 8, c1: 624}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (978432, 1)
op182.sizes = ([8, 624, 196], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 61152*z0 + 312*z2 + I
    index2 = 61152*z0 + 312*z2 + I
    index3 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(312, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(312, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(624, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg211_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg212_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg213_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg214_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf182', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf180', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf181', get_index)
        return load
op182_op183.snodes[1] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 978432}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 978432}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (978432, 1)
op183.sizes = ([978432], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op183_loop_body:
    var_ranges = {z0: 978432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf182', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf183', get_index_2, mul, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', 122304*c0 + c1, {c0: 8, c1: 30576}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (244608, 1)
op184.sizes = ([8, 156, 196], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf184', get_index_1, load, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelAlloc)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelAlloc
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf185.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.convolution


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op186.unmet_dependencies = [MemoryDep('buf183', 122304*c0 + c1 + 30576, {c0: 8, c1: 30576}, None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (244608, 1)
op186.sizes = ([8, 156, 196], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 30576
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf186', get_index_1, load, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelAlloc)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelAlloc
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf187.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op187.node.kernel = extern_kernels.convolution


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op188.unmet_dependencies = [MemoryDep('buf183', 122304*c0 + c1 + 61152, {c0: 8, c1: 30576}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (244608, 1)
op188.sizes = ([8, 156, 196], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf189.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.convolution


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', 30576*c0 + c1 + 156*c2, {c0: 8, c1: 156, c2: 196}, None)]
op190.unmet_dependencies = [MemoryDep('buf183', 122304*c0 + c1 + 91728, {c0: 8, c1: 30576}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (244608, 1)
op190.sizes = ([8, 156, 196], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 156, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 91728
    index1 = 30576*z0 + z1 + 156*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelAlloc)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelAlloc
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.convolution


op192_op193_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194.writes = 
    [   MemoryDep('buf192', c0, {c0: 978432}, None),
        MemoryDep('buf193', c0, {c0: 4992}, None),
        MemoryDep('buf194', c0, {c0: 4992}, None)]
op192_op193_op194.unmet_dependencies = 
    [   MemoryDep('buf185', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf187', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf189', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf191', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op192_op193_op194.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg221_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg222_1', c1, {c0: 8, c1: 624}, None)]
op192_op193_op194.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op192_op193_op194.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 978432}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf185', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf187', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf189', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None),
        MemoryDep('buf191', 30576*c0 + 156*c2 + I, {c0: 8, c1: 624, c2: 196}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 624}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (978432, 1)
op192.sizes = ([8, 624, 196], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 156, 14, 14], stride=[30576, 1, 2184, 156])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = z1
    index1 = 30576*z0 + 156*z2 + I
    index2 = 30576*z0 + 156*z2 + I
    index3 = 30576*z0 + 156*z2 + I
    index4 = 30576*z0 + 156*z2 + I
    index5 = 122304*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(156, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(156, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(312, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(312, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(468, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(468, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(624, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg219_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg220_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf192', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf185', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf187', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf189', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf191', get_index)
        return load
op192_op193_op194.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4992}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 978432}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg222_1', c1, {c0: 8, c1: 624}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4992, 196)
op193.sizes = ([8, 624], [196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg222_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf192', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg221_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg222_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf193', get_index_6, reduction)
        return store_reduction
op192_op193_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 4992}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 4992}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (4992, 1)
op194.sizes = ([4992], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
class op194_loop_body:
    var_ranges = {z0: 4992}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf194', get_index_1, truediv, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelAlloc)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelAlloc
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.convolution


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 208}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 208}, None)]
op196.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 8, c1: 26}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (208, 1)
op196.sizes = ([8, 26], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[26], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 26, 1, 1], stride=[26, 1, 1, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 26}
    index0 = 26*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf196', get_index_4, mul, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 978432}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 978432}, None),
        MemoryDep('buf197', c0, {c0: 4992}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg222_1', c1, {c0: 8, c1: 624}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 624}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (978432, 1)
op198.sizes = ([8, 624, 196], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = z1
    index2 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg222_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf192', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg221_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg222_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf197', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg226_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf198', get_index_8, mul_3, None)
        return store


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', 122304*c0 + c1, {c0: 8, c1: 61152}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (489216, 1)
op199.sizes = ([8, 312, 196], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op199_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf199', get_index_1, load, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', 61152*c0 + c1 + 312*c2, {c0: 8, c1: 312, c2: 196}, None)]
op201.unmet_dependencies = [MemoryDep('buf198', 122304*c0 + c1 + 61152, {c0: 8, c1: 61152}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (489216, 1)
op201.sizes = ([8, 312, 196], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 196, 14, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 312, 14, 14], stride=[61152, 1, 4368, 312])
class op201_loop_body:
    var_ranges = {z0: 8, z1: 312, z2: 196}
    index0 = 122304*z0 + 196*z1 + z2 + 61152
    index1 = 61152*z0 + z1 + 312*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelAlloc)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelAlloc
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.node.kernel = extern_kernels.convolution


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 163072}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 163072}, None),
        MemoryDep('buf200', 52*c0 + I, {c0: 1568, c1: 104}, None),
        MemoryDep('buf202', 52*c0 + I, {c0: 1568, c1: 104}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg231_1', c1, {c0: 1568, c1: 104}, None),
        MemoryDep('arg232_1', c1, {c0: 1568, c1: 104}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (163072, 1)
op203.sizes = ([1568, 104], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 14, 14], stride=[10192, 1, 728, 52])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[104], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 104, 14, 14], stride=[20384, 1, 1456, 104])
class op203_loop_body:
    var_ranges = {z0: 1568, z1: 104}
    index0 = z1
    index1 = 52*z0 + I
    index2 = 52*z0 + I
    index3 = 104*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(52, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(52, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(104, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg229_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg230_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg231_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg232_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf179', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf203', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf200', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf202', get_index)
        return load


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op205_op206.writes = 
    [   MemoryDep('buf205', c0, {c0: 978432}, None),
        MemoryDep('buf206', c0, {c0: 978432}, None)]
op205_op206.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 978432}, None)]
op205_op206.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 624}, None)]
op205_op206.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op205_op206.snodes[0] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 978432}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 978432}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 624}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (978432, 1)
op205.sizes = ([1568, 624], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
class op205_loop_body:
    var_ranges = {z0: 1568, z1: 624}
    index0 = 624*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg236_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg237_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_1, None)
        return store
op205_op206.snodes[1] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 978432}, None)]
op206.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 978432}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (978432, 1)
op206.sizes = ([978432], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
class op206_loop_body:
    var_ranges = {z0: 978432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf206', get_index_2, mul, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 978432}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 978432}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg239_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg240_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg241_1', c1, {c0: 1568, c1: 624}, None),
        MemoryDep('arg242_1', c1, {c0: 1568, c1: 624}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (978432, 1)
op208.sizes = ([1568, 624], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 624}
    index0 = 624*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg240_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg241_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg242_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, add_1, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 9984}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', 61152*c0 + c1 + 624*c2, {c0: 16, c1: 624, c2: 98}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1, 2], stride=[1248, 1, 9984, 9984, 624])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (9984, 98)
op209.sizes = ([16, 624], [98])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1, 2], stride=[1248, 1, 9984, 9984, 624])
class op209_loop_body:
    var_ranges = {z0: 16, z1: 624, z2: 98}
    index0 = 61152*z0 + z1 + 624*z2
    index1 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf208', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf209', get_index_2, reduction)
        return store_reduction


op210_op211: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op210_op211.writes = 
    [   MemoryDep('buf210', c0, {c0: 4992}, None),
        MemoryDep('buf211', c0, {c0: 4992}, None)]
op210_op211.unmet_dependencies = [MemoryDep('buf209', 1248*c0 + c1 + 624*c2, {c0: 8, c1: 624, c2: 2}, None)]
op210_op211.met_dependencies = []
op210_op211.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210_op211.snodes[0] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 4992}, None)]
op210.unmet_dependencies = [MemoryDep('buf209', 1248*c0 + c1 + 624*c2, {c0: 8, c1: 624, c2: 2}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (4992, 2)
op210.sizes = ([8, 624], [2])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1, 2], stride=[1248, 1, 9984, 9984, 624])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 624, z2: 2}
    index0 = 1248*z0 + z1 + 624*z2
    index1 = 624*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf210', get_index_1, reduction)
        return store_reduction
op210_op211.snodes[1] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 4992}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 4992}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (4992, 1)
op211.sizes = ([4992], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 4992, 4992])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
class op211_loop_body:
    var_ranges = {z0: 4992}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf211', get_index_1, truediv, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelAlloc)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelAlloc
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 1, 1], stride=[52, 1, 1, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.convolution


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 416}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 416}, None)]
op213.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 8, c1: 52}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 52, 1, 1], stride=[52, 1, 1, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (416, 1)
op213.sizes = ([8, 52], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 1, 1], stride=[52, 1, 1, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[52], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 52, 1, 1], stride=[52, 1, 1, 1])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 52}
    index0 = 52*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf212', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf213', get_index_4, mul, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelAlloc)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelAlloc
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.convolution


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 978432}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 978432}, None),
        MemoryDep('buf214', 624*c0 + c2, {c0: 8, c1: 196, c2: 624}, None)]
op215.met_dependencies = [MemoryDep('arg246_1', c1, {c0: 1568, c1: 624}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (978432, 1)
op215.sizes = ([8, 196, 624], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 1, 1], stride=[624, 1, 1, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[624], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 624, 14, 14], stride=[122304, 1, 8736, 624])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 624}
    index0 = 122304*z0 + 624*z1 + z2
    index1 = 624*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf208', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf214', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg246_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf215', get_index_4, mul_1, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 250880}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 250880}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg249_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg250_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg251_1', c1, {c0: 1568, c1: 160}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (250880, 1)
op217.sizes = ([1568, 160], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
class op217_loop_body:
    var_ranges = {z0: 1568, z1: 160}
    index0 = 160*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg249_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg250_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg251_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_1, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelAlloc)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelAlloc
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf218.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.convolution


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op219.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op220_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op220_op221.writes = 
    [   MemoryDep('buf220', c0, {c0: 752640}, None),
        MemoryDep('buf221', c0, {c0: 752640}, None)]
op220_op221.unmet_dependencies = 
    [   MemoryDep('buf218', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf219', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op220_op221.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg255_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg257_1', c1, {c0: 8, c1: 480}, None)]
op220_op221.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
    ]
]
op220_op221.snodes[0] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 752640}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf218', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf219', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg255_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg257_1', c1, {c0: 8, c1: 480}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (752640, 1)
op220.sizes = ([8, 480, 196], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op220_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 47040*z0 + 240*z2 + I
    index2 = 47040*z0 + 240*z2 + I
    index3 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(240, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(240, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(480, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg254_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg255_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg256_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg257_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf220', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf218', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf219', get_index)
        return load
op220_op221.snodes[1] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 752640}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 752640}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (752640, 1)
op221.sizes = ([752640], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op221_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf221', get_index_2, mul, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op222.unmet_dependencies = [MemoryDep('buf221', 94080*c0 + c1, {c0: 8, c1: 23520}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (188160, 1)
op222.sizes = ([8, 120, 196], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf222', get_index_1, load, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelAlloc)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelAlloc
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf223.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.convolution


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op224.unmet_dependencies = [MemoryDep('buf221', 94080*c0 + c1 + 23520, {c0: 8, c1: 23520}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (188160, 1)
op224.sizes = ([8, 120, 196], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 23520
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf224', get_index_1, load, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf225.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op226.unmet_dependencies = [MemoryDep('buf221', 94080*c0 + c1 + 47040, {c0: 8, c1: 23520}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (188160, 1)
op226.sizes = ([8, 120, 196], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf226', get_index_1, load, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelAlloc)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg260_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelAlloc
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf227.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op227.node.kernel = extern_kernels.convolution


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op228.unmet_dependencies = [MemoryDep('buf221', 94080*c0 + c1 + 70560, {c0: 8, c1: 23520}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (188160, 1)
op228.sizes = ([8, 120, 196], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 70560
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf228', get_index_1, load, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelAlloc)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelAlloc
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.convolution


op230_op231_op232: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op230_op231_op232.writes = 
    [   MemoryDep('buf230', c0, {c0: 752640}, None),
        MemoryDep('buf231', c0, {c0: 3840}, None),
        MemoryDep('buf232', c0, {c0: 3840}, None)]
op230_op231_op232.unmet_dependencies = 
    [   MemoryDep('buf223', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf225', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf227', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf229', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op230_op231_op232.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg263_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg264_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 480}, None)]
op230_op231_op232.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op230_op231_op232.snodes[0] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 752640}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf223', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf225', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf227', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf229', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op230.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg263_1', c1, {c0: 8, c1: 480}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (752640, 1)
op230.sizes = ([8, 480, 196], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op230_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 23520*z0 + 120*z2 + I
    index2 = 23520*z0 + 120*z2 + I
    index3 = 23520*z0 + 120*z2 + I
    index4 = 23520*z0 + 120*z2 + I
    index5 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(120, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(120, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(240, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(240, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(360, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(360, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(480, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg262_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg263_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf230', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf223', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf225', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf227', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf229', get_index)
        return load
op230_op231_op232.snodes[1] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 3840}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 752640}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 480}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (3840, 196)
op231.sizes = ([8, 480], [196])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg264_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg265_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf231', get_index_6, reduction)
        return store_reduction
op230_op231_op232.snodes[2] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 3840}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 3840}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (3840, 1)
op232.sizes = ([3840], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op232_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf232', get_index_1, truediv, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 640}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 640}, None)]
op234.met_dependencies = [MemoryDep('arg267_1', c1, {c0: 8, c1: 80}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (640, 1)
op234.sizes = ([8, 80], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
class op234_loop_body:
    var_ranges = {z0: 8, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf233', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg267_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf234', get_index_4, mul, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 752640}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 752640}, None),
        MemoryDep('buf235', c0, {c0: 3840}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg269_1', c1, {c0: 8, c1: 480}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf236.users = [
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (752640, 1)
op236.sizes = ([8, 480, 196], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg264_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg265_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf235', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg269_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf236', get_index_8, mul_3, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', 94080*c0 + c1, {c0: 8, c1: 47040}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (376320, 1)
op237.sizes = ([8, 240, 196], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op237_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf237', get_index_1, load, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelAlloc)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg270_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelAlloc
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op239.unmet_dependencies = [MemoryDep('buf236', 94080*c0 + c1 + 47040, {c0: 8, c1: 47040}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (376320, 1)
op239.sizes = ([8, 240, 196], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 250880}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 250880}, None),
        MemoryDep('buf238', 80*c0 + I, {c0: 1568, c1: 160}, None),
        MemoryDep('buf240', 80*c0 + I, {c0: 1568, c1: 160}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg275_1', c1, {c0: 1568, c1: 160}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
    buf241.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op241.group.device = cuda:0
op241.group.iteration = (250880, 1)
op241.sizes = ([1568, 160], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
class op241_loop_body:
    var_ranges = {z0: 1568, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg272_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg273_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg274_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg275_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf217', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf241', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf238', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf240', get_index)
        return load


op242: ExternKernelSchedulerNode(ExternKernelAlloc)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelAlloc
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = extern_kernels.convolution


op243: ExternKernelSchedulerNode(ExternKernelAlloc)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op243.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelAlloc
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.convolution


op244_op245: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op244_op245.writes = 
    [   MemoryDep('buf244', c0, {c0: 752640}, None),
        MemoryDep('buf245', c0, {c0: 752640}, None)]
op244_op245.unmet_dependencies = 
    [   MemoryDep('buf242', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf243', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op244_op245.met_dependencies = 
    [   MemoryDep('arg278_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg279_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg280_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg281_1', c1, {c0: 8, c1: 480}, None)]
op244_op245.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op244_op245.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 752640}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf242', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf243', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg278_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg279_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg280_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg281_1', c1, {c0: 8, c1: 480}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (752640, 1)
op244.sizes = ([8, 480, 196], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op244_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 47040*z0 + 240*z2 + I
    index2 = 47040*z0 + 240*z2 + I
    index3 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(240, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(240, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(480, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg278_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg279_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg280_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg281_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf244', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf242', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf243', get_index)
        return load
op244_op245.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 752640}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 752640}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (752640, 1)
op245.sizes = ([752640], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op245_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf244', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf245', get_index_2, mul, None)
        return store


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', 94080*c0 + c1, {c0: 8, c1: 23520}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (188160, 1)
op246.sizes = ([8, 120, 196], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf246', get_index_1, load, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelAlloc)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg282_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelAlloc
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf247.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = extern_kernels.convolution


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op248.unmet_dependencies = [MemoryDep('buf245', 94080*c0 + c1 + 23520, {c0: 8, c1: 23520}, None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (188160, 1)
op248.sizes = ([8, 120, 196], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 23520
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf248', get_index_1, load, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelAlloc)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelAlloc
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf249.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.convolution


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op250.unmet_dependencies = [MemoryDep('buf245', 94080*c0 + c1 + 47040, {c0: 8, c1: 23520}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (188160, 1)
op250.sizes = ([8, 120, 196], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf250', get_index_1, load, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelAlloc)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelAlloc
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf251.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.convolution


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op252.unmet_dependencies = [MemoryDep('buf245', 94080*c0 + c1 + 70560, {c0: 8, c1: 23520}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (188160, 1)
op252.sizes = ([8, 120, 196], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 70560
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf252', get_index_1, load, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.convolution


op254_op255_op256: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op254_op255_op256.writes = 
    [   MemoryDep('buf254', c0, {c0: 752640}, None),
        MemoryDep('buf255', c0, {c0: 3840}, None),
        MemoryDep('buf256', c0, {c0: 3840}, None)]
op254_op255_op256.unmet_dependencies = 
    [   MemoryDep('buf247', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf249', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf251', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf253', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op254_op255_op256.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg287_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg288_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 480}, None)]
op254_op255_op256.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254_op255_op256.snodes[0] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 752640}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf247', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf249', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf251', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf253', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg287_1', c1, {c0: 8, c1: 480}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (752640, 1)
op254.sizes = ([8, 480, 196], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 23520*z0 + 120*z2 + I
    index2 = 23520*z0 + 120*z2 + I
    index3 = 23520*z0 + 120*z2 + I
    index4 = 23520*z0 + 120*z2 + I
    index5 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(120, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(120, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(240, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(240, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(360, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(360, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(480, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg286_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg287_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf254', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf247', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf249', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf251', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf253', get_index)
        return load
op254_op255_op256.snodes[1] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 3840}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 752640}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 480}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (3840, 196)
op255.sizes = ([8, 480], [196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg289_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf254', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg288_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg289_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_6, reduction)
        return store_reduction
op254_op255_op256.snodes[2] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 3840}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 3840}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (3840, 1)
op256.sizes = ([3840], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op256_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf256', get_index_1, truediv, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelAlloc)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelAlloc
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.convolution


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 640}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 640}, None)]
op258.met_dependencies = [MemoryDep('arg291_1', c1, {c0: 8, c1: 80}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (640, 1)
op258.sizes = ([8, 80], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg291_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg291_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf258', get_index_4, mul, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelAlloc)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelAlloc
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = extern_kernels.convolution


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 752640}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf254', c0, {c0: 752640}, None),
        MemoryDep('buf259', c0, {c0: 3840}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg293_1', c1, {c0: 8, c1: 480}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (752640, 1)
op260.sizes = ([8, 480, 196], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg289_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf254', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg288_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg289_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf259', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg293_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf260', get_index_8, mul_3, None)
        return store


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op261.unmet_dependencies = [MemoryDep('buf260', 94080*c0 + c1, {c0: 8, c1: 47040}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (376320, 1)
op261.sizes = ([8, 240, 196], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, load, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf262.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = extern_kernels.convolution


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op263.unmet_dependencies = [MemoryDep('buf260', 94080*c0 + c1 + 47040, {c0: 8, c1: 47040}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (376320, 1)
op263.sizes = ([8, 240, 196], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op263_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf263', get_index_1, load, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelAlloc)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelAlloc
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.convolution


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 250880}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf241', c0, {c0: 250880}, None),
        MemoryDep('buf262', 80*c0 + I, {c0: 1568, c1: 160}, None),
        MemoryDep('buf264', 80*c0 + I, {c0: 1568, c1: 160}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg297_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg299_1', c1, {c0: 1568, c1: 160}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (250880, 1)
op265.sizes = ([1568, 160], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
class op265_loop_body:
    var_ranges = {z0: 1568, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg296_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg297_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg298_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg299_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf241', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf265', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf262', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf264', get_index)
        return load


op266: ExternKernelSchedulerNode(ExternKernelAlloc)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelAlloc
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf266.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = extern_kernels.convolution


op267: ExternKernelSchedulerNode(ExternKernelAlloc)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op267.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelAlloc
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.convolution


op268_op269: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op268_op269.writes = 
    [   MemoryDep('buf268', c0, {c0: 752640}, None),
        MemoryDep('buf269', c0, {c0: 752640}, None)]
op268_op269.unmet_dependencies = 
    [   MemoryDep('buf266', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf267', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op268_op269.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg303_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg304_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg305_1', c1, {c0: 8, c1: 480}, None)]
op268_op269.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op268_op269.snodes[0] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 752640}, None)]
op268.unmet_dependencies = 
    [   MemoryDep('buf266', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf267', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op268.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg303_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg304_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg305_1', c1, {c0: 8, c1: 480}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (752640, 1)
op268.sizes = ([8, 480, 196], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op268_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 47040*z0 + 240*z2 + I
    index2 = 47040*z0 + 240*z2 + I
    index3 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(240, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(240, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(480, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg302_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg303_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg304_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg305_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf268', get_index_8, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf266', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf267', get_index)
        return load
op268_op269.snodes[1] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 752640}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 752640}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (752640, 1)
op269.sizes = ([752640], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op269_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, mul, None)
        return store


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op270.unmet_dependencies = [MemoryDep('buf269', 94080*c0 + c1, {c0: 8, c1: 23520}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (188160, 1)
op270.sizes = ([8, 120, 196], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op270_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf270', get_index_1, load, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf271.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op272.unmet_dependencies = [MemoryDep('buf269', 94080*c0 + c1 + 23520, {c0: 8, c1: 23520}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (188160, 1)
op272.sizes = ([8, 120, 196], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op272_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 23520
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf272', get_index_1, load, None)
        return store


op273: ExternKernelSchedulerNode(ExternKernelAlloc)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelAlloc
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf273.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op273.node.kernel = extern_kernels.convolution


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op274.unmet_dependencies = [MemoryDep('buf269', 94080*c0 + c1 + 47040, {c0: 8, c1: 23520}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (188160, 1)
op274.sizes = ([8, 120, 196], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf274', get_index_1, load, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg308_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.node.kernel = extern_kernels.convolution


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', 23520*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 196}, None)]
op276.unmet_dependencies = [MemoryDep('buf269', 94080*c0 + c1 + 70560, {c0: 8, c1: 23520}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (188160, 1)
op276.sizes = ([8, 120, 196], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 70560
    index1 = 23520*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf276', get_index_1, load, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelAlloc)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelAlloc
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.convolution


op278_op279_op280: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op278_op279_op280.writes = 
    [   MemoryDep('buf278', c0, {c0: 752640}, None),
        MemoryDep('buf279', c0, {c0: 3840}, None),
        MemoryDep('buf280', c0, {c0: 3840}, None)]
op278_op279_op280.unmet_dependencies = 
    [   MemoryDep('buf271', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf273', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf275', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf277', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op278_op279_op280.met_dependencies = 
    [   MemoryDep('arg310_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg311_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg312_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 480}, None)]
op278_op279_op280.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op278_op279_op280.snodes[0] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 752640}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf271', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf273', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf275', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf277', 23520*c0 + 120*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg310_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg311_1', c1, {c0: 8, c1: 480}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (752640, 1)
op278.sizes = ([8, 480, 196], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 14, 14], stride=[23520, 1, 1680, 120])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 23520*z0 + 120*z2 + I
    index2 = 23520*z0 + 120*z2 + I
    index3 = 23520*z0 + 120*z2 + I
    index4 = 23520*z0 + 120*z2 + I
    index5 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(120, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(120, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(240, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(240, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(360, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(360, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(480, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg310_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg311_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf278', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf271', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf273', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf275', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf277', get_index)
        return load
op278_op279_op280.snodes[1] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 3840}, None)]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 752640}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 480}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (3840, 196)
op279.sizes = ([8, 480], [196])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf278', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg312_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg313_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf279', get_index_6, reduction)
        return store_reduction
op278_op279_op280.snodes[2] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 3840}, None)]
op280.unmet_dependencies = [MemoryDep('buf279', c0, {c0: 3840}, None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (3840, 1)
op280.sizes = ([3840], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op280_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf280', get_index_1, truediv, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelAlloc)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelAlloc
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.convolution


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 640}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 640}, None)]
op282.met_dependencies = [MemoryDep('arg315_1', c1, {c0: 8, c1: 80}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (640, 1)
op282.sizes = ([8, 80], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg315_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf282', get_index_4, mul, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 752640}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf278', c0, {c0: 752640}, None),
        MemoryDep('buf283', c0, {c0: 3840}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 480}, None),
        MemoryDep('arg317_1', c1, {c0: 8, c1: 480}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (752640, 1)
op284.sizes = ([8, 480, 196], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op284_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = z1
    index2 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf278', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg312_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg313_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf283', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg317_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf284', get_index_8, mul_3, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', 94080*c0 + c1, {c0: 8, c1: 47040}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (376320, 1)
op285.sizes = ([8, 240, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op285_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf285', get_index_1, load, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelAlloc)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelAlloc
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf286.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.convolution


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', 47040*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 196}, None)]
op287.unmet_dependencies = [MemoryDep('buf284', 94080*c0 + c1 + 47040, {c0: 8, c1: 47040}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (376320, 1)
op287.sizes = ([8, 240, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op287_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2 + 47040
    index1 = 47040*z0 + z1 + 240*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf287', get_index_1, load, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelAlloc)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelAlloc
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.node.kernel = extern_kernels.convolution


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 250880}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 250880}, None),
        MemoryDep('buf286', 80*c0 + I, {c0: 1568, c1: 160}, None),
        MemoryDep('buf288', 80*c0 + I, {c0: 1568, c1: 160}, None)]
op289.met_dependencies = 
    [   MemoryDep('arg320_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg321_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg322_1', c1, {c0: 1568, c1: 160}, None),
        MemoryDep('arg323_1', c1, {c0: 1568, c1: 160}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (250880, 1)
op289.sizes = ([1568, 160], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 14, 14], stride=[31360, 1, 2240, 160])
class op289_loop_body:
    var_ranges = {z0: 1568, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg320_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg321_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg322_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg323_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf265', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf289', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf286', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf288', get_index)
        return load


op290: ExternKernelSchedulerNode(ExternKernelAlloc)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op290.outputs = [
    buf290: ExternKernelAlloc
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False)]
]
op290.node.kernel = extern_kernels.convolution


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 1505280}, None)]
op291.unmet_dependencies = [MemoryDep('buf290', c0, {c0: 1505280}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg325_1', c1, {c0: 1568, c1: 960}, None),
        MemoryDep('arg326_1', c1, {c0: 1568, c1: 960}, None),
        MemoryDep('arg327_1', c1, {c0: 1568, c1: 960}, None),
        MemoryDep('arg328_1', c1, {c0: 1568, c1: 960}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (1505280, 1)
op291.sizes = ([1568, 960], [])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
class op291_loop_body:
    var_ranges = {z0: 1568, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg325_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg326_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg327_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg328_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf291', get_index_5, add_1, None)
        return store


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 432000}, None)]
op292.unmet_dependencies = [   MemoryDep('buf291', 188160*c0 + 13440*c1 + 960*c2 + c3, {c0: 8, c1: 15, c2: 15, c3: 240}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 15, 15], stride=[54000, 1, 3600, 240])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (432000, 1)
op292.sizes = ([8, 15, 15, 240], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 15, 15], stride=[54000, 1, 3600, 240])
class op292_loop_body:
    var_ranges = {z0: 8, z1: 15, z2: 15, z3: 240}
    index0 = z1
    index1 = z2
    index2 = 188160*z0 + 13440*z1 + 960*z2 + z3
    index3 = 54000*z0 + 3600*z1 + 240*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf292', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf291', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
    buf293.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op293.node.kernel = extern_kernels.convolution


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 554880}, None)]
op294.unmet_dependencies = [   MemoryDep('buf291', 188160*c0 + 13440*c1 + 960*c2 + c3 - 14160, {c0: 8, c1: 17, c2: 17, c3: 240}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 17, 17], stride=[69360, 1, 4080, 240])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (554880, 1)
op294.sizes = ([8, 17, 17, 240], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 17, 17], stride=[69360, 1, 4080, 240])
class op294_loop_body:
    var_ranges = {z0: 8, z1: 17, z2: 17, z3: 240}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 188160*z0 + 13440*z1 + 960*z2 + z3 - 14160
    index3 = 69360*z0 + 4080*z1 + 240*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf294', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf291', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op295: ExternKernelSchedulerNode(ExternKernelAlloc)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op295.met_dependencies = [StarDep(name='arg330_1', mode=None)]
op295.outputs = [
    buf295: ExternKernelAlloc
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
    buf295.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op295.node.kernel = extern_kernels.convolution


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 693120}, None)]
op296.unmet_dependencies = [   MemoryDep('buf291', 188160*c0 + 13440*c1 + 960*c2 + c3 - 28320, {c0: 8, c1: 19, c2: 19, c3: 240}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 19, 19], stride=[86640, 1, 4560, 240])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (693120, 1)
op296.sizes = ([8, 19, 19, 240], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 19, 19], stride=[86640, 1, 4560, 240])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 19, z3: 240}
    index0 = z1 - 2
    index1 = z2 - 2
    index2 = 188160*z0 + 13440*z1 + 960*z2 + z3 - 28320
    index3 = 86640*z0 + 4560*z1 + 240*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf296', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf291', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op297: ExternKernelSchedulerNode(ExternKernelAlloc)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelAlloc
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
    buf297.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = extern_kernels.convolution


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 846720}, None)]
op298.unmet_dependencies = [   MemoryDep('buf291', 188160*c0 + 13440*c1 + 960*c2 + c3 - 42480, {c0: 8, c1: 21, c2: 21, c3: 240}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 21, 21], stride=[105840, 1, 5040, 240])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (846720, 1)
op298.sizes = ([8, 21, 21, 240], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 14, 14], stride=[188160, 1, 13440, 960])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 21, 21], stride=[105840, 1, 5040, 240])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 21, z2: 21, z3: 240}
    index0 = z1 - 3
    index1 = z2 - 3
    index2 = 188160*z0 + 13440*z1 + 960*z2 + z3 - 42480
    index3 = 105840*z0 + 5040*z1 + 240*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf298', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf291', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op299: ExternKernelSchedulerNode(ExternKernelAlloc)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelAlloc
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.node.kernel = extern_kernels.convolution


op300_op301_op302: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op302.writes = 
    [   MemoryDep('buf300', c0, {c0: 376320}, None),
        MemoryDep('buf301', c0, {c0: 7680}, None),
        MemoryDep('buf302', c0, {c0: 7680}, None)]
op300_op301_op302.unmet_dependencies = 
    [   MemoryDep('buf293', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf295', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf297', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf299', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op300_op301_op302.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg334_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg335_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg336_1', c1, {c0: 8, c1: 960}, None)]
op300_op301_op302.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300_op301_op302.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 376320}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf293', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf295', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf297', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf299', 11760*c0 + 240*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op300.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg334_1', c1, {c0: 8, c1: 960}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (376320, 1)
op300.sizes = ([8, 960, 49], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 7, 7], stride=[11760, 1, 1680, 240])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
class op300_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = z1
    index1 = 11760*z0 + 240*z2 + I
    index2 = 11760*z0 + 240*z2 + I
    index3 = 11760*z0 + 240*z2 + I
    index4 = 11760*z0 + 240*z2 + I
    index5 = 47040*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(240, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(240, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(480, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(480, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(720, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(720, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(960, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg333_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg334_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf300', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf293', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf295', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf297', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf299', get_index)
        return load
op300_op301_op302.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 7680}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 376320}, None)]
op301.met_dependencies = 
    [   MemoryDep('arg335_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg336_1', c1, {c0: 8, c1: 960}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (7680, 49)
op301.sizes = ([8, 960], [49])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op301_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + 49*z1 + z2
    index1 = z1
    index2 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg335_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg336_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf300', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg335_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg336_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_6, reduction)
        return store_reduction
op300_op301_op302.snodes[2] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 7680}, None)]
op302.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 7680}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (7680, 1)
op302.sizes = ([7680], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op302_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf302', get_index_1, truediv, None)
        return store


op303: ExternKernelSchedulerNode(ExternKernelAlloc)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelAlloc
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False)]
]
op303.node.kernel = extern_kernels.convolution


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 640}, None)]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 640}, None)]
op304.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 8, c1: 80}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (640, 1)
op304.sizes = ([8, 80], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 1, 1], stride=[80, 1, 1, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg338_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf303', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg338_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf304', get_index_4, mul, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelAlloc)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg339_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelAlloc
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.convolution


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf300', c0, {c0: 376320}, None),
        MemoryDep('buf305', c0, {c0: 7680}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg335_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg336_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 960}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (376320, 1)
op306.sizes = ([8, 960, 49], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + 49*z1 + z2
    index1 = z1
    index2 = 960*z0 + z1
    index3 = 47040*z0 + z1 + 960*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg335_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg336_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf300', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg335_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg336_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf305', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg340_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf306', get_index_8, mul_3, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.convolution


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 103488}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 103488}, None)]
op308.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg343_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg344_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg345_1', c1, {c0: 392, c1: 264}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
    buf308.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (103488, 1)
op308.sizes = ([392, 264], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
class op308_loop_body:
    var_ranges = {z0: 392, z1: 264}
    index0 = 264*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf308', get_index_5, add_1, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelAlloc)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelAlloc
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.convolution


op310_op311: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op310_op311.writes = 
    [   MemoryDep('buf310', c0, {c0: 620928}, None),
        MemoryDep('buf311', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op310_op311.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 620928}, None)]
op310_op311.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg348_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg350_1', c1, {c0: 392, c1: 1584}, None)]
op310_op311.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf310.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
    ]
]
op310_op311.snodes[0] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 620928}, None)]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 620928}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg348_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg350_1', c1, {c0: 392, c1: 1584}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf310.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (620928, 1)
op310.sizes = ([392, 1584], [])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
class op310_loop_body:
    var_ranges = {z0: 392, z1: 1584}
    index0 = 1584*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf310', get_index_5, add_1, None)
        return store
op310_op311.snodes[1] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 620928}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (620928, 1)
op311.sizes = ([8, 49, 1584], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1584}
    index0 = 77616*z0 + 1584*z1 + z2
    index1 = 77616*z0 + z1 + 49*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf310', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf311', get_index_2, mul, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', 77616*c0 + c1, {c0: 8, c1: 19404}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (155232, 1)
op312.sizes = ([8, 396, 49], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op312_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf312', get_index_1, load, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelAlloc)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelAlloc
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf313.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op313.node.kernel = extern_kernels.convolution


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op314.unmet_dependencies = [MemoryDep('buf311', 77616*c0 + c1 + 19404, {c0: 8, c1: 19404}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (155232, 1)
op314.sizes = ([8, 396, 49], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op314_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 19404
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf314', get_index_1, load, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg352_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf315.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.convolution


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op316.unmet_dependencies = [MemoryDep('buf311', 77616*c0 + c1 + 38808, {c0: 8, c1: 19404}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (155232, 1)
op316.sizes = ([8, 396, 49], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf316', get_index_1, load, None)
        return store


op317: ExternKernelSchedulerNode(ExternKernelAlloc)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelAlloc
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf317.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.convolution


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op318.unmet_dependencies = [MemoryDep('buf311', 77616*c0 + c1 + 58212, {c0: 8, c1: 19404}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (155232, 1)
op318.sizes = ([8, 396, 49], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op318_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 58212
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelAlloc)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg354_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelAlloc
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.node.kernel = extern_kernels.convolution


op320_op321_op322: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op320_op321_op322.writes = 
    [   MemoryDep('buf320', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf321', c0, {c0: 12672}, None),
        MemoryDep('buf322', c0, {c0: 12672}, None)]
op320_op321_op322.unmet_dependencies = 
    [   MemoryDep('buf313', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf315', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf317', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf319', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op320_op321_op322.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg356_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg357_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 1584}, None)]
op320_op321_op322.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op320_op321_op322.snodes[0] =
op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf313', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf315', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf317', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf319', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg356_1', c1, {c0: 8, c1: 1584}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (620928, 1)
op320.sizes = ([8, 1584, 49], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = z1
    index1 = 19404*z0 + 396*z2 + I
    index2 = 19404*z0 + 396*z2 + I
    index3 = 19404*z0 + 396*z2 + I
    index4 = 19404*z0 + 396*z2 + I
    index5 = 77632*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(396, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(396, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(792, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(792, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1188, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1188, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1584, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg355_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg356_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf320', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf313', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf315', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf317', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf319', get_index)
        return load
op320_op321_op322.snodes[1] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 12672}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op321.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 1584}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (12672, 49)
op321.sizes = ([8, 1584], [49])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
class op321_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf320', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg357_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg358_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf321', get_index_6, reduction)
        return store_reduction
op320_op321_op322.snodes[2] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 12672}, None)]
op322.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 12672}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (12672, 1)
op322.sizes = ([12672], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
class op322_loop_body:
    var_ranges = {z0: 12672}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf322', get_index_1, truediv, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelAlloc)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = [StarDep(name='arg359_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelAlloc
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False)]
]
op323.node.kernel = extern_kernels.convolution


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 1056}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 1056}, None)]
op324.met_dependencies = [MemoryDep('arg360_1', c1, {c0: 8, c1: 132}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (1056, 1)
op324.sizes = ([8, 132], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[132], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 132}
    index0 = 132*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg360_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf323', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg360_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf324', get_index_4, mul, None)
        return store


op325: ExternKernelSchedulerNode(ExternKernelAlloc)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelAlloc
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.node.kernel = extern_kernels.convolution


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 620928}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf320', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf325', c0, {c0: 12672}, None)]
op326.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg362_1', c1, {c0: 8, c1: 1584}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (620928, 1)
op326.sizes = ([8, 1584, 49], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op326_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    index3 = 77616*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf320', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg357_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg358_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf325', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg362_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf326', get_index_8, mul_3, None)
        return store


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', 77616*c0 + c1, {c0: 8, c1: 38808}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (310464, 1)
op327.sizes = ([8, 792, 49], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf327', get_index_1, load, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelAlloc)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelAlloc
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf328.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = extern_kernels.convolution


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op329.unmet_dependencies = [MemoryDep('buf326', 77616*c0 + c1 + 38808, {c0: 8, c1: 38808}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (310464, 1)
op329.sizes = ([8, 792, 49], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf329', get_index_1, load, None)
        return store


op330: ExternKernelSchedulerNode(ExternKernelAlloc)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg364_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelAlloc
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.node.kernel = extern_kernels.convolution


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 103488}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 103488}, None),
        MemoryDep('buf328', 132*c0 + I, {c0: 392, c1: 264}, None),
        MemoryDep('buf330', 132*c0 + I, {c0: 392, c1: 264}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg365_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg366_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg367_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg368_1', c1, {c0: 392, c1: 264}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
    buf331.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (103488, 1)
op331.sizes = ([392, 264], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
class op331_loop_body:
    var_ranges = {z0: 392, z1: 264}
    index0 = z1
    index1 = 132*z0 + I
    index2 = 132*z0 + I
    index3 = 264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(132, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(132, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(264, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg365_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg366_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg367_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg368_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf308', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf331', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf330', get_index)
        return load


op332: ExternKernelSchedulerNode(ExternKernelAlloc)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelAlloc
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op332.node.kernel = extern_kernels.convolution


op333_op334: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op333_op334.writes = 
    [   MemoryDep('buf333', c0, {c0: 620928}, None),
        MemoryDep('buf334', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op333_op334.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 620928}, None)]
op333_op334.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg371_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg372_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg373_1', c1, {c0: 392, c1: 1584}, None)]
op333_op334.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op333_op334.snodes[0] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 620928}, None)]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 620928}, None)]
op333.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg371_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg372_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg373_1', c1, {c0: 392, c1: 1584}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (620928, 1)
op333.sizes = ([392, 1584], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
class op333_loop_body:
    var_ranges = {z0: 392, z1: 1584}
    index0 = 1584*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg371_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg372_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg373_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf333', get_index_5, add_1, None)
        return store
op333_op334.snodes[1] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 620928}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (620928, 1)
op334.sizes = ([8, 49, 1584], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op334_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1584}
    index0 = 77616*z0 + 1584*z1 + z2
    index1 = 77616*z0 + z1 + 49*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf333', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf334', get_index_2, mul, None)
        return store


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', 77616*c0 + c1, {c0: 8, c1: 19404}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (155232, 1)
op335.sizes = ([8, 396, 49], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op335_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf335', get_index_1, load, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg374_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf336.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op337.unmet_dependencies = [MemoryDep('buf334', 77616*c0 + c1 + 19404, {c0: 8, c1: 19404}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (155232, 1)
op337.sizes = ([8, 396, 49], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op337_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 19404
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf337', get_index_1, load, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelAlloc)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelAlloc
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf338.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op338.node.kernel = extern_kernels.convolution


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op339.unmet_dependencies = [MemoryDep('buf334', 77616*c0 + c1 + 38808, {c0: 8, c1: 19404}, None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (155232, 1)
op339.sizes = ([8, 396, 49], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op339_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf339', get_index_1, load, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op340.node.kernel = extern_kernels.convolution


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op341.unmet_dependencies = [MemoryDep('buf334', 77616*c0 + c1 + 58212, {c0: 8, c1: 19404}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (155232, 1)
op341.sizes = ([8, 396, 49], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 58212
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf341', get_index_1, load, None)
        return store


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.node.kernel = extern_kernels.convolution


op343_op344_op345: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op343_op344_op345.writes = 
    [   MemoryDep('buf343', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf344', c0, {c0: 12672}, None),
        MemoryDep('buf345', c0, {c0: 12672}, None)]
op343_op344_op345.unmet_dependencies = 
    [   MemoryDep('buf336', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf338', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf340', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf342', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op343_op344_op345.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg379_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg380_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg381_1', c1, {c0: 8, c1: 1584}, None)]
op343_op344_op345.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op343_op344_op345.snodes[0] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf336', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf338', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf340', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf342', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg379_1', c1, {c0: 8, c1: 1584}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (620928, 1)
op343.sizes = ([8, 1584, 49], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
class op343_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = z1
    index1 = 19404*z0 + 396*z2 + I
    index2 = 19404*z0 + 396*z2 + I
    index3 = 19404*z0 + 396*z2 + I
    index4 = 19404*z0 + 396*z2 + I
    index5 = 77632*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(396, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(396, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(792, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(792, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1188, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1188, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1584, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg378_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg379_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf343', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf336', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf338', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf340', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf342', get_index)
        return load
op343_op344_op345.snodes[1] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 12672}, None)]
op344.unmet_dependencies = [MemoryDep('buf343', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op344.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg381_1', c1, {c0: 8, c1: 1584}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (12672, 49)
op344.sizes = ([8, 1584], [49])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
class op344_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg380_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg381_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf343', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg381_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf344', get_index_6, reduction)
        return store_reduction
op343_op344_op345.snodes[2] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 12672}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 12672}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (12672, 1)
op345.sizes = ([12672], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
class op345_loop_body:
    var_ranges = {z0: 12672}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf345', get_index_1, truediv, None)
        return store


op346: ExternKernelSchedulerNode(ExternKernelAlloc)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg382_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelAlloc
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False)]
]
op346.node.kernel = extern_kernels.convolution


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 1056}, None)]
op347.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 1056}, None)]
op347.met_dependencies = [MemoryDep('arg383_1', c1, {c0: 8, c1: 132}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (1056, 1)
op347.sizes = ([8, 132], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[132], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
class op347_loop_body:
    var_ranges = {z0: 8, z1: 132}
    index0 = 132*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg383_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf346', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg383_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf347', get_index_4, mul, None)
        return store


op348: ExternKernelSchedulerNode(ExternKernelAlloc)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg384_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelAlloc
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = extern_kernels.convolution


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 620928}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf343', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf348', c0, {c0: 12672}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg380_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg381_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg385_1', c1, {c0: 8, c1: 1584}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (620928, 1)
op349.sizes = ([8, 1584, 49], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op349_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    index3 = 77616*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg380_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg381_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf343', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg381_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf348', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg385_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf349', get_index_8, mul_3, None)
        return store


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op350.unmet_dependencies = [MemoryDep('buf349', 77616*c0 + c1, {c0: 8, c1: 38808}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (310464, 1)
op350.sizes = ([8, 792, 49], [])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf350', get_index_1, load, None)
        return store


op351: ExternKernelSchedulerNode(ExternKernelAlloc)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op351.met_dependencies = [StarDep(name='arg386_1', mode=None)]
op351.outputs = [
    buf351: ExternKernelAlloc
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf351.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op351.node.kernel = extern_kernels.convolution


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op352.unmet_dependencies = [MemoryDep('buf349', 77616*c0 + c1 + 38808, {c0: 8, c1: 38808}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (310464, 1)
op352.sizes = ([8, 792, 49], [])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf352', get_index_1, load, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelAlloc)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelAlloc
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.node.kernel = extern_kernels.convolution


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 103488}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 103488}, None),
        MemoryDep('buf351', 132*c0 + I, {c0: 392, c1: 264}, None),
        MemoryDep('buf353', 132*c0 + I, {c0: 392, c1: 264}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg388_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg389_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg390_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg391_1', c1, {c0: 392, c1: 264}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
    buf354.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=True, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (103488, 1)
op354.sizes = ([392, 264], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
class op354_loop_body:
    var_ranges = {z0: 392, z1: 264}
    index0 = z1
    index1 = 132*z0 + I
    index2 = 132*z0 + I
    index3 = 264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(132, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(132, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(264, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg388_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg389_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg390_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg391_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf331', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf354', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf351', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf353', get_index)
        return load


op355: ExternKernelSchedulerNode(ExternKernelAlloc)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg392_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelAlloc
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op355.node.kernel = extern_kernels.convolution


op356_op357: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op356_op357.writes = 
    [   MemoryDep('buf356', c0, {c0: 620928}, None),
        MemoryDep('buf357', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op356_op357.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 620928}, None)]
op356_op357.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg394_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg395_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg396_1', c1, {c0: 392, c1: 1584}, None)]
op356_op357.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op356_op357.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 620928}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 620928}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg394_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg395_1', c1, {c0: 392, c1: 1584}, None),
        MemoryDep('arg396_1', c1, {c0: 392, c1: 1584}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (620928, 1)
op356.sizes = ([392, 1584], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
class op356_loop_body:
    var_ranges = {z0: 392, z1: 1584}
    index0 = 1584*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg394_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg395_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg396_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf356', get_index_5, add_1, None)
        return store
op356_op357.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 77616*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 1584}, None)]
op357.unmet_dependencies = [MemoryDep('buf356', c0, {c0: 620928}, None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (620928, 1)
op357.sizes = ([8, 49, 1584], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 1, 11088, 1584])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1584}
    index0 = 77616*z0 + 1584*z1 + z2
    index1 = 77616*z0 + z1 + 49*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf356', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf357', get_index_2, mul, None)
        return store


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', 77616*c0 + c1, {c0: 8, c1: 19404}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (155232, 1)
op358.sizes = ([8, 396, 49], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op358_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf358', get_index_1, load, None)
        return store


op359: ExternKernelSchedulerNode(ExternKernelAlloc)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg397_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelAlloc
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf359.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op359.node.kernel = extern_kernels.convolution


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op360.unmet_dependencies = [MemoryDep('buf357', 77616*c0 + c1 + 19404, {c0: 8, c1: 19404}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (155232, 1)
op360.sizes = ([8, 396, 49], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op360_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 19404
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf360', get_index_1, load, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelAlloc)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg398_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelAlloc
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf361.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = extern_kernels.convolution


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op362.unmet_dependencies = [MemoryDep('buf357', 77616*c0 + c1 + 38808, {c0: 8, c1: 19404}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (155232, 1)
op362.sizes = ([8, 396, 49], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, load, None)
        return store


op363: ExternKernelSchedulerNode(ExternKernelAlloc)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelAlloc
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf363.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op363.node.kernel = extern_kernels.convolution


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', 19404*c0 + c1 + 396*c2, {c0: 8, c1: 396, c2: 49}, None)]
op364.unmet_dependencies = [MemoryDep('buf357', 77616*c0 + c1 + 58212, {c0: 8, c1: 19404}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (155232, 1)
op364.sizes = ([8, 396, 49], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
class op364_loop_body:
    var_ranges = {z0: 8, z1: 396, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 58212
    index1 = 19404*z0 + z1 + 396*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf364', get_index_1, load, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelAlloc)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg400_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelAlloc
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = extern_kernels.convolution


op366_op367_op368: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op366_op367_op368.writes = 
    [   MemoryDep('buf366', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf367', c0, {c0: 12672}, None),
        MemoryDep('buf368', c0, {c0: 12672}, None)]
op366_op367_op368.unmet_dependencies = 
    [   MemoryDep('buf359', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf361', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf363', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf365', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op366_op367_op368.met_dependencies = 
    [   MemoryDep('arg401_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg402_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg403_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg404_1', c1, {c0: 8, c1: 1584}, None)]
op366_op367_op368.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op366_op367_op368.snodes[0] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf359', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf361', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf363', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None),
        MemoryDep('buf365', 19404*c0 + 396*c2 + I, {c0: 8, c1: 1584, c2: 49}, None)]
op366.met_dependencies = 
    [   MemoryDep('arg401_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg402_1', c1, {c0: 8, c1: 1584}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (620928, 1)
op366.sizes = ([8, 1584, 49], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 396, 7, 7], stride=[19404, 1, 2772, 396])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
class op366_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = z1
    index1 = 19404*z0 + 396*z2 + I
    index2 = 19404*z0 + 396*z2 + I
    index3 = 19404*z0 + 396*z2 + I
    index4 = 19404*z0 + 396*z2 + I
    index5 = 77632*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(396, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(396, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(792, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(792, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(1188, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(1188, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(1584, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index0')
        load = ops.load('arg401_1', get_index_8)
        sub = ops.sub(where_2, load)
        get_index_9 = self.get_index('index0')
        load_1 = ops.load('arg402_1', get_index_9)
        constant_8 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_8)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_9 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_9)
        mul_1 = ops.mul(sub, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf366', get_index_10, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf359', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf361', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf363', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf365', get_index)
        return load
op366_op367_op368.snodes[1] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 12672}, None)]
op367.unmet_dependencies = [MemoryDep('buf366', 77632*c0 + c1, {c0: 8, c1: 77616}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg403_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg404_1', c1, {c0: 8, c1: 1584}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (12672, 49)
op367.sizes = ([8, 1584], [49])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
class op367_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg403_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf366', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg403_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg404_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf367', get_index_6, reduction)
        return store_reduction
op366_op367_op368.snodes[2] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 12672}, None)]
op368.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 12672}, None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (12672, 1)
op368.sizes = ([12672], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 12672, 12672])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
class op368_loop_body:
    var_ranges = {z0: 12672}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf368', get_index_1, truediv, None)
        return store


op369: ExternKernelSchedulerNode(ExternKernelAlloc)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op369.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelAlloc
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.convolution


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 1056}, None)]
op370.unmet_dependencies = [MemoryDep('buf369', c0, {c0: 1056}, None)]
op370.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 8, c1: 132}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (1056, 1)
op370.sizes = ([8, 132], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[132], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 1, 1], stride=[132, 1, 1, 1])
class op370_loop_body:
    var_ranges = {z0: 8, z1: 132}
    index0 = 132*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg406_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf369', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg406_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf370', get_index_4, mul, None)
        return store


op371: ExternKernelSchedulerNode(ExternKernelAlloc)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op371.met_dependencies = [StarDep(name='arg407_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelAlloc
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.convolution


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 620928}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf366', 77632*c0 + c1, {c0: 8, c1: 77616}, None),
        MemoryDep('buf371', c0, {c0: 12672}, None)]
op372.met_dependencies = 
    [   MemoryDep('arg403_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg404_1', c1, {c0: 8, c1: 1584}, None),
        MemoryDep('arg408_1', c1, {c0: 8, c1: 1584}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (620928, 1)
op372.sizes = ([8, 1584, 49], [])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77632, 49, 7, 1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 1, 1], stride=[1584, 1, 1, 1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[1584], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 1584, z2: 49}
    index0 = 77632*z0 + 49*z1 + z2
    index1 = z1
    index2 = 1584*z0 + z1
    index3 = 77616*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg403_1', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg404_1', get_index_2)
        add = ops.add(mul, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf366', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg403_1', get_index_4)
        mul_1 = ops.mul(load_3, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg404_1', get_index_5)
        add_1 = ops.add(mul_1, load_5)
        sigmoid = ops.sigmoid(add_1)
        mul_2 = ops.mul(add, sigmoid)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf371', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg408_1', get_index_7)
        add_2 = ops.add(load_6, load_7)
        sigmoid_1 = ops.sigmoid(add_2)
        mul_3 = ops.mul(mul_2, sigmoid_1)
        get_index_8 = self.get_index('index3')
        store = ops.store('buf372', get_index_8, mul_3, None)
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op373.unmet_dependencies = [MemoryDep('buf372', 77616*c0 + c1, {c0: 8, c1: 38808}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (310464, 1)
op373.sizes = ([8, 792, 49], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op373_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf373', get_index_1, load, None)
        return store


op374: ExternKernelSchedulerNode(ExternKernelAlloc)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf373', mode=None)]
op374.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelAlloc
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf374.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op374.node.kernel = extern_kernels.convolution


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', 38808*c0 + c1 + 792*c2, {c0: 8, c1: 792, c2: 49}, None)]
op375.unmet_dependencies = [MemoryDep('buf372', 77616*c0 + c1 + 38808, {c0: 8, c1: 38808}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (310464, 1)
op375.sizes = ([8, 792, 49], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 1584, 7, 7], stride=[77616, 49, 7, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 792, 7, 7], stride=[38808, 1, 5544, 792])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 792, z2: 49}
    index0 = 77616*z0 + 49*z1 + z2 + 38808
    index1 = 38808*z0 + z1 + 792*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf375', get_index_1, load, None)
        return store


op376: ExternKernelSchedulerNode(ExternKernelAlloc)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op376.met_dependencies = [StarDep(name='arg410_1', mode=None)]
op376.outputs = [
    buf376: ExternKernelAlloc
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
    buf376.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.node.kernel = extern_kernels.convolution


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 103488}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 103488}, None),
        MemoryDep('buf374', 132*c0 + I, {c0: 392, c1: 264}, None),
        MemoryDep('buf376', 132*c0 + I, {c0: 392, c1: 264}, None)]
op377.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg412_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg413_1', c1, {c0: 392, c1: 264}, None),
        MemoryDep('arg414_1', c1, {c0: 392, c1: 264}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (103488, 1)
op377.sizes = ([392, 264], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 132, 7, 7], stride=[6468, 1, 924, 132])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[264], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 264, 7, 7], stride=[12936, 1, 1848, 264])
class op377_loop_body:
    var_ranges = {z0: 392, z1: 264}
    index0 = z1
    index1 = 132*z0 + I
    index2 = 132*z0 + I
    index3 = 264*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(132, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(132, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(264, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        load = ops.load('arg411_1', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg412_1', get_index_5)
        constant_4 = ops.constant(0.001, torch.float32)
        add = ops.add(load_1, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg413_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_2)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg414_1', get_index_7)
        add_1 = ops.add(mul_2, load_3)
        get_index_8 = self.get_index('index3')
        load_4 = ops.load('buf354', get_index_8)
        add_2 = ops.add(add_1, load_4)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf377', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf374', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf376', get_index)
        return load


op378: ExternKernelSchedulerNode(ExternKernelAlloc)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf377', mode=None)]
op378.met_dependencies = [StarDep(name='arg415_1', mode=None)]
op378.outputs = [
    buf378: ExternKernelAlloc
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 7, 7], stride=[75264, 1, 10752, 1536])
    buf378.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.node.kernel = extern_kernels.convolution


op379_op380: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op379_op380.writes = 
    [   MemoryDep('buf379', c0, {c0: 12288}, None),
        MemoryDep('buf380', c0, {c0: 12288}, None)]
op379_op380.unmet_dependencies = [MemoryDep('buf378', 75264*c0 + c1 + 1536*c2, {c0: 8, c1: 1536, c2: 49}, None)]
op379_op380.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg417_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg418_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg419_1', c1, {c0: 8, c1: 1536}, None)]
op379_op380.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op379_op380.snodes[0] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 12288}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', 75264*c0 + c1 + 1536*c2, {c0: 8, c1: 1536, c2: 49}, None)]
op379.met_dependencies = 
    [   MemoryDep('arg416_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg417_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg418_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg419_1', c1, {c0: 8, c1: 1536}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (12288, 49)
op379.sizes = ([8, 1536], [49])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 7, 7], stride=[75264, 1, 10752, 1536])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 49}
    index0 = 75264*z0 + z1 + 1536*z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg416_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg417_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg418_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg419_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf379', get_index_5, reduction)
        return store_reduction
op379_op380.snodes[1] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 12288}, None)]
op380.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 12288}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (12288, 1)
op380.sizes = ([12288], [])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op380_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf380', get_index_1, truediv, None)
        return store


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg420_1', mode=None), StarDep(name='arg421_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf381.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op381.node.kernel = extern_kernels.addmm



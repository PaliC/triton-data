op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 9408}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op1.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (9408, 128)
op1.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf1', get_index_2, getitem)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 9408}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op2.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (9408, 128)
op2.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf2', get_index_2, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 9408}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op3.met_dependencies = [MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (9408, 128)
op3.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem_2)
        return store_reduction


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1568}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf2', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf3', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1568, 6)
op4.sizes = ([8, 196], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1568}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf2', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf3', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1568, 6)
op5.sizes = ([8, 196], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1204224}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 1204224}, None),
        MemoryDep('buf4', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf5', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg4_1', c1, {c0: 8, c1: 768}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1204224, 1)
op7.sizes = ([8, 768, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z1
    index2 = 196*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf5', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf7', get_index_6, add_2, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2359296}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 2359296}, None)]
op9.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 6144, c1: 384}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (2359296, 1)
op9.sizes = ([6144, 384], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op9_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf9', get_index_4, mul_2, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.mm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 9408}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 48, c1: 196}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf11.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (9408, 128)
op11.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf11', get_index_4, getitem)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 9408}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 48, c1: 196}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (9408, 128)
op12.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf12', get_index_4, getitem_1)
        return store_reduction


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 9408}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf0', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf10', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg2_1', 128*c1 + c3, {c0: 8, c1: 6, c2: 196, c3: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 48, c1: 196}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (9408, 128)
op13.sizes = ([8, 6, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 196, z3: 128}
    index0 = 150528*z0 + 25088*z1 + z2 + 196*z3
    index1 = 128*z1 + z3
    index2 = z2
    index3 = 1176*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf13', get_index_4, getitem_2)
        return store_reduction


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1568}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf11', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf12', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf13', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf14.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1568, 6)
op14.sizes = ([8, 196], [6])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf13', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf14', get_index_3, getitem)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 1568}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf11', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf12', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf13', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf15.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1568, 6)
op15.sizes = ([8, 196], [6])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf13', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_3, getitem_1)
        return store_reduction


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 1204224}, None),
        MemoryDep('buf10', c0, {c0: 1204224}, None),
        MemoryDep('buf14', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf15', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg2_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg8_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg9_1', c1, {c0: 8, c1: 768}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1204224, 1)
op17.sizes = ([8, 768, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z1
    index2 = z2
    index3 = 196*z0 + z2
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf14', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf15', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg9_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg10_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf17', get_index_8, add_4, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 4816896}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 4816896}, None)]
op19.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 1568, c1: 3072}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (4816896, 1)
op19.sizes = ([1568, 3072], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op19_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf18', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf19', get_index_4, mul_2, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1204224}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 1204224}, None),
        MemoryDep('buf10', c0, {c0: 1204224}, None),
        MemoryDep('buf20', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg2_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg8_1', c1, {c0: 6144, c1: 196}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (1204224, 1)
op21.sizes = ([8, 768, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z1
    index2 = z2
    index3 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg8_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf20', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg14_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf21', get_index_6, add_4, None)
        return store


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 9408}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (9408, 128)
op22.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op22_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, getitem)
        return store_reduction


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 9408}, None)]
op23.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (9408, 128)
op23.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op23_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, getitem_1)
        return store_reduction


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 9408}, None)]
op24.unmet_dependencies = [MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (9408, 128)
op24.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op24_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem_2)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1568}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf22', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf23', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf24', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1568, 6)
op25.sizes = ([8, 196], [6])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1568}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf22', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf23', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf24', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1568, 6)
op26.sizes = ([8, 196], [6])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1204224}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 1204224}, None),
        MemoryDep('buf25', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf26', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg16_1', c1, {c0: 8, c1: 768}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1204224, 1)
op28.sizes = ([8, 768, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf26', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg15_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg16_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf28', get_index_5, add_1, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 2359296}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 2359296}, None)]
op30.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 6144, c1: 384}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (2359296, 1)
op30.sizes = ([6144, 384], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op30_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg18_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf30', get_index_4, mul_2, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 9408}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op32.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 48, c1: 196}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (9408, 128)
op32.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op32_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf32', get_index_3, getitem)
        return store_reduction


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 9408}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op33.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 48, c1: 196}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (9408, 128)
op33.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op33_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_3, getitem_1)
        return store_reduction


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 9408}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf21', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf31', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op34.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 48, c1: 196}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (9408, 128)
op34.sizes = ([48, 196], [128])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op34_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem_2)
        return store_reduction


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1568}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf33', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf34', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1568, 6)
op35.sizes = ([8, 196], [6])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf34', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_3, getitem)
        return store_reduction


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1568}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf33', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf34', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1568, 6)
op36.sizes = ([8, 196], [6])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf34', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem_1)
        return store_reduction


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 1204224}, None),
        MemoryDep('buf31', c0, {c0: 1204224}, None),
        MemoryDep('buf35', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf36', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg21_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg22_1', c1, {c0: 8, c1: 768}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1204224, 1)
op38.sizes = ([8, 768, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf35', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf36', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg21_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg22_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf38', get_index_7, add_3, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 4816896}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 4816896}, None)]
op40.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 1568, c1: 3072}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (4816896, 1)
op40.sizes = ([1568, 3072], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op40_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf40', get_index_4, mul_2, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1204224}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 1204224}, None),
        MemoryDep('buf31', c0, {c0: 1204224}, None),
        MemoryDep('buf41', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg26_1', c1, {c0: 8, c1: 768}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (1204224, 1)
op42.sizes = ([8, 768, 196], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf31_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg20_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf41', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg26_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 9408}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (9408, 128)
op43.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op43_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 9408}, None)]
op44.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (9408, 128)
op44.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op44_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 9408}, None)]
op45.unmet_dependencies = [MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf45.users = [
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (9408, 128)
op45.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op45_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, getitem_2)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1568}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf43', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf44', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf45', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf46.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1568, 6)
op46.sizes = ([8, 196], [6])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op46_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf46', get_index_3, getitem)
        return store_reduction


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 1568}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf43', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf44', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf45', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf47.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (1568, 6)
op47.sizes = ([8, 196], [6])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem_1)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 1204224}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1204224}, None),
        MemoryDep('buf46', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf47', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 8, c1: 768}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1204224, 1)
op49.sizes = ([8, 768, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf47', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg27_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg28_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf49', get_index_5, add_1, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 2359296}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 2359296}, None)]
op51.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 6144, c1: 384}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (2359296, 1)
op51.sizes = ([6144, 384], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op51_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf50', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg30_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf51', get_index_4, mul_2, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelOut)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelOut
    buf52.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op52.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 9408}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op53.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 48, c1: 196}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (9408, 128)
op53.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op53_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf53', get_index_3, getitem)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 9408}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op54.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 48, c1: 196}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (9408, 128)
op54.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op54_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_3, getitem_1)
        return store_reduction


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 9408}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf42', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf52', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op55.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 48, c1: 196}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (9408, 128)
op55.sizes = ([48, 196], [128])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op55_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_3, getitem_2)
        return store_reduction


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1568}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf53', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf54', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf55', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf56.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1568, 6)
op56.sizes = ([8, 196], [6])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_3, getitem)
        return store_reduction


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1568}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf53', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf54', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf55', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf57.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1568, 6)
op57.sizes = ([8, 196], [6])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_3, getitem_1)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1204224}, None),
        MemoryDep('buf52', c0, {c0: 1204224}, None),
        MemoryDep('buf56', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf57', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg34_1', c1, {c0: 8, c1: 768}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1204224, 1)
op59.sizes = ([8, 768, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf56', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf57', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg33_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg34_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf59', get_index_7, add_3, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 4816896}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', c0, {c0: 4816896}, None)]
op61.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 1568, c1: 3072}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (4816896, 1)
op61.sizes = ([1568, 3072], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op61_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf61', get_index_4, mul_2, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1204224}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1204224}, None),
        MemoryDep('buf52', c0, {c0: 1204224}, None),
        MemoryDep('buf62', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg38_1', c1, {c0: 8, c1: 768}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (1204224, 1)
op63.sizes = ([8, 768, 196], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf52_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg32_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg38_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, add_3, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 9408}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (9408, 128)
op64.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op64_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 9408}, None)]
op65.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (9408, 128)
op65.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op65_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf65', get_index_1, getitem_1)
        return store_reduction


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 9408}, None)]
op66.unmet_dependencies = [MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (9408, 128)
op66.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op66_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf66', get_index_1, getitem_2)
        return store_reduction


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1568}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf64', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf65', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf66', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1568, 6)
op67.sizes = ([8, 196], [6])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_3, getitem)
        return store_reduction


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1568}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf64', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf65', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf66', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf68.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (1568, 6)
op68.sizes = ([8, 196], [6])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_3, getitem_1)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1204224}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 1204224}, None),
        MemoryDep('buf67', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf68', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 768}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1204224, 1)
op70.sizes = ([8, 768, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf67', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf70', get_index_5, add_1, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 2359296}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 2359296}, None)]
op72.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 6144, c1: 384}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (2359296, 1)
op72.sizes = ([6144, 384], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op72_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg42_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf72', get_index_4, mul_2, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.mm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 9408}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op74.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 48, c1: 196}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (9408, 128)
op74.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op74_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem)
        return store_reduction


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 9408}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op75.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 48, c1: 196}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op75.group.device = cuda:0
op75.group.iteration = (9408, 128)
op75.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op75_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem_1)
        return store_reduction


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 9408}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf63', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf73', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op76.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 48, c1: 196}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (9408, 128)
op76.sizes = ([48, 196], [128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op76_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_2)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1568}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf74', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf75', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf76', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf77.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (1568, 6)
op77.sizes = ([8, 196], [6])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_3, getitem)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1568}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf74', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf75', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf76', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf78.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (1568, 6)
op78.sizes = ([8, 196], [6])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_3, getitem_1)
        return store_reduction


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 1204224}, None),
        MemoryDep('buf73', c0, {c0: 1204224}, None),
        MemoryDep('buf77', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf78', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg45_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg46_1', c1, {c0: 8, c1: 768}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (1204224, 1)
op80.sizes = ([8, 768, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf77', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf78', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf80', get_index_7, add_3, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf80', mode=None)]
op81.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 4816896}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 4816896}, None)]
op82.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 3072}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (4816896, 1)
op82.sizes = ([1568, 3072], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op82_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf81', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf82', get_index_4, mul_2, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 1204224}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 1204224}, None),
        MemoryDep('buf73', c0, {c0: 1204224}, None),
        MemoryDep('buf83', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg50_1', c1, {c0: 8, c1: 768}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (1204224, 1)
op84.sizes = ([8, 768, 196], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf73_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf83', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg50_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf84', get_index_5, add_3, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 9408}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (9408, 128)
op85.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op85_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, getitem)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 9408}, None)]
op86.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (9408, 128)
op86.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op86_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf86', get_index_1, getitem_1)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 9408}, None)]
op87.unmet_dependencies = [MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (9408, 128)
op87.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op87_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, getitem_2)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1568}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf85', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf86', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf87', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf88.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1568, 6)
op88.sizes = ([8, 196], [6])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem)
        return store_reduction


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1568}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf85', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf86', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf87', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1568, 6)
op89.sizes = ([8, 196], [6])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem_1)
        return store_reduction


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 1204224}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 1204224}, None),
        MemoryDep('buf88', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf89', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 768}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1204224, 1)
op91.sizes = ([8, 768, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf88', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf89', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg51_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg52_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf91', get_index_5, add_1, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2359296}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 2359296}, None)]
op93.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 6144, c1: 384}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2359296, 1)
op93.sizes = ([6144, 384], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op93_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf92', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf93', get_index_4, mul_2, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 9408}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op95.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 48, c1: 196}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (9408, 128)
op95.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op95_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 9408}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op96.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 48, c1: 196}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (9408, 128)
op96.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op96_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem_1)
        return store_reduction


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 9408}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf84', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf94', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op97.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 48, c1: 196}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (9408, 128)
op97.sizes = ([48, 196], [128])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op97_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem_2)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1568}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf95', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf96', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf97', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf98.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1568, 6)
op98.sizes = ([8, 196], [6])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem)
        return store_reduction


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1568}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf95', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf96', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf97', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf99.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (1568, 6)
op99.sizes = ([8, 196], [6])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_3, getitem_1)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 1204224}, None),
        MemoryDep('buf94', c0, {c0: 1204224}, None),
        MemoryDep('buf98', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf99', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 768}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1204224, 1)
op101.sizes = ([8, 768, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf98', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf99', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg57_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg58_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf101', get_index_7, add_3, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4816896}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 4816896}, None)]
op103.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 1568, c1: 3072}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (4816896, 1)
op103.sizes = ([1568, 3072], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op103_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg60_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf103', get_index_4, mul_2, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 1204224}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf104', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf84', c0, {c0: 1204224}, None),
        MemoryDep('buf94', c0, {c0: 1204224}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 768}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (1204224, 1)
op105.sizes = ([8, 768, 196], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf104', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg62_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, add_3, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 9408}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf106.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (9408, 128)
op106.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op106_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, getitem)
        return store_reduction


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 9408}, None)]
op107.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (9408, 128)
op107.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op107_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_1, getitem_1)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 9408}, None)]
op108.unmet_dependencies = [MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (9408, 128)
op108.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op108_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, getitem_2)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1568}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf106', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf107', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf108', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf109.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1568, 6)
op109.sizes = ([8, 196], [6])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_3, getitem)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1568}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf106', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf107', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf108', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf110.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1568, 6)
op110.sizes = ([8, 196], [6])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_3, getitem_1)
        return store_reduction


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 1204224}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 1204224}, None),
        MemoryDep('buf109', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf110', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op112.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 768}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (1204224, 1)
op112.sizes = ([8, 768, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf110', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg63_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg64_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf112', get_index_5, add_1, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 2359296}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 2359296}, None)]
op114.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 6144, c1: 384}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (2359296, 1)
op114.sizes = ([6144, 384], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op114_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf113', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf114', get_index_4, mul_2, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 9408}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op116.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 48, c1: 196}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (9408, 128)
op116.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op116_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 9408}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op117.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 48, c1: 196}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (9408, 128)
op117.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op117_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 9408}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf105', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf115', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op118.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 48, c1: 196}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (9408, 128)
op118.sizes = ([48, 196], [128])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op118_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_3, getitem_2)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1568}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf117', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf118', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1568, 6)
op119.sizes = ([8, 196], [6])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1568}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf117', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf118', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1568, 6)
op120.sizes = ([8, 196], [6])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 1204224}, None),
        MemoryDep('buf115', c0, {c0: 1204224}, None),
        MemoryDep('buf119', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf120', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg69_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 768}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1204224, 1)
op122.sizes = ([8, 768, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg69_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 4816896}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 4816896}, None)]
op124.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 1568, c1: 3072}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (4816896, 1)
op124.sizes = ([1568, 3072], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf124', get_index_4, mul_2, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1204224}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 1204224}, None),
        MemoryDep('buf115', c0, {c0: 1204224}, None),
        MemoryDep('buf125', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 768}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (1204224, 1)
op126.sizes = ([8, 768, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg74_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf126', get_index_5, add_3, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 9408}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (9408, 128)
op127.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op127_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf127', get_index_1, getitem)
        return store_reduction


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 9408}, None)]
op128.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (9408, 128)
op128.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op128_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_1, getitem_1)
        return store_reduction


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 9408}, None)]
op129.unmet_dependencies = [MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf129.users = [
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op129.group.device = cuda:0
op129.group.iteration = (9408, 128)
op129.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op129_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, getitem_2)
        return store_reduction


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1568}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf127', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf128', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf129', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf130.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1568, 6)
op130.sizes = ([8, 196], [6])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_3, getitem)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1568}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf128', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf129', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf131.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (1568, 6)
op131.sizes = ([8, 196], [6])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_3, getitem_1)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 1204224}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 1204224}, None),
        MemoryDep('buf130', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf131', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op133.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 768}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (1204224, 1)
op133.sizes = ([8, 768, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf133', get_index_5, add_1, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 2359296}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 2359296}, None)]
op135.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 6144, c1: 384}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (2359296, 1)
op135.sizes = ([6144, 384], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op135_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf134', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg78_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf135', get_index_4, mul_2, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 9408}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op137.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 48, c1: 196}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (9408, 128)
op137.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op137_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_3, getitem)
        return store_reduction


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 9408}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op138.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 48, c1: 196}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (9408, 128)
op138.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op138_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem_1)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 9408}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf126', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf136', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op139.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 48, c1: 196}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (9408, 128)
op139.sizes = ([48, 196], [128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op139_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem_2)
        return store_reduction


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 1568}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf137', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf138', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf139', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1568, 6)
op140.sizes = ([8, 196], [6])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem)
        return store_reduction


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1568}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf137', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf138', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf139', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1568, 6)
op141.sizes = ([8, 196], [6])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem_1)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 1204224}, None),
        MemoryDep('buf136', c0, {c0: 1204224}, None),
        MemoryDep('buf140', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf141', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg81_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg82_1', c1, {c0: 8, c1: 768}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (1204224, 1)
op143.sizes = ([8, 768, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf141', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg81_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg82_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf143', get_index_7, add_3, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 4816896}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 4816896}, None)]
op145.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 1568, c1: 3072}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (4816896, 1)
op145.sizes = ([1568, 3072], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf145', get_index_4, mul_2, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1204224}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 1204224}, None),
        MemoryDep('buf136', c0, {c0: 1204224}, None),
        MemoryDep('buf146', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg86_1', c1, {c0: 8, c1: 768}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (1204224, 1)
op147.sizes = ([8, 768, 196], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf136_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf136', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg86_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_3, None)
        return store


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 9408}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (9408, 128)
op148.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op148_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, getitem)
        return store_reduction


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 9408}, None)]
op149.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (9408, 128)
op149.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op149_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_1, getitem_1)
        return store_reduction


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 9408}, None)]
op150.unmet_dependencies = [MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (9408, 128)
op150.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op150_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, getitem_2)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 1568}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf148', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf149', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf150', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (1568, 6)
op151.sizes = ([8, 196], [6])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem)
        return store_reduction


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 1568}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf148', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf149', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf150', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (1568, 6)
op152.sizes = ([8, 196], [6])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_3, getitem_1)
        return store_reduction


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1204224}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1204224}, None),
        MemoryDep('buf151', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf152', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 768}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1204224, 1)
op154.sizes = ([8, 768, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf151', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf152', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg87_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg88_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, add_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 2359296}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 2359296}, None)]
op156.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 6144, c1: 384}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (2359296, 1)
op156.sizes = ([6144, 384], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op156_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf156', get_index_4, mul_2, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 9408}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op158.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 48, c1: 196}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (9408, 128)
op158.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op158_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf158', get_index_3, getitem)
        return store_reduction


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 9408}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op159.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 48, c1: 196}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (9408, 128)
op159.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op159_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf159', get_index_3, getitem_1)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 9408}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf147', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf157', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op160.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 48, c1: 196}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (9408, 128)
op160.sizes = ([48, 196], [128])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op160_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf160', get_index_3, getitem_2)
        return store_reduction


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 1568}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf158', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf159', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf160', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (1568, 6)
op161.sizes = ([8, 196], [6])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1568}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf159', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf160', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (1568, 6)
op162.sizes = ([8, 196], [6])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf160', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1204224}, None),
        MemoryDep('buf157', c0, {c0: 1204224}, None),
        MemoryDep('buf161', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf162', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg93_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 768}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1204224, 1)
op164.sizes = ([8, 768, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 4816896}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 4816896}, None)]
op166.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 1568, c1: 3072}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (4816896, 1)
op166.sizes = ([1568, 3072], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op166_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf166', get_index_4, mul_2, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1204224}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1204224}, None),
        MemoryDep('buf157', c0, {c0: 1204224}, None),
        MemoryDep('buf167', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 768}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (1204224, 1)
op168.sizes = ([8, 768, 196], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf157_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf157', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf167', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg98_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, add_3, None)
        return store


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 9408}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (9408, 128)
op169.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op169_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem)
        return store_reduction


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 9408}, None)]
op170.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (9408, 128)
op170.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op170_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, getitem_1)
        return store_reduction


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 9408}, None)]
op171.unmet_dependencies = [MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (9408, 128)
op171.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op171_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf171', get_index_1, getitem_2)
        return store_reduction


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1568}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf169', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf170', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf171', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (1568, 6)
op172.sizes = ([8, 196], [6])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 1568}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf169', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf170', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf171', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (1568, 6)
op173.sizes = ([8, 196], [6])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op173_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 1204224}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1204224}, None),
        MemoryDep('buf172', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf173', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 768}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (1204224, 1)
op175.sizes = ([8, 768, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2359296}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 2359296}, None)]
op177.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 6144, c1: 384}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2359296, 1)
op177.sizes = ([6144, 384], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op177_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg102_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul_2, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 9408}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op179.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 48, c1: 196}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (9408, 128)
op179.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op179_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_3, getitem)
        return store_reduction


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 9408}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op180.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 48, c1: 196}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf180.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (9408, 128)
op180.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op180_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, getitem_1)
        return store_reduction


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 9408}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf168', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf178', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op181.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 48, c1: 196}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (9408, 128)
op181.sizes = ([48, 196], [128])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op181_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf181', get_index_3, getitem_2)
        return store_reduction


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1568}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf179', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf180', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf181', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1568, 6)
op182.sizes = ([8, 196], [6])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_3, getitem)
        return store_reduction


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 1568}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf180', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf181', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (1568, 6)
op183.sizes = ([8, 196], [6])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf180', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf183', get_index_3, getitem_1)
        return store_reduction


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1204224}, None),
        MemoryDep('buf178', c0, {c0: 1204224}, None),
        MemoryDep('buf182', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf183', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 768}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1204224, 1)
op185.sizes = ([8, 768, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op185_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf182', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf183', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg105_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg106_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf185', get_index_7, add_3, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 4816896}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 4816896}, None)]
op187.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 1568, c1: 3072}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (4816896, 1)
op187.sizes = ([1568, 3072], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf187', get_index_4, mul_2, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1204224}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1204224}, None),
        MemoryDep('buf178', c0, {c0: 1204224}, None),
        MemoryDep('buf188', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 768}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (1204224, 1)
op189.sizes = ([8, 768, 196], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf188', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg110_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, add_3, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 9408}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (9408, 128)
op190.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op190_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_1, getitem)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 9408}, None)]
op191.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (9408, 128)
op191.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op191_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf191', get_index_1, getitem_1)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 9408}, None)]
op192.unmet_dependencies = [MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (9408, 128)
op192.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op192_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_1, getitem_2)
        return store_reduction


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 1568}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf190', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf191', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf192', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (1568, 6)
op193.sizes = ([8, 196], [6])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf191', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_3, getitem)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1568}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf190', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf191', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf192', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (1568, 6)
op194.sizes = ([8, 196], [6])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf191', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem_1)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1204224}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 1204224}, None),
        MemoryDep('buf193', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf194', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg112_1', c1, {c0: 8, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (1204224, 1)
op196.sizes = ([8, 768, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 2359296}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 2359296}, None)]
op198.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 6144, c1: 384}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (2359296, 1)
op198.sizes = ([6144, 384], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op198_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, mul_2, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 9408}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op200.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 48, c1: 196}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (9408, 128)
op200.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op200_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 9408}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op201.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 48, c1: 196}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (9408, 128)
op201.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op201_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 9408}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf189', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf199', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op202.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 48, c1: 196}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (9408, 128)
op202.sizes = ([48, 196], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op202_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf202', get_index_3, getitem_2)
        return store_reduction


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1568}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf200', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf201', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf202', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1568, 6)
op203.sizes = ([8, 196], [6])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op203_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_3, getitem)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1568}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf200', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf201', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf202', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1568, 6)
op204.sizes = ([8, 196], [6])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem_1)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 1204224}, None),
        MemoryDep('buf199', c0, {c0: 1204224}, None),
        MemoryDep('buf203', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf204', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg117_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg118_1', c1, {c0: 8, c1: 768}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1204224, 1)
op206.sizes = ([8, 768, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf203', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf204', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg117_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg118_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf206', get_index_7, add_3, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 4816896}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 4816896}, None)]
op208.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 1568, c1: 3072}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (4816896, 1)
op208.sizes = ([1568, 3072], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg120_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf208', get_index_4, mul_2, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1204224}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 1204224}, None),
        MemoryDep('buf199', c0, {c0: 1204224}, None),
        MemoryDep('buf209', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 768}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (1204224, 1)
op210.sizes = ([8, 768, 196], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf199_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf209', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg122_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_3, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 9408}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (9408, 128)
op211.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op211_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf211', get_index_1, getitem)
        return store_reduction


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 9408}, None)]
op212.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (9408, 128)
op212.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op212_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf212', get_index_1, getitem_1)
        return store_reduction


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 9408}, None)]
op213.unmet_dependencies = [MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (9408, 128)
op213.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op213_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, getitem_2)
        return store_reduction


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1568}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf211', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf212', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf213', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1568, 6)
op214.sizes = ([8, 196], [6])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op214_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_3, getitem)
        return store_reduction


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1568}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf211', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf212', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf213', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (1568, 6)
op215.sizes = ([8, 196], [6])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem_1)
        return store_reduction


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 1204224}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1204224}, None),
        MemoryDep('buf214', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf215', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg124_1', c1, {c0: 8, c1: 768}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (1204224, 1)
op217.sizes = ([8, 768, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf215', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_1, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2359296}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', c0, {c0: 2359296}, None)]
op219.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 6144, c1: 384}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (2359296, 1)
op219.sizes = ([6144, 384], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op219_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf218', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf219', get_index_4, mul_2, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 9408}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op221.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 48, c1: 196}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (9408, 128)
op221.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op221_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_3, getitem)
        return store_reduction


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 9408}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op222.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 48, c1: 196}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op222.group.device = cuda:0
op222.group.iteration = (9408, 128)
op222.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op222_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem_1)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 9408}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf210', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf220', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op223.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 48, c1: 196}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (9408, 128)
op223.sizes = ([48, 196], [128])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op223_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_2)
        return store_reduction


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 1568}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf221', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf222', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf223', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (1568, 6)
op224.sizes = ([8, 196], [6])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1568}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf221', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf222', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf223', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1568, 6)
op225.sizes = ([8, 196], [6])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op225_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem_1)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1204224}, None),
        MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf224', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf225', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op227.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 768}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (1204224, 1)
op227.sizes = ([8, 768, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf224', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf225', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg129_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg130_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf227', get_index_7, add_3, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 4816896}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 4816896}, None)]
op229.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 1568, c1: 3072}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (4816896, 1)
op229.sizes = ([1568, 3072], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op229_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf229', get_index_4, mul_2, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1204224}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1204224}, None),
        MemoryDep('buf220', c0, {c0: 1204224}, None),
        MemoryDep('buf230', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg134_1', c1, {c0: 8, c1: 768}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (1204224, 1)
op231.sizes = ([8, 768, 196], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf220_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf230', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg134_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, add_3, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 9408}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (9408, 128)
op232.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op232_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, getitem)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 9408}, None)]
op233.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (9408, 128)
op233.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op233_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem_1)
        return store_reduction


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 9408}, None)]
op234.unmet_dependencies = [MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (9408, 128)
op234.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op234_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem_2)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1568}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf232', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf233', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf234', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1568, 6)
op235.sizes = ([8, 196], [6])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op235_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf235', get_index_3, getitem)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 1568}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf233', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf234', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf236.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (1568, 6)
op236.sizes = ([8, 196], [6])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf234', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem_1)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 1204224}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 1204224}, None),
        MemoryDep('buf235', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf236', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op238.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg136_1', c1, {c0: 8, c1: 768}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (1204224, 1)
op238.sizes = ([8, 768, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 196], stride=[150528, 196, 1])
class op238_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf235', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf236', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg135_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg136_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, add_1, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 2359296}, None)]
op240.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 2359296}, None)]
op240.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 6144, c1: 384}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (2359296, 1)
op240.sizes = ([6144, 384], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[6144, 384], stride=[384, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 384], stride=[294912, 384, 1])
class op240_loop_body:
    var_ranges = {z0: 6144, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf239', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg138_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf240', get_index_4, mul_2, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
    buf241.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 9408}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op242.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 48, c1: 196}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (9408, 128)
op242.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op242_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 9408}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op243.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 48, c1: 196}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (9408, 128)
op243.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op243_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_3, getitem_1)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 9408}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf231', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None),
        MemoryDep('buf241', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op244.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 48, c1: 196}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (9408, 128)
op244.sizes = ([48, 196], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op244_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = z1
    index2 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, getitem_2)
        return store_reduction


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1568}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf242', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf243', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf244', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1568, 6)
op245.sizes = ([8, 196], [6])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op245_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_3, getitem)
        return store_reduction


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1568}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf243', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf244', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1568, 6)
op246.sizes = ([8, 196], [6])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_3, getitem_1)
        return store_reduction


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 1204224}, None),
        MemoryDep('buf241', c0, {c0: 1204224}, None),
        MemoryDep('buf245', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf246', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg141_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg142_1', c1, {c0: 8, c1: 768}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1204224, 1)
op248.sizes = ([8, 768, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 768, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 196*z0 + z2
    index3 = z1
    index4 = 150528*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf245', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf246', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg141_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg142_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf248', get_index_7, add_3, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 4816896}, None)]
op250.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 4816896}, None)]
op250.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 1568, c1: 3072}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (4816896, 1)
op250.sizes = ([1568, 3072], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 3072], stride=[3072, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 3072], stride=[602112, 3072, 1])
class op250_loop_body:
    var_ranges = {z0: 1568, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf249', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf250', get_index_4, mul_2, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1204224}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 1204224}, None),
        MemoryDep('buf241', c0, {c0: 1204224}, None),
        MemoryDep('buf251', 150528*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 196}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 6144, c1: 196}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 768}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (1204224, 1)
op252.sizes = ([8, 768, 196], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf241_layout = FixedLayout('cuda', torch.float32, size=[6144, 196], stride=[196, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[1568, 768], stride=[768, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 768*z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf251', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg146_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 9408}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (9408, 128)
op253.sizes = ([48, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op253_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
        return store_reduction


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 9408}, None)]
op254.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (9408, 128)
op254.sizes = ([48, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op254_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
        return store_reduction


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 9408}, None)]
op255.unmet_dependencies = [MemoryDep('buf252', 25088*c0 + c1 + 196*c2, {c0: 48, c1: 196, c2: 128}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (9408, 128)
op255.sizes = ([48, 196], [128])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
class op255_loop_body:
    var_ranges = {z0: 48, z1: 196, z2: 128}
    index0 = 25088*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_1, getitem_2)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 1568}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf253', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf254', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf255', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf256.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (1568, 6)
op256.sizes = ([8, 196], [6])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_3, getitem)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1568}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf253', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf254', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None),
        MemoryDep('buf255', 1176*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 6}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf257.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1568, 6)
op257.sizes = ([8, 196], [6])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 6], stride=[1176, 1, 9408, 196])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 6}
    index0 = 1176*z0 + z1 + 196*z2
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem_1)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 6144}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1204224}, None),
        MemoryDep('buf256', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None),
        MemoryDep('buf257', 196*c0 + c2, {c0: 8, c1: 768, c2: 196}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 8, c1: 768}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (6144, 196)
op259.sizes = ([8, 768], [196])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 768], stride=[150528, 1, 196])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 196}
    index0 = 150528*z0 + 196*z1 + z2
    index1 = 196*z0 + z2
    index2 = z1
    index3 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf256', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf257', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg147_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg148_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf259', get_index_5, reduction)
        return store_reduction


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 6144}, None)]
op260.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 6144}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (6144, 1)
op260.sizes = ([6144], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
class op260_loop_body:
    var_ranges = {z0: 6144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf260', get_index_1, truediv, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg149_1', mode=None), StarDep(name='arg150_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf261.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op261.node.kernel = extern_kernels.addmm



op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 27648}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 442368*c0 + c1 + 576*c2, {c0: 8, c1: 576, c2: 768}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 442368}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (27648, 128)
op1.sizes = ([8, 576, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 576, 768], stride=[442368, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 6, z3: 128}
    index0 = 442368*z0 + z1 + 73728*z2 + 576*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 3456*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1', get_index_3, getitem)
        return store_reduction


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 27648}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', 442368*c0 + c1 + 576*c2, {c0: 8, c1: 576, c2: 768}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 442368}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (27648, 128)
op2.sizes = ([8, 576, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 576, 768], stride=[442368, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 6, z3: 128}
    index0 = 442368*z0 + z1 + 73728*z2 + 576*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 3456*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf2', get_index_3, getitem_1)
        return store_reduction


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 27648}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', 442368*c0 + c1 + 576*c2, {c0: 8, c1: 576, c2: 768}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 442368}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (27648, 128)
op3.sizes = ([8, 576, 6], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 576, 768], stride=[442368, 768, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 6, z3: 128}
    index0 = 442368*z0 + z1 + 73728*z2 + 576*z3
    index1 = 128*z2 + z3
    index2 = 768*z1 + 128*z2 + z3
    index3 = 3456*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf3', get_index_3, getitem_2)
        return store_reduction


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 4608}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 27648}, None),
        MemoryDep('buf2', c0, {c0: 27648}, None),
        MemoryDep('buf3', c0, {c0: 27648}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (4608, 6)
op4.sizes = ([4608], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op4_loop_body:
    var_ranges = {z0: 4608, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 4608}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 27648}, None),
        MemoryDep('buf2', c0, {c0: 27648}, None),
        MemoryDep('buf3', c0, {c0: 27648}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (4608, 6)
op5.sizes = ([4608], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1, 6], stride=[3456, 6, 27648, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op5_loop_body:
    var_ranges = {z0: 4608, z1: 6}
    index0 = 6*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 3538944}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 442368*c0 + c1 + 576*c2, {c0: 8, c1: 576, c2: 768}, None),
        MemoryDep('buf4', c0, {c0: 4608}, None),
        MemoryDep('buf5', c0, {c0: 4608}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 442368}, None),
        MemoryDep('arg5_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg6_1', c1, {c0: 4608, c1: 768}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (3538944, 1)
op7.sizes = ([8, 576, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 576, 768], stride=[442368, 768, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 768}
    index0 = 442368*z0 + z1 + 576*z2
    index1 = z2
    index2 = 768*z1 + z2
    index3 = 576*z0 + z1
    index4 = 442368*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf5', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg5_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg6_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf7', get_index_7, add_3, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 3538944}, None)]
op9.unmet_dependencies = [   MemoryDep('buf8', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op9.met_dependencies = [MemoryDep('arg8_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (3538944, 1)
op9.sizes = ([8, 16, 576, 48], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, mul, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 3538944}, None)]
op10.unmet_dependencies = [   MemoryDep('buf8', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op10.met_dependencies = [MemoryDep('arg8_1', c1 + 768, {c0: 8, c1: 768}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (3538944, 1)
op10.sizes = ([8, 768, 576], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf10', get_index_2, add, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf9', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.bmm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 42467328}, None)]
op12.unmet_dependencies = [   MemoryDep('buf11', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (42467328, 1)
op12.sizes = ([8, 331776, 16], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 73728}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op14.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4608, c1: 16}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (73728, 576)
op14.sizes = ([4608, 16], [576])
buf13_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op14_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_2, reduction)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 73728}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf13', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf14', c0, {c0: 73728}, None)]
op15.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 4608, c1: 16}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (73728, 576)
op15.sizes = ([4608, 16], [576])
buf13_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op15_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf14', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_3, reduction)
        return store_reduction


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 42467328}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 42467328}, None),
        MemoryDep('buf14', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf15', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op16.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 2654208, c1: 16}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (42467328, 1)
op16.sizes = ([4608, 576, 16], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op16_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf14', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf15', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf16', get_index_4, truediv, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 42467328}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op18.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 8, c1: 16}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (42467328, 1)
op18.sizes = ([8, 16, 331776], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf18', get_index_2, add, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 3538944}, None)]
op19.unmet_dependencies = [   MemoryDep('buf8', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op19.met_dependencies = [MemoryDep('arg8_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (3538944, 1)
op19.sizes = ([8, 16, 576, 48], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op19_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf19', get_index_2, add, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf18', mode=None), StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.bmm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 3538944}, None)]
op21.unmet_dependencies = [   MemoryDep('buf20', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (3538944, 1)
op21.sizes = ([8, 576, 16, 48], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf21', get_index_1, load, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 3538944}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf0', 442368*c0 + c1 + 576*c2, {c0: 8, c1: 576, c2: 768}, None),
        MemoryDep('buf22', c0, {c0: 3538944}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg2_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 442368}, None),
        MemoryDep('arg4_1', c1, {c0: 4608, c1: 768}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (3538944, 1)
op23.sizes = ([8, 576, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 24, 24], stride=[442368, 576, 24, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 576, 768], stride=[442368, 768, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 768}
    index0 = 442368*z0 + z1 + 576*z2
    index1 = z2
    index2 = 768*z1 + z2
    index3 = 442368*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf22', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg14_1', get_index_5)
        add_2 = ops.add(load_4, load_5)
        mul = ops.mul(load_3, add_2)
        add_3 = ops.add(add_1, mul)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf23', get_index_6, add_3, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 4608}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 3538944}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (4608, 768)
op24.sizes = ([4608], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op24_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 4608}, None)]
op25.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 3538944}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (4608, 768)
op25.sizes = ([4608], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op25_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 3538944}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 3538944}, None),
        MemoryDep('buf24', c0, {c0: 4608}, None),
        MemoryDep('buf25', c0, {c0: 4608}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 4608, c1: 768}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (3538944, 1)
op27.sizes = ([4608, 768], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op27_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf25', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg16_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, add_1, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 14155776}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 14155776}, None)]
op29.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 4608, c1: 3072}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (14155776, 1)
op29.sizes = ([4608, 3072], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op29_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf28', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf29', get_index_4, mul_2, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 4608}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 3538944}, None),
        MemoryDep('buf30', c0, {c0: 3538944}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg21_1', c1, {c0: 4608, c1: 768}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (4608, 768)
op31.sizes = ([4608], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op31_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf31', get_index_4, getitem)
        return store_reduction


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 4608}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 3538944}, None),
        MemoryDep('buf30', c0, {c0: 3538944}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg21_1', c1, {c0: 4608, c1: 768}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf32.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (4608, 768)
op32.sizes = ([4608], [768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op32_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf32', get_index_4, getitem_1)
        return store_reduction


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 3538944}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 3538944}, None),
        MemoryDep('buf30', c0, {c0: 3538944}, None),
        MemoryDep('buf31', c0, {c0: 4608}, None),
        MemoryDep('buf32', c0, {c0: 4608}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg21_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg23_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 4608, c1: 768}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (3538944, 1)
op34.sizes = ([4608, 768], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op34_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf31', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf32', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg23_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg24_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf34', get_index_8, add_3, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 3538944}, None)]
op36.unmet_dependencies = [   MemoryDep('buf35', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op36.met_dependencies = [MemoryDep('arg26_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (3538944, 1)
op36.sizes = ([8, 16, 576, 48], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf36', get_index_2, mul, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 3538944}, None)]
op37.unmet_dependencies = [   MemoryDep('buf35', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op37.met_dependencies = [MemoryDep('arg26_1', c1 + 768, {c0: 8, c1: 768}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (3538944, 1)
op37.sizes = ([8, 768, 576], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.bmm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 42467328}, None)]
op39.unmet_dependencies = [   MemoryDep('buf38', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (42467328, 1)
op39.sizes = ([8, 331776, 16], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 73728}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op41.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 4608, c1: 16}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (73728, 576)
op41.sizes = ([4608, 16], [576])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op41_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_2, reduction)
        return store_reduction


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 73728}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf40', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf41', c0, {c0: 73728}, None)]
op42.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 4608, c1: 16}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (73728, 576)
op42.sizes = ([4608, 16], [576])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op42_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf41', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_3, reduction)
        return store_reduction


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 42467328}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf40', c0, {c0: 42467328}, None),
        MemoryDep('buf41', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf42', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op43.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 2654208, c1: 16}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (42467328, 1)
op43.sizes = ([4608, 576, 16], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op43_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf41', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf42', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf43', get_index_4, truediv, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 42467328}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op45.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 8, c1: 16}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (42467328, 1)
op45.sizes = ([8, 16, 331776], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf45', get_index_2, add, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 3538944}, None)]
op46.unmet_dependencies = [   MemoryDep('buf35', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op46.met_dependencies = [   MemoryDep('arg26_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (3538944, 1)
op46.sizes = ([8, 16, 576, 48], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op46_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf46', get_index_2, add, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf45', mode=None), StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.bmm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 3538944}, None)]
op48.unmet_dependencies = [   MemoryDep('buf47', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (3538944, 1)
op48.sizes = ([8, 576, 16, 48], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op48_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, load, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 3538944}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 3538944}, None),
        MemoryDep('buf30', c0, {c0: 3538944}, None),
        MemoryDep('buf49', c0, {c0: 3538944}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg21_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg22_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg32_1', c1, {c0: 4608, c1: 768}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (3538944, 1)
op50.sizes = ([4608, 768], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op50_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf49', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg32_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf50', get_index_7, add_3, None)
        return store


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 4608}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 3538944}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf51.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (4608, 768)
op51.sizes = ([4608], [768])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op51_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem)
        return store_reduction


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 4608}, None)]
op52.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 3538944}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (4608, 768)
op52.sizes = ([4608], [768])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op52_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_1, getitem_1)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 3538944}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3538944}, None),
        MemoryDep('buf51', c0, {c0: 4608}, None),
        MemoryDep('buf52', c0, {c0: 4608}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg35_1', c1, {c0: 4608, c1: 768}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (3538944, 1)
op54.sizes = ([4608, 768], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op54_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_1, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 14155776}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 14155776}, None)]
op56.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 4608, c1: 3072}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (14155776, 1)
op56.sizes = ([4608, 3072], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op56_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf56', get_index_4, mul_2, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 4608}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3538944}, None),
        MemoryDep('buf57', c0, {c0: 3538944}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg39_1', c1, {c0: 4608, c1: 768}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (4608, 768)
op58.sizes = ([4608], [768])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op58_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_4, getitem)
        return store_reduction


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 4608}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3538944}, None),
        MemoryDep('buf57', c0, {c0: 3538944}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg39_1', c1, {c0: 4608, c1: 768}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (4608, 768)
op59.sizes = ([4608], [768])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op59_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_4, getitem_1)
        return store_reduction


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 3538944}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3538944}, None),
        MemoryDep('buf57', c0, {c0: 3538944}, None),
        MemoryDep('buf58', c0, {c0: 4608}, None),
        MemoryDep('buf59', c0, {c0: 4608}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg39_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg42_1', c1, {c0: 4608, c1: 768}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (3538944, 1)
op61.sizes = ([4608, 768], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op61_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf58', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf59', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg41_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg42_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf61', get_index_8, add_3, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 3538944}, None)]
op63.unmet_dependencies = [   MemoryDep('buf62', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op63.met_dependencies = [MemoryDep('arg44_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (3538944, 1)
op63.sizes = ([8, 16, 576, 48], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf63', get_index_2, mul, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 3538944}, None)]
op64.unmet_dependencies = [   MemoryDep('buf62', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op64.met_dependencies = [MemoryDep('arg44_1', c1 + 768, {c0: 8, c1: 768}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (3538944, 1)
op64.sizes = ([8, 768, 576], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf64', get_index_2, add, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None), StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = extern_kernels.bmm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 42467328}, None)]
op66.unmet_dependencies = [   MemoryDep('buf65', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (42467328, 1)
op66.sizes = ([8, 331776, 16], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
    ]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 73728}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op68.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4608, c1: 16}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (73728, 576)
op68.sizes = ([4608, 16], [576])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op68_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf68', get_index_2, reduction)
        return store_reduction


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 73728}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf67', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf68', c0, {c0: 73728}, None)]
op69.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4608, c1: 16}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (73728, 576)
op69.sizes = ([4608, 16], [576])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op69_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf68', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf69', get_index_3, reduction)
        return store_reduction


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 42467328}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 42467328}, None),
        MemoryDep('buf68', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf69', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op70.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 2654208, c1: 16}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (42467328, 1)
op70.sizes = ([4608, 576, 16], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op70_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf68', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf69', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf70', get_index_4, truediv, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.mm


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 42467328}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op72.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 8, c1: 16}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (42467328, 1)
op72.sizes = ([8, 16, 331776], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op72_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf72', get_index_2, add, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 3538944}, None)]
op73.unmet_dependencies = [   MemoryDep('buf62', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op73.met_dependencies = [   MemoryDep('arg44_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (3538944, 1)
op73.sizes = ([8, 16, 576, 48], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf73', get_index_2, add, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf72', mode=None), StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.bmm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 3538944}, None)]
op75.unmet_dependencies = [   MemoryDep('buf74', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (3538944, 1)
op75.sizes = ([8, 576, 16, 48], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op75_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf75', get_index_1, load, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 3538944}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 3538944}, None),
        MemoryDep('buf57', c0, {c0: 3538944}, None),
        MemoryDep('buf76', c0, {c0: 3538944}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg39_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg40_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg50_1', c1, {c0: 4608, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (3538944, 1)
op77.sizes = ([4608, 768], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op77_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf76', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg50_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf77', get_index_7, add_3, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 4608}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 3538944}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (4608, 768)
op78.sizes = ([4608], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op78_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, getitem)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 4608}, None)]
op79.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 3538944}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (4608, 768)
op79.sizes = ([4608], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op79_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem_1)
        return store_reduction


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 3538944}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 3538944}, None),
        MemoryDep('buf78', c0, {c0: 4608}, None),
        MemoryDep('buf79', c0, {c0: 4608}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg53_1', c1, {c0: 4608, c1: 768}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (3538944, 1)
op81.sizes = ([4608, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op81_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg52_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg53_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, add_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 14155776}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 14155776}, None)]
op83.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 4608, c1: 3072}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (14155776, 1)
op83.sizes = ([4608, 3072], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op83_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg55_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf83', get_index_4, mul_2, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 4608}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 3538944}, None),
        MemoryDep('buf84', c0, {c0: 3538944}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 4608, c1: 768}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (4608, 768)
op85.sizes = ([4608], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op85_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_4, getitem)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 4608}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 3538944}, None),
        MemoryDep('buf84', c0, {c0: 3538944}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 4608, c1: 768}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf86.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (4608, 768)
op86.sizes = ([4608], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op86_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf86', get_index_4, getitem_1)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 3538944}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 3538944}, None),
        MemoryDep('buf84', c0, {c0: 3538944}, None),
        MemoryDep('buf85', c0, {c0: 4608}, None),
        MemoryDep('buf86', c0, {c0: 4608}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg59_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 4608, c1: 768}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (3538944, 1)
op88.sizes = ([4608, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op88_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf85', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf86', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg59_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg60_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf88', get_index_8, add_3, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.mm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 3538944}, None)]
op90.unmet_dependencies = [   MemoryDep('buf89', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op90.met_dependencies = [MemoryDep('arg62_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (3538944, 1)
op90.sizes = ([8, 16, 576, 48], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf90', get_index_2, mul, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 3538944}, None)]
op91.unmet_dependencies = [   MemoryDep('buf89', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op91.met_dependencies = [MemoryDep('arg62_1', c1 + 768, {c0: 8, c1: 768}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (3538944, 1)
op91.sizes = ([8, 768, 576], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf91', get_index_2, add, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.bmm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 42467328}, None)]
op93.unmet_dependencies = [   MemoryDep('buf92', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (42467328, 1)
op93.sizes = ([8, 331776, 16], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf93', get_index_1, load, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 73728}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op95.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4608, c1: 16}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (73728, 576)
op95.sizes = ([4608, 16], [576])
buf94_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op95_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf95', get_index_2, reduction)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 73728}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf94', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf95', c0, {c0: 73728}, None)]
op96.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 4608, c1: 16}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (73728, 576)
op96.sizes = ([4608, 16], [576])
buf94_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op96_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf95', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf96', get_index_3, reduction)
        return store_reduction


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 42467328}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 42467328}, None),
        MemoryDep('buf95', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf96', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op97.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 2654208, c1: 16}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (42467328, 1)
op97.sizes = ([4608, 576, 16], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op97_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf95', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf96', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf97', get_index_4, truediv, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 42467328}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op99.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 8, c1: 16}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (42467328, 1)
op99.sizes = ([8, 16, 331776], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf99', get_index_2, add, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 3538944}, None)]
op100.unmet_dependencies = [   MemoryDep('buf89', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op100.met_dependencies = [   MemoryDep('arg62_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (3538944, 1)
op100.sizes = ([8, 16, 576, 48], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf100', get_index_2, add, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = extern_kernels.bmm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 3538944}, None)]
op102.unmet_dependencies = [   MemoryDep('buf101', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (3538944, 1)
op102.sizes = ([8, 576, 16, 48], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf102', get_index_1, load, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 3538944}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 3538944}, None),
        MemoryDep('buf77', c0, {c0: 3538944}, None),
        MemoryDep('buf84', c0, {c0: 3538944}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg57_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg68_1', c1, {c0: 4608, c1: 768}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (3538944, 1)
op104.sizes = ([4608, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op104_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg58_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf103', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg68_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf104', get_index_7, add_3, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 4608}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 3538944}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf105.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (4608, 768)
op105.sizes = ([4608], [768])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op105_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, getitem)
        return store_reduction


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 4608}, None)]
op106.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 3538944}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (4608, 768)
op106.sizes = ([4608], [768])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op106_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, getitem_1)
        return store_reduction


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 3538944}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 3538944}, None),
        MemoryDep('buf105', c0, {c0: 4608}, None),
        MemoryDep('buf106', c0, {c0: 4608}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg71_1', c1, {c0: 4608, c1: 768}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (3538944, 1)
op108.sizes = ([4608, 768], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op108_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf106', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg70_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg71_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf108', get_index_5, add_1, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 14155776}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 14155776}, None)]
op110.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 4608, c1: 3072}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (14155776, 1)
op110.sizes = ([4608, 3072], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op110_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf109', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg73_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf110', get_index_4, mul_2, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 4608}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 3538944}, None),
        MemoryDep('buf111', c0, {c0: 3538944}, None)]
op112.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 4608, c1: 768}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (4608, 768)
op112.sizes = ([4608], [768])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op112_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_4, getitem)
        return store_reduction


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 4608}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 3538944}, None),
        MemoryDep('buf111', c0, {c0: 3538944}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 4608, c1: 768}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (4608, 768)
op113.sizes = ([4608], [768])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op113_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_4, getitem_1)
        return store_reduction


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 3538944}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 3538944}, None),
        MemoryDep('buf111', c0, {c0: 3538944}, None),
        MemoryDep('buf112', c0, {c0: 4608}, None),
        MemoryDep('buf113', c0, {c0: 4608}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg78_1', c1, {c0: 4608, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (3538944, 1)
op115.sizes = ([4608, 768], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op115_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf112', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf113', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg77_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg78_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf115', get_index_8, add_3, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 3538944}, None)]
op117.unmet_dependencies = [   MemoryDep('buf116', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op117.met_dependencies = [MemoryDep('arg80_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (3538944, 1)
op117.sizes = ([8, 16, 576, 48], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf117', get_index_2, mul, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 3538944}, None)]
op118.unmet_dependencies = [   MemoryDep('buf116', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op118.met_dependencies = [MemoryDep('arg80_1', c1 + 768, {c0: 8, c1: 768}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (3538944, 1)
op118.sizes = ([8, 768, 576], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf118', get_index_2, add, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None), StarDep(name='buf118', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.bmm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 42467328}, None)]
op120.unmet_dependencies = [   MemoryDep('buf119', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (42467328, 1)
op120.sizes = ([8, 331776, 16], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf120', get_index_1, load, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 73728}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op122.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4608, c1: 16}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (73728, 576)
op122.sizes = ([4608, 16], [576])
buf121_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op122_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_2, reduction)
        return store_reduction


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 73728}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf121', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf122', c0, {c0: 73728}, None)]
op123.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4608, c1: 16}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (73728, 576)
op123.sizes = ([4608, 16], [576])
buf121_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op123_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf122', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, reduction)
        return store_reduction


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 42467328}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf121', c0, {c0: 42467328}, None),
        MemoryDep('buf122', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf123', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op124.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 2654208, c1: 16}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (42467328, 1)
op124.sizes = ([4608, 576, 16], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op124_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf122', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf123', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf124', get_index_4, truediv, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 42467328}, None)]
op126.unmet_dependencies = [   MemoryDep('buf125', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op126.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 8, c1: 16}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (42467328, 1)
op126.sizes = ([8, 16, 331776], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf126', get_index_2, add, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 3538944}, None)]
op127.unmet_dependencies = [   MemoryDep('buf116', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op127.met_dependencies = [   MemoryDep('arg80_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (3538944, 1)
op127.sizes = ([8, 16, 576, 48], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf127', get_index_2, add, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.bmm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 3538944}, None)]
op129.unmet_dependencies = [   MemoryDep('buf128', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (3538944, 1)
op129.sizes = ([8, 576, 16, 48], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf129', get_index_1, load, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 3538944}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 3538944}, None),
        MemoryDep('buf111', c0, {c0: 3538944}, None),
        MemoryDep('buf130', c0, {c0: 3538944}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg76_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg86_1', c1, {c0: 4608, c1: 768}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (3538944, 1)
op131.sizes = ([4608, 768], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op131_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg76_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf130', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg86_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf131', get_index_7, add_3, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4608}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 3538944}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4608, 768)
op132.sizes = ([4608], [768])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op132_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem)
        return store_reduction


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 4608}, None)]
op133.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 3538944}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (4608, 768)
op133.sizes = ([4608], [768])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op133_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem_1)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 3538944}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 3538944}, None),
        MemoryDep('buf132', c0, {c0: 4608}, None),
        MemoryDep('buf133', c0, {c0: 4608}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 4608, c1: 768}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (3538944, 1)
op135.sizes = ([4608, 768], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op135_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, add_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 14155776}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 14155776}, None)]
op137.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 4608, c1: 3072}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (14155776, 1)
op137.sizes = ([4608, 3072], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op137_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf137', get_index_4, mul_2, None)
        return store


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op138.node.kernel = extern_kernels.mm


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 4608}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 3538944}, None),
        MemoryDep('buf138', c0, {c0: 3538944}, None)]
op139.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg93_1', c1, {c0: 4608, c1: 768}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (4608, 768)
op139.sizes = ([4608], [768])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op139_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_4, getitem)
        return store_reduction


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 4608}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 3538944}, None),
        MemoryDep('buf138', c0, {c0: 3538944}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg93_1', c1, {c0: 4608, c1: 768}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (4608, 768)
op140.sizes = ([4608], [768])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op140_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_4, getitem_1)
        return store_reduction


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 3538944}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 3538944}, None),
        MemoryDep('buf138', c0, {c0: 3538944}, None),
        MemoryDep('buf139', c0, {c0: 4608}, None),
        MemoryDep('buf140', c0, {c0: 4608}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg93_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg95_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 4608, c1: 768}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (3538944, 1)
op142.sizes = ([4608, 768], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op142_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf139', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf140', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg95_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg96_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf142', get_index_8, add_3, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
    ]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 3538944}, None)]
op144.unmet_dependencies = [   MemoryDep('buf143', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op144.met_dependencies = [MemoryDep('arg98_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (3538944, 1)
op144.sizes = ([8, 16, 576, 48], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf144', get_index_2, mul, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 3538944}, None)]
op145.unmet_dependencies = [   MemoryDep('buf143', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op145.met_dependencies = [MemoryDep('arg98_1', c1 + 768, {c0: 8, c1: 768}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (3538944, 1)
op145.sizes = ([8, 768, 576], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf145', get_index_2, add, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.bmm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 42467328}, None)]
op147.unmet_dependencies = [   MemoryDep('buf146', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (42467328, 1)
op147.sizes = ([8, 331776, 16], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
    ]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 73728}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op149.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 4608, c1: 16}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (73728, 576)
op149.sizes = ([4608, 16], [576])
buf148_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op149_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_2, reduction)
        return store_reduction


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 73728}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf148', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf149', c0, {c0: 73728}, None)]
op150.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 4608, c1: 16}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (73728, 576)
op150.sizes = ([4608, 16], [576])
buf148_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op150_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf149', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, reduction)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 42467328}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 42467328}, None),
        MemoryDep('buf149', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf150', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op151.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 2654208, c1: 16}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (42467328, 1)
op151.sizes = ([4608, 576, 16], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op151_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf149', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf151', get_index_4, truediv, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 42467328}, None)]
op153.unmet_dependencies = [   MemoryDep('buf152', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op153.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 8, c1: 16}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (42467328, 1)
op153.sizes = ([8, 16, 331776], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf153', get_index_2, add, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 3538944}, None)]
op154.unmet_dependencies = [   MemoryDep('buf143', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op154.met_dependencies = [   MemoryDep('arg98_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (3538944, 1)
op154.sizes = ([8, 16, 576, 48], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf154', get_index_2, add, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None), StarDep(name='buf154', mode=None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.bmm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 3538944}, None)]
op156.unmet_dependencies = [   MemoryDep('buf155', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (3538944, 1)
op156.sizes = ([8, 576, 16, 48], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf156', get_index_1, load, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 3538944}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 3538944}, None),
        MemoryDep('buf138', c0, {c0: 3538944}, None),
        MemoryDep('buf157', c0, {c0: 3538944}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg87_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg93_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg94_1', c1, {c0: 4608, c1: 768}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (3538944, 1)
op158.sizes = ([4608, 768], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op158_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg94_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf157', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg104_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf158', get_index_7, add_3, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 4608}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 3538944}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf159.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (4608, 768)
op159.sizes = ([4608], [768])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op159_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, getitem)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 4608}, None)]
op160.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 3538944}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (4608, 768)
op160.sizes = ([4608], [768])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op160_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_1, getitem_1)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 3538944}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 3538944}, None),
        MemoryDep('buf159', c0, {c0: 4608}, None),
        MemoryDep('buf160', c0, {c0: 4608}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg107_1', c1, {c0: 4608, c1: 768}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (3538944, 1)
op162.sizes = ([4608, 768], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op162_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf160', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg106_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg107_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf162', get_index_5, add_1, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.mm


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 14155776}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 14155776}, None)]
op164.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 4608, c1: 3072}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (14155776, 1)
op164.sizes = ([4608, 3072], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op164_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf163', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf164', get_index_4, mul_2, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
    ]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 4608}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 3538944}, None),
        MemoryDep('buf165', c0, {c0: 3538944}, None)]
op166.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 4608, c1: 768}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf166.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (4608, 768)
op166.sizes = ([4608], [768])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op166_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf166', get_index_4, getitem)
        return store_reduction


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 4608}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 3538944}, None),
        MemoryDep('buf165', c0, {c0: 3538944}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 4608, c1: 768}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf167.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (4608, 768)
op167.sizes = ([4608], [768])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op167_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf167', get_index_4, getitem_1)
        return store_reduction


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 3538944}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 3538944}, None),
        MemoryDep('buf165', c0, {c0: 3538944}, None),
        MemoryDep('buf166', c0, {c0: 4608}, None),
        MemoryDep('buf167', c0, {c0: 4608}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg113_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 4608, c1: 768}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (3538944, 1)
op169.sizes = ([4608, 768], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op169_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf166', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf167', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg113_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg114_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf169', get_index_8, add_3, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
    ]
]
op170.node.kernel = extern_kernels.mm


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 3538944}, None)]
op171.unmet_dependencies = [   MemoryDep('buf170', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op171.met_dependencies = [MemoryDep('arg116_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (3538944, 1)
op171.sizes = ([8, 16, 576, 48], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf171', get_index_2, mul, None)
        return store


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 3538944}, None)]
op172.unmet_dependencies = [   MemoryDep('buf170', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op172.met_dependencies = [MemoryDep('arg116_1', c1 + 768, {c0: 8, c1: 768}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (3538944, 1)
op172.sizes = ([8, 768, 576], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf172', get_index_2, add, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf171', mode=None), StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.node.kernel = extern_kernels.bmm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 42467328}, None)]
op174.unmet_dependencies = [   MemoryDep('buf173', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (42467328, 1)
op174.sizes = ([8, 331776, 16], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 73728}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op176.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4608, c1: 16}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (73728, 576)
op176.sizes = ([4608, 16], [576])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op176_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_2, reduction)
        return store_reduction


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 73728}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf175', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf176', c0, {c0: 73728}, None)]
op177.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 4608, c1: 16}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (73728, 576)
op177.sizes = ([4608, 16], [576])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op177_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf176', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf177', get_index_3, reduction)
        return store_reduction


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 42467328}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 42467328}, None),
        MemoryDep('buf176', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf177', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op178.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 2654208, c1: 16}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (42467328, 1)
op178.sizes = ([4608, 576, 16], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op178_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf176', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf177', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf178', get_index_4, truediv, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 42467328}, None)]
op180.unmet_dependencies = [   MemoryDep('buf179', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op180.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 8, c1: 16}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (42467328, 1)
op180.sizes = ([8, 16, 331776], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf180', get_index_2, add, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 3538944}, None)]
op181.unmet_dependencies = [   MemoryDep('buf170', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op181.met_dependencies = [   MemoryDep('arg116_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (3538944, 1)
op181.sizes = ([8, 16, 576, 48], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op181_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf181', get_index_2, add, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.bmm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 3538944}, None)]
op183.unmet_dependencies = [   MemoryDep('buf182', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (3538944, 1)
op183.sizes = ([8, 576, 16, 48], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 3538944}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 3538944}, None),
        MemoryDep('buf165', c0, {c0: 3538944}, None),
        MemoryDep('buf184', c0, {c0: 3538944}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg111_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg112_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg122_1', c1, {c0: 4608, c1: 768}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (3538944, 1)
op185.sizes = ([4608, 768], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op185_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg112_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf184', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg122_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf185', get_index_7, add_3, None)
        return store


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 4608}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 3538944}, None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf186.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (4608, 768)
op186.sizes = ([4608], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op186_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf186', get_index_1, getitem)
        return store_reduction


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 4608}, None)]
op187.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 3538944}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (4608, 768)
op187.sizes = ([4608], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op187_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_1, getitem_1)
        return store_reduction


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 3538944}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 3538944}, None),
        MemoryDep('buf186', c0, {c0: 4608}, None),
        MemoryDep('buf187', c0, {c0: 4608}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg125_1', c1, {c0: 4608, c1: 768}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (3538944, 1)
op189.sizes = ([4608, 768], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op189_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf186', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf187', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, add_1, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.mm


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 14155776}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 14155776}, None)]
op191.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 4608, c1: 3072}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (14155776, 1)
op191.sizes = ([4608, 3072], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op191_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf191', get_index_4, mul_2, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4608}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 3538944}, None),
        MemoryDep('buf192', c0, {c0: 3538944}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 4608, c1: 768}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4608, 768)
op193.sizes = ([4608], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op193_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf193', get_index_4, getitem)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 4608}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 3538944}, None),
        MemoryDep('buf192', c0, {c0: 3538944}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 4608, c1: 768}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (4608, 768)
op194.sizes = ([4608], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op194_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_4, getitem_1)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 3538944}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 3538944}, None),
        MemoryDep('buf192', c0, {c0: 3538944}, None),
        MemoryDep('buf193', c0, {c0: 4608}, None),
        MemoryDep('buf194', c0, {c0: 4608}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg131_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg132_1', c1, {c0: 4608, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (3538944, 1)
op196.sizes = ([4608, 768], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op196_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf193', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf194', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg131_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg132_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf196', get_index_8, add_3, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf197.users = [
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 3538944}, None)]
op198.unmet_dependencies = [   MemoryDep('buf197', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op198.met_dependencies = [MemoryDep('arg134_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (3538944, 1)
op198.sizes = ([8, 16, 576, 48], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf198', get_index_2, mul, None)
        return store


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 3538944}, None)]
op199.unmet_dependencies = [   MemoryDep('buf197', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op199.met_dependencies = [MemoryDep('arg134_1', c1 + 768, {c0: 8, c1: 768}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (3538944, 1)
op199.sizes = ([8, 768, 576], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op199_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf199', get_index_2, add, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf198', mode=None), StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = extern_kernels.bmm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 42467328}, None)]
op201.unmet_dependencies = [   MemoryDep('buf200', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (42467328, 1)
op201.sizes = ([8, 331776, 16], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op201_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 73728}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op203.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4608, c1: 16}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (73728, 576)
op203.sizes = ([4608, 16], [576])
buf202_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op203_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_2, reduction)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 73728}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf202', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf203', c0, {c0: 73728}, None)]
op204.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4608, c1: 16}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (73728, 576)
op204.sizes = ([4608, 16], [576])
buf202_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op204_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, reduction)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 42467328}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 42467328}, None),
        MemoryDep('buf203', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf204', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op205.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 2654208, c1: 16}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (42467328, 1)
op205.sizes = ([4608, 576, 16], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op205_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf204', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf205', get_index_4, truediv, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 42467328}, None)]
op207.unmet_dependencies = [   MemoryDep('buf206', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op207.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 8, c1: 16}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (42467328, 1)
op207.sizes = ([8, 16, 331776], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op207_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, add, None)
        return store


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 3538944}, None)]
op208.unmet_dependencies = [   MemoryDep('buf197', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op208.met_dependencies = [   MemoryDep('arg134_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (3538944, 1)
op208.sizes = ([8, 16, 576, 48], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf208', get_index_2, add, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf207', mode=None), StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.bmm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 3538944}, None)]
op210.unmet_dependencies = [   MemoryDep('buf209', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (3538944, 1)
op210.sizes = ([8, 576, 16, 48], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf210', get_index_1, load, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 3538944}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 3538944}, None),
        MemoryDep('buf192', c0, {c0: 3538944}, None),
        MemoryDep('buf211', c0, {c0: 3538944}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg129_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg140_1', c1, {c0: 4608, c1: 768}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (3538944, 1)
op212.sizes = ([4608, 768], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op212_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf211', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg140_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf212', get_index_7, add_3, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 4608}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 3538944}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf213.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (4608, 768)
op213.sizes = ([4608], [768])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op213_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, getitem)
        return store_reduction


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 4608}, None)]
op214.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 3538944}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (4608, 768)
op214.sizes = ([4608], [768])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op214_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_1, getitem_1)
        return store_reduction


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 3538944}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 3538944}, None),
        MemoryDep('buf213', c0, {c0: 4608}, None),
        MemoryDep('buf214', c0, {c0: 4608}, None)]
op216.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg143_1', c1, {c0: 4608, c1: 768}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (3538944, 1)
op216.sizes = ([4608, 768], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op216_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf214', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf216', get_index_5, add_1, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 14155776}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 14155776}, None)]
op218.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 4608, c1: 3072}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (14155776, 1)
op218.sizes = ([4608, 3072], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op218_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf218', get_index_4, mul_2, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op219.node.kernel = extern_kernels.mm


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 4608}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 3538944}, None),
        MemoryDep('buf219', c0, {c0: 3538944}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 4608, c1: 768}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (4608, 768)
op220.sizes = ([4608], [768])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op220_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf220', get_index_4, getitem)
        return store_reduction


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 4608}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 3538944}, None),
        MemoryDep('buf219', c0, {c0: 3538944}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 4608, c1: 768}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (4608, 768)
op221.sizes = ([4608], [768])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op221_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_4, getitem_1)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 3538944}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 3538944}, None),
        MemoryDep('buf219', c0, {c0: 3538944}, None),
        MemoryDep('buf220', c0, {c0: 4608}, None),
        MemoryDep('buf221', c0, {c0: 4608}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg149_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg150_1', c1, {c0: 4608, c1: 768}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (3538944, 1)
op223.sizes = ([4608, 768], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op223_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf220', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf221', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg149_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg150_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf223', get_index_8, add_3, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 3538944}, None)]
op225.unmet_dependencies = [   MemoryDep('buf224', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op225.met_dependencies = [MemoryDep('arg152_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (3538944, 1)
op225.sizes = ([8, 16, 576, 48], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op225_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf225', get_index_2, mul, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 3538944}, None)]
op226.unmet_dependencies = [   MemoryDep('buf224', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op226.met_dependencies = [MemoryDep('arg152_1', c1 + 768, {c0: 8, c1: 768}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (3538944, 1)
op226.sizes = ([8, 768, 576], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf226', get_index_2, add, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf225', mode=None), StarDep(name='buf226', mode=None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.node.kernel = extern_kernels.bmm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 42467328}, None)]
op228.unmet_dependencies = [   MemoryDep('buf227', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (42467328, 1)
op228.sizes = ([8, 331776, 16], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf228', get_index_1, load, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op229.node.kernel = extern_kernels.mm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 73728}, None)]
op230.unmet_dependencies = [MemoryDep('buf229', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op230.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 4608, c1: 16}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (73728, 576)
op230.sizes = ([4608, 16], [576])
buf229_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op230_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf230', get_index_2, reduction)
        return store_reduction


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 73728}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf229', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf230', c0, {c0: 73728}, None)]
op231.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 4608, c1: 16}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (73728, 576)
op231.sizes = ([4608, 16], [576])
buf229_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op231_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf230', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf231', get_index_3, reduction)
        return store_reduction


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 42467328}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 42467328}, None),
        MemoryDep('buf230', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf231', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op232.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 2654208, c1: 16}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (42467328, 1)
op232.sizes = ([4608, 576, 16], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op232_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf230', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf231', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf232', get_index_4, truediv, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 42467328}, None)]
op234.unmet_dependencies = [   MemoryDep('buf233', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op234.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 8, c1: 16}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (42467328, 1)
op234.sizes = ([8, 16, 331776], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op234_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg156_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf234', get_index_2, add, None)
        return store


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 3538944}, None)]
op235.unmet_dependencies = [   MemoryDep('buf224', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op235.met_dependencies = [   MemoryDep('arg152_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (3538944, 1)
op235.sizes = ([8, 16, 576, 48], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op235_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf235', get_index_2, add, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf234', mode=None), StarDep(name='buf235', mode=None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.node.kernel = extern_kernels.bmm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 3538944}, None)]
op237.unmet_dependencies = [   MemoryDep('buf236', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (3538944, 1)
op237.sizes = ([8, 576, 16, 48], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op237_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf237', get_index_1, load, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 3538944}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 3538944}, None),
        MemoryDep('buf219', c0, {c0: 3538944}, None),
        MemoryDep('buf238', c0, {c0: 3538944}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg147_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg148_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg158_1', c1, {c0: 4608, c1: 768}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (3538944, 1)
op239.sizes = ([4608, 768], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op239_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg148_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf238', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg158_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf239', get_index_7, add_3, None)
        return store


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 4608}, None)]
op240.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 3538944}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf240.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (4608, 768)
op240.sizes = ([4608], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op240_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf240', get_index_1, getitem)
        return store_reduction


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 4608}, None)]
op241.unmet_dependencies = [MemoryDep('buf239', c0, {c0: 3538944}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (4608, 768)
op241.sizes = ([4608], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op241_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf241', get_index_1, getitem_1)
        return store_reduction


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 3538944}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3538944}, None),
        MemoryDep('buf240', c0, {c0: 4608}, None),
        MemoryDep('buf241', c0, {c0: 4608}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg161_1', c1, {c0: 4608, c1: 768}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (3538944, 1)
op243.sizes = ([4608, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op243_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf240', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf241', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, add_1, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 14155776}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 14155776}, None)]
op245.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 4608, c1: 3072}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (14155776, 1)
op245.sizes = ([4608, 3072], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op245_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf245', get_index_4, mul_2, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 4608}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3538944}, None),
        MemoryDep('buf246', c0, {c0: 3538944}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg165_1', c1, {c0: 4608, c1: 768}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf247.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (4608, 768)
op247.sizes = ([4608], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op247_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf247', get_index_4, getitem)
        return store_reduction


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 4608}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3538944}, None),
        MemoryDep('buf246', c0, {c0: 3538944}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg165_1', c1, {c0: 4608, c1: 768}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf248.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (4608, 768)
op248.sizes = ([4608], [768])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op248_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf248', get_index_4, getitem_1)
        return store_reduction


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 3538944}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3538944}, None),
        MemoryDep('buf246', c0, {c0: 3538944}, None),
        MemoryDep('buf247', c0, {c0: 4608}, None),
        MemoryDep('buf248', c0, {c0: 4608}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg165_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg167_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg168_1', c1, {c0: 4608, c1: 768}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (3538944, 1)
op250.sizes = ([4608, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op250_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf247', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf248', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg167_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg168_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf250', get_index_8, add_3, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
    ]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 3538944}, None)]
op252.unmet_dependencies = [   MemoryDep('buf251', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op252.met_dependencies = [MemoryDep('arg170_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (3538944, 1)
op252.sizes = ([8, 16, 576, 48], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf252', get_index_2, mul, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 3538944}, None)]
op253.unmet_dependencies = [   MemoryDep('buf251', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op253.met_dependencies = [MemoryDep('arg170_1', c1 + 768, {c0: 8, c1: 768}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (3538944, 1)
op253.sizes = ([8, 768, 576], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op253_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf253', get_index_2, add, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.bmm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 42467328}, None)]
op255.unmet_dependencies = [   MemoryDep('buf254', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (42467328, 1)
op255.sizes = ([8, 331776, 16], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf255', get_index_1, load, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.mm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 73728}, None)]
op257.unmet_dependencies = [MemoryDep('buf256', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op257.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 4608, c1: 16}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (73728, 576)
op257.sizes = ([4608, 16], [576])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op257_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_2, reduction)
        return store_reduction


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 73728}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf256', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf257', c0, {c0: 73728}, None)]
op258.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 4608, c1: 16}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (73728, 576)
op258.sizes = ([4608, 16], [576])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op258_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf257', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, reduction)
        return store_reduction


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 42467328}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 42467328}, None),
        MemoryDep('buf257', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf258', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op259.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 2654208, c1: 16}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (42467328, 1)
op259.sizes = ([4608, 576, 16], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op259_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf257', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf258', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf259', get_index_4, truediv, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 42467328}, None)]
op261.unmet_dependencies = [   MemoryDep('buf260', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op261.met_dependencies = [MemoryDep('arg174_1', c1, {c0: 8, c1: 16}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (42467328, 1)
op261.sizes = ([8, 16, 331776], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf261', get_index_2, add, None)
        return store


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 3538944}, None)]
op262.unmet_dependencies = [   MemoryDep('buf251', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op262.met_dependencies = [   MemoryDep('arg170_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (3538944, 1)
op262.sizes = ([8, 16, 576, 48], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op262_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf262', get_index_2, add, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.bmm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 3538944}, None)]
op264.unmet_dependencies = [   MemoryDep('buf263', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (3538944, 1)
op264.sizes = ([8, 576, 16, 48], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op264_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf264', get_index_1, load, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelOut)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelOut
    buf265.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
]
op265.node.kernel = extern_kernels.mm


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 3538944}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 3538944}, None),
        MemoryDep('buf246', c0, {c0: 3538944}, None),
        MemoryDep('buf265', c0, {c0: 3538944}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg165_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg166_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg176_1', c1, {c0: 4608, c1: 768}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf266.users = [
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (3538944, 1)
op266.sizes = ([4608, 768], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op266_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf246', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg166_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf265', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg176_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf266', get_index_7, add_3, None)
        return store


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 4608}, None)]
op267.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 3538944}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf267.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (4608, 768)
op267.sizes = ([4608], [768])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op267_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf267', get_index_1, getitem)
        return store_reduction


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 4608}, None)]
op268.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 3538944}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (4608, 768)
op268.sizes = ([4608], [768])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op268_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem_1)
        return store_reduction


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 3538944}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 3538944}, None),
        MemoryDep('buf267', c0, {c0: 4608}, None),
        MemoryDep('buf268', c0, {c0: 4608}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg179_1', c1, {c0: 4608, c1: 768}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (3538944, 1)
op270.sizes = ([4608, 768], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op270_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf268', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg178_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg179_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, add_1, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 14155776}, None)]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 14155776}, None)]
op272.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 4608, c1: 3072}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (14155776, 1)
op272.sizes = ([4608, 3072], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op272_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf271', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg181_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf272', get_index_4, mul_2, None)
        return store


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None)]
op273.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op273.node.kernel = extern_kernels.mm


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 4608}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 3538944}, None),
        MemoryDep('buf273', c0, {c0: 3538944}, None)]
op274.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg183_1', c1, {c0: 4608, c1: 768}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (4608, 768)
op274.sizes = ([4608], [768])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op274_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf274', get_index_4, getitem)
        return store_reduction


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 4608}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 3538944}, None),
        MemoryDep('buf273', c0, {c0: 3538944}, None)]
op275.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg183_1', c1, {c0: 4608, c1: 768}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (4608, 768)
op275.sizes = ([4608], [768])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op275_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_4, getitem_1)
        return store_reduction


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 3538944}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 3538944}, None),
        MemoryDep('buf273', c0, {c0: 3538944}, None),
        MemoryDep('buf274', c0, {c0: 4608}, None),
        MemoryDep('buf275', c0, {c0: 4608}, None)]
op277.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg183_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg185_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg186_1', c1, {c0: 4608, c1: 768}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (3538944, 1)
op277.sizes = ([4608, 768], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op277_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf274', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf275', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg185_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg186_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf277', get_index_8, add_3, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 3538944}, None)]
op279.unmet_dependencies = [   MemoryDep('buf278', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op279.met_dependencies = [MemoryDep('arg188_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (3538944, 1)
op279.sizes = ([8, 16, 576, 48], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf279', get_index_2, mul, None)
        return store


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 3538944}, None)]
op280.unmet_dependencies = [   MemoryDep('buf278', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op280.met_dependencies = [MemoryDep('arg188_1', c1 + 768, {c0: 8, c1: 768}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (3538944, 1)
op280.sizes = ([8, 768, 576], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf280', get_index_2, add, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None), StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.node.kernel = extern_kernels.bmm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 42467328}, None)]
op282.unmet_dependencies = [   MemoryDep('buf281', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (42467328, 1)
op282.sizes = ([8, 331776, 16], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 73728}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op284.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 4608, c1: 16}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (73728, 576)
op284.sizes = ([4608, 16], [576])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op284_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_2, reduction)
        return store_reduction


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 73728}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf283', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf284', c0, {c0: 73728}, None)]
op285.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 4608, c1: 16}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (73728, 576)
op285.sizes = ([4608, 16], [576])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op285_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf284', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, reduction)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 42467328}, None)]
op286.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 42467328}, None),
        MemoryDep('buf284', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf285', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op286.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 2654208, c1: 16}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (42467328, 1)
op286.sizes = ([4608, 576, 16], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op286_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf284', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf285', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf286', get_index_4, truediv, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 42467328}, None)]
op288.unmet_dependencies = [   MemoryDep('buf287', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op288.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 8, c1: 16}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (42467328, 1)
op288.sizes = ([8, 16, 331776], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op288_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf288', get_index_2, add, None)
        return store


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 3538944}, None)]
op289.unmet_dependencies = [   MemoryDep('buf278', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op289.met_dependencies = [   MemoryDep('arg188_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (3538944, 1)
op289.sizes = ([8, 16, 576, 48], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf289', get_index_2, add, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelOut)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf288', mode=None), StarDep(name='buf289', mode=None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ExternKernelOut
    buf290.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.node.kernel = extern_kernels.bmm


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 3538944}, None)]
op291.unmet_dependencies = [   MemoryDep('buf290', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (3538944, 1)
op291.sizes = ([8, 576, 16, 48], [])
buf290_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op291_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf291', get_index_1, load, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op292.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.mm


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 3538944}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 3538944}, None),
        MemoryDep('buf273', c0, {c0: 3538944}, None),
        MemoryDep('buf292', c0, {c0: 3538944}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg183_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg184_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg194_1', c1, {c0: 4608, c1: 768}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (3538944, 1)
op293.sizes = ([4608, 768], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op293_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf273', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg184_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf292', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg194_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf293', get_index_7, add_3, None)
        return store


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 4608}, None)]
op294.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 3538944}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf294.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (4608, 768)
op294.sizes = ([4608], [768])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op294_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem)
        return store_reduction


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 4608}, None)]
op295.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 3538944}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf295.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (4608, 768)
op295.sizes = ([4608], [768])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op295_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_1, getitem_1)
        return store_reduction


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 3538944}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 3538944}, None),
        MemoryDep('buf294', c0, {c0: 4608}, None),
        MemoryDep('buf295', c0, {c0: 4608}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg196_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg197_1', c1, {c0: 4608, c1: 768}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (3538944, 1)
op297.sizes = ([4608, 768], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op297_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf294', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf295', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg196_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg197_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf297', get_index_5, add_1, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.node.kernel = extern_kernels.mm


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 14155776}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 14155776}, None)]
op299.met_dependencies = [MemoryDep('arg199_1', c1, {c0: 4608, c1: 3072}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (14155776, 1)
op299.sizes = ([4608, 3072], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op299_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf299', get_index_4, mul_2, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg200_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
    ]
]
op300.node.kernel = extern_kernels.mm


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 4608}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 3538944}, None),
        MemoryDep('buf300', c0, {c0: 3538944}, None)]
op301.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg201_1', c1, {c0: 4608, c1: 768}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (4608, 768)
op301.sizes = ([4608], [768])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op301_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg201_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_4, getitem)
        return store_reduction


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 4608}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 3538944}, None),
        MemoryDep('buf300', c0, {c0: 3538944}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg201_1', c1, {c0: 4608, c1: 768}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (4608, 768)
op302.sizes = ([4608], [768])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op302_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg201_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf302', get_index_4, getitem_1)
        return store_reduction


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 3538944}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 3538944}, None),
        MemoryDep('buf300', c0, {c0: 3538944}, None),
        MemoryDep('buf301', c0, {c0: 4608}, None),
        MemoryDep('buf302', c0, {c0: 4608}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg201_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg203_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg204_1', c1, {c0: 4608, c1: 768}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (3538944, 1)
op304.sizes = ([4608, 768], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op304_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg201_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf302', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg203_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg204_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf304', get_index_8, add_3, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
    ]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 3538944}, None)]
op306.unmet_dependencies = [   MemoryDep('buf305', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op306.met_dependencies = [MemoryDep('arg206_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (3538944, 1)
op306.sizes = ([8, 16, 576, 48], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf306', get_index_2, mul, None)
        return store


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 3538944}, None)]
op307.unmet_dependencies = [   MemoryDep('buf305', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op307.met_dependencies = [MemoryDep('arg206_1', c1 + 768, {c0: 8, c1: 768}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (3538944, 1)
op307.sizes = ([8, 768, 576], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op307_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf307', get_index_2, add, None)
        return store


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf306', mode=None), StarDep(name='buf307', mode=None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf308.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.node.kernel = extern_kernels.bmm


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 42467328}, None)]
op309.unmet_dependencies = [   MemoryDep('buf308', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (42467328, 1)
op309.sizes = ([8, 331776, 16], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op309_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf309', get_index_1, load, None)
        return store


op310: ExternKernelSchedulerNode(ExternKernelOut)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf309', mode=None)]
op310.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op310.outputs = [
    buf310: ExternKernelOut
    buf310.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
    ]
]
op310.node.kernel = extern_kernels.mm


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 73728}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op311.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 4608, c1: 16}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (73728, 576)
op311.sizes = ([4608, 16], [576])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op311_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf311', get_index_2, reduction)
        return store_reduction


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 73728}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf310', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf311', c0, {c0: 73728}, None)]
op312.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 4608, c1: 16}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (73728, 576)
op312.sizes = ([4608, 16], [576])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op312_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf311', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf312', get_index_3, reduction)
        return store_reduction


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 42467328}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 42467328}, None),
        MemoryDep('buf311', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf312', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op313.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 2654208, c1: 16}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (42467328, 1)
op313.sizes = ([4608, 576, 16], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op313_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf311', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf312', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf313', get_index_4, truediv, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 42467328}, None)]
op315.unmet_dependencies = [   MemoryDep('buf314', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op315.met_dependencies = [MemoryDep('arg210_1', c1, {c0: 8, c1: 16}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (42467328, 1)
op315.sizes = ([8, 16, 331776], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op315_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf315', get_index_2, add, None)
        return store


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 3538944}, None)]
op316.unmet_dependencies = [   MemoryDep('buf305', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op316.met_dependencies = [   MemoryDep('arg206_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (3538944, 1)
op316.sizes = ([8, 16, 576, 48], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf316', get_index_2, add, None)
        return store


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf315', mode=None), StarDep(name='buf316', mode=None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.bmm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 3538944}, None)]
op318.unmet_dependencies = [   MemoryDep('buf317', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (3538944, 1)
op318.sizes = ([8, 576, 16, 48], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op318_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelOut)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelOut
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.node.kernel = extern_kernels.mm


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 3538944}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 3538944}, None),
        MemoryDep('buf300', c0, {c0: 3538944}, None),
        MemoryDep('buf319', c0, {c0: 3538944}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg201_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg202_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg212_1', c1, {c0: 4608, c1: 768}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (3538944, 1)
op320.sizes = ([4608, 768], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op320_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg201_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg202_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf319', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg212_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf320', get_index_7, add_3, None)
        return store


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 4608}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 3538944}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf321.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (4608, 768)
op321.sizes = ([4608], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op321_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf321', get_index_1, getitem)
        return store_reduction


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 4608}, None)]
op322.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 3538944}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (4608, 768)
op322.sizes = ([4608], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op322_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_1, getitem_1)
        return store_reduction


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 3538944}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 3538944}, None),
        MemoryDep('buf321', c0, {c0: 4608}, None),
        MemoryDep('buf322', c0, {c0: 4608}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg214_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg215_1', c1, {c0: 4608, c1: 768}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (3538944, 1)
op324.sizes = ([4608, 768], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op324_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf322', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf324', get_index_5, add_1, None)
        return store


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False)]
]
op325.node.kernel = extern_kernels.mm


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 14155776}, None)]
op326.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 14155776}, None)]
op326.met_dependencies = [MemoryDep('arg217_1', c1, {c0: 4608, c1: 3072}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (14155776, 1)
op326.sizes = ([4608, 3072], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op326_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf325', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg217_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf326', get_index_4, mul_2, None)
        return store


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False),
    ]
]
op327.node.kernel = extern_kernels.mm


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 4608}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 3538944}, None),
        MemoryDep('buf327', c0, {c0: 3538944}, None)]
op328.met_dependencies = 
    [   MemoryDep('arg213_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg219_1', c1, {c0: 4608, c1: 768}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf328.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (4608, 768)
op328.sizes = ([4608], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op328_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf327', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf328', get_index_4, getitem)
        return store_reduction


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 4608}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 3538944}, None),
        MemoryDep('buf327', c0, {c0: 3538944}, None)]
op329.met_dependencies = 
    [   MemoryDep('arg213_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg219_1', c1, {c0: 4608, c1: 768}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf329.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (4608, 768)
op329.sizes = ([4608], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op329_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf327', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf329', get_index_4, getitem_1)
        return store_reduction


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 3538944}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 3538944}, None),
        MemoryDep('buf327', c0, {c0: 3538944}, None),
        MemoryDep('buf328', c0, {c0: 4608}, None),
        MemoryDep('buf329', c0, {c0: 4608}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg213_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg219_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg221_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg222_1', c1, {c0: 4608, c1: 768}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (3538944, 1)
op331.sizes = ([4608, 768], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op331_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf327', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf328', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf329', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg221_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg222_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf331', get_index_8, add_3, None)
        return store


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.mm


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 3538944}, None)]
op333.unmet_dependencies = [   MemoryDep('buf332', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op333.met_dependencies = [MemoryDep('arg224_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (3538944, 1)
op333.sizes = ([8, 16, 576, 48], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op333_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf333', get_index_2, mul, None)
        return store


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 3538944}, None)]
op334.unmet_dependencies = [   MemoryDep('buf332', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op334.met_dependencies = [MemoryDep('arg224_1', c1 + 768, {c0: 8, c1: 768}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (3538944, 1)
op334.sizes = ([8, 768, 576], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op334_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf334', get_index_2, add, None)
        return store


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf333', mode=None), StarDep(name='buf334', mode=None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf335.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.node.kernel = extern_kernels.bmm


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 42467328}, None)]
op336.unmet_dependencies = [   MemoryDep('buf335', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (42467328, 1)
op336.sizes = ([8, 331776, 16], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op336_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf336', get_index_1, load, None)
        return store


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
    ]
]
op337.node.kernel = extern_kernels.mm


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 73728}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op338.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 4608, c1: 16}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (73728, 576)
op338.sizes = ([4608, 16], [576])
buf337_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op338_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf338', get_index_2, reduction)
        return store_reduction


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 73728}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf337', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf338', c0, {c0: 73728}, None)]
op339.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 4608, c1: 16}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (73728, 576)
op339.sizes = ([4608, 16], [576])
buf337_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op339_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf338', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf339', get_index_3, reduction)
        return store_reduction


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 42467328}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf337', c0, {c0: 42467328}, None),
        MemoryDep('buf338', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf339', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op340.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 2654208, c1: 16}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (42467328, 1)
op340.sizes = ([4608, 576, 16], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op340_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf338', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf339', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf340', get_index_4, truediv, None)
        return store


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op341.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 42467328}, None)]
op342.unmet_dependencies = [   MemoryDep('buf341', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op342.met_dependencies = [MemoryDep('arg228_1', c1, {c0: 8, c1: 16}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (42467328, 1)
op342.sizes = ([8, 16, 331776], [])
buf341_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op342_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf342', get_index_2, add, None)
        return store


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 3538944}, None)]
op343.unmet_dependencies = [   MemoryDep('buf332', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op343.met_dependencies = [   MemoryDep('arg224_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (3538944, 1)
op343.sizes = ([8, 16, 576, 48], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op343_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf343', get_index_2, add, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf342', mode=None), StarDep(name='buf343', mode=None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = extern_kernels.bmm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 3538944}, None)]
op345.unmet_dependencies = [   MemoryDep('buf344', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (3538944, 1)
op345.sizes = ([8, 576, 16, 48], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op345_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf345', get_index_1, load, None)
        return store


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=True, is_weak=False)]
]
op346.node.kernel = extern_kernels.mm


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 3538944}, None)]
op347.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 3538944}, None),
        MemoryDep('buf327', c0, {c0: 3538944}, None),
        MemoryDep('buf346', c0, {c0: 3538944}, None)]
op347.met_dependencies = 
    [   MemoryDep('arg213_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg219_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg220_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg230_1', c1, {c0: 4608, c1: 768}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op347.group.device = cuda:0
op347.group.iteration = (3538944, 1)
op347.sizes = ([4608, 768], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op347_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf327', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf346', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg230_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf347', get_index_7, add_3, None)
        return store


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 4608}, None)]
op348.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 3538944}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (4608, 768)
op348.sizes = ([4608], [768])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op348_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf348', get_index_1, getitem)
        return store_reduction


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 4608}, None)]
op349.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 3538944}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf349.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (4608, 768)
op349.sizes = ([4608], [768])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op349_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_1, getitem_1)
        return store_reduction


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 3538944}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 3538944}, None),
        MemoryDep('buf348', c0, {c0: 4608}, None),
        MemoryDep('buf349', c0, {c0: 4608}, None)]
op351.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg233_1', c1, {c0: 4608, c1: 768}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (3538944, 1)
op351.sizes = ([4608, 768], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op351_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf348', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf349', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg232_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg233_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf351', get_index_5, add_1, None)
        return store


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 14155776}, None)]
op353.unmet_dependencies = [MemoryDep('buf352', c0, {c0: 14155776}, None)]
op353.met_dependencies = [MemoryDep('arg235_1', c1, {c0: 4608, c1: 3072}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (14155776, 1)
op353.sizes = ([4608, 3072], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op353_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg235_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf352', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg235_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf353', get_index_4, mul_2, None)
        return store


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op354.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op354.node.kernel = extern_kernels.mm


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 4608}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 3538944}, None),
        MemoryDep('buf354', c0, {c0: 3538944}, None)]
op355.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 4608, c1: 768}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (4608, 768)
op355.sizes = ([4608], [768])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op355_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf355', get_index_4, getitem)
        return store_reduction


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 4608}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 3538944}, None),
        MemoryDep('buf354', c0, {c0: 3538944}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 4608, c1: 768}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (4608, 768)
op356.sizes = ([4608], [768])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op356_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_4, getitem_1)
        return store_reduction


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 3538944}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 3538944}, None),
        MemoryDep('buf354', c0, {c0: 3538944}, None),
        MemoryDep('buf355', c0, {c0: 4608}, None),
        MemoryDep('buf356', c0, {c0: 4608}, None)]
op358.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg239_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg240_1', c1, {c0: 4608, c1: 768}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (3538944, 1)
op358.sizes = ([4608, 768], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op358_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf355', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf356', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg239_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg240_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf358', get_index_8, add_3, None)
        return store


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
    ]
]
op359.node.kernel = extern_kernels.mm


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 3538944}, None)]
op360.unmet_dependencies = [   MemoryDep('buf359', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op360.met_dependencies = [MemoryDep('arg242_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (3538944, 1)
op360.sizes = ([8, 16, 576, 48], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op360_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf360', get_index_2, mul, None)
        return store


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 3538944}, None)]
op361.unmet_dependencies = [   MemoryDep('buf359', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op361.met_dependencies = [MemoryDep('arg242_1', c1 + 768, {c0: 8, c1: 768}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (3538944, 1)
op361.sizes = ([8, 768, 576], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op361_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf361', get_index_2, add, None)
        return store


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf360', mode=None), StarDep(name='buf361', mode=None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.node.kernel = extern_kernels.bmm


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 42467328}, None)]
op363.unmet_dependencies = [   MemoryDep('buf362', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (42467328, 1)
op363.sizes = ([8, 331776, 16], [])
buf362_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op363_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf363', get_index_1, load, None)
        return store


op364: ExternKernelSchedulerNode(ExternKernelOut)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf363', mode=None)]
op364.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op364.outputs = [
    buf364: ExternKernelOut
    buf364.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
    ]
]
op364.node.kernel = extern_kernels.mm


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 73728}, None)]
op365.unmet_dependencies = [MemoryDep('buf364', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op365.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 4608, c1: 16}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op365.group.device = cuda:0
op365.group.iteration = (73728, 576)
op365.sizes = ([4608, 16], [576])
buf364_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op365_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf365', get_index_2, reduction)
        return store_reduction


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 73728}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf364', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf365', c0, {c0: 73728}, None)]
op366.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 4608, c1: 16}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (73728, 576)
op366.sizes = ([4608, 16], [576])
buf364_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op366_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf365', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf366', get_index_3, reduction)
        return store_reduction


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 42467328}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 42467328}, None),
        MemoryDep('buf365', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf366', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op367.met_dependencies = [MemoryDep('arg244_1', c1, {c0: 2654208, c1: 16}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (42467328, 1)
op367.sizes = ([4608, 576, 16], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op367_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf365', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf366', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf367', get_index_4, truediv, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.node.kernel = extern_kernels.mm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 42467328}, None)]
op369.unmet_dependencies = [   MemoryDep('buf368', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op369.met_dependencies = [MemoryDep('arg246_1', c1, {c0: 8, c1: 16}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (42467328, 1)
op369.sizes = ([8, 16, 331776], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op369_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf369', get_index_2, add, None)
        return store


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 3538944}, None)]
op370.unmet_dependencies = [   MemoryDep('buf359', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op370.met_dependencies = [   MemoryDep('arg242_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (3538944, 1)
op370.sizes = ([8, 16, 576, 48], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op370_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf370', get_index_2, add, None)
        return store


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf369', mode=None), StarDep(name='buf370', mode=None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.bmm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 3538944}, None)]
op372.unmet_dependencies = [   MemoryDep('buf371', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (3538944, 1)
op372.sizes = ([8, 576, 16, 48], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf372', get_index_1, load, None)
        return store


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op373.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf373.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False)]
]
op373.node.kernel = extern_kernels.mm


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 3538944}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 3538944}, None),
        MemoryDep('buf354', c0, {c0: 3538944}, None),
        MemoryDep('buf373', c0, {c0: 3538944}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg238_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg248_1', c1, {c0: 4608, c1: 768}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (3538944, 1)
op374.sizes = ([4608, 768], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op374_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf354', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg238_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf373', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg248_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf374', get_index_7, add_3, None)
        return store


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 4608}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 3538944}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf375.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (4608, 768)
op375.sizes = ([4608], [768])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op375_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf375', get_index_1, getitem)
        return store_reduction


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 4608}, None)]
op376.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 3538944}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf376.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (4608, 768)
op376.sizes = ([4608], [768])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op376_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf376', get_index_1, getitem_1)
        return store_reduction


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 3538944}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 3538944}, None),
        MemoryDep('buf375', c0, {c0: 4608}, None),
        MemoryDep('buf376', c0, {c0: 4608}, None)]
op378.met_dependencies = 
    [   MemoryDep('arg250_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg251_1', c1, {c0: 4608, c1: 768}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (3538944, 1)
op378.sizes = ([4608, 768], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op378_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf375', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf376', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg250_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg251_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf378', get_index_5, add_1, None)
        return store


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
]
op379.node.kernel = extern_kernels.mm


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 14155776}, None)]
op380.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 14155776}, None)]
op380.met_dependencies = [MemoryDep('arg253_1', c1, {c0: 4608, c1: 3072}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (14155776, 1)
op380.sizes = ([4608, 3072], [])
buf379_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op380_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf379', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg253_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf380', get_index_4, mul_2, None)
        return store


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False),
    ]
]
op381.node.kernel = extern_kernels.mm


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 4608}, None)]
op382.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 3538944}, None),
        MemoryDep('buf381', c0, {c0: 3538944}, None)]
op382.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg255_1', c1, {c0: 4608, c1: 768}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf382.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (4608, 768)
op382.sizes = ([4608], [768])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op382_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg255_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf382', get_index_4, getitem)
        return store_reduction


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 4608}, None)]
op383.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 3538944}, None),
        MemoryDep('buf381', c0, {c0: 3538944}, None)]
op383.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg255_1', c1, {c0: 4608, c1: 768}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf383.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (4608, 768)
op383.sizes = ([4608], [768])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op383_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg255_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf383', get_index_4, getitem_1)
        return store_reduction


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 3538944}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 3538944}, None),
        MemoryDep('buf381', c0, {c0: 3538944}, None),
        MemoryDep('buf382', c0, {c0: 4608}, None),
        MemoryDep('buf383', c0, {c0: 4608}, None)]
op385.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg255_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg257_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg258_1', c1, {c0: 4608, c1: 768}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (3538944, 1)
op385.sizes = ([4608, 768], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op385_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg255_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf382', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf383', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg257_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg258_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf385', get_index_8, add_3, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 3538944}, None)]
op387.unmet_dependencies = [   MemoryDep('buf386', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op387.met_dependencies = [MemoryDep('arg260_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (3538944, 1)
op387.sizes = ([8, 16, 576, 48], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op387_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg260_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf387', get_index_2, mul, None)
        return store


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 3538944}, None)]
op388.unmet_dependencies = [   MemoryDep('buf386', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op388.met_dependencies = [MemoryDep('arg260_1', c1 + 768, {c0: 8, c1: 768}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (3538944, 1)
op388.sizes = ([8, 768, 576], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op388_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg260_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf388', get_index_2, add, None)
        return store


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf387', mode=None), StarDep(name='buf388', mode=None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.bmm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 42467328}, None)]
op390.unmet_dependencies = [   MemoryDep('buf389', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf390.users = [NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (42467328, 1)
op390.sizes = ([8, 331776, 16], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op390_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf390', get_index_1, load, None)
        return store


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op391.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
    ]
]
op391.node.kernel = extern_kernels.mm


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 73728}, None)]
op392.unmet_dependencies = [MemoryDep('buf391', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op392.met_dependencies = [MemoryDep('arg262_1', c1, {c0: 4608, c1: 16}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (73728, 576)
op392.sizes = ([4608, 16], [576])
buf391_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op392_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf392', get_index_2, reduction)
        return store_reduction


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 73728}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf391', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf392', c0, {c0: 73728}, None)]
op393.met_dependencies = [MemoryDep('arg262_1', c1, {c0: 4608, c1: 16}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (73728, 576)
op393.sizes = ([4608, 16], [576])
buf391_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op393_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf392', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf393', get_index_3, reduction)
        return store_reduction


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 42467328}, None)]
op394.unmet_dependencies = 
    [   MemoryDep('buf391', c0, {c0: 42467328}, None),
        MemoryDep('buf392', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf393', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op394.met_dependencies = [MemoryDep('arg262_1', c1, {c0: 2654208, c1: 16}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (42467328, 1)
op394.sizes = ([4608, 576, 16], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op394_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf392', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf393', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf394', get_index_4, truediv, None)
        return store


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf394', mode=None)]
op395.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf395.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.node.kernel = extern_kernels.mm


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 42467328}, None)]
op396.unmet_dependencies = [   MemoryDep('buf395', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op396.met_dependencies = [MemoryDep('arg264_1', c1, {c0: 8, c1: 16}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (42467328, 1)
op396.sizes = ([8, 16, 331776], [])
buf395_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op396_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf396', get_index_2, add, None)
        return store


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 3538944}, None)]
op397.unmet_dependencies = [   MemoryDep('buf386', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op397.met_dependencies = [   MemoryDep('arg260_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (3538944, 1)
op397.sizes = ([8, 16, 576, 48], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op397_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg260_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf397', get_index_2, add, None)
        return store


op398: ExternKernelSchedulerNode(ExternKernelOut)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf396', mode=None), StarDep(name='buf397', mode=None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ExternKernelOut
    buf398.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.node.kernel = extern_kernels.bmm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 3538944}, None)]
op399.unmet_dependencies = [   MemoryDep('buf398', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (3538944, 1)
op399.sizes = ([8, 576, 16, 48], [])
buf398_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf399', get_index_1, load, None)
        return store


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf399', mode=None)]
op400.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False)]
]
op400.node.kernel = extern_kernels.mm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 3538944}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 3538944}, None),
        MemoryDep('buf381', c0, {c0: 3538944}, None),
        MemoryDep('buf400', c0, {c0: 3538944}, None)]
op401.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg255_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg256_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg266_1', c1, {c0: 4608, c1: 768}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op401.group.device = cuda:0
op401.group.iteration = (3538944, 1)
op401.sizes = ([4608, 768], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op401_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg255_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg256_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf400', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg266_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf401', get_index_7, add_3, None)
        return store


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 4608}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 3538944}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf402.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (4608, 768)
op402.sizes = ([4608], [768])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op402_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf402', get_index_1, getitem)
        return store_reduction


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 4608}, None)]
op403.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 3538944}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf403.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (4608, 768)
op403.sizes = ([4608], [768])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op403_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf403', get_index_1, getitem_1)
        return store_reduction


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 3538944}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf401', c0, {c0: 3538944}, None),
        MemoryDep('buf402', c0, {c0: 4608}, None),
        MemoryDep('buf403', c0, {c0: 4608}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg268_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg269_1', c1, {c0: 4608, c1: 768}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (3538944, 1)
op405.sizes = ([4608, 768], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op405_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf403', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg268_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg269_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf405', get_index_5, add_1, None)
        return store


op406: ExternKernelSchedulerNode(ExternKernelOut)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op406.met_dependencies = [StarDep(name='arg270_1', mode=None)]
op406.outputs = [
    buf406: ExternKernelOut
    buf406.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf406.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False)]
]
op406.node.kernel = extern_kernels.mm


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 14155776}, None)]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 14155776}, None)]
op407.met_dependencies = [MemoryDep('arg271_1', c1, {c0: 4608, c1: 3072}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (14155776, 1)
op407.sizes = ([4608, 3072], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op407_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg271_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf406', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg271_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf407', get_index_4, mul_2, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op408.node.kernel = extern_kernels.mm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 4608}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf401', c0, {c0: 3538944}, None),
        MemoryDep('buf408', c0, {c0: 3538944}, None)]
op409.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg273_1', c1, {c0: 4608, c1: 768}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf409.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (4608, 768)
op409.sizes = ([4608], [768])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op409_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf409', get_index_4, getitem)
        return store_reduction


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 4608}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf401', c0, {c0: 3538944}, None),
        MemoryDep('buf408', c0, {c0: 3538944}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg273_1', c1, {c0: 4608, c1: 768}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf410.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (4608, 768)
op410.sizes = ([4608], [768])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op410_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf410', get_index_4, getitem_1)
        return store_reduction


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 3538944}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf401', c0, {c0: 3538944}, None),
        MemoryDep('buf408', c0, {c0: 3538944}, None),
        MemoryDep('buf409', c0, {c0: 4608}, None),
        MemoryDep('buf410', c0, {c0: 4608}, None)]
op412.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg273_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg275_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg276_1', c1, {c0: 4608, c1: 768}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf412.users = [NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (3538944, 1)
op412.sizes = ([4608, 768], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op412_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf409', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf410', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg275_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg276_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf412', get_index_8, add_3, None)
        return store


op413: ExternKernelSchedulerNode(ExternKernelOut)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op413.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op413.outputs = [
    buf413: ExternKernelOut
    buf413.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
    ]
]
op413.node.kernel = extern_kernels.mm


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 3538944}, None)]
op414.unmet_dependencies = [   MemoryDep('buf413', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op414.met_dependencies = [MemoryDep('arg278_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (3538944, 1)
op414.sizes = ([8, 16, 576, 48], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf414', get_index_2, mul, None)
        return store


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 3538944}, None)]
op415.unmet_dependencies = [   MemoryDep('buf413', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op415.met_dependencies = [MemoryDep('arg278_1', c1 + 768, {c0: 8, c1: 768}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (3538944, 1)
op415.sizes = ([8, 768, 576], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op415_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf415', get_index_2, add, None)
        return store


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf414', mode=None), StarDep(name='buf415', mode=None)]
op416.met_dependencies = []
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.node.kernel = extern_kernels.bmm


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 42467328}, None)]
op417.unmet_dependencies = [   MemoryDep('buf416', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (42467328, 1)
op417.sizes = ([8, 331776, 16], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf417', get_index_1, load, None)
        return store


op418: ExternKernelSchedulerNode(ExternKernelOut)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf417', mode=None)]
op418.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op418.outputs = [
    buf418: ExternKernelOut
    buf418.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
    ]
]
op418.node.kernel = extern_kernels.mm


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 73728}, None)]
op419.unmet_dependencies = [MemoryDep('buf418', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op419.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 4608, c1: 16}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
    ]
]
op419.group.device = cuda:0
op419.group.iteration = (73728, 576)
op419.sizes = ([4608, 16], [576])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op419_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf419', get_index_2, reduction)
        return store_reduction


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 73728}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf418', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf419', c0, {c0: 73728}, None)]
op420.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 4608, c1: 16}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf420.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (73728, 576)
op420.sizes = ([4608, 16], [576])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op420_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf419', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf420', get_index_3, reduction)
        return store_reduction


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 42467328}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 42467328}, None),
        MemoryDep('buf419', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf420', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op421.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 2654208, c1: 16}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf421.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (42467328, 1)
op421.sizes = ([4608, 576, 16], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op421_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf419', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf420', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf421', get_index_4, truediv, None)
        return store


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op422.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.node.kernel = extern_kernels.mm


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 42467328}, None)]
op423.unmet_dependencies = [   MemoryDep('buf422', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op423.met_dependencies = [MemoryDep('arg282_1', c1, {c0: 8, c1: 16}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (42467328, 1)
op423.sizes = ([8, 16, 331776], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op423_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf423', get_index_2, add, None)
        return store


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 3538944}, None)]
op424.unmet_dependencies = [   MemoryDep('buf413', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op424.met_dependencies = [   MemoryDep('arg278_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (3538944, 1)
op424.sizes = ([8, 16, 576, 48], [])
buf413_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op424_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf424', get_index_2, add, None)
        return store


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf423', mode=None), StarDep(name='buf424', mode=None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.node.kernel = extern_kernels.bmm


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 3538944}, None)]
op426.unmet_dependencies = [   MemoryDep('buf425', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (3538944, 1)
op426.sizes = ([8, 576, 16, 48], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op426_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 3538944}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf401', c0, {c0: 3538944}, None),
        MemoryDep('buf408', c0, {c0: 3538944}, None),
        MemoryDep('buf427', c0, {c0: 3538944}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg273_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg274_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg284_1', c1, {c0: 4608, c1: 768}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (3538944, 1)
op428.sizes = ([4608, 768], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op428_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg274_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf427', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg284_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf428', get_index_7, add_3, None)
        return store


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 4608}, None)]
op429.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 3538944}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf429.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (4608, 768)
op429.sizes = ([4608], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op429_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf429', get_index_1, getitem)
        return store_reduction


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 4608}, None)]
op430.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 3538944}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf430.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (4608, 768)
op430.sizes = ([4608], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op430_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf430', get_index_1, getitem_1)
        return store_reduction


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 3538944}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 3538944}, None),
        MemoryDep('buf429', c0, {c0: 4608}, None),
        MemoryDep('buf430', c0, {c0: 4608}, None)]
op432.met_dependencies = 
    [   MemoryDep('arg286_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg287_1', c1, {c0: 4608, c1: 768}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (3538944, 1)
op432.sizes = ([4608, 768], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op432_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf429', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf430', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg286_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg287_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf432', get_index_5, add_1, None)
        return store


op433: ExternKernelSchedulerNode(ExternKernelOut)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op433.met_dependencies = [StarDep(name='arg288_1', mode=None)]
op433.outputs = [
    buf433: ExternKernelOut
    buf433.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False)]
]
op433.node.kernel = extern_kernels.mm


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 14155776}, None)]
op434.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 14155776}, None)]
op434.met_dependencies = [MemoryDep('arg289_1', c1, {c0: 4608, c1: 3072}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (14155776, 1)
op434.sizes = ([4608, 3072], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op434_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg289_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf433', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf434', get_index_4, mul_2, None)
        return store


op435: ExternKernelSchedulerNode(ExternKernelOut)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op435.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op435.outputs = [
    buf435: ExternKernelOut
    buf435.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf435.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
    ]
]
op435.node.kernel = extern_kernels.mm


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 4608}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 3538944}, None),
        MemoryDep('buf435', c0, {c0: 3538944}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg291_1', c1, {c0: 4608, c1: 768}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf436.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (4608, 768)
op436.sizes = ([4608], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op436_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg291_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf436', get_index_4, getitem)
        return store_reduction


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 4608}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 3538944}, None),
        MemoryDep('buf435', c0, {c0: 3538944}, None)]
op437.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg291_1', c1, {c0: 4608, c1: 768}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (4608, 768)
op437.sizes = ([4608], [768])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op437_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg291_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf437', get_index_4, getitem_1)
        return store_reduction


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 3538944}, None)]
op439.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 3538944}, None),
        MemoryDep('buf435', c0, {c0: 3538944}, None),
        MemoryDep('buf436', c0, {c0: 4608}, None),
        MemoryDep('buf437', c0, {c0: 4608}, None)]
op439.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg291_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg293_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg294_1', c1, {c0: 4608, c1: 768}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (3538944, 1)
op439.sizes = ([4608, 768], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op439_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg291_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf436', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf437', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg293_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg294_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf439', get_index_8, add_3, None)
        return store


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf439', mode=None)]
op440.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
]
op440.node.kernel = extern_kernels.mm


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 3538944}, None)]
op441.unmet_dependencies = [   MemoryDep('buf440', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op441.met_dependencies = [MemoryDep('arg296_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (3538944, 1)
op441.sizes = ([8, 16, 576, 48], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf441', get_index_2, mul, None)
        return store


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 3538944}, None)]
op442.unmet_dependencies = [   MemoryDep('buf440', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op442.met_dependencies = [MemoryDep('arg296_1', c1 + 768, {c0: 8, c1: 768}, None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf442.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (3538944, 1)
op442.sizes = ([8, 768, 576], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op442_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf442', get_index_2, add, None)
        return store


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf441', mode=None), StarDep(name='buf442', mode=None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = extern_kernels.bmm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 42467328}, None)]
op444.unmet_dependencies = [   MemoryDep('buf443', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (42467328, 1)
op444.sizes = ([8, 331776, 16], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op444_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf444', get_index_1, load, None)
        return store


op445: ExternKernelSchedulerNode(ExternKernelOut)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf444', mode=None)]
op445.met_dependencies = [StarDep(name='arg297_1', mode=None)]
op445.outputs = [
    buf445: ExternKernelOut
    buf445.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=True, is_weak=False),
    ]
]
op445.node.kernel = extern_kernels.mm


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 73728}, None)]
op446.unmet_dependencies = [MemoryDep('buf445', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op446.met_dependencies = [MemoryDep('arg298_1', c1, {c0: 4608, c1: 16}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf446.users = [
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
    ]
]
op446.group.device = cuda:0
op446.group.iteration = (73728, 576)
op446.sizes = ([4608, 16], [576])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op446_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf446', get_index_2, reduction)
        return store_reduction


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 73728}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf445', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf446', c0, {c0: 73728}, None)]
op447.met_dependencies = [MemoryDep('arg298_1', c1, {c0: 4608, c1: 16}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf447.users = [NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (73728, 576)
op447.sizes = ([4608, 16], [576])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op447_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf446', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf447', get_index_3, reduction)
        return store_reduction


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 42467328}, None)]
op448.unmet_dependencies = 
    [   MemoryDep('buf445', c0, {c0: 42467328}, None),
        MemoryDep('buf446', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf447', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op448.met_dependencies = [MemoryDep('arg298_1', c1, {c0: 2654208, c1: 16}, None)]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf448.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (42467328, 1)
op448.sizes = ([4608, 576, 16], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op448_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf446', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf447', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf448', get_index_4, truediv, None)
        return store


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf448', mode=None)]
op449.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = extern_kernels.mm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 42467328}, None)]
op450.unmet_dependencies = [   MemoryDep('buf449', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op450.met_dependencies = [MemoryDep('arg300_1', c1, {c0: 8, c1: 16}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (42467328, 1)
op450.sizes = ([8, 16, 331776], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf450', get_index_2, add, None)
        return store


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 3538944}, None)]
op451.unmet_dependencies = [   MemoryDep('buf440', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op451.met_dependencies = [   MemoryDep('arg296_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (3538944, 1)
op451.sizes = ([8, 16, 576, 48], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op451_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf451', get_index_2, add, None)
        return store


op452: ExternKernelSchedulerNode(ExternKernelOut)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf450', mode=None), StarDep(name='buf451', mode=None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: ExternKernelOut
    buf452.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op452.node.kernel = extern_kernels.bmm


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 3538944}, None)]
op453.unmet_dependencies = [   MemoryDep('buf452', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (3538944, 1)
op453.sizes = ([8, 576, 16, 48], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op453_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf453', get_index_1, load, None)
        return store


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op454.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf454.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False)]
]
op454.node.kernel = extern_kernels.mm


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 3538944}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 3538944}, None),
        MemoryDep('buf435', c0, {c0: 3538944}, None),
        MemoryDep('buf454', c0, {c0: 3538944}, None)]
op455.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg291_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg292_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg302_1', c1, {c0: 4608, c1: 768}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (3538944, 1)
op455.sizes = ([4608, 768], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op455_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf435', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg291_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg292_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf454', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg302_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf455', get_index_7, add_3, None)
        return store


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 4608}, None)]
op456.unmet_dependencies = [MemoryDep('buf455', c0, {c0: 3538944}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf456.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (4608, 768)
op456.sizes = ([4608], [768])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op456_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf456', get_index_1, getitem)
        return store_reduction


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 4608}, None)]
op457.unmet_dependencies = [MemoryDep('buf455', c0, {c0: 3538944}, None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf457.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (4608, 768)
op457.sizes = ([4608], [768])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op457_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf457', get_index_1, getitem_1)
        return store_reduction


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 3538944}, None)]
op459.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 3538944}, None),
        MemoryDep('buf456', c0, {c0: 4608}, None),
        MemoryDep('buf457', c0, {c0: 4608}, None)]
op459.met_dependencies = 
    [   MemoryDep('arg304_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg305_1', c1, {c0: 4608, c1: 768}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf459.users = [NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (3538944, 1)
op459.sizes = ([4608, 768], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf457_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op459_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf456', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf457', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg304_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg305_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf459', get_index_5, add_1, None)
        return store


op460: ExternKernelSchedulerNode(ExternKernelOut)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op460.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op460.outputs = [
    buf460: ExternKernelOut
    buf460.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf460.users = [NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False)]
]
op460.node.kernel = extern_kernels.mm


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 14155776}, None)]
op461.unmet_dependencies = [MemoryDep('buf460', c0, {c0: 14155776}, None)]
op461.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 4608, c1: 3072}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf461.users = [NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.group.device = cuda:0
op461.group.iteration = (14155776, 1)
op461.sizes = ([4608, 3072], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op461_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf460', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg307_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf461', get_index_4, mul_2, None)
        return store


op462: ExternKernelSchedulerNode(ExternKernelOut)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf461', mode=None)]
op462.met_dependencies = [StarDep(name='arg308_1', mode=None)]
op462.outputs = [
    buf462: ExternKernelOut
    buf462.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
    ]
]
op462.node.kernel = extern_kernels.mm


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 4608}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 3538944}, None),
        MemoryDep('buf462', c0, {c0: 3538944}, None)]
op463.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 4608, c1: 768}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf463.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (4608, 768)
op463.sizes = ([4608], [768])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op463_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf462', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf463', get_index_4, getitem)
        return store_reduction


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 4608}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 3538944}, None),
        MemoryDep('buf462', c0, {c0: 3538944}, None)]
op464.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 4608, c1: 768}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf464.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (4608, 768)
op464.sizes = ([4608], [768])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op464_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf462', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf464', get_index_4, getitem_1)
        return store_reduction


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 3538944}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 3538944}, None),
        MemoryDep('buf462', c0, {c0: 3538944}, None),
        MemoryDep('buf463', c0, {c0: 4608}, None),
        MemoryDep('buf464', c0, {c0: 4608}, None)]
op466.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg311_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg312_1', c1, {c0: 4608, c1: 768}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf466.users = [NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (3538944, 1)
op466.sizes = ([4608, 768], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op466_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf462', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf463', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf464', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg311_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg312_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf466', get_index_8, add_3, None)
        return store


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf466', mode=None)]
op467.met_dependencies = [StarDep(name='arg313_1', mode=None)]
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
    ]
]
op467.node.kernel = extern_kernels.mm


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 3538944}, None)]
op468.unmet_dependencies = [   MemoryDep('buf467', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op468.met_dependencies = [MemoryDep('arg314_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (3538944, 1)
op468.sizes = ([8, 16, 576, 48], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op468_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf468', get_index_2, mul, None)
        return store


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 3538944}, None)]
op469.unmet_dependencies = [   MemoryDep('buf467', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op469.met_dependencies = [MemoryDep('arg314_1', c1 + 768, {c0: 8, c1: 768}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (3538944, 1)
op469.sizes = ([8, 768, 576], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op469_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf469', get_index_2, add, None)
        return store


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf468', mode=None), StarDep(name='buf469', mode=None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.bmm


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 42467328}, None)]
op471.unmet_dependencies = [   MemoryDep('buf470', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op471.met_dependencies = []
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (42467328, 1)
op471.sizes = ([8, 331776, 16], [])
buf470_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op471_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf470', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf471', get_index_1, load, None)
        return store


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf472.users = [
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=True, is_weak=False),
    ]
]
op472.node.kernel = extern_kernels.mm


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 73728}, None)]
op473.unmet_dependencies = [MemoryDep('buf472', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op473.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 4608, c1: 16}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (73728, 576)
op473.sizes = ([4608, 16], [576])
buf472_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op473_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf473', get_index_2, reduction)
        return store_reduction


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 73728}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf472', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf473', c0, {c0: 73728}, None)]
op474.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 4608, c1: 16}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf474.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (73728, 576)
op474.sizes = ([4608, 16], [576])
buf472_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op474_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf473', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf474', get_index_3, reduction)
        return store_reduction


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 42467328}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf472', c0, {c0: 42467328}, None),
        MemoryDep('buf473', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf474', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op475.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 2654208, c1: 16}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (42467328, 1)
op475.sizes = ([4608, 576, 16], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op475_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf473', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf474', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf475', get_index_4, truediv, None)
        return store


op476: ExternKernelSchedulerNode(ExternKernelOut)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op476.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op476.outputs = [
    buf476: ExternKernelOut
    buf476.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf476.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.mm


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 42467328}, None)]
op477.unmet_dependencies = [   MemoryDep('buf476', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op477.met_dependencies = [MemoryDep('arg318_1', c1, {c0: 8, c1: 16}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf477.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (42467328, 1)
op477.sizes = ([8, 16, 331776], [])
buf476_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf476', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf477', get_index_2, add, None)
        return store


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 3538944}, None)]
op478.unmet_dependencies = [   MemoryDep('buf467', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op478.met_dependencies = [   MemoryDep('arg314_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf478.users = [NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (3538944, 1)
op478.sizes = ([8, 16, 576, 48], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op478_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf478', get_index_2, add, None)
        return store


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf477', mode=None), StarDep(name='buf478', mode=None)]
op479.met_dependencies = []
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf479.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.node.kernel = extern_kernels.bmm


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 3538944}, None)]
op480.unmet_dependencies = [   MemoryDep('buf479', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf480.users = [NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (3538944, 1)
op480.sizes = ([8, 576, 16, 48], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op480_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf480', get_index_1, load, None)
        return store


op481: ExternKernelSchedulerNode(ExternKernelOut)
op481.writes = [StarDep(name='buf481', mode=None)]
op481.unmet_dependencies = [StarDep(name='buf480', mode=None)]
op481.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op481.outputs = [
    buf481: ExternKernelOut
    buf481.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op481.node.kernel = extern_kernels.mm


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 3538944}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 3538944}, None),
        MemoryDep('buf462', c0, {c0: 3538944}, None),
        MemoryDep('buf481', c0, {c0: 3538944}, None)]
op482.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg310_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg320_1', c1, {c0: 4608, c1: 768}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf482.users = [
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=True, is_weak=False),
    ]
]
op482.group.device = cuda:0
op482.group.iteration = (3538944, 1)
op482.sizes = ([4608, 768], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op482_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf462', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg310_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf481', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg320_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf482', get_index_7, add_3, None)
        return store


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 4608}, None)]
op483.unmet_dependencies = [MemoryDep('buf482', c0, {c0: 3538944}, None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf483.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op483.group.device = cuda:0
op483.group.iteration = (4608, 768)
op483.sizes = ([4608], [768])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op483_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf483', get_index_1, getitem)
        return store_reduction


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 4608}, None)]
op484.unmet_dependencies = [MemoryDep('buf482', c0, {c0: 3538944}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (4608, 768)
op484.sizes = ([4608], [768])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op484_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_1, getitem_1)
        return store_reduction


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 3538944}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 3538944}, None),
        MemoryDep('buf483', c0, {c0: 4608}, None),
        MemoryDep('buf484', c0, {c0: 4608}, None)]
op486.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg323_1', c1, {c0: 4608, c1: 768}, None)]
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (3538944, 1)
op486.sizes = ([4608, 768], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op486_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf483', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf484', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg322_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg323_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf486', get_index_5, add_1, None)
        return store


op487: ExternKernelSchedulerNode(ExternKernelOut)
op487.writes = [StarDep(name='buf487', mode=None)]
op487.unmet_dependencies = [StarDep(name='buf486', mode=None)]
op487.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op487.outputs = [
    buf487: ExternKernelOut
    buf487.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf487.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False)]
]
op487.node.kernel = extern_kernels.mm


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 14155776}, None)]
op488.unmet_dependencies = [MemoryDep('buf487', c0, {c0: 14155776}, None)]
op488.met_dependencies = [MemoryDep('arg325_1', c1, {c0: 4608, c1: 3072}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (14155776, 1)
op488.sizes = ([4608, 3072], [])
buf487_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op488_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg325_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf487', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg325_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf488', get_index_4, mul_2, None)
        return store


op489: ExternKernelSchedulerNode(ExternKernelOut)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf488', mode=None)]
op489.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op489.outputs = [
    buf489: ExternKernelOut
    buf489.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf489.users = [
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=True, is_weak=False),
    ]
]
op489.node.kernel = extern_kernels.mm


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 4608}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 3538944}, None),
        MemoryDep('buf489', c0, {c0: 3538944}, None)]
op490.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg327_1', c1, {c0: 4608, c1: 768}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf490.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (4608, 768)
op490.sizes = ([4608], [768])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op490_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg327_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf490', get_index_4, getitem)
        return store_reduction


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', c0, {c0: 4608}, None)]
op491.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 3538944}, None),
        MemoryDep('buf489', c0, {c0: 3538944}, None)]
op491.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg327_1', c1, {c0: 4608, c1: 768}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf491.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (4608, 768)
op491.sizes = ([4608], [768])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op491_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg327_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf491', get_index_4, getitem_1)
        return store_reduction


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 3538944}, None)]
op493.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 3538944}, None),
        MemoryDep('buf489', c0, {c0: 3538944}, None),
        MemoryDep('buf490', c0, {c0: 4608}, None),
        MemoryDep('buf491', c0, {c0: 4608}, None)]
op493.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg327_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg329_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg330_1', c1, {c0: 4608, c1: 768}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf493.users = [NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (3538944, 1)
op493.sizes = ([4608, 768], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op493_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg327_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf490', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf491', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg329_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg330_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf493', get_index_8, add_3, None)
        return store


op494: ExternKernelSchedulerNode(ExternKernelOut)
op494.writes = [StarDep(name='buf494', mode=None)]
op494.unmet_dependencies = [StarDep(name='buf493', mode=None)]
op494.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op494.outputs = [
    buf494: ExternKernelOut
    buf494.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
    ]
]
op494.node.kernel = extern_kernels.mm


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 3538944}, None)]
op495.unmet_dependencies = [   MemoryDep('buf494', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op495.met_dependencies = [MemoryDep('arg332_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf495.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (3538944, 1)
op495.sizes = ([8, 16, 576, 48], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op495_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf495', get_index_2, mul, None)
        return store


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 3538944}, None)]
op496.unmet_dependencies = [   MemoryDep('buf494', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op496.met_dependencies = [MemoryDep('arg332_1', c1 + 768, {c0: 8, c1: 768}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (3538944, 1)
op496.sizes = ([8, 768, 576], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op496_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf496', get_index_2, add, None)
        return store


op497: ExternKernelSchedulerNode(ExternKernelOut)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf496', mode=None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ExternKernelOut
    buf497.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf497.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op497.node.kernel = extern_kernels.bmm


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 42467328}, None)]
op498.unmet_dependencies = [   MemoryDep('buf497', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op498.met_dependencies = []
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf498.users = [NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (42467328, 1)
op498.sizes = ([8, 331776, 16], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op498_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf498', get_index_1, load, None)
        return store


op499: ExternKernelSchedulerNode(ExternKernelOut)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg333_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelOut
    buf499.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf499.users = [
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False),
    ]
]
op499.node.kernel = extern_kernels.mm


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 73728}, None)]
op500.unmet_dependencies = [MemoryDep('buf499', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op500.met_dependencies = [MemoryDep('arg334_1', c1, {c0: 4608, c1: 16}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf500.users = [
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
    ]
]
op500.group.device = cuda:0
op500.group.iteration = (73728, 576)
op500.sizes = ([4608, 16], [576])
buf499_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op500_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg334_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf500', get_index_2, reduction)
        return store_reduction


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 73728}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf499', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf500', c0, {c0: 73728}, None)]
op501.met_dependencies = [MemoryDep('arg334_1', c1, {c0: 4608, c1: 16}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf501.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (73728, 576)
op501.sizes = ([4608, 16], [576])
buf499_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op501_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg334_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf500', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf501', get_index_3, reduction)
        return store_reduction


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 42467328}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 42467328}, None),
        MemoryDep('buf500', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf501', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op502.met_dependencies = [MemoryDep('arg334_1', c1, {c0: 2654208, c1: 16}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (42467328, 1)
op502.sizes = ([4608, 576, 16], [])
buf499_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op502_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg334_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf500', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf501', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf502', get_index_4, truediv, None)
        return store


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf502', mode=None)]
op503.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf503.users = [NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = extern_kernels.mm


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 42467328}, None)]
op504.unmet_dependencies = [   MemoryDep('buf503', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op504.met_dependencies = [MemoryDep('arg336_1', c1, {c0: 8, c1: 16}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf504.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (42467328, 1)
op504.sizes = ([8, 16, 331776], [])
buf503_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op504_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf504', get_index_2, add, None)
        return store


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 3538944}, None)]
op505.unmet_dependencies = [   MemoryDep('buf494', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op505.met_dependencies = [   MemoryDep('arg332_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (3538944, 1)
op505.sizes = ([8, 16, 576, 48], [])
buf494_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op505_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf505', get_index_2, add, None)
        return store


op506: ExternKernelSchedulerNode(ExternKernelOut)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf504', mode=None), StarDep(name='buf505', mode=None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ExternKernelOut
    buf506.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf506.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op506.node.kernel = extern_kernels.bmm


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 3538944}, None)]
op507.unmet_dependencies = [   MemoryDep('buf506', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (3538944, 1)
op507.sizes = ([8, 576, 16, 48], [])
buf506_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op507_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf507', get_index_1, load, None)
        return store


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf507', mode=None)]
op508.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf508.users = [NodeUser(node=SchedulerNode(name='op509'), can_inplace=True, is_weak=False)]
]
op508.node.kernel = extern_kernels.mm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 3538944}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 3538944}, None),
        MemoryDep('buf489', c0, {c0: 3538944}, None),
        MemoryDep('buf508', c0, {c0: 3538944}, None)]
op509.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg327_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg328_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg338_1', c1, {c0: 4608, c1: 768}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf509.users = [
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
]
op509.group.device = cuda:0
op509.group.iteration = (3538944, 1)
op509.sizes = ([4608, 768], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op509_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg327_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg328_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf508', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg338_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf509', get_index_7, add_3, None)
        return store


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 4608}, None)]
op510.unmet_dependencies = [MemoryDep('buf509', c0, {c0: 3538944}, None)]
op510.met_dependencies = []
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf510.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (4608, 768)
op510.sizes = ([4608], [768])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op510_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf510', get_index_1, getitem)
        return store_reduction


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 4608}, None)]
op511.unmet_dependencies = [MemoryDep('buf509', c0, {c0: 3538944}, None)]
op511.met_dependencies = []
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf511.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (4608, 768)
op511.sizes = ([4608], [768])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op511_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf511', get_index_1, getitem_1)
        return store_reduction


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 3538944}, None)]
op513.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 3538944}, None),
        MemoryDep('buf510', c0, {c0: 4608}, None),
        MemoryDep('buf511', c0, {c0: 4608}, None)]
op513.met_dependencies = 
    [   MemoryDep('arg340_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg341_1', c1, {c0: 4608, c1: 768}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (3538944, 1)
op513.sizes = ([4608, 768], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op513_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf510', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf511', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg340_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg341_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf513', get_index_5, add_1, None)
        return store


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op514.met_dependencies = [StarDep(name='arg342_1', mode=None)]
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf514.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=True, is_weak=False)]
]
op514.node.kernel = extern_kernels.mm


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 14155776}, None)]
op515.unmet_dependencies = [MemoryDep('buf514', c0, {c0: 14155776}, None)]
op515.met_dependencies = [MemoryDep('arg343_1', c1, {c0: 4608, c1: 3072}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (14155776, 1)
op515.sizes = ([4608, 3072], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op515_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg343_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf514', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg343_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf515', get_index_4, mul_2, None)
        return store


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='arg344_1', mode=None)]
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
]
op516.node.kernel = extern_kernels.mm


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 4608}, None)]
op517.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 3538944}, None),
        MemoryDep('buf516', c0, {c0: 3538944}, None)]
op517.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg345_1', c1, {c0: 4608, c1: 768}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf517.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (4608, 768)
op517.sizes = ([4608], [768])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op517_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf516', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf517', get_index_4, getitem)
        return store_reduction


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 4608}, None)]
op518.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 3538944}, None),
        MemoryDep('buf516', c0, {c0: 3538944}, None)]
op518.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg345_1', c1, {c0: 4608, c1: 768}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf518.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (4608, 768)
op518.sizes = ([4608], [768])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op518_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf516', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf518', get_index_4, getitem_1)
        return store_reduction


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 3538944}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 3538944}, None),
        MemoryDep('buf516', c0, {c0: 3538944}, None),
        MemoryDep('buf517', c0, {c0: 4608}, None),
        MemoryDep('buf518', c0, {c0: 4608}, None)]
op520.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg345_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg347_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg348_1', c1, {c0: 4608, c1: 768}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf520.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (3538944, 1)
op520.sizes = ([4608, 768], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op520_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf516', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf517', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf518', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg347_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg348_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf520', get_index_8, add_3, None)
        return store


op521: ExternKernelSchedulerNode(ExternKernelOut)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op521.met_dependencies = [StarDep(name='arg349_1', mode=None)]
op521.outputs = [
    buf521: ExternKernelOut
    buf521.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf521.users = [
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op521.node.kernel = extern_kernels.mm


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 3538944}, None)]
op522.unmet_dependencies = [   MemoryDep('buf521', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op522.met_dependencies = [MemoryDep('arg350_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (3538944, 1)
op522.sizes = ([8, 16, 576, 48], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op522_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg350_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf522', get_index_2, mul, None)
        return store


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 3538944}, None)]
op523.unmet_dependencies = [   MemoryDep('buf521', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op523.met_dependencies = [MemoryDep('arg350_1', c1 + 768, {c0: 8, c1: 768}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf523.users = [NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op523.group.device = cuda:0
op523.group.iteration = (3538944, 1)
op523.sizes = ([8, 768, 576], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op523_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg350_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf523', get_index_2, add, None)
        return store


op524: ExternKernelSchedulerNode(ExternKernelOut)
op524.writes = [StarDep(name='buf524', mode=None)]
op524.unmet_dependencies = [StarDep(name='buf522', mode=None), StarDep(name='buf523', mode=None)]
op524.met_dependencies = []
op524.outputs = [
    buf524: ExternKernelOut
    buf524.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf524.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op524.node.kernel = extern_kernels.bmm


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 42467328}, None)]
op525.unmet_dependencies = [   MemoryDep('buf524', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op525.met_dependencies = []
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf525.users = [NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (42467328, 1)
op525.sizes = ([8, 331776, 16], [])
buf524_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op525_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf524', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf525', get_index_1, load, None)
        return store


op526: ExternKernelSchedulerNode(ExternKernelOut)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op526.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op526.outputs = [
    buf526: ExternKernelOut
    buf526.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=True, is_weak=False),
    ]
]
op526.node.kernel = extern_kernels.mm


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 73728}, None)]
op527.unmet_dependencies = [MemoryDep('buf526', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op527.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 4608, c1: 16}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
    ]
]
op527.group.device = cuda:0
op527.group.iteration = (73728, 576)
op527.sizes = ([4608, 16], [576])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op527_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf527', get_index_2, reduction)
        return store_reduction


op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 73728}, None)]
op528.unmet_dependencies = 
    [   MemoryDep('buf526', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf527', c0, {c0: 73728}, None)]
op528.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 4608, c1: 16}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf528.users = [NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (73728, 576)
op528.sizes = ([4608, 16], [576])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op528_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf527', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf528', get_index_3, reduction)
        return store_reduction


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 42467328}, None)]
op529.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 42467328}, None),
        MemoryDep('buf527', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf528', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op529.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 2654208, c1: 16}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (42467328, 1)
op529.sizes = ([4608, 576, 16], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op529_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf527', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf528', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf529', get_index_4, truediv, None)
        return store


op530: ExternKernelSchedulerNode(ExternKernelOut)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op530.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelOut
    buf530.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.node.kernel = extern_kernels.mm


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 42467328}, None)]
op531.unmet_dependencies = [   MemoryDep('buf530', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op531.met_dependencies = [MemoryDep('arg354_1', c1, {c0: 8, c1: 16}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf531.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op531.group.device = cuda:0
op531.group.iteration = (42467328, 1)
op531.sizes = ([8, 16, 331776], [])
buf530_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op531_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg354_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf531', get_index_2, add, None)
        return store


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 3538944}, None)]
op532.unmet_dependencies = [   MemoryDep('buf521', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op532.met_dependencies = [   MemoryDep('arg350_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (3538944, 1)
op532.sizes = ([8, 16, 576, 48], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op532_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg350_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf532', get_index_2, add, None)
        return store


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf531', mode=None), StarDep(name='buf532', mode=None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf533.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False)]
]
op533.node.kernel = extern_kernels.bmm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 3538944}, None)]
op534.unmet_dependencies = [   MemoryDep('buf533', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (3538944, 1)
op534.sizes = ([8, 576, 16, 48], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op534_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf534', get_index_1, load, None)
        return store


op535: ExternKernelSchedulerNode(ExternKernelOut)
op535.writes = [StarDep(name='buf535', mode=None)]
op535.unmet_dependencies = [StarDep(name='buf534', mode=None)]
op535.met_dependencies = [StarDep(name='arg355_1', mode=None)]
op535.outputs = [
    buf535: ExternKernelOut
    buf535.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf535.users = [NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False)]
]
op535.node.kernel = extern_kernels.mm


op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 3538944}, None)]
op536.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 3538944}, None),
        MemoryDep('buf516', c0, {c0: 3538944}, None),
        MemoryDep('buf535', c0, {c0: 3538944}, None)]
op536.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg345_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg346_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg356_1', c1, {c0: 4608, c1: 768}, None)]
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
    ]
]
op536.group.device = cuda:0
op536.group.iteration = (3538944, 1)
op536.sizes = ([4608, 768], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op536_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf516', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg346_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf535', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg356_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf536', get_index_7, add_3, None)
        return store


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 4608}, None)]
op537.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 3538944}, None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf537.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (4608, 768)
op537.sizes = ([4608], [768])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op537_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf537', get_index_1, getitem)
        return store_reduction


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 4608}, None)]
op538.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 3538944}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (4608, 768)
op538.sizes = ([4608], [768])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op538_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf538', get_index_1, getitem_1)
        return store_reduction


op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 3538944}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 3538944}, None),
        MemoryDep('buf537', c0, {c0: 4608}, None),
        MemoryDep('buf538', c0, {c0: 4608}, None)]
op540.met_dependencies = 
    [   MemoryDep('arg358_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg359_1', c1, {c0: 4608, c1: 768}, None)]
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (3538944, 1)
op540.sizes = ([4608, 768], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op540_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf538', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg358_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg359_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf540', get_index_5, add_1, None)
        return store


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf540', mode=None)]
op541.met_dependencies = [StarDep(name='arg360_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.mm


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 14155776}, None)]
op542.unmet_dependencies = [MemoryDep('buf541', c0, {c0: 14155776}, None)]
op542.met_dependencies = [MemoryDep('arg361_1', c1, {c0: 4608, c1: 3072}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf542.users = [NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (14155776, 1)
op542.sizes = ([4608, 3072], [])
buf541_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op542_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf541', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf541', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg361_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf542', get_index_4, mul_2, None)
        return store


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = [StarDep(name='buf542', mode=None)]
op543.met_dependencies = [StarDep(name='arg362_1', mode=None)]
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf543.users = [
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
    ]
]
op543.node.kernel = extern_kernels.mm


op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 4608}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 3538944}, None),
        MemoryDep('buf543', c0, {c0: 3538944}, None)]
op544.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg363_1', c1, {c0: 4608, c1: 768}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf544.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (4608, 768)
op544.sizes = ([4608], [768])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op544_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf543', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg363_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf544', get_index_4, getitem)
        return store_reduction


op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 4608}, None)]
op545.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 3538944}, None),
        MemoryDep('buf543', c0, {c0: 3538944}, None)]
op545.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg363_1', c1, {c0: 4608, c1: 768}, None)]
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf545.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (4608, 768)
op545.sizes = ([4608], [768])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op545_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf543', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg363_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf545', get_index_4, getitem_1)
        return store_reduction


op547: SchedulerNode(ComputedBuffer)
op547.writes = [MemoryDep('buf547', c0, {c0: 3538944}, None)]
op547.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 3538944}, None),
        MemoryDep('buf543', c0, {c0: 3538944}, None),
        MemoryDep('buf544', c0, {c0: 4608}, None),
        MemoryDep('buf545', c0, {c0: 4608}, None)]
op547.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg363_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg365_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg366_1', c1, {c0: 4608, c1: 768}, None)]
op547.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf547.users = [NodeUser(node=ExternKernelSchedulerNode(name='op548'), can_inplace=False, is_weak=False)]
]
op547.group.device = cuda:0
op547.group.iteration = (3538944, 1)
op547.sizes = ([4608, 768], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op547_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf543', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg363_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf544', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf545', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg365_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg366_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf547', get_index_8, add_3, None)
        return store


op548: ExternKernelSchedulerNode(ExternKernelOut)
op548.writes = [StarDep(name='buf548', mode=None)]
op548.unmet_dependencies = [StarDep(name='buf547', mode=None)]
op548.met_dependencies = [StarDep(name='arg367_1', mode=None)]
op548.outputs = [
    buf548: ExternKernelOut
    buf548.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf548.users = [
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
    ]
]
op548.node.kernel = extern_kernels.mm


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 3538944}, None)]
op549.unmet_dependencies = [   MemoryDep('buf548', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op549.met_dependencies = [MemoryDep('arg368_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf549.users = [NodeUser(node=ExternKernelSchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (3538944, 1)
op549.sizes = ([8, 16, 576, 48], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op549_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf549', get_index_2, mul, None)
        return store


op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 3538944}, None)]
op550.unmet_dependencies = [   MemoryDep('buf548', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op550.met_dependencies = [MemoryDep('arg368_1', c1 + 768, {c0: 8, c1: 768}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf550.users = [NodeUser(node=ExternKernelSchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op550.group.device = cuda:0
op550.group.iteration = (3538944, 1)
op550.sizes = ([8, 768, 576], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op550_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf550', get_index_2, add, None)
        return store


op551: ExternKernelSchedulerNode(ExternKernelOut)
op551.writes = [StarDep(name='buf551', mode=None)]
op551.unmet_dependencies = [StarDep(name='buf549', mode=None), StarDep(name='buf550', mode=None)]
op551.met_dependencies = []
op551.outputs = [
    buf551: ExternKernelOut
    buf551.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf551.users = [NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False)]
]
op551.node.kernel = extern_kernels.bmm


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 42467328}, None)]
op552.unmet_dependencies = [   MemoryDep('buf551', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf552.users = [NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (42467328, 1)
op552.sizes = ([8, 331776, 16], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op552_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf552', get_index_1, load, None)
        return store


op553: ExternKernelSchedulerNode(ExternKernelOut)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op553.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op553.outputs = [
    buf553: ExternKernelOut
    buf553.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf553.users = [
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False),
    ]
]
op553.node.kernel = extern_kernels.mm


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 73728}, None)]
op554.unmet_dependencies = [MemoryDep('buf553', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op554.met_dependencies = [MemoryDep('arg370_1', c1, {c0: 4608, c1: 16}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf554.users = [
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False),
    ]
]
op554.group.device = cuda:0
op554.group.iteration = (73728, 576)
op554.sizes = ([4608, 16], [576])
buf553_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op554_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf554', get_index_2, reduction)
        return store_reduction


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 73728}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf553', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf554', c0, {c0: 73728}, None)]
op555.met_dependencies = [MemoryDep('arg370_1', c1, {c0: 4608, c1: 16}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (73728, 576)
op555.sizes = ([4608, 16], [576])
buf553_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op555_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf554', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf555', get_index_3, reduction)
        return store_reduction


op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 42467328}, None)]
op556.unmet_dependencies = 
    [   MemoryDep('buf553', c0, {c0: 42467328}, None),
        MemoryDep('buf554', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf555', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op556.met_dependencies = [MemoryDep('arg370_1', c1, {c0: 2654208, c1: 16}, None)]
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf556.users = [NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False)]
]
op556.group.device = cuda:0
op556.group.iteration = (42467328, 1)
op556.sizes = ([4608, 576, 16], [])
buf553_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op556_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg370_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf554', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf555', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf556', get_index_4, truediv, None)
        return store


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf556', mode=None)]
op557.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf557.users = [NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = extern_kernels.mm


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', c0, {c0: 42467328}, None)]
op558.unmet_dependencies = [   MemoryDep('buf557', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op558.met_dependencies = [MemoryDep('arg372_1', c1, {c0: 8, c1: 16}, None)]
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (42467328, 1)
op558.sizes = ([8, 16, 331776], [])
buf557_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op558_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf558', get_index_2, add, None)
        return store


op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 3538944}, None)]
op559.unmet_dependencies = [   MemoryDep('buf548', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op559.met_dependencies = [   MemoryDep('arg368_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (3538944, 1)
op559.sizes = ([8, 16, 576, 48], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op559_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf559', get_index_2, add, None)
        return store


op560: ExternKernelSchedulerNode(ExternKernelOut)
op560.writes = [StarDep(name='buf560', mode=None)]
op560.unmet_dependencies = [StarDep(name='buf558', mode=None), StarDep(name='buf559', mode=None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ExternKernelOut
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf560.users = [NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op560.node.kernel = extern_kernels.bmm


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 3538944}, None)]
op561.unmet_dependencies = [   MemoryDep('buf560', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op561.met_dependencies = []
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op561.group.device = cuda:0
op561.group.iteration = (3538944, 1)
op561.sizes = ([8, 576, 16, 48], [])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op561_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf561', get_index_1, load, None)
        return store


op562: ExternKernelSchedulerNode(ExternKernelOut)
op562.writes = [StarDep(name='buf562', mode=None)]
op562.unmet_dependencies = [StarDep(name='buf561', mode=None)]
op562.met_dependencies = [StarDep(name='arg373_1', mode=None)]
op562.outputs = [
    buf562: ExternKernelOut
    buf562.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf562.users = [NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False)]
]
op562.node.kernel = extern_kernels.mm


op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 3538944}, None)]
op563.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 3538944}, None),
        MemoryDep('buf543', c0, {c0: 3538944}, None),
        MemoryDep('buf562', c0, {c0: 3538944}, None)]
op563.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg363_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg364_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg374_1', c1, {c0: 4608, c1: 768}, None)]
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf563.users = [
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
    ]
]
op563.group.device = cuda:0
op563.group.iteration = (3538944, 1)
op563.sizes = ([4608, 768], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op563_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf543', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg363_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg364_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf562', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg374_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf563', get_index_7, add_3, None)
        return store


op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 4608}, None)]
op564.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 3538944}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf564.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (4608, 768)
op564.sizes = ([4608], [768])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op564_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf564', get_index_1, getitem)
        return store_reduction


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 4608}, None)]
op565.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 3538944}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf565.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (4608, 768)
op565.sizes = ([4608], [768])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op565_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf565', get_index_1, getitem_1)
        return store_reduction


op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', c0, {c0: 3538944}, None)]
op567.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 3538944}, None),
        MemoryDep('buf564', c0, {c0: 4608}, None),
        MemoryDep('buf565', c0, {c0: 4608}, None)]
op567.met_dependencies = 
    [   MemoryDep('arg376_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg377_1', c1, {c0: 4608, c1: 768}, None)]
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf567.users = [NodeUser(node=ExternKernelSchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op567.group.device = cuda:0
op567.group.iteration = (3538944, 1)
op567.sizes = ([4608, 768], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op567_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf564', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf565', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg376_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg377_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf567', get_index_5, add_1, None)
        return store


op568: ExternKernelSchedulerNode(ExternKernelOut)
op568.writes = [StarDep(name='buf568', mode=None)]
op568.unmet_dependencies = [StarDep(name='buf567', mode=None)]
op568.met_dependencies = [StarDep(name='arg378_1', mode=None)]
op568.outputs = [
    buf568: ExternKernelOut
    buf568.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf568.users = [NodeUser(node=SchedulerNode(name='op569'), can_inplace=True, is_weak=False)]
]
op568.node.kernel = extern_kernels.mm


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 14155776}, None)]
op569.unmet_dependencies = [MemoryDep('buf568', c0, {c0: 14155776}, None)]
op569.met_dependencies = [MemoryDep('arg379_1', c1, {c0: 4608, c1: 3072}, None)]
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf569.users = [NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (14155776, 1)
op569.sizes = ([4608, 3072], [])
buf568_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op569_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf568', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg379_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf568', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg379_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf569', get_index_4, mul_2, None)
        return store


op570: ExternKernelSchedulerNode(ExternKernelOut)
op570.writes = [StarDep(name='buf570', mode=None)]
op570.unmet_dependencies = [StarDep(name='buf569', mode=None)]
op570.met_dependencies = [StarDep(name='arg380_1', mode=None)]
op570.outputs = [
    buf570: ExternKernelOut
    buf570.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf570.users = [
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
    ]
]
op570.node.kernel = extern_kernels.mm


op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 4608}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 3538944}, None),
        MemoryDep('buf570', c0, {c0: 3538944}, None)]
op571.met_dependencies = 
    [   MemoryDep('arg375_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg381_1', c1, {c0: 4608, c1: 768}, None)]
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf571.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (4608, 768)
op571.sizes = ([4608], [768])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op571_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg375_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg381_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf571', get_index_4, getitem)
        return store_reduction


op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 4608}, None)]
op572.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 3538944}, None),
        MemoryDep('buf570', c0, {c0: 3538944}, None)]
op572.met_dependencies = 
    [   MemoryDep('arg375_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg381_1', c1, {c0: 4608, c1: 768}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf572.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (4608, 768)
op572.sizes = ([4608], [768])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op572_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg375_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg381_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf572', get_index_4, getitem_1)
        return store_reduction


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 3538944}, None)]
op574.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 3538944}, None),
        MemoryDep('buf570', c0, {c0: 3538944}, None),
        MemoryDep('buf571', c0, {c0: 4608}, None),
        MemoryDep('buf572', c0, {c0: 4608}, None)]
op574.met_dependencies = 
    [   MemoryDep('arg375_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg381_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg383_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg384_1', c1, {c0: 4608, c1: 768}, None)]
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (3538944, 1)
op574.sizes = ([4608, 768], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op574_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg375_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg381_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf571', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf572', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg383_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg384_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf574', get_index_8, add_3, None)
        return store


op575: ExternKernelSchedulerNode(ExternKernelOut)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf574', mode=None)]
op575.met_dependencies = [StarDep(name='arg385_1', mode=None)]
op575.outputs = [
    buf575: ExternKernelOut
    buf575.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf575.users = [
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op575.node.kernel = extern_kernels.mm


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 3538944}, None)]
op576.unmet_dependencies = [   MemoryDep('buf575', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op576.met_dependencies = [MemoryDep('arg386_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf576.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (3538944, 1)
op576.sizes = ([8, 16, 576, 48], [])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op576_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg386_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf576', get_index_2, mul, None)
        return store


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 3538944}, None)]
op577.unmet_dependencies = [   MemoryDep('buf575', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op577.met_dependencies = [MemoryDep('arg386_1', c1 + 768, {c0: 8, c1: 768}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf577.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (3538944, 1)
op577.sizes = ([8, 768, 576], [])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op577_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg386_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf577', get_index_2, add, None)
        return store


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf576', mode=None), StarDep(name='buf577', mode=None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf578.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op578.node.kernel = extern_kernels.bmm


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 42467328}, None)]
op579.unmet_dependencies = [   MemoryDep('buf578', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op579.met_dependencies = []
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (42467328, 1)
op579.sizes = ([8, 331776, 16], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op579_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf579', get_index_1, load, None)
        return store


op580: ExternKernelSchedulerNode(ExternKernelOut)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op580.met_dependencies = [StarDep(name='arg387_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelOut
    buf580.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf580.users = [
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False),
    ]
]
op580.node.kernel = extern_kernels.mm


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 73728}, None)]
op581.unmet_dependencies = [MemoryDep('buf580', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op581.met_dependencies = [MemoryDep('arg388_1', c1, {c0: 4608, c1: 16}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (73728, 576)
op581.sizes = ([4608, 16], [576])
buf580_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op581_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf581', get_index_2, reduction)
        return store_reduction


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 73728}, None)]
op582.unmet_dependencies = 
    [   MemoryDep('buf580', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf581', c0, {c0: 73728}, None)]
op582.met_dependencies = [MemoryDep('arg388_1', c1, {c0: 4608, c1: 16}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf582.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (73728, 576)
op582.sizes = ([4608, 16], [576])
buf580_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op582_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf581', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf582', get_index_3, reduction)
        return store_reduction


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 42467328}, None)]
op583.unmet_dependencies = 
    [   MemoryDep('buf580', c0, {c0: 42467328}, None),
        MemoryDep('buf581', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf582', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op583.met_dependencies = [MemoryDep('arg388_1', c1, {c0: 2654208, c1: 16}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (42467328, 1)
op583.sizes = ([4608, 576, 16], [])
buf580_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op583_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg388_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf581', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf582', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf583', get_index_4, truediv, None)
        return store


op584: ExternKernelSchedulerNode(ExternKernelOut)
op584.writes = [StarDep(name='buf584', mode=None)]
op584.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op584.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op584.outputs = [
    buf584: ExternKernelOut
    buf584.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf584.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op584.node.kernel = extern_kernels.mm


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 42467328}, None)]
op585.unmet_dependencies = [   MemoryDep('buf584', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op585.met_dependencies = [MemoryDep('arg390_1', c1, {c0: 8, c1: 16}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf585.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (42467328, 1)
op585.sizes = ([8, 16, 331776], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op585_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg390_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf585', get_index_2, add, None)
        return store


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 3538944}, None)]
op586.unmet_dependencies = [   MemoryDep('buf575', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op586.met_dependencies = [   MemoryDep('arg386_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf586.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (3538944, 1)
op586.sizes = ([8, 16, 576, 48], [])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op586_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg386_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf586', get_index_2, add, None)
        return store


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf585', mode=None), StarDep(name='buf586', mode=None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op587.node.kernel = extern_kernels.bmm


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 3538944}, None)]
op588.unmet_dependencies = [   MemoryDep('buf587', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (3538944, 1)
op588.sizes = ([8, 576, 16, 48], [])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op588_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf588', get_index_1, load, None)
        return store


op589: ExternKernelSchedulerNode(ExternKernelOut)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf588', mode=None)]
op589.met_dependencies = [StarDep(name='arg391_1', mode=None)]
op589.outputs = [
    buf589: ExternKernelOut
    buf589.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False)]
]
op589.node.kernel = extern_kernels.mm


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 3538944}, None)]
op590.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 3538944}, None),
        MemoryDep('buf570', c0, {c0: 3538944}, None),
        MemoryDep('buf589', c0, {c0: 3538944}, None)]
op590.met_dependencies = 
    [   MemoryDep('arg375_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg381_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg382_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg392_1', c1, {c0: 4608, c1: 768}, None)]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf590.users = [
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=True, is_weak=False),
    ]
]
op590.group.device = cuda:0
op590.group.iteration = (3538944, 1)
op590.sizes = ([4608, 768], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op590_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg375_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg381_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg382_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf589', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg392_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf590', get_index_7, add_3, None)
        return store


op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', c0, {c0: 4608}, None)]
op591.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 3538944}, None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf591.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (4608, 768)
op591.sizes = ([4608], [768])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op591_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf591', get_index_1, getitem)
        return store_reduction


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 4608}, None)]
op592.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 3538944}, None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf592.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (4608, 768)
op592.sizes = ([4608], [768])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op592_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf592', get_index_1, getitem_1)
        return store_reduction


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 3538944}, None)]
op594.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 3538944}, None),
        MemoryDep('buf591', c0, {c0: 4608}, None),
        MemoryDep('buf592', c0, {c0: 4608}, None)]
op594.met_dependencies = 
    [   MemoryDep('arg394_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg395_1', c1, {c0: 4608, c1: 768}, None)]
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (3538944, 1)
op594.sizes = ([4608, 768], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op594_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf591', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf592', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg394_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg395_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf594', get_index_5, add_1, None)
        return store


op595: ExternKernelSchedulerNode(ExternKernelOut)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf594', mode=None)]
op595.met_dependencies = [StarDep(name='arg396_1', mode=None)]
op595.outputs = [
    buf595: ExternKernelOut
    buf595.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf595.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=True, is_weak=False)]
]
op595.node.kernel = extern_kernels.mm


op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 14155776}, None)]
op596.unmet_dependencies = [MemoryDep('buf595', c0, {c0: 14155776}, None)]
op596.met_dependencies = [MemoryDep('arg397_1', c1, {c0: 4608, c1: 3072}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (14155776, 1)
op596.sizes = ([4608, 3072], [])
buf595_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op596_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf595', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg397_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf595', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg397_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf596', get_index_4, mul_2, None)
        return store


op597: ExternKernelSchedulerNode(ExternKernelOut)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf596', mode=None)]
op597.met_dependencies = [StarDep(name='arg398_1', mode=None)]
op597.outputs = [
    buf597: ExternKernelOut
    buf597.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf597.users = [
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=True, is_weak=False),
    ]
]
op597.node.kernel = extern_kernels.mm


op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 4608}, None)]
op598.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 3538944}, None),
        MemoryDep('buf597', c0, {c0: 3538944}, None)]
op598.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg399_1', c1, {c0: 4608, c1: 768}, None)]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf598.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op598.group.device = cuda:0
op598.group.iteration = (4608, 768)
op598.sizes = ([4608], [768])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op598_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf598', get_index_4, getitem)
        return store_reduction


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 4608}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 3538944}, None),
        MemoryDep('buf597', c0, {c0: 3538944}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg399_1', c1, {c0: 4608, c1: 768}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf599.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (4608, 768)
op599.sizes = ([4608], [768])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op599_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf599', get_index_4, getitem_1)
        return store_reduction


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 3538944}, None)]
op601.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 3538944}, None),
        MemoryDep('buf597', c0, {c0: 3538944}, None),
        MemoryDep('buf598', c0, {c0: 4608}, None),
        MemoryDep('buf599', c0, {c0: 4608}, None)]
op601.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg399_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg401_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg402_1', c1, {c0: 4608, c1: 768}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (3538944, 1)
op601.sizes = ([4608, 768], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op601_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf598', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf599', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg401_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg402_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf601', get_index_8, add_3, None)
        return store


op602: ExternKernelSchedulerNode(ExternKernelOut)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf601', mode=None)]
op602.met_dependencies = [StarDep(name='arg403_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelOut
    buf602.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf602.users = [
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False),
    ]
]
op602.node.kernel = extern_kernels.mm


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 3538944}, None)]
op603.unmet_dependencies = [   MemoryDep('buf602', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op603.met_dependencies = [MemoryDep('arg404_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf603.users = [NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (3538944, 1)
op603.sizes = ([8, 16, 576, 48], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op603_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf603', get_index_2, mul, None)
        return store


op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 3538944}, None)]
op604.unmet_dependencies = [   MemoryDep('buf602', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op604.met_dependencies = [MemoryDep('arg404_1', c1 + 768, {c0: 8, c1: 768}, None)]
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf604.users = [NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op604.group.device = cuda:0
op604.group.iteration = (3538944, 1)
op604.sizes = ([8, 768, 576], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op604_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf604', get_index_2, add, None)
        return store


op605: ExternKernelSchedulerNode(ExternKernelOut)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf603', mode=None), StarDep(name='buf604', mode=None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ExternKernelOut
    buf605.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf605.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op605.node.kernel = extern_kernels.bmm


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 42467328}, None)]
op606.unmet_dependencies = [   MemoryDep('buf605', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (42467328, 1)
op606.sizes = ([8, 331776, 16], [])
buf605_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op606_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf606', get_index_1, load, None)
        return store


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op607.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
    ]
]
op607.node.kernel = extern_kernels.mm


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 73728}, None)]
op608.unmet_dependencies = [MemoryDep('buf607', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op608.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 4608, c1: 16}, None)]
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf608.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
    ]
]
op608.group.device = cuda:0
op608.group.iteration = (73728, 576)
op608.sizes = ([4608, 16], [576])
buf607_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op608_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg406_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf608', get_index_2, reduction)
        return store_reduction


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 73728}, None)]
op609.unmet_dependencies = 
    [   MemoryDep('buf607', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf608', c0, {c0: 73728}, None)]
op609.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 4608, c1: 16}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf609.users = [NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (73728, 576)
op609.sizes = ([4608, 16], [576])
buf607_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op609_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg406_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf608', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf609', get_index_3, reduction)
        return store_reduction


op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 42467328}, None)]
op610.unmet_dependencies = 
    [   MemoryDep('buf607', c0, {c0: 42467328}, None),
        MemoryDep('buf608', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf609', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op610.met_dependencies = [MemoryDep('arg406_1', c1, {c0: 2654208, c1: 16}, None)]
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf610.users = [NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (42467328, 1)
op610.sizes = ([4608, 576, 16], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf610_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op610_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg406_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf608', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf609', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf610', get_index_4, truediv, None)
        return store


op611: ExternKernelSchedulerNode(ExternKernelOut)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf610', mode=None)]
op611.met_dependencies = [StarDep(name='arg407_1', mode=None)]
op611.outputs = [
    buf611: ExternKernelOut
    buf611.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf611.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op611.node.kernel = extern_kernels.mm


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 42467328}, None)]
op612.unmet_dependencies = [   MemoryDep('buf611', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op612.met_dependencies = [MemoryDep('arg408_1', c1, {c0: 8, c1: 16}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf612.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (42467328, 1)
op612.sizes = ([8, 16, 331776], [])
buf611_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op612_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg408_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf612', get_index_2, add, None)
        return store


op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 3538944}, None)]
op613.unmet_dependencies = [   MemoryDep('buf602', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op613.met_dependencies = [   MemoryDep('arg404_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (3538944, 1)
op613.sizes = ([8, 16, 576, 48], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op613_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf613', get_index_2, add, None)
        return store


op614: ExternKernelSchedulerNode(ExternKernelOut)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = [StarDep(name='buf612', mode=None), StarDep(name='buf613', mode=None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: ExternKernelOut
    buf614.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf614.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op614.node.kernel = extern_kernels.bmm


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 3538944}, None)]
op615.unmet_dependencies = [   MemoryDep('buf614', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (3538944, 1)
op615.sizes = ([8, 576, 16, 48], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op615_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf615', get_index_1, load, None)
        return store


op616: ExternKernelSchedulerNode(ExternKernelOut)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf615', mode=None)]
op616.met_dependencies = [StarDep(name='arg409_1', mode=None)]
op616.outputs = [
    buf616: ExternKernelOut
    buf616.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf616.users = [NodeUser(node=SchedulerNode(name='op617'), can_inplace=True, is_weak=False)]
]
op616.node.kernel = extern_kernels.mm


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 3538944}, None)]
op617.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 3538944}, None),
        MemoryDep('buf597', c0, {c0: 3538944}, None),
        MemoryDep('buf616', c0, {c0: 3538944}, None)]
op617.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg399_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg400_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg410_1', c1, {c0: 4608, c1: 768}, None)]
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf617.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=True, is_weak=False),
    ]
]
op617.group.device = cuda:0
op617.group.iteration = (3538944, 1)
op617.sizes = ([4608, 768], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op617_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf616', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg410_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf617', get_index_7, add_3, None)
        return store


op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 4608}, None)]
op618.unmet_dependencies = [MemoryDep('buf617', c0, {c0: 3538944}, None)]
op618.met_dependencies = []
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf618.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (4608, 768)
op618.sizes = ([4608], [768])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op618_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf618', get_index_1, getitem)
        return store_reduction


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 4608}, None)]
op619.unmet_dependencies = [MemoryDep('buf617', c0, {c0: 3538944}, None)]
op619.met_dependencies = []
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf619.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (4608, 768)
op619.sizes = ([4608], [768])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op619_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf619', get_index_1, getitem_1)
        return store_reduction


op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 3538944}, None)]
op621.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 3538944}, None),
        MemoryDep('buf618', c0, {c0: 4608}, None),
        MemoryDep('buf619', c0, {c0: 4608}, None)]
op621.met_dependencies = 
    [   MemoryDep('arg412_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg413_1', c1, {c0: 4608, c1: 768}, None)]
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf621.users = [NodeUser(node=ExternKernelSchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (3538944, 1)
op621.sizes = ([4608, 768], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf619_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op621_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf618', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf619', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg412_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg413_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf621', get_index_5, add_1, None)
        return store


op622: ExternKernelSchedulerNode(ExternKernelOut)
op622.writes = [StarDep(name='buf622', mode=None)]
op622.unmet_dependencies = [StarDep(name='buf621', mode=None)]
op622.met_dependencies = [StarDep(name='arg414_1', mode=None)]
op622.outputs = [
    buf622: ExternKernelOut
    buf622.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf622.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False)]
]
op622.node.kernel = extern_kernels.mm


op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 14155776}, None)]
op623.unmet_dependencies = [MemoryDep('buf622', c0, {c0: 14155776}, None)]
op623.met_dependencies = [MemoryDep('arg415_1', c1, {c0: 4608, c1: 3072}, None)]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op623.group.device = cuda:0
op623.group.iteration = (14155776, 1)
op623.sizes = ([4608, 3072], [])
buf622_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op623_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf622', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg415_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg415_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf623', get_index_4, mul_2, None)
        return store


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf623', mode=None)]
op624.met_dependencies = [StarDep(name='arg416_1', mode=None)]
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf624.users = [
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=True, is_weak=False),
    ]
]
op624.node.kernel = extern_kernels.mm


op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 4608}, None)]
op625.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 3538944}, None),
        MemoryDep('buf624', c0, {c0: 3538944}, None)]
op625.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg417_1', c1, {c0: 4608, c1: 768}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf625.users = [NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op625.group.device = cuda:0
op625.group.iteration = (4608, 768)
op625.sizes = ([4608], [768])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op625_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf624', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg417_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf625', get_index_4, getitem)
        return store_reduction


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 4608}, None)]
op626.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 3538944}, None),
        MemoryDep('buf624', c0, {c0: 3538944}, None)]
op626.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg417_1', c1, {c0: 4608, c1: 768}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf626.users = [NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (4608, 768)
op626.sizes = ([4608], [768])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op626_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf624', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg417_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf626', get_index_4, getitem_1)
        return store_reduction


op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 3538944}, None)]
op628.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 3538944}, None),
        MemoryDep('buf624', c0, {c0: 3538944}, None),
        MemoryDep('buf625', c0, {c0: 4608}, None),
        MemoryDep('buf626', c0, {c0: 4608}, None)]
op628.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg417_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg419_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg420_1', c1, {c0: 4608, c1: 768}, None)]
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf628.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (3538944, 1)
op628.sizes = ([4608, 768], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op628_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf624', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg417_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf625', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf626', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg419_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg420_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf628', get_index_8, add_3, None)
        return store


op629: ExternKernelSchedulerNode(ExternKernelOut)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = [StarDep(name='buf628', mode=None)]
op629.met_dependencies = [StarDep(name='arg421_1', mode=None)]
op629.outputs = [
    buf629: ExternKernelOut
    buf629.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf629.users = [
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
    ]
]
op629.node.kernel = extern_kernels.mm


op630: SchedulerNode(ComputedBuffer)
op630.writes = [MemoryDep('buf630', c0, {c0: 3538944}, None)]
op630.unmet_dependencies = [   MemoryDep('buf629', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op630.met_dependencies = [MemoryDep('arg422_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op630.outputs = [
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf630.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op630.group.device = cuda:0
op630.group.iteration = (3538944, 1)
op630.sizes = ([8, 16, 576, 48], [])
buf629_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op630_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf629', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf630', get_index_2, mul, None)
        return store


op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 3538944}, None)]
op631.unmet_dependencies = [   MemoryDep('buf629', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op631.met_dependencies = [MemoryDep('arg422_1', c1 + 768, {c0: 8, c1: 768}, None)]
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op631.group.device = cuda:0
op631.group.iteration = (3538944, 1)
op631.sizes = ([8, 768, 576], [])
buf629_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op631_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf629', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf631', get_index_2, add, None)
        return store


op632: ExternKernelSchedulerNode(ExternKernelOut)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf630', mode=None), StarDep(name='buf631', mode=None)]
op632.met_dependencies = []
op632.outputs = [
    buf632: ExternKernelOut
    buf632.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf632.users = [NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op632.node.kernel = extern_kernels.bmm


op633: SchedulerNode(ComputedBuffer)
op633.writes = [MemoryDep('buf633', c0, {c0: 42467328}, None)]
op633.unmet_dependencies = [   MemoryDep('buf632', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op633.met_dependencies = []
op633.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf633.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op633.group.device = cuda:0
op633.group.iteration = (42467328, 1)
op633.sizes = ([8, 331776, 16], [])
buf632_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf633_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op633_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf632', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf633', get_index_1, load, None)
        return store


op634: ExternKernelSchedulerNode(ExternKernelOut)
op634.writes = [StarDep(name='buf634', mode=None)]
op634.unmet_dependencies = [StarDep(name='buf633', mode=None)]
op634.met_dependencies = [StarDep(name='arg423_1', mode=None)]
op634.outputs = [
    buf634: ExternKernelOut
    buf634.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf634.users = [
        NodeUser(node=SchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False),
    ]
]
op634.node.kernel = extern_kernels.mm


op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', c0, {c0: 73728}, None)]
op635.unmet_dependencies = [MemoryDep('buf634', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op635.met_dependencies = [MemoryDep('arg424_1', c1, {c0: 4608, c1: 16}, None)]
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf635.users = [
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
    ]
]
op635.group.device = cuda:0
op635.group.iteration = (73728, 576)
op635.sizes = ([4608, 16], [576])
buf634_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op635_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf634', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf635', get_index_2, reduction)
        return store_reduction


op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 73728}, None)]
op636.unmet_dependencies = 
    [   MemoryDep('buf634', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf635', c0, {c0: 73728}, None)]
op636.met_dependencies = [MemoryDep('arg424_1', c1, {c0: 4608, c1: 16}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf636.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op636.group.device = cuda:0
op636.group.iteration = (73728, 576)
op636.sizes = ([4608, 16], [576])
buf634_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op636_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf634', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf635', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf636', get_index_3, reduction)
        return store_reduction


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 42467328}, None)]
op637.unmet_dependencies = 
    [   MemoryDep('buf634', c0, {c0: 42467328}, None),
        MemoryDep('buf635', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf636', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op637.met_dependencies = [MemoryDep('arg424_1', c1, {c0: 2654208, c1: 16}, None)]
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf637.users = [NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (42467328, 1)
op637.sizes = ([4608, 576, 16], [])
buf634_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op637_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf634', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg424_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf635', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf636', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf637', get_index_4, truediv, None)
        return store


op638: ExternKernelSchedulerNode(ExternKernelOut)
op638.writes = [StarDep(name='buf638', mode=None)]
op638.unmet_dependencies = [StarDep(name='buf637', mode=None)]
op638.met_dependencies = [StarDep(name='arg425_1', mode=None)]
op638.outputs = [
    buf638: ExternKernelOut
    buf638.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf638.users = [NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op638.node.kernel = extern_kernels.mm


op639: SchedulerNode(ComputedBuffer)
op639.writes = [MemoryDep('buf639', c0, {c0: 42467328}, None)]
op639.unmet_dependencies = [   MemoryDep('buf638', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op639.met_dependencies = [MemoryDep('arg426_1', c1, {c0: 8, c1: 16}, None)]
op639.outputs = [
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf639.users = [NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False)]
]
op639.group.device = cuda:0
op639.group.iteration = (42467328, 1)
op639.sizes = ([8, 16, 331776], [])
buf638_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op639_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf638', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg426_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf639', get_index_2, add, None)
        return store


op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 3538944}, None)]
op640.unmet_dependencies = [   MemoryDep('buf629', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op640.met_dependencies = [   MemoryDep('arg422_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf640.users = [NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False)]
]
op640.group.device = cuda:0
op640.group.iteration = (3538944, 1)
op640.sizes = ([8, 16, 576, 48], [])
buf629_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op640_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf629', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf640', get_index_2, add, None)
        return store


op641: ExternKernelSchedulerNode(ExternKernelOut)
op641.writes = [StarDep(name='buf641', mode=None)]
op641.unmet_dependencies = [StarDep(name='buf639', mode=None), StarDep(name='buf640', mode=None)]
op641.met_dependencies = []
op641.outputs = [
    buf641: ExternKernelOut
    buf641.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf641.users = [NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op641.node.kernel = extern_kernels.bmm


op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 3538944}, None)]
op642.unmet_dependencies = [   MemoryDep('buf641', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf642.users = [NodeUser(node=ExternKernelSchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (3538944, 1)
op642.sizes = ([8, 576, 16, 48], [])
buf641_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op642_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf641', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf642', get_index_1, load, None)
        return store


op643: ExternKernelSchedulerNode(ExternKernelOut)
op643.writes = [StarDep(name='buf643', mode=None)]
op643.unmet_dependencies = [StarDep(name='buf642', mode=None)]
op643.met_dependencies = [StarDep(name='arg427_1', mode=None)]
op643.outputs = [
    buf643: ExternKernelOut
    buf643.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf643.users = [NodeUser(node=SchedulerNode(name='op644'), can_inplace=True, is_weak=False)]
]
op643.node.kernel = extern_kernels.mm


op644: SchedulerNode(ComputedBuffer)
op644.writes = [MemoryDep('buf644', c0, {c0: 3538944}, None)]
op644.unmet_dependencies = 
    [   MemoryDep('buf617', c0, {c0: 3538944}, None),
        MemoryDep('buf624', c0, {c0: 3538944}, None),
        MemoryDep('buf643', c0, {c0: 3538944}, None)]
op644.met_dependencies = 
    [   MemoryDep('arg411_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg417_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg418_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg428_1', c1, {c0: 4608, c1: 768}, None)]
op644.outputs = [
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf644.users = [
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False),
    ]
]
op644.group.device = cuda:0
op644.group.iteration = (3538944, 1)
op644.sizes = ([4608, 768], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op644_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf624', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg417_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg418_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf643', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg428_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf644', get_index_7, add_3, None)
        return store


op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 4608}, None)]
op645.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 3538944}, None)]
op645.met_dependencies = []
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf645.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op645.group.device = cuda:0
op645.group.iteration = (4608, 768)
op645.sizes = ([4608], [768])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op645_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf645', get_index_1, getitem)
        return store_reduction


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 4608}, None)]
op646.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 3538944}, None)]
op646.met_dependencies = []
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf646.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (4608, 768)
op646.sizes = ([4608], [768])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op646_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf646', get_index_1, getitem_1)
        return store_reduction


op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 3538944}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 3538944}, None),
        MemoryDep('buf645', c0, {c0: 4608}, None),
        MemoryDep('buf646', c0, {c0: 4608}, None)]
op648.met_dependencies = 
    [   MemoryDep('arg430_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg431_1', c1, {c0: 4608, c1: 768}, None)]
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf648.users = [NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False)]
]
op648.group.device = cuda:0
op648.group.iteration = (3538944, 1)
op648.sizes = ([4608, 768], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op648_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf645', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf646', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg430_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg431_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf648', get_index_5, add_1, None)
        return store


op649: ExternKernelSchedulerNode(ExternKernelOut)
op649.writes = [StarDep(name='buf649', mode=None)]
op649.unmet_dependencies = [StarDep(name='buf648', mode=None)]
op649.met_dependencies = [StarDep(name='arg432_1', mode=None)]
op649.outputs = [
    buf649: ExternKernelOut
    buf649.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf649.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False)]
]
op649.node.kernel = extern_kernels.mm


op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', c0, {c0: 14155776}, None)]
op650.unmet_dependencies = [MemoryDep('buf649', c0, {c0: 14155776}, None)]
op650.met_dependencies = [MemoryDep('arg433_1', c1, {c0: 4608, c1: 3072}, None)]
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf650.users = [NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op650.group.device = cuda:0
op650.group.iteration = (14155776, 1)
op650.sizes = ([4608, 3072], [])
buf649_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op650_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf649', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg433_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf649', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg433_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf650', get_index_4, mul_2, None)
        return store


op651: ExternKernelSchedulerNode(ExternKernelOut)
op651.writes = [StarDep(name='buf651', mode=None)]
op651.unmet_dependencies = [StarDep(name='buf650', mode=None)]
op651.met_dependencies = [StarDep(name='arg434_1', mode=None)]
op651.outputs = [
    buf651: ExternKernelOut
    buf651.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf651.users = [
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False),
    ]
]
op651.node.kernel = extern_kernels.mm


op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 4608}, None)]
op652.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 3538944}, None),
        MemoryDep('buf651', c0, {c0: 3538944}, None)]
op652.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg435_1', c1, {c0: 4608, c1: 768}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf652.users = [NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (4608, 768)
op652.sizes = ([4608], [768])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op652_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf651', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf652', get_index_4, getitem)
        return store_reduction


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 4608}, None)]
op653.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 3538944}, None),
        MemoryDep('buf651', c0, {c0: 3538944}, None)]
op653.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg435_1', c1, {c0: 4608, c1: 768}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf653.users = [NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (4608, 768)
op653.sizes = ([4608], [768])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op653_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf651', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf653', get_index_4, getitem_1)
        return store_reduction


op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 3538944}, None)]
op655.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 3538944}, None),
        MemoryDep('buf651', c0, {c0: 3538944}, None),
        MemoryDep('buf652', c0, {c0: 4608}, None),
        MemoryDep('buf653', c0, {c0: 4608}, None)]
op655.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg435_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg437_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg438_1', c1, {c0: 4608, c1: 768}, None)]
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf655.users = [NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op655.group.device = cuda:0
op655.group.iteration = (3538944, 1)
op655.sizes = ([4608, 768], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op655_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf651', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf652', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf653', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg437_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg438_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf655', get_index_8, add_3, None)
        return store


op656: ExternKernelSchedulerNode(ExternKernelOut)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf655', mode=None)]
op656.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op656.outputs = [
    buf656: ExternKernelOut
    buf656.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf656.users = [
        NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=False, is_weak=False),
    ]
]
op656.node.kernel = extern_kernels.mm


op657: SchedulerNode(ComputedBuffer)
op657.writes = [MemoryDep('buf657', c0, {c0: 3538944}, None)]
op657.unmet_dependencies = [   MemoryDep('buf656', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op657.met_dependencies = [MemoryDep('arg440_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op657.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf657.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op657.group.device = cuda:0
op657.group.iteration = (3538944, 1)
op657.sizes = ([8, 16, 576, 48], [])
buf656_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op657_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf657', get_index_2, mul, None)
        return store


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 3538944}, None)]
op658.unmet_dependencies = [   MemoryDep('buf656', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op658.met_dependencies = [MemoryDep('arg440_1', c1 + 768, {c0: 8, c1: 768}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op658.group.device = cuda:0
op658.group.iteration = (3538944, 1)
op658.sizes = ([8, 768, 576], [])
buf656_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op658_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf658', get_index_2, add, None)
        return store


op659: ExternKernelSchedulerNode(ExternKernelOut)
op659.writes = [StarDep(name='buf659', mode=None)]
op659.unmet_dependencies = [StarDep(name='buf657', mode=None), StarDep(name='buf658', mode=None)]
op659.met_dependencies = []
op659.outputs = [
    buf659: ExternKernelOut
    buf659.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf659.users = [NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op659.node.kernel = extern_kernels.bmm


op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 42467328}, None)]
op660.unmet_dependencies = [   MemoryDep('buf659', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf660.users = [NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False)]
]
op660.group.device = cuda:0
op660.group.iteration = (42467328, 1)
op660.sizes = ([8, 331776, 16], [])
buf659_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op660_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf659', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf660', get_index_1, load, None)
        return store


op661: ExternKernelSchedulerNode(ExternKernelOut)
op661.writes = [StarDep(name='buf661', mode=None)]
op661.unmet_dependencies = [StarDep(name='buf660', mode=None)]
op661.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op661.outputs = [
    buf661: ExternKernelOut
    buf661.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=True, is_weak=False),
    ]
]
op661.node.kernel = extern_kernels.mm


op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 73728}, None)]
op662.unmet_dependencies = [MemoryDep('buf661', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op662.met_dependencies = [MemoryDep('arg442_1', c1, {c0: 4608, c1: 16}, None)]
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf662.users = [
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op662.group.device = cuda:0
op662.group.iteration = (73728, 576)
op662.sizes = ([4608, 16], [576])
buf661_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op662_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf662', get_index_2, reduction)
        return store_reduction


op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 73728}, None)]
op663.unmet_dependencies = 
    [   MemoryDep('buf661', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf662', c0, {c0: 73728}, None)]
op663.met_dependencies = [MemoryDep('arg442_1', c1, {c0: 4608, c1: 16}, None)]
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf663.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
]
op663.group.device = cuda:0
op663.group.iteration = (73728, 576)
op663.sizes = ([4608, 16], [576])
buf661_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op663_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf662', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf663', get_index_3, reduction)
        return store_reduction


op664: SchedulerNode(ComputedBuffer)
op664.writes = [MemoryDep('buf664', c0, {c0: 42467328}, None)]
op664.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 42467328}, None),
        MemoryDep('buf662', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf663', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op664.met_dependencies = [MemoryDep('arg442_1', c1, {c0: 2654208, c1: 16}, None)]
op664.outputs = [
    buf664: ComputedBuffer
    buf664.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf664.users = [NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op664.group.device = cuda:0
op664.group.iteration = (42467328, 1)
op664.sizes = ([4608, 576, 16], [])
buf661_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf664_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op664_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf661', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf662', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf663', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf664', get_index_4, truediv, None)
        return store


op665: ExternKernelSchedulerNode(ExternKernelOut)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf664', mode=None)]
op665.met_dependencies = [StarDep(name='arg443_1', mode=None)]
op665.outputs = [
    buf665: ExternKernelOut
    buf665.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf665.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op665.node.kernel = extern_kernels.mm


op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 42467328}, None)]
op666.unmet_dependencies = [   MemoryDep('buf665', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op666.met_dependencies = [MemoryDep('arg444_1', c1, {c0: 8, c1: 16}, None)]
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf666.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op666.group.device = cuda:0
op666.group.iteration = (42467328, 1)
op666.sizes = ([8, 16, 331776], [])
buf665_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op666_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf665', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg444_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf666', get_index_2, add, None)
        return store


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 3538944}, None)]
op667.unmet_dependencies = [   MemoryDep('buf656', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op667.met_dependencies = [   MemoryDep('arg440_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf667.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op667.group.device = cuda:0
op667.group.iteration = (3538944, 1)
op667.sizes = ([8, 16, 576, 48], [])
buf656_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op667_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg440_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf667', get_index_2, add, None)
        return store


op668: ExternKernelSchedulerNode(ExternKernelOut)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf666', mode=None), StarDep(name='buf667', mode=None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ExternKernelOut
    buf668.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf668.users = [NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False)]
]
op668.node.kernel = extern_kernels.bmm


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 3538944}, None)]
op669.unmet_dependencies = [   MemoryDep('buf668', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op669.met_dependencies = []
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (3538944, 1)
op669.sizes = ([8, 576, 16, 48], [])
buf668_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op669_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf668', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf669', get_index_1, load, None)
        return store


op670: ExternKernelSchedulerNode(ExternKernelOut)
op670.writes = [StarDep(name='buf670', mode=None)]
op670.unmet_dependencies = [StarDep(name='buf669', mode=None)]
op670.met_dependencies = [StarDep(name='arg445_1', mode=None)]
op670.outputs = [
    buf670: ExternKernelOut
    buf670.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf670.users = [NodeUser(node=SchedulerNode(name='op671'), can_inplace=True, is_weak=False)]
]
op670.node.kernel = extern_kernels.mm


op671: SchedulerNode(ComputedBuffer)
op671.writes = [MemoryDep('buf671', c0, {c0: 3538944}, None)]
op671.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 3538944}, None),
        MemoryDep('buf651', c0, {c0: 3538944}, None),
        MemoryDep('buf670', c0, {c0: 3538944}, None)]
op671.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg435_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg436_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg446_1', c1, {c0: 4608, c1: 768}, None)]
op671.outputs = [
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf671.users = [
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False),
    ]
]
op671.group.device = cuda:0
op671.group.iteration = (3538944, 1)
op671.sizes = ([4608, 768], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op671_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf651', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg436_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf670', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg446_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf671', get_index_7, add_3, None)
        return store


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 4608}, None)]
op672.unmet_dependencies = [MemoryDep('buf671', c0, {c0: 3538944}, None)]
op672.met_dependencies = []
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf672.users = [NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (4608, 768)
op672.sizes = ([4608], [768])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op672_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf672', get_index_1, getitem)
        return store_reduction


op673: SchedulerNode(ComputedBuffer)
op673.writes = [MemoryDep('buf673', c0, {c0: 4608}, None)]
op673.unmet_dependencies = [MemoryDep('buf671', c0, {c0: 3538944}, None)]
op673.met_dependencies = []
op673.outputs = [
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf673.users = [NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False)]
]
op673.group.device = cuda:0
op673.group.iteration = (4608, 768)
op673.sizes = ([4608], [768])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op673_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf673', get_index_1, getitem_1)
        return store_reduction


op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', c0, {c0: 3538944}, None)]
op675.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 3538944}, None),
        MemoryDep('buf672', c0, {c0: 4608}, None),
        MemoryDep('buf673', c0, {c0: 4608}, None)]
op675.met_dependencies = 
    [   MemoryDep('arg448_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg449_1', c1, {c0: 4608, c1: 768}, None)]
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf675.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op675.group.device = cuda:0
op675.group.iteration = (3538944, 1)
op675.sizes = ([4608, 768], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op675_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf672', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf673', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg448_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg449_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf675', get_index_5, add_1, None)
        return store


op676: ExternKernelSchedulerNode(ExternKernelOut)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf675', mode=None)]
op676.met_dependencies = [StarDep(name='arg450_1', mode=None)]
op676.outputs = [
    buf676: ExternKernelOut
    buf676.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf676.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=True, is_weak=False)]
]
op676.node.kernel = extern_kernels.mm


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 14155776}, None)]
op677.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 14155776}, None)]
op677.met_dependencies = [MemoryDep('arg451_1', c1, {c0: 4608, c1: 3072}, None)]
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf677.users = [NodeUser(node=ExternKernelSchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (14155776, 1)
op677.sizes = ([4608, 3072], [])
buf676_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op677_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg451_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf676', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg451_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf677', get_index_4, mul_2, None)
        return store


op678: ExternKernelSchedulerNode(ExternKernelOut)
op678.writes = [StarDep(name='buf678', mode=None)]
op678.unmet_dependencies = [StarDep(name='buf677', mode=None)]
op678.met_dependencies = [StarDep(name='arg452_1', mode=None)]
op678.outputs = [
    buf678: ExternKernelOut
    buf678.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf678.users = [
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False),
    ]
]
op678.node.kernel = extern_kernels.mm


op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 4608}, None)]
op679.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 3538944}, None),
        MemoryDep('buf678', c0, {c0: 3538944}, None)]
op679.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg453_1', c1, {c0: 4608, c1: 768}, None)]
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf679.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op679.group.device = cuda:0
op679.group.iteration = (4608, 768)
op679.sizes = ([4608], [768])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op679_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf678', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg453_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf679', get_index_4, getitem)
        return store_reduction


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 4608}, None)]
op680.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 3538944}, None),
        MemoryDep('buf678', c0, {c0: 3538944}, None)]
op680.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg453_1', c1, {c0: 4608, c1: 768}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf680.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op680.group.device = cuda:0
op680.group.iteration = (4608, 768)
op680.sizes = ([4608], [768])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op680_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf678', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg453_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf680', get_index_4, getitem_1)
        return store_reduction


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 3538944}, None)]
op682.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 3538944}, None),
        MemoryDep('buf678', c0, {c0: 3538944}, None),
        MemoryDep('buf679', c0, {c0: 4608}, None),
        MemoryDep('buf680', c0, {c0: 4608}, None)]
op682.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg453_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg455_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg456_1', c1, {c0: 4608, c1: 768}, None)]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (3538944, 1)
op682.sizes = ([4608, 768], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op682_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf678', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg453_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf679', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf680', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg455_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg456_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf682', get_index_8, add_3, None)
        return store


op683: ExternKernelSchedulerNode(ExternKernelOut)
op683.writes = [StarDep(name='buf683', mode=None)]
op683.unmet_dependencies = [StarDep(name='buf682', mode=None)]
op683.met_dependencies = [StarDep(name='arg457_1', mode=None)]
op683.outputs = [
    buf683: ExternKernelOut
    buf683.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf683.users = [
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
    ]
]
op683.node.kernel = extern_kernels.mm


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 3538944}, None)]
op684.unmet_dependencies = [   MemoryDep('buf683', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op684.met_dependencies = [MemoryDep('arg458_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf684.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op684.group.device = cuda:0
op684.group.iteration = (3538944, 1)
op684.sizes = ([8, 16, 576, 48], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op684_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg458_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf684', get_index_2, mul, None)
        return store


op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 3538944}, None)]
op685.unmet_dependencies = [   MemoryDep('buf683', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op685.met_dependencies = [MemoryDep('arg458_1', c1 + 768, {c0: 8, c1: 768}, None)]
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf685.users = [NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op685.group.device = cuda:0
op685.group.iteration = (3538944, 1)
op685.sizes = ([8, 768, 576], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op685_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg458_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf685', get_index_2, add, None)
        return store


op686: ExternKernelSchedulerNode(ExternKernelOut)
op686.writes = [StarDep(name='buf686', mode=None)]
op686.unmet_dependencies = [StarDep(name='buf684', mode=None), StarDep(name='buf685', mode=None)]
op686.met_dependencies = []
op686.outputs = [
    buf686: ExternKernelOut
    buf686.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf686.users = [NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False)]
]
op686.node.kernel = extern_kernels.bmm


op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', c0, {c0: 42467328}, None)]
op687.unmet_dependencies = [   MemoryDep('buf686', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf687.users = [NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False)]
]
op687.group.device = cuda:0
op687.group.iteration = (42467328, 1)
op687.sizes = ([8, 331776, 16], [])
buf686_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op687_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf687', get_index_1, load, None)
        return store


op688: ExternKernelSchedulerNode(ExternKernelOut)
op688.writes = [StarDep(name='buf688', mode=None)]
op688.unmet_dependencies = [StarDep(name='buf687', mode=None)]
op688.met_dependencies = [StarDep(name='arg459_1', mode=None)]
op688.outputs = [
    buf688: ExternKernelOut
    buf688.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf688.users = [
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op691'), can_inplace=True, is_weak=False),
    ]
]
op688.node.kernel = extern_kernels.mm


op689: SchedulerNode(ComputedBuffer)
op689.writes = [MemoryDep('buf689', c0, {c0: 73728}, None)]
op689.unmet_dependencies = [MemoryDep('buf688', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op689.met_dependencies = [MemoryDep('arg460_1', c1, {c0: 4608, c1: 16}, None)]
op689.outputs = [
    buf689: ComputedBuffer
    buf689.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf689.users = [
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op691'), can_inplace=False, is_weak=False),
    ]
]
op689.group.device = cuda:0
op689.group.iteration = (73728, 576)
op689.sizes = ([4608, 16], [576])
buf688_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf689_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op689_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf688', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg460_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf689', get_index_2, reduction)
        return store_reduction


op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', c0, {c0: 73728}, None)]
op690.unmet_dependencies = 
    [   MemoryDep('buf688', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf689', c0, {c0: 73728}, None)]
op690.met_dependencies = [MemoryDep('arg460_1', c1, {c0: 4608, c1: 16}, None)]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf690.users = [NodeUser(node=SchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op690.group.device = cuda:0
op690.group.iteration = (73728, 576)
op690.sizes = ([4608, 16], [576])
buf688_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf689_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf690_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op690_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf688', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg460_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf689', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf690', get_index_3, reduction)
        return store_reduction


op691: SchedulerNode(ComputedBuffer)
op691.writes = [MemoryDep('buf691', c0, {c0: 42467328}, None)]
op691.unmet_dependencies = 
    [   MemoryDep('buf688', c0, {c0: 42467328}, None),
        MemoryDep('buf689', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf690', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op691.met_dependencies = [MemoryDep('arg460_1', c1, {c0: 2654208, c1: 16}, None)]
op691.outputs = [
    buf691: ComputedBuffer
    buf691.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf691.users = [NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False)]
]
op691.group.device = cuda:0
op691.group.iteration = (42467328, 1)
op691.sizes = ([4608, 576, 16], [])
buf688_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf689_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf690_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf691_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op691_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf688', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg460_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf689', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf690', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf691', get_index_4, truediv, None)
        return store


op692: ExternKernelSchedulerNode(ExternKernelOut)
op692.writes = [StarDep(name='buf692', mode=None)]
op692.unmet_dependencies = [StarDep(name='buf691', mode=None)]
op692.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op692.outputs = [
    buf692: ExternKernelOut
    buf692.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf692.users = [NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False)]
]
op692.node.kernel = extern_kernels.mm


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 42467328}, None)]
op693.unmet_dependencies = [   MemoryDep('buf692', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op693.met_dependencies = [MemoryDep('arg462_1', c1, {c0: 8, c1: 16}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf693.users = [NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (42467328, 1)
op693.sizes = ([8, 16, 331776], [])
buf692_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op693_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf692', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf693', get_index_2, add, None)
        return store


op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', c0, {c0: 3538944}, None)]
op694.unmet_dependencies = [   MemoryDep('buf683', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op694.met_dependencies = [   MemoryDep('arg458_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf694.users = [NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op694.group.device = cuda:0
op694.group.iteration = (3538944, 1)
op694.sizes = ([8, 16, 576, 48], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op694_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg458_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf694', get_index_2, add, None)
        return store


op695: ExternKernelSchedulerNode(ExternKernelOut)
op695.writes = [StarDep(name='buf695', mode=None)]
op695.unmet_dependencies = [StarDep(name='buf693', mode=None), StarDep(name='buf694', mode=None)]
op695.met_dependencies = []
op695.outputs = [
    buf695: ExternKernelOut
    buf695.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf695.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op695.node.kernel = extern_kernels.bmm


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 3538944}, None)]
op696.unmet_dependencies = [   MemoryDep('buf695', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op696.met_dependencies = []
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (3538944, 1)
op696.sizes = ([8, 576, 16, 48], [])
buf695_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op696_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf696', get_index_1, load, None)
        return store


op697: ExternKernelSchedulerNode(ExternKernelOut)
op697.writes = [StarDep(name='buf697', mode=None)]
op697.unmet_dependencies = [StarDep(name='buf696', mode=None)]
op697.met_dependencies = [StarDep(name='arg463_1', mode=None)]
op697.outputs = [
    buf697: ExternKernelOut
    buf697.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf697.users = [NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False)]
]
op697.node.kernel = extern_kernels.mm


op698: SchedulerNode(ComputedBuffer)
op698.writes = [MemoryDep('buf698', c0, {c0: 3538944}, None)]
op698.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 3538944}, None),
        MemoryDep('buf678', c0, {c0: 3538944}, None),
        MemoryDep('buf697', c0, {c0: 3538944}, None)]
op698.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg453_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg454_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg464_1', c1, {c0: 4608, c1: 768}, None)]
op698.outputs = [
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf698.users = [
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
    ]
]
op698.group.device = cuda:0
op698.group.iteration = (3538944, 1)
op698.sizes = ([4608, 768], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf697_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op698_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf678', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg453_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg454_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf697', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg464_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf698', get_index_7, add_3, None)
        return store


op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', c0, {c0: 4608}, None)]
op699.unmet_dependencies = [MemoryDep('buf698', c0, {c0: 3538944}, None)]
op699.met_dependencies = []
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf699.users = [NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False)]
]
op699.group.device = cuda:0
op699.group.iteration = (4608, 768)
op699.sizes = ([4608], [768])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op699_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf699', get_index_1, getitem)
        return store_reduction


op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 4608}, None)]
op700.unmet_dependencies = [MemoryDep('buf698', c0, {c0: 3538944}, None)]
op700.met_dependencies = []
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf700.users = [NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False)]
]
op700.group.device = cuda:0
op700.group.iteration = (4608, 768)
op700.sizes = ([4608], [768])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op700_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf700', get_index_1, getitem_1)
        return store_reduction


op702: SchedulerNode(ComputedBuffer)
op702.writes = [MemoryDep('buf702', c0, {c0: 3538944}, None)]
op702.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 3538944}, None),
        MemoryDep('buf699', c0, {c0: 4608}, None),
        MemoryDep('buf700', c0, {c0: 4608}, None)]
op702.met_dependencies = 
    [   MemoryDep('arg466_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg467_1', c1, {c0: 4608, c1: 768}, None)]
op702.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf702.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op702.group.device = cuda:0
op702.group.iteration = (3538944, 1)
op702.sizes = ([4608, 768], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op702_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf699', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf700', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg466_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg467_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf702', get_index_5, add_1, None)
        return store


op703: ExternKernelSchedulerNode(ExternKernelOut)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = [StarDep(name='buf702', mode=None)]
op703.met_dependencies = [StarDep(name='arg468_1', mode=None)]
op703.outputs = [
    buf703: ExternKernelOut
    buf703.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf703.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op703.node.kernel = extern_kernels.mm


op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 14155776}, None)]
op704.unmet_dependencies = [MemoryDep('buf703', c0, {c0: 14155776}, None)]
op704.met_dependencies = [MemoryDep('arg469_1', c1, {c0: 4608, c1: 3072}, None)]
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf704.users = [NodeUser(node=ExternKernelSchedulerNode(name='op705'), can_inplace=False, is_weak=False)]
]
op704.group.device = cuda:0
op704.group.iteration = (14155776, 1)
op704.sizes = ([4608, 3072], [])
buf703_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op704_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf703', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg469_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf703', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg469_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf704', get_index_4, mul_2, None)
        return store


op705: ExternKernelSchedulerNode(ExternKernelOut)
op705.writes = [StarDep(name='buf705', mode=None)]
op705.unmet_dependencies = [StarDep(name='buf704', mode=None)]
op705.met_dependencies = [StarDep(name='arg470_1', mode=None)]
op705.outputs = [
    buf705: ExternKernelOut
    buf705.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf705.users = [
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
    ]
]
op705.node.kernel = extern_kernels.mm


op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 4608}, None)]
op706.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 3538944}, None),
        MemoryDep('buf705', c0, {c0: 3538944}, None)]
op706.met_dependencies = 
    [   MemoryDep('arg465_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg471_1', c1, {c0: 4608, c1: 768}, None)]
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf706.users = [NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False)]
]
op706.group.device = cuda:0
op706.group.iteration = (4608, 768)
op706.sizes = ([4608], [768])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op706_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg465_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf705', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg471_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf706', get_index_4, getitem)
        return store_reduction


op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', c0, {c0: 4608}, None)]
op707.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 3538944}, None),
        MemoryDep('buf705', c0, {c0: 3538944}, None)]
op707.met_dependencies = 
    [   MemoryDep('arg465_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg471_1', c1, {c0: 4608, c1: 768}, None)]
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf707.users = [NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False)]
]
op707.group.device = cuda:0
op707.group.iteration = (4608, 768)
op707.sizes = ([4608], [768])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op707_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg465_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf705', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg471_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf707', get_index_4, getitem_1)
        return store_reduction


op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 3538944}, None)]
op709.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 3538944}, None),
        MemoryDep('buf705', c0, {c0: 3538944}, None),
        MemoryDep('buf706', c0, {c0: 4608}, None),
        MemoryDep('buf707', c0, {c0: 4608}, None)]
op709.met_dependencies = 
    [   MemoryDep('arg465_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg471_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg473_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg474_1', c1, {c0: 4608, c1: 768}, None)]
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf709.users = [NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False)]
]
op709.group.device = cuda:0
op709.group.iteration = (3538944, 1)
op709.sizes = ([4608, 768], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op709_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg465_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf705', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg471_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf706', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf707', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg473_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg474_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf709', get_index_8, add_3, None)
        return store


op710: ExternKernelSchedulerNode(ExternKernelOut)
op710.writes = [StarDep(name='buf710', mode=None)]
op710.unmet_dependencies = [StarDep(name='buf709', mode=None)]
op710.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op710.outputs = [
    buf710: ExternKernelOut
    buf710.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf710.users = [
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op710.node.kernel = extern_kernels.mm


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 3538944}, None)]
op711.unmet_dependencies = [   MemoryDep('buf710', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op711.met_dependencies = [MemoryDep('arg476_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (3538944, 1)
op711.sizes = ([8, 16, 576, 48], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op711_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf711', get_index_2, mul, None)
        return store


op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', c0, {c0: 3538944}, None)]
op712.unmet_dependencies = [   MemoryDep('buf710', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op712.met_dependencies = [MemoryDep('arg476_1', c1 + 768, {c0: 8, c1: 768}, None)]
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (3538944, 1)
op712.sizes = ([8, 768, 576], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf712_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op712_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf712', get_index_2, add, None)
        return store


op713: ExternKernelSchedulerNode(ExternKernelOut)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = [StarDep(name='buf711', mode=None), StarDep(name='buf712', mode=None)]
op713.met_dependencies = []
op713.outputs = [
    buf713: ExternKernelOut
    buf713.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf713.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op713.node.kernel = extern_kernels.bmm


op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 42467328}, None)]
op714.unmet_dependencies = [   MemoryDep('buf713', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op714.met_dependencies = []
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf714.users = [NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False)]
]
op714.group.device = cuda:0
op714.group.iteration = (42467328, 1)
op714.sizes = ([8, 331776, 16], [])
buf713_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op714_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf713', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf714', get_index_1, load, None)
        return store


op715: ExternKernelSchedulerNode(ExternKernelOut)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op715.met_dependencies = [StarDep(name='arg477_1', mode=None)]
op715.outputs = [
    buf715: ExternKernelOut
    buf715.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf715.users = [
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=True, is_weak=False),
    ]
]
op715.node.kernel = extern_kernels.mm


op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 73728}, None)]
op716.unmet_dependencies = [MemoryDep('buf715', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op716.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 4608, c1: 16}, None)]
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
    ]
]
op716.group.device = cuda:0
op716.group.iteration = (73728, 576)
op716.sizes = ([4608, 16], [576])
buf715_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op716_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg478_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf716', get_index_2, reduction)
        return store_reduction


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 73728}, None)]
op717.unmet_dependencies = 
    [   MemoryDep('buf715', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf716', c0, {c0: 73728}, None)]
op717.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 4608, c1: 16}, None)]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf717.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op717.group.device = cuda:0
op717.group.iteration = (73728, 576)
op717.sizes = ([4608, 16], [576])
buf715_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op717_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg478_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf716', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf717', get_index_3, reduction)
        return store_reduction


op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 42467328}, None)]
op718.unmet_dependencies = 
    [   MemoryDep('buf715', c0, {c0: 42467328}, None),
        MemoryDep('buf716', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf717', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op718.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 2654208, c1: 16}, None)]
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf718.users = [NodeUser(node=ExternKernelSchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op718.group.device = cuda:0
op718.group.iteration = (42467328, 1)
op718.sizes = ([4608, 576, 16], [])
buf715_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op718_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg478_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf716', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf717', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf718', get_index_4, truediv, None)
        return store


op719: ExternKernelSchedulerNode(ExternKernelOut)
op719.writes = [StarDep(name='buf719', mode=None)]
op719.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op719.met_dependencies = [StarDep(name='arg479_1', mode=None)]
op719.outputs = [
    buf719: ExternKernelOut
    buf719.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf719.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op719.node.kernel = extern_kernels.mm


op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', c0, {c0: 42467328}, None)]
op720.unmet_dependencies = [   MemoryDep('buf719', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op720.met_dependencies = [MemoryDep('arg480_1', c1, {c0: 8, c1: 16}, None)]
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf720.users = [NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
]
op720.group.device = cuda:0
op720.group.iteration = (42467328, 1)
op720.sizes = ([8, 16, 331776], [])
buf719_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op720_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf719', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg480_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf720', get_index_2, add, None)
        return store


op721: SchedulerNode(ComputedBuffer)
op721.writes = [MemoryDep('buf721', c0, {c0: 3538944}, None)]
op721.unmet_dependencies = [   MemoryDep('buf710', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op721.met_dependencies = [   MemoryDep('arg476_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op721.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf721.users = [NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
]
op721.group.device = cuda:0
op721.group.iteration = (3538944, 1)
op721.sizes = ([8, 16, 576, 48], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op721_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf721', get_index_2, add, None)
        return store


op722: ExternKernelSchedulerNode(ExternKernelOut)
op722.writes = [StarDep(name='buf722', mode=None)]
op722.unmet_dependencies = [StarDep(name='buf720', mode=None), StarDep(name='buf721', mode=None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: ExternKernelOut
    buf722.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf722.users = [NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False)]
]
op722.node.kernel = extern_kernels.bmm


op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', c0, {c0: 3538944}, None)]
op723.unmet_dependencies = [   MemoryDep('buf722', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op723.met_dependencies = []
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf723.users = [NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (3538944, 1)
op723.sizes = ([8, 576, 16, 48], [])
buf722_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf723_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op723_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf722', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf723', get_index_1, load, None)
        return store


op724: ExternKernelSchedulerNode(ExternKernelOut)
op724.writes = [StarDep(name='buf724', mode=None)]
op724.unmet_dependencies = [StarDep(name='buf723', mode=None)]
op724.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op724.outputs = [
    buf724: ExternKernelOut
    buf724.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf724.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False)]
]
op724.node.kernel = extern_kernels.mm


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 3538944}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 3538944}, None),
        MemoryDep('buf705', c0, {c0: 3538944}, None),
        MemoryDep('buf724', c0, {c0: 3538944}, None)]
op725.met_dependencies = 
    [   MemoryDep('arg465_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg471_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg472_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg482_1', c1, {c0: 4608, c1: 768}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf725.users = [
        NodeUser(node=SchedulerNode(name='op726'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False),
    ]
]
op725.group.device = cuda:0
op725.group.iteration = (3538944, 1)
op725.sizes = ([4608, 768], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf724_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op725_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg465_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf705', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg471_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg472_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf724', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg482_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf725', get_index_7, add_3, None)
        return store


op726: SchedulerNode(ComputedBuffer)
op726.writes = [MemoryDep('buf726', c0, {c0: 4608}, None)]
op726.unmet_dependencies = [MemoryDep('buf725', c0, {c0: 3538944}, None)]
op726.met_dependencies = []
op726.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf726.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False)]
]
op726.group.device = cuda:0
op726.group.iteration = (4608, 768)
op726.sizes = ([4608], [768])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op726_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf726', get_index_1, getitem)
        return store_reduction


op727: SchedulerNode(ComputedBuffer)
op727.writes = [MemoryDep('buf727', c0, {c0: 4608}, None)]
op727.unmet_dependencies = [MemoryDep('buf725', c0, {c0: 3538944}, None)]
op727.met_dependencies = []
op727.outputs = [
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf727.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False)]
]
op727.group.device = cuda:0
op727.group.iteration = (4608, 768)
op727.sizes = ([4608], [768])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op727_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf727', get_index_1, getitem_1)
        return store_reduction


op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 3538944}, None)]
op729.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 3538944}, None),
        MemoryDep('buf726', c0, {c0: 4608}, None),
        MemoryDep('buf727', c0, {c0: 4608}, None)]
op729.met_dependencies = 
    [   MemoryDep('arg484_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg485_1', c1, {c0: 4608, c1: 768}, None)]
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf729.users = [NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False)]
]
op729.group.device = cuda:0
op729.group.iteration = (3538944, 1)
op729.sizes = ([4608, 768], [])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op729_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf726', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf727', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg484_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg485_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf729', get_index_5, add_1, None)
        return store


op730: ExternKernelSchedulerNode(ExternKernelOut)
op730.writes = [StarDep(name='buf730', mode=None)]
op730.unmet_dependencies = [StarDep(name='buf729', mode=None)]
op730.met_dependencies = [StarDep(name='arg486_1', mode=None)]
op730.outputs = [
    buf730: ExternKernelOut
    buf730.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf730.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False)]
]
op730.node.kernel = extern_kernels.mm


op731: SchedulerNode(ComputedBuffer)
op731.writes = [MemoryDep('buf731', c0, {c0: 14155776}, None)]
op731.unmet_dependencies = [MemoryDep('buf730', c0, {c0: 14155776}, None)]
op731.met_dependencies = [MemoryDep('arg487_1', c1, {c0: 4608, c1: 3072}, None)]
op731.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf731.users = [NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False)]
]
op731.group.device = cuda:0
op731.group.iteration = (14155776, 1)
op731.sizes = ([4608, 3072], [])
buf730_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf731_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op731_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf730', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg487_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf730', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg487_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf731', get_index_4, mul_2, None)
        return store


op732: ExternKernelSchedulerNode(ExternKernelOut)
op732.writes = [StarDep(name='buf732', mode=None)]
op732.unmet_dependencies = [StarDep(name='buf731', mode=None)]
op732.met_dependencies = [StarDep(name='arg488_1', mode=None)]
op732.outputs = [
    buf732: ExternKernelOut
    buf732.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf732.users = [
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False),
    ]
]
op732.node.kernel = extern_kernels.mm


op733: SchedulerNode(ComputedBuffer)
op733.writes = [MemoryDep('buf733', c0, {c0: 4608}, None)]
op733.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 3538944}, None),
        MemoryDep('buf732', c0, {c0: 3538944}, None)]
op733.met_dependencies = 
    [   MemoryDep('arg483_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg489_1', c1, {c0: 4608, c1: 768}, None)]
op733.outputs = [
    buf733: ComputedBuffer
    buf733.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf733.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op733.group.device = cuda:0
op733.group.iteration = (4608, 768)
op733.sizes = ([4608], [768])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op733_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg483_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf732', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf733', get_index_4, getitem)
        return store_reduction


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 4608}, None)]
op734.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 3538944}, None),
        MemoryDep('buf732', c0, {c0: 3538944}, None)]
op734.met_dependencies = 
    [   MemoryDep('arg483_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg489_1', c1, {c0: 4608, c1: 768}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf734.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op734.group.device = cuda:0
op734.group.iteration = (4608, 768)
op734.sizes = ([4608], [768])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op734_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg483_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf732', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf734', get_index_4, getitem_1)
        return store_reduction


op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 3538944}, None)]
op736.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 3538944}, None),
        MemoryDep('buf732', c0, {c0: 3538944}, None),
        MemoryDep('buf733', c0, {c0: 4608}, None),
        MemoryDep('buf734', c0, {c0: 4608}, None)]
op736.met_dependencies = 
    [   MemoryDep('arg483_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg489_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg491_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg492_1', c1, {c0: 4608, c1: 768}, None)]
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf736.users = [NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op736.group.device = cuda:0
op736.group.iteration = (3538944, 1)
op736.sizes = ([4608, 768], [])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op736_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg483_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf732', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf733', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf734', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg491_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg492_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf736', get_index_8, add_3, None)
        return store


op737: ExternKernelSchedulerNode(ExternKernelOut)
op737.writes = [StarDep(name='buf737', mode=None)]
op737.unmet_dependencies = [StarDep(name='buf736', mode=None)]
op737.met_dependencies = [StarDep(name='arg493_1', mode=None)]
op737.outputs = [
    buf737: ExternKernelOut
    buf737.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf737.users = [
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
    ]
]
op737.node.kernel = extern_kernels.mm


op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 3538944}, None)]
op738.unmet_dependencies = [   MemoryDep('buf737', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op738.met_dependencies = [MemoryDep('arg494_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf738.users = [NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False)]
]
op738.group.device = cuda:0
op738.group.iteration = (3538944, 1)
op738.sizes = ([8, 16, 576, 48], [])
buf737_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op738_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg494_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf738', get_index_2, mul, None)
        return store


op739: SchedulerNode(ComputedBuffer)
op739.writes = [MemoryDep('buf739', c0, {c0: 3538944}, None)]
op739.unmet_dependencies = [   MemoryDep('buf737', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op739.met_dependencies = [MemoryDep('arg494_1', c1 + 768, {c0: 8, c1: 768}, None)]
op739.outputs = [
    buf739: ComputedBuffer
    buf739.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf739.users = [NodeUser(node=ExternKernelSchedulerNode(name='op740'), can_inplace=False, is_weak=False)]
]
op739.group.device = cuda:0
op739.group.iteration = (3538944, 1)
op739.sizes = ([8, 768, 576], [])
buf737_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op739_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg494_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf739', get_index_2, add, None)
        return store


op740: ExternKernelSchedulerNode(ExternKernelOut)
op740.writes = [StarDep(name='buf740', mode=None)]
op740.unmet_dependencies = [StarDep(name='buf738', mode=None), StarDep(name='buf739', mode=None)]
op740.met_dependencies = []
op740.outputs = [
    buf740: ExternKernelOut
    buf740.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf740.users = [NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op740.node.kernel = extern_kernels.bmm


op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 42467328}, None)]
op741.unmet_dependencies = [   MemoryDep('buf740', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op741.met_dependencies = []
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf741.users = [NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op741.group.device = cuda:0
op741.group.iteration = (42467328, 1)
op741.sizes = ([8, 331776, 16], [])
buf740_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op741_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf740', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf741', get_index_1, load, None)
        return store


op742: ExternKernelSchedulerNode(ExternKernelOut)
op742.writes = [StarDep(name='buf742', mode=None)]
op742.unmet_dependencies = [StarDep(name='buf741', mode=None)]
op742.met_dependencies = [StarDep(name='arg495_1', mode=None)]
op742.outputs = [
    buf742: ExternKernelOut
    buf742.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf742.users = [
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=True, is_weak=False),
    ]
]
op742.node.kernel = extern_kernels.mm


op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 73728}, None)]
op743.unmet_dependencies = [MemoryDep('buf742', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op743.met_dependencies = [MemoryDep('arg496_1', c1, {c0: 4608, c1: 16}, None)]
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf743.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
    ]
]
op743.group.device = cuda:0
op743.group.iteration = (73728, 576)
op743.sizes = ([4608, 16], [576])
buf742_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op743_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf742', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg496_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf743', get_index_2, reduction)
        return store_reduction


op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 73728}, None)]
op744.unmet_dependencies = 
    [   MemoryDep('buf742', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf743', c0, {c0: 73728}, None)]
op744.met_dependencies = [MemoryDep('arg496_1', c1, {c0: 4608, c1: 16}, None)]
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf744.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op744.group.device = cuda:0
op744.group.iteration = (73728, 576)
op744.sizes = ([4608, 16], [576])
buf742_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf744_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op744_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf742', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg496_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf743', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf744', get_index_3, reduction)
        return store_reduction


op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 42467328}, None)]
op745.unmet_dependencies = 
    [   MemoryDep('buf742', c0, {c0: 42467328}, None),
        MemoryDep('buf743', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf744', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op745.met_dependencies = [MemoryDep('arg496_1', c1, {c0: 2654208, c1: 16}, None)]
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf745.users = [NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False)]
]
op745.group.device = cuda:0
op745.group.iteration = (42467328, 1)
op745.sizes = ([4608, 576, 16], [])
buf742_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf744_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op745_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf742', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg496_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf743', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf744', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf745', get_index_4, truediv, None)
        return store


op746: ExternKernelSchedulerNode(ExternKernelOut)
op746.writes = [StarDep(name='buf746', mode=None)]
op746.unmet_dependencies = [StarDep(name='buf745', mode=None)]
op746.met_dependencies = [StarDep(name='arg497_1', mode=None)]
op746.outputs = [
    buf746: ExternKernelOut
    buf746.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf746.users = [NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op746.node.kernel = extern_kernels.mm


op747: SchedulerNode(ComputedBuffer)
op747.writes = [MemoryDep('buf747', c0, {c0: 42467328}, None)]
op747.unmet_dependencies = [   MemoryDep('buf746', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op747.met_dependencies = [MemoryDep('arg498_1', c1, {c0: 8, c1: 16}, None)]
op747.outputs = [
    buf747: ComputedBuffer
    buf747.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf747.users = [NodeUser(node=ExternKernelSchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op747.group.device = cuda:0
op747.group.iteration = (42467328, 1)
op747.sizes = ([8, 16, 331776], [])
buf746_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op747_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg498_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf747', get_index_2, add, None)
        return store


op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 3538944}, None)]
op748.unmet_dependencies = [   MemoryDep('buf737', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op748.met_dependencies = [   MemoryDep('arg494_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf748.users = [NodeUser(node=ExternKernelSchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (3538944, 1)
op748.sizes = ([8, 16, 576, 48], [])
buf737_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op748_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg494_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf748', get_index_2, add, None)
        return store


op749: ExternKernelSchedulerNode(ExternKernelOut)
op749.writes = [StarDep(name='buf749', mode=None)]
op749.unmet_dependencies = [StarDep(name='buf747', mode=None), StarDep(name='buf748', mode=None)]
op749.met_dependencies = []
op749.outputs = [
    buf749: ExternKernelOut
    buf749.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf749.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False)]
]
op749.node.kernel = extern_kernels.bmm


op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 3538944}, None)]
op750.unmet_dependencies = [   MemoryDep('buf749', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op750.met_dependencies = []
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf750.users = [NodeUser(node=ExternKernelSchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (3538944, 1)
op750.sizes = ([8, 576, 16, 48], [])
buf749_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op750_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf750', get_index_1, load, None)
        return store


op751: ExternKernelSchedulerNode(ExternKernelOut)
op751.writes = [StarDep(name='buf751', mode=None)]
op751.unmet_dependencies = [StarDep(name='buf750', mode=None)]
op751.met_dependencies = [StarDep(name='arg499_1', mode=None)]
op751.outputs = [
    buf751: ExternKernelOut
    buf751.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf751.users = [NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False)]
]
op751.node.kernel = extern_kernels.mm


op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 3538944}, None)]
op752.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 3538944}, None),
        MemoryDep('buf732', c0, {c0: 3538944}, None),
        MemoryDep('buf751', c0, {c0: 3538944}, None)]
op752.met_dependencies = 
    [   MemoryDep('arg483_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg489_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg490_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg500_1', c1, {c0: 4608, c1: 768}, None)]
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf752.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False),
    ]
]
op752.group.device = cuda:0
op752.group.iteration = (3538944, 1)
op752.sizes = ([4608, 768], [])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op752_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg483_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf732', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg490_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf751', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg500_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf752', get_index_7, add_3, None)
        return store


op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 4608}, None)]
op753.unmet_dependencies = [MemoryDep('buf752', c0, {c0: 3538944}, None)]
op753.met_dependencies = []
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf753.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (4608, 768)
op753.sizes = ([4608], [768])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op753_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf753', get_index_1, getitem)
        return store_reduction


op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 4608}, None)]
op754.unmet_dependencies = [MemoryDep('buf752', c0, {c0: 3538944}, None)]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf754.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op754.group.device = cuda:0
op754.group.iteration = (4608, 768)
op754.sizes = ([4608], [768])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op754_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf754', get_index_1, getitem_1)
        return store_reduction


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 3538944}, None)]
op756.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 3538944}, None),
        MemoryDep('buf753', c0, {c0: 4608}, None),
        MemoryDep('buf754', c0, {c0: 4608}, None)]
op756.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg503_1', c1, {c0: 4608, c1: 768}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (3538944, 1)
op756.sizes = ([4608, 768], [])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf754_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf756_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op756_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf753', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf754', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg502_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg503_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf756', get_index_5, add_1, None)
        return store


op757: ExternKernelSchedulerNode(ExternKernelOut)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = [StarDep(name='buf756', mode=None)]
op757.met_dependencies = [StarDep(name='arg504_1', mode=None)]
op757.outputs = [
    buf757: ExternKernelOut
    buf757.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op757.node.kernel = extern_kernels.mm


op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 14155776}, None)]
op758.unmet_dependencies = [MemoryDep('buf757', c0, {c0: 14155776}, None)]
op758.met_dependencies = [MemoryDep('arg505_1', c1, {c0: 4608, c1: 3072}, None)]
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf758.users = [NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False)]
]
op758.group.device = cuda:0
op758.group.iteration = (14155776, 1)
op758.sizes = ([4608, 3072], [])
buf757_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op758_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg505_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf757', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg505_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf758', get_index_4, mul_2, None)
        return store


op759: ExternKernelSchedulerNode(ExternKernelOut)
op759.writes = [StarDep(name='buf759', mode=None)]
op759.unmet_dependencies = [StarDep(name='buf758', mode=None)]
op759.met_dependencies = [StarDep(name='arg506_1', mode=None)]
op759.outputs = [
    buf759: ExternKernelOut
    buf759.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf759.users = [
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False),
    ]
]
op759.node.kernel = extern_kernels.mm


op760: SchedulerNode(ComputedBuffer)
op760.writes = [MemoryDep('buf760', c0, {c0: 4608}, None)]
op760.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 3538944}, None),
        MemoryDep('buf759', c0, {c0: 3538944}, None)]
op760.met_dependencies = 
    [   MemoryDep('arg501_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg507_1', c1, {c0: 4608, c1: 768}, None)]
op760.outputs = [
    buf760: ComputedBuffer
    buf760.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf760.users = [NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op760.group.device = cuda:0
op760.group.iteration = (4608, 768)
op760.sizes = ([4608], [768])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op760_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg501_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf759', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg507_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf760', get_index_4, getitem)
        return store_reduction


op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 4608}, None)]
op761.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 3538944}, None),
        MemoryDep('buf759', c0, {c0: 3538944}, None)]
op761.met_dependencies = 
    [   MemoryDep('arg501_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg507_1', c1, {c0: 4608, c1: 768}, None)]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf761.users = [NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op761.group.device = cuda:0
op761.group.iteration = (4608, 768)
op761.sizes = ([4608], [768])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op761_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg501_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf759', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg507_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf761', get_index_4, getitem_1)
        return store_reduction


op763: SchedulerNode(ComputedBuffer)
op763.writes = [MemoryDep('buf763', c0, {c0: 3538944}, None)]
op763.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 3538944}, None),
        MemoryDep('buf759', c0, {c0: 3538944}, None),
        MemoryDep('buf760', c0, {c0: 4608}, None),
        MemoryDep('buf761', c0, {c0: 4608}, None)]
op763.met_dependencies = 
    [   MemoryDep('arg501_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg507_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg509_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg510_1', c1, {c0: 4608, c1: 768}, None)]
op763.outputs = [
    buf763: ComputedBuffer
    buf763.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf763.users = [NodeUser(node=ExternKernelSchedulerNode(name='op764'), can_inplace=False, is_weak=False)]
]
op763.group.device = cuda:0
op763.group.iteration = (3538944, 1)
op763.sizes = ([4608, 768], [])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op763_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg501_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf759', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg507_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf760', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf761', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg509_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg510_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf763', get_index_8, add_3, None)
        return store


op764: ExternKernelSchedulerNode(ExternKernelOut)
op764.writes = [StarDep(name='buf764', mode=None)]
op764.unmet_dependencies = [StarDep(name='buf763', mode=None)]
op764.met_dependencies = [StarDep(name='arg511_1', mode=None)]
op764.outputs = [
    buf764: ExternKernelOut
    buf764.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf764.users = [
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
    ]
]
op764.node.kernel = extern_kernels.mm


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 3538944}, None)]
op765.unmet_dependencies = [   MemoryDep('buf764', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op765.met_dependencies = [MemoryDep('arg512_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf765.users = [NodeUser(node=ExternKernelSchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op765.group.device = cuda:0
op765.group.iteration = (3538944, 1)
op765.sizes = ([8, 16, 576, 48], [])
buf764_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op765_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf764', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf765', get_index_2, mul, None)
        return store


op766: SchedulerNode(ComputedBuffer)
op766.writes = [MemoryDep('buf766', c0, {c0: 3538944}, None)]
op766.unmet_dependencies = [   MemoryDep('buf764', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op766.met_dependencies = [MemoryDep('arg512_1', c1 + 768, {c0: 8, c1: 768}, None)]
op766.outputs = [
    buf766: ComputedBuffer
    buf766.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf766.users = [NodeUser(node=ExternKernelSchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op766.group.device = cuda:0
op766.group.iteration = (3538944, 1)
op766.sizes = ([8, 768, 576], [])
buf764_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf766_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op766_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf764', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf766', get_index_2, add, None)
        return store


op767: ExternKernelSchedulerNode(ExternKernelOut)
op767.writes = [StarDep(name='buf767', mode=None)]
op767.unmet_dependencies = [StarDep(name='buf765', mode=None), StarDep(name='buf766', mode=None)]
op767.met_dependencies = []
op767.outputs = [
    buf767: ExternKernelOut
    buf767.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf767.users = [NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False)]
]
op767.node.kernel = extern_kernels.bmm


op768: SchedulerNode(ComputedBuffer)
op768.writes = [MemoryDep('buf768', c0, {c0: 42467328}, None)]
op768.unmet_dependencies = [   MemoryDep('buf767', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op768.met_dependencies = []
op768.outputs = [
    buf768: ComputedBuffer
    buf768.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf768.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op768.group.device = cuda:0
op768.group.iteration = (42467328, 1)
op768.sizes = ([8, 331776, 16], [])
buf767_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf768_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op768_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf768', get_index_1, load, None)
        return store


op769: ExternKernelSchedulerNode(ExternKernelOut)
op769.writes = [StarDep(name='buf769', mode=None)]
op769.unmet_dependencies = [StarDep(name='buf768', mode=None)]
op769.met_dependencies = [StarDep(name='arg513_1', mode=None)]
op769.outputs = [
    buf769: ExternKernelOut
    buf769.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf769.users = [
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=True, is_weak=False),
    ]
]
op769.node.kernel = extern_kernels.mm


op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 73728}, None)]
op770.unmet_dependencies = [MemoryDep('buf769', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op770.met_dependencies = [MemoryDep('arg514_1', c1, {c0: 4608, c1: 16}, None)]
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf770.users = [
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
    ]
]
op770.group.device = cuda:0
op770.group.iteration = (73728, 576)
op770.sizes = ([4608, 16], [576])
buf769_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op770_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg514_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf770', get_index_2, reduction)
        return store_reduction


op771: SchedulerNode(ComputedBuffer)
op771.writes = [MemoryDep('buf771', c0, {c0: 73728}, None)]
op771.unmet_dependencies = 
    [   MemoryDep('buf769', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf770', c0, {c0: 73728}, None)]
op771.met_dependencies = [MemoryDep('arg514_1', c1, {c0: 4608, c1: 16}, None)]
op771.outputs = [
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf771.users = [NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False)]
]
op771.group.device = cuda:0
op771.group.iteration = (73728, 576)
op771.sizes = ([4608, 16], [576])
buf769_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op771_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg514_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf770', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf771', get_index_3, reduction)
        return store_reduction


op772: SchedulerNode(ComputedBuffer)
op772.writes = [MemoryDep('buf772', c0, {c0: 42467328}, None)]
op772.unmet_dependencies = 
    [   MemoryDep('buf769', c0, {c0: 42467328}, None),
        MemoryDep('buf770', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf771', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op772.met_dependencies = [MemoryDep('arg514_1', c1, {c0: 2654208, c1: 16}, None)]
op772.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf772.users = [NodeUser(node=ExternKernelSchedulerNode(name='op773'), can_inplace=False, is_weak=False)]
]
op772.group.device = cuda:0
op772.group.iteration = (42467328, 1)
op772.sizes = ([4608, 576, 16], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf772_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op772_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg514_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf770', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf771', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf772', get_index_4, truediv, None)
        return store


op773: ExternKernelSchedulerNode(ExternKernelOut)
op773.writes = [StarDep(name='buf773', mode=None)]
op773.unmet_dependencies = [StarDep(name='buf772', mode=None)]
op773.met_dependencies = [StarDep(name='arg515_1', mode=None)]
op773.outputs = [
    buf773: ExternKernelOut
    buf773.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf773.users = [NodeUser(node=SchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op773.node.kernel = extern_kernels.mm


op774: SchedulerNode(ComputedBuffer)
op774.writes = [MemoryDep('buf774', c0, {c0: 42467328}, None)]
op774.unmet_dependencies = [   MemoryDep('buf773', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op774.met_dependencies = [MemoryDep('arg516_1', c1, {c0: 8, c1: 16}, None)]
op774.outputs = [
    buf774: ComputedBuffer
    buf774.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf774.users = [NodeUser(node=ExternKernelSchedulerNode(name='op776'), can_inplace=False, is_weak=False)]
]
op774.group.device = cuda:0
op774.group.iteration = (42467328, 1)
op774.sizes = ([8, 16, 331776], [])
buf773_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op774_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf773', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg516_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf774', get_index_2, add, None)
        return store


op775: SchedulerNode(ComputedBuffer)
op775.writes = [MemoryDep('buf775', c0, {c0: 3538944}, None)]
op775.unmet_dependencies = [   MemoryDep('buf764', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op775.met_dependencies = [   MemoryDep('arg512_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op775.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf775.users = [NodeUser(node=ExternKernelSchedulerNode(name='op776'), can_inplace=False, is_weak=False)]
]
op775.group.device = cuda:0
op775.group.iteration = (3538944, 1)
op775.sizes = ([8, 16, 576, 48], [])
buf764_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op775_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf764', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf775', get_index_2, add, None)
        return store


op776: ExternKernelSchedulerNode(ExternKernelOut)
op776.writes = [StarDep(name='buf776', mode=None)]
op776.unmet_dependencies = [StarDep(name='buf774', mode=None), StarDep(name='buf775', mode=None)]
op776.met_dependencies = []
op776.outputs = [
    buf776: ExternKernelOut
    buf776.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf776.users = [NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False)]
]
op776.node.kernel = extern_kernels.bmm


op777: SchedulerNode(ComputedBuffer)
op777.writes = [MemoryDep('buf777', c0, {c0: 3538944}, None)]
op777.unmet_dependencies = [   MemoryDep('buf776', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op777.met_dependencies = []
op777.outputs = [
    buf777: ComputedBuffer
    buf777.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf777.users = [NodeUser(node=ExternKernelSchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op777.group.device = cuda:0
op777.group.iteration = (3538944, 1)
op777.sizes = ([8, 576, 16, 48], [])
buf776_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf777_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op777_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf776', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf777', get_index_1, load, None)
        return store


op778: ExternKernelSchedulerNode(ExternKernelOut)
op778.writes = [StarDep(name='buf778', mode=None)]
op778.unmet_dependencies = [StarDep(name='buf777', mode=None)]
op778.met_dependencies = [StarDep(name='arg517_1', mode=None)]
op778.outputs = [
    buf778: ExternKernelOut
    buf778.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf778.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False)]
]
op778.node.kernel = extern_kernels.mm


op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 3538944}, None)]
op779.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 3538944}, None),
        MemoryDep('buf759', c0, {c0: 3538944}, None),
        MemoryDep('buf778', c0, {c0: 3538944}, None)]
op779.met_dependencies = 
    [   MemoryDep('arg501_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg507_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg508_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg518_1', c1, {c0: 4608, c1: 768}, None)]
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf779.users = [
        NodeUser(node=SchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False),
    ]
]
op779.group.device = cuda:0
op779.group.iteration = (3538944, 1)
op779.sizes = ([4608, 768], [])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf778_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op779_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf752', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg501_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf759', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg507_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg508_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf778', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg518_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf779', get_index_7, add_3, None)
        return store


op780: SchedulerNode(ComputedBuffer)
op780.writes = [MemoryDep('buf780', c0, {c0: 4608}, None)]
op780.unmet_dependencies = [MemoryDep('buf779', c0, {c0: 3538944}, None)]
op780.met_dependencies = []
op780.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf780.users = [NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False)]
]
op780.group.device = cuda:0
op780.group.iteration = (4608, 768)
op780.sizes = ([4608], [768])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op780_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf780', get_index_1, getitem)
        return store_reduction


op781: SchedulerNode(ComputedBuffer)
op781.writes = [MemoryDep('buf781', c0, {c0: 4608}, None)]
op781.unmet_dependencies = [MemoryDep('buf779', c0, {c0: 3538944}, None)]
op781.met_dependencies = []
op781.outputs = [
    buf781: ComputedBuffer
    buf781.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf781.users = [NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False)]
]
op781.group.device = cuda:0
op781.group.iteration = (4608, 768)
op781.sizes = ([4608], [768])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op781_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf781', get_index_1, getitem_1)
        return store_reduction


op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 3538944}, None)]
op783.unmet_dependencies = 
    [   MemoryDep('buf779', c0, {c0: 3538944}, None),
        MemoryDep('buf780', c0, {c0: 4608}, None),
        MemoryDep('buf781', c0, {c0: 4608}, None)]
op783.met_dependencies = 
    [   MemoryDep('arg520_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg521_1', c1, {c0: 4608, c1: 768}, None)]
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf783.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op783.group.device = cuda:0
op783.group.iteration = (3538944, 1)
op783.sizes = ([4608, 768], [])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg521_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op783_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf780', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf781', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg520_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg521_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf783', get_index_5, add_1, None)
        return store


op784: ExternKernelSchedulerNode(ExternKernelOut)
op784.writes = [StarDep(name='buf784', mode=None)]
op784.unmet_dependencies = [StarDep(name='buf783', mode=None)]
op784.met_dependencies = [StarDep(name='arg522_1', mode=None)]
op784.outputs = [
    buf784: ExternKernelOut
    buf784.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf784.users = [NodeUser(node=SchedulerNode(name='op785'), can_inplace=True, is_weak=False)]
]
op784.node.kernel = extern_kernels.mm


op785: SchedulerNode(ComputedBuffer)
op785.writes = [MemoryDep('buf785', c0, {c0: 14155776}, None)]
op785.unmet_dependencies = [MemoryDep('buf784', c0, {c0: 14155776}, None)]
op785.met_dependencies = [MemoryDep('arg523_1', c1, {c0: 4608, c1: 3072}, None)]
op785.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf785.users = [NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op785.group.device = cuda:0
op785.group.iteration = (14155776, 1)
op785.sizes = ([4608, 3072], [])
buf784_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op785_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf784', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg523_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf784', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg523_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf785', get_index_4, mul_2, None)
        return store


op786: ExternKernelSchedulerNode(ExternKernelOut)
op786.writes = [StarDep(name='buf786', mode=None)]
op786.unmet_dependencies = [StarDep(name='buf785', mode=None)]
op786.met_dependencies = [StarDep(name='arg524_1', mode=None)]
op786.outputs = [
    buf786: ExternKernelOut
    buf786.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf786.users = [
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False),
    ]
]
op786.node.kernel = extern_kernels.mm


op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 4608}, None)]
op787.unmet_dependencies = 
    [   MemoryDep('buf779', c0, {c0: 3538944}, None),
        MemoryDep('buf786', c0, {c0: 3538944}, None)]
op787.met_dependencies = 
    [   MemoryDep('arg519_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg525_1', c1, {c0: 4608, c1: 768}, None)]
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf787.users = [NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op787.group.device = cuda:0
op787.group.iteration = (4608, 768)
op787.sizes = ([4608], [768])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op787_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg519_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf786', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg525_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf787', get_index_4, getitem)
        return store_reduction


op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', c0, {c0: 4608}, None)]
op788.unmet_dependencies = 
    [   MemoryDep('buf779', c0, {c0: 3538944}, None),
        MemoryDep('buf786', c0, {c0: 3538944}, None)]
op788.met_dependencies = 
    [   MemoryDep('arg519_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg525_1', c1, {c0: 4608, c1: 768}, None)]
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf788.users = [NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op788.group.device = cuda:0
op788.group.iteration = (4608, 768)
op788.sizes = ([4608], [768])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op788_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg519_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf786', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg525_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf788', get_index_4, getitem_1)
        return store_reduction


op790: SchedulerNode(ComputedBuffer)
op790.writes = [MemoryDep('buf790', c0, {c0: 3538944}, None)]
op790.unmet_dependencies = 
    [   MemoryDep('buf779', c0, {c0: 3538944}, None),
        MemoryDep('buf786', c0, {c0: 3538944}, None),
        MemoryDep('buf787', c0, {c0: 4608}, None),
        MemoryDep('buf788', c0, {c0: 4608}, None)]
op790.met_dependencies = 
    [   MemoryDep('arg519_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg525_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg527_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg528_1', c1, {c0: 4608, c1: 768}, None)]
op790.outputs = [
    buf790: ComputedBuffer
    buf790.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf790.users = [NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
]
op790.group.device = cuda:0
op790.group.iteration = (3538944, 1)
op790.sizes = ([4608, 768], [])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf788_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf790_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op790_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg519_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf786', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg525_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf787', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf788', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg527_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg528_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf790', get_index_8, add_3, None)
        return store


op791: ExternKernelSchedulerNode(ExternKernelOut)
op791.writes = [StarDep(name='buf791', mode=None)]
op791.unmet_dependencies = [StarDep(name='buf790', mode=None)]
op791.met_dependencies = [StarDep(name='arg529_1', mode=None)]
op791.outputs = [
    buf791: ExternKernelOut
    buf791.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf791.users = [
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=False, is_weak=False),
    ]
]
op791.node.kernel = extern_kernels.mm


op792: SchedulerNode(ComputedBuffer)
op792.writes = [MemoryDep('buf792', c0, {c0: 3538944}, None)]
op792.unmet_dependencies = [   MemoryDep('buf791', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op792.met_dependencies = [MemoryDep('arg530_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op792.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf792.users = [NodeUser(node=ExternKernelSchedulerNode(name='op794'), can_inplace=False, is_weak=False)]
]
op792.group.device = cuda:0
op792.group.iteration = (3538944, 1)
op792.sizes = ([8, 16, 576, 48], [])
buf791_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op792_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf791', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg530_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf792', get_index_2, mul, None)
        return store


op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 3538944}, None)]
op793.unmet_dependencies = [   MemoryDep('buf791', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op793.met_dependencies = [MemoryDep('arg530_1', c1 + 768, {c0: 8, c1: 768}, None)]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf793.users = [NodeUser(node=ExternKernelSchedulerNode(name='op794'), can_inplace=False, is_weak=False)]
]
op793.group.device = cuda:0
op793.group.iteration = (3538944, 1)
op793.sizes = ([8, 768, 576], [])
buf791_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op793_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf791', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg530_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf793', get_index_2, add, None)
        return store


op794: ExternKernelSchedulerNode(ExternKernelOut)
op794.writes = [StarDep(name='buf794', mode=None)]
op794.unmet_dependencies = [StarDep(name='buf792', mode=None), StarDep(name='buf793', mode=None)]
op794.met_dependencies = []
op794.outputs = [
    buf794: ExternKernelOut
    buf794.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf794.users = [NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
]
op794.node.kernel = extern_kernels.bmm


op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 42467328}, None)]
op795.unmet_dependencies = [   MemoryDep('buf794', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op795.met_dependencies = []
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf795.users = [NodeUser(node=ExternKernelSchedulerNode(name='op796'), can_inplace=False, is_weak=False)]
]
op795.group.device = cuda:0
op795.group.iteration = (42467328, 1)
op795.sizes = ([8, 331776, 16], [])
buf794_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op795_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf794', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf795', get_index_1, load, None)
        return store


op796: ExternKernelSchedulerNode(ExternKernelOut)
op796.writes = [StarDep(name='buf796', mode=None)]
op796.unmet_dependencies = [StarDep(name='buf795', mode=None)]
op796.met_dependencies = [StarDep(name='arg531_1', mode=None)]
op796.outputs = [
    buf796: ExternKernelOut
    buf796.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf796.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False),
    ]
]
op796.node.kernel = extern_kernels.mm


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 73728}, None)]
op797.unmet_dependencies = [MemoryDep('buf796', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op797.met_dependencies = [MemoryDep('arg532_1', c1, {c0: 4608, c1: 16}, None)]
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf797.users = [
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
]
op797.group.device = cuda:0
op797.group.iteration = (73728, 576)
op797.sizes = ([4608, 16], [576])
buf796_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op797_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf796', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg532_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf797', get_index_2, reduction)
        return store_reduction


op798: SchedulerNode(ComputedBuffer)
op798.writes = [MemoryDep('buf798', c0, {c0: 73728}, None)]
op798.unmet_dependencies = 
    [   MemoryDep('buf796', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf797', c0, {c0: 73728}, None)]
op798.met_dependencies = [MemoryDep('arg532_1', c1, {c0: 4608, c1: 16}, None)]
op798.outputs = [
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op798.group.device = cuda:0
op798.group.iteration = (73728, 576)
op798.sizes = ([4608, 16], [576])
buf796_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf798_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op798_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf796', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg532_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf797', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf798', get_index_3, reduction)
        return store_reduction


op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 42467328}, None)]
op799.unmet_dependencies = 
    [   MemoryDep('buf796', c0, {c0: 42467328}, None),
        MemoryDep('buf797', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf798', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op799.met_dependencies = [MemoryDep('arg532_1', c1, {c0: 2654208, c1: 16}, None)]
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf799.users = [NodeUser(node=ExternKernelSchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op799.group.device = cuda:0
op799.group.iteration = (42467328, 1)
op799.sizes = ([4608, 576, 16], [])
buf796_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf798_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf799_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op799_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf796', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg532_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf797', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf798', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf799', get_index_4, truediv, None)
        return store


op800: ExternKernelSchedulerNode(ExternKernelOut)
op800.writes = [StarDep(name='buf800', mode=None)]
op800.unmet_dependencies = [StarDep(name='buf799', mode=None)]
op800.met_dependencies = [StarDep(name='arg533_1', mode=None)]
op800.outputs = [
    buf800: ExternKernelOut
    buf800.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf800.users = [NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False)]
]
op800.node.kernel = extern_kernels.mm


op801: SchedulerNode(ComputedBuffer)
op801.writes = [MemoryDep('buf801', c0, {c0: 42467328}, None)]
op801.unmet_dependencies = [   MemoryDep('buf800', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op801.met_dependencies = [MemoryDep('arg534_1', c1, {c0: 8, c1: 16}, None)]
op801.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf801.users = [NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
]
op801.group.device = cuda:0
op801.group.iteration = (42467328, 1)
op801.sizes = ([8, 16, 331776], [])
buf800_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg534_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf801_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op801_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf800', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg534_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf801', get_index_2, add, None)
        return store


op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', c0, {c0: 3538944}, None)]
op802.unmet_dependencies = [   MemoryDep('buf791', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op802.met_dependencies = [   MemoryDep('arg530_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf802.users = [NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
]
op802.group.device = cuda:0
op802.group.iteration = (3538944, 1)
op802.sizes = ([8, 16, 576, 48], [])
buf791_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf802_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op802_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf791', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg530_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf802', get_index_2, add, None)
        return store


op803: ExternKernelSchedulerNode(ExternKernelOut)
op803.writes = [StarDep(name='buf803', mode=None)]
op803.unmet_dependencies = [StarDep(name='buf801', mode=None), StarDep(name='buf802', mode=None)]
op803.met_dependencies = []
op803.outputs = [
    buf803: ExternKernelOut
    buf803.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf803.users = [NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op803.node.kernel = extern_kernels.bmm


op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', c0, {c0: 3538944}, None)]
op804.unmet_dependencies = [   MemoryDep('buf803', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op804.met_dependencies = []
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf804.users = [NodeUser(node=ExternKernelSchedulerNode(name='op805'), can_inplace=False, is_weak=False)]
]
op804.group.device = cuda:0
op804.group.iteration = (3538944, 1)
op804.sizes = ([8, 576, 16, 48], [])
buf803_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op804_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf804', get_index_1, load, None)
        return store


op805: ExternKernelSchedulerNode(ExternKernelOut)
op805.writes = [StarDep(name='buf805', mode=None)]
op805.unmet_dependencies = [StarDep(name='buf804', mode=None)]
op805.met_dependencies = [StarDep(name='arg535_1', mode=None)]
op805.outputs = [
    buf805: ExternKernelOut
    buf805.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf805.users = [NodeUser(node=SchedulerNode(name='op806'), can_inplace=True, is_weak=False)]
]
op805.node.kernel = extern_kernels.mm


op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', c0, {c0: 3538944}, None)]
op806.unmet_dependencies = 
    [   MemoryDep('buf779', c0, {c0: 3538944}, None),
        MemoryDep('buf786', c0, {c0: 3538944}, None),
        MemoryDep('buf805', c0, {c0: 3538944}, None)]
op806.met_dependencies = 
    [   MemoryDep('arg519_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg525_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg526_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg536_1', c1, {c0: 4608, c1: 768}, None)]
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf806.users = [
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op810'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op815'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op833'), can_inplace=True, is_weak=False),
    ]
]
op806.group.device = cuda:0
op806.group.iteration = (3538944, 1)
op806.sizes = ([4608, 768], [])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg526_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf805_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op806_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg519_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf786', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg525_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg526_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf805', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg536_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf806', get_index_7, add_3, None)
        return store


op807: SchedulerNode(ComputedBuffer)
op807.writes = [MemoryDep('buf807', c0, {c0: 4608}, None)]
op807.unmet_dependencies = [MemoryDep('buf806', c0, {c0: 3538944}, None)]
op807.met_dependencies = []
op807.outputs = [
    buf807: ComputedBuffer
    buf807.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf807.users = [NodeUser(node=SchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op807.group.device = cuda:0
op807.group.iteration = (4608, 768)
op807.sizes = ([4608], [768])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op807_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf807', get_index_1, getitem)
        return store_reduction


op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 4608}, None)]
op808.unmet_dependencies = [MemoryDep('buf806', c0, {c0: 3538944}, None)]
op808.met_dependencies = []
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf808.users = [NodeUser(node=SchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op808.group.device = cuda:0
op808.group.iteration = (4608, 768)
op808.sizes = ([4608], [768])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf808_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op808_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf808', get_index_1, getitem_1)
        return store_reduction


op810: SchedulerNode(ComputedBuffer)
op810.writes = [MemoryDep('buf810', c0, {c0: 3538944}, None)]
op810.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 3538944}, None),
        MemoryDep('buf807', c0, {c0: 4608}, None),
        MemoryDep('buf808', c0, {c0: 4608}, None)]
op810.met_dependencies = 
    [   MemoryDep('arg538_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg539_1', c1, {c0: 4608, c1: 768}, None)]
op810.outputs = [
    buf810: ComputedBuffer
    buf810.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf810.users = [NodeUser(node=ExternKernelSchedulerNode(name='op811'), can_inplace=False, is_weak=False)]
]
op810.group.device = cuda:0
op810.group.iteration = (3538944, 1)
op810.sizes = ([4608, 768], [])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf807_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf808_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg538_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg539_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf810_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op810_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf807', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf808', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg538_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg539_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf810', get_index_5, add_1, None)
        return store


op811: ExternKernelSchedulerNode(ExternKernelOut)
op811.writes = [StarDep(name='buf811', mode=None)]
op811.unmet_dependencies = [StarDep(name='buf810', mode=None)]
op811.met_dependencies = [StarDep(name='arg540_1', mode=None)]
op811.outputs = [
    buf811: ExternKernelOut
    buf811.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf811.users = [NodeUser(node=SchedulerNode(name='op812'), can_inplace=True, is_weak=False)]
]
op811.node.kernel = extern_kernels.mm


op812: SchedulerNode(ComputedBuffer)
op812.writes = [MemoryDep('buf812', c0, {c0: 14155776}, None)]
op812.unmet_dependencies = [MemoryDep('buf811', c0, {c0: 14155776}, None)]
op812.met_dependencies = [MemoryDep('arg541_1', c1, {c0: 4608, c1: 3072}, None)]
op812.outputs = [
    buf812: ComputedBuffer
    buf812.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf812.users = [NodeUser(node=ExternKernelSchedulerNode(name='op813'), can_inplace=False, is_weak=False)]
]
op812.group.device = cuda:0
op812.group.iteration = (14155776, 1)
op812.sizes = ([4608, 3072], [])
buf811_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf812_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op812_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf811', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg541_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf811', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg541_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf812', get_index_4, mul_2, None)
        return store


op813: ExternKernelSchedulerNode(ExternKernelOut)
op813.writes = [StarDep(name='buf813', mode=None)]
op813.unmet_dependencies = [StarDep(name='buf812', mode=None)]
op813.met_dependencies = [StarDep(name='arg542_1', mode=None)]
op813.outputs = [
    buf813: ExternKernelOut
    buf813.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf813.users = [
        NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op815'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op833'), can_inplace=True, is_weak=False),
    ]
]
op813.node.kernel = extern_kernels.mm


op814: SchedulerNode(ComputedBuffer)
op814.writes = [MemoryDep('buf814', c0, {c0: 4608}, None)]
op814.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 3538944}, None),
        MemoryDep('buf813', c0, {c0: 3538944}, None)]
op814.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg543_1', c1, {c0: 4608, c1: 768}, None)]
op814.outputs = [
    buf814: ComputedBuffer
    buf814.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf814.users = [NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False)]
]
op814.group.device = cuda:0
op814.group.iteration = (4608, 768)
op814.sizes = ([4608], [768])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf814_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op814_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf813', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg543_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf814', get_index_4, getitem)
        return store_reduction


op815: SchedulerNode(ComputedBuffer)
op815.writes = [MemoryDep('buf815', c0, {c0: 4608}, None)]
op815.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 3538944}, None),
        MemoryDep('buf813', c0, {c0: 3538944}, None)]
op815.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg543_1', c1, {c0: 4608, c1: 768}, None)]
op815.outputs = [
    buf815: ComputedBuffer
    buf815.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf815.users = [NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False)]
]
op815.group.device = cuda:0
op815.group.iteration = (4608, 768)
op815.sizes = ([4608], [768])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf815_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op815_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf813', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg543_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf815', get_index_4, getitem_1)
        return store_reduction


op817: SchedulerNode(ComputedBuffer)
op817.writes = [MemoryDep('buf817', c0, {c0: 3538944}, None)]
op817.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 3538944}, None),
        MemoryDep('buf813', c0, {c0: 3538944}, None),
        MemoryDep('buf814', c0, {c0: 4608}, None),
        MemoryDep('buf815', c0, {c0: 4608}, None)]
op817.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg543_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg545_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg546_1', c1, {c0: 4608, c1: 768}, None)]
op817.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf817.users = [NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False)]
]
op817.group.device = cuda:0
op817.group.iteration = (3538944, 1)
op817.sizes = ([4608, 768], [])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf814_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf815_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg545_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf817_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op817_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf813', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg543_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf814', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf815', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg545_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg546_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf817', get_index_8, add_3, None)
        return store


op818: ExternKernelSchedulerNode(ExternKernelOut)
op818.writes = [StarDep(name='buf818', mode=None)]
op818.unmet_dependencies = [StarDep(name='buf817', mode=None)]
op818.met_dependencies = [StarDep(name='arg547_1', mode=None)]
op818.outputs = [
    buf818: ExternKernelOut
    buf818.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf818.users = [
        NodeUser(node=SchedulerNode(name='op819'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op820'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op829'), can_inplace=False, is_weak=False),
    ]
]
op818.node.kernel = extern_kernels.mm


op819: SchedulerNode(ComputedBuffer)
op819.writes = [MemoryDep('buf819', c0, {c0: 3538944}, None)]
op819.unmet_dependencies = [   MemoryDep('buf818', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op819.met_dependencies = [MemoryDep('arg548_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op819.outputs = [
    buf819: ComputedBuffer
    buf819.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf819.users = [NodeUser(node=ExternKernelSchedulerNode(name='op821'), can_inplace=False, is_weak=False)]
]
op819.group.device = cuda:0
op819.group.iteration = (3538944, 1)
op819.sizes = ([8, 16, 576, 48], [])
buf818_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf819_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op819_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg548_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf819', get_index_2, mul, None)
        return store


op820: SchedulerNode(ComputedBuffer)
op820.writes = [MemoryDep('buf820', c0, {c0: 3538944}, None)]
op820.unmet_dependencies = [   MemoryDep('buf818', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op820.met_dependencies = [MemoryDep('arg548_1', c1 + 768, {c0: 8, c1: 768}, None)]
op820.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf820.users = [NodeUser(node=ExternKernelSchedulerNode(name='op821'), can_inplace=False, is_weak=False)]
]
op820.group.device = cuda:0
op820.group.iteration = (3538944, 1)
op820.sizes = ([8, 768, 576], [])
buf818_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf820_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op820_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg548_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf820', get_index_2, add, None)
        return store


op821: ExternKernelSchedulerNode(ExternKernelOut)
op821.writes = [StarDep(name='buf821', mode=None)]
op821.unmet_dependencies = [StarDep(name='buf819', mode=None), StarDep(name='buf820', mode=None)]
op821.met_dependencies = []
op821.outputs = [
    buf821: ExternKernelOut
    buf821.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf821.users = [NodeUser(node=SchedulerNode(name='op822'), can_inplace=False, is_weak=False)]
]
op821.node.kernel = extern_kernels.bmm


op822: SchedulerNode(ComputedBuffer)
op822.writes = [MemoryDep('buf822', c0, {c0: 42467328}, None)]
op822.unmet_dependencies = [   MemoryDep('buf821', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op822.met_dependencies = []
op822.outputs = [
    buf822: ComputedBuffer
    buf822.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf822.users = [NodeUser(node=ExternKernelSchedulerNode(name='op823'), can_inplace=False, is_weak=False)]
]
op822.group.device = cuda:0
op822.group.iteration = (42467328, 1)
op822.sizes = ([8, 331776, 16], [])
buf821_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf822_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op822_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf821', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf822', get_index_1, load, None)
        return store


op823: ExternKernelSchedulerNode(ExternKernelOut)
op823.writes = [StarDep(name='buf823', mode=None)]
op823.unmet_dependencies = [StarDep(name='buf822', mode=None)]
op823.met_dependencies = [StarDep(name='arg549_1', mode=None)]
op823.outputs = [
    buf823: ExternKernelOut
    buf823.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf823.users = [
        NodeUser(node=SchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op825'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op826'), can_inplace=True, is_weak=False),
    ]
]
op823.node.kernel = extern_kernels.mm


op824: SchedulerNode(ComputedBuffer)
op824.writes = [MemoryDep('buf824', c0, {c0: 73728}, None)]
op824.unmet_dependencies = [MemoryDep('buf823', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op824.met_dependencies = [MemoryDep('arg550_1', c1, {c0: 4608, c1: 16}, None)]
op824.outputs = [
    buf824: ComputedBuffer
    buf824.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf824.users = [
        NodeUser(node=SchedulerNode(name='op825'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op826'), can_inplace=False, is_weak=False),
    ]
]
op824.group.device = cuda:0
op824.group.iteration = (73728, 576)
op824.sizes = ([4608, 16], [576])
buf823_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf824_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op824_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf823', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg550_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf824', get_index_2, reduction)
        return store_reduction


op825: SchedulerNode(ComputedBuffer)
op825.writes = [MemoryDep('buf825', c0, {c0: 73728}, None)]
op825.unmet_dependencies = 
    [   MemoryDep('buf823', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf824', c0, {c0: 73728}, None)]
op825.met_dependencies = [MemoryDep('arg550_1', c1, {c0: 4608, c1: 16}, None)]
op825.outputs = [
    buf825: ComputedBuffer
    buf825.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf825.users = [NodeUser(node=SchedulerNode(name='op826'), can_inplace=False, is_weak=False)]
]
op825.group.device = cuda:0
op825.group.iteration = (73728, 576)
op825.sizes = ([4608, 16], [576])
buf823_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf824_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf825_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op825_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf823', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg550_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf824', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf825', get_index_3, reduction)
        return store_reduction


op826: SchedulerNode(ComputedBuffer)
op826.writes = [MemoryDep('buf826', c0, {c0: 42467328}, None)]
op826.unmet_dependencies = 
    [   MemoryDep('buf823', c0, {c0: 42467328}, None),
        MemoryDep('buf824', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf825', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op826.met_dependencies = [MemoryDep('arg550_1', c1, {c0: 2654208, c1: 16}, None)]
op826.outputs = [
    buf826: ComputedBuffer
    buf826.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf826.users = [NodeUser(node=ExternKernelSchedulerNode(name='op827'), can_inplace=False, is_weak=False)]
]
op826.group.device = cuda:0
op826.group.iteration = (42467328, 1)
op826.sizes = ([4608, 576, 16], [])
buf823_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf824_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf825_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf826_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op826_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf823', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg550_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf824', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf825', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf826', get_index_4, truediv, None)
        return store


op827: ExternKernelSchedulerNode(ExternKernelOut)
op827.writes = [StarDep(name='buf827', mode=None)]
op827.unmet_dependencies = [StarDep(name='buf826', mode=None)]
op827.met_dependencies = [StarDep(name='arg551_1', mode=None)]
op827.outputs = [
    buf827: ExternKernelOut
    buf827.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf827.users = [NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False)]
]
op827.node.kernel = extern_kernels.mm


op828: SchedulerNode(ComputedBuffer)
op828.writes = [MemoryDep('buf828', c0, {c0: 42467328}, None)]
op828.unmet_dependencies = [   MemoryDep('buf827', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op828.met_dependencies = [MemoryDep('arg552_1', c1, {c0: 8, c1: 16}, None)]
op828.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf828.users = [NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False)]
]
op828.group.device = cuda:0
op828.group.iteration = (42467328, 1)
op828.sizes = ([8, 16, 331776], [])
buf827_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf828_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op828_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf827', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg552_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf828', get_index_2, add, None)
        return store


op829: SchedulerNode(ComputedBuffer)
op829.writes = [MemoryDep('buf829', c0, {c0: 3538944}, None)]
op829.unmet_dependencies = [   MemoryDep('buf818', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op829.met_dependencies = [   MemoryDep('arg548_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op829.outputs = [
    buf829: ComputedBuffer
    buf829.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf829.users = [NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False)]
]
op829.group.device = cuda:0
op829.group.iteration = (3538944, 1)
op829.sizes = ([8, 16, 576, 48], [])
buf818_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf829_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op829_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg548_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf829', get_index_2, add, None)
        return store


op830: ExternKernelSchedulerNode(ExternKernelOut)
op830.writes = [StarDep(name='buf830', mode=None)]
op830.unmet_dependencies = [StarDep(name='buf828', mode=None), StarDep(name='buf829', mode=None)]
op830.met_dependencies = []
op830.outputs = [
    buf830: ExternKernelOut
    buf830.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf830.users = [NodeUser(node=SchedulerNode(name='op831'), can_inplace=False, is_weak=False)]
]
op830.node.kernel = extern_kernels.bmm


op831: SchedulerNode(ComputedBuffer)
op831.writes = [MemoryDep('buf831', c0, {c0: 3538944}, None)]
op831.unmet_dependencies = [   MemoryDep('buf830', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op831.met_dependencies = []
op831.outputs = [
    buf831: ComputedBuffer
    buf831.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf831.users = [NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False)]
]
op831.group.device = cuda:0
op831.group.iteration = (3538944, 1)
op831.sizes = ([8, 576, 16, 48], [])
buf830_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf831_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op831_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf830', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf831', get_index_1, load, None)
        return store


op832: ExternKernelSchedulerNode(ExternKernelOut)
op832.writes = [StarDep(name='buf832', mode=None)]
op832.unmet_dependencies = [StarDep(name='buf831', mode=None)]
op832.met_dependencies = [StarDep(name='arg553_1', mode=None)]
op832.outputs = [
    buf832: ExternKernelOut
    buf832.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf832.users = [NodeUser(node=SchedulerNode(name='op833'), can_inplace=True, is_weak=False)]
]
op832.node.kernel = extern_kernels.mm


op833: SchedulerNode(ComputedBuffer)
op833.writes = [MemoryDep('buf833', c0, {c0: 3538944}, None)]
op833.unmet_dependencies = 
    [   MemoryDep('buf806', c0, {c0: 3538944}, None),
        MemoryDep('buf813', c0, {c0: 3538944}, None),
        MemoryDep('buf832', c0, {c0: 3538944}, None)]
op833.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg543_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg544_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg554_1', c1, {c0: 4608, c1: 768}, None)]
op833.outputs = [
    buf833: ComputedBuffer
    buf833.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf833.users = [
        NodeUser(node=SchedulerNode(name='op834'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op835'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op836'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op837'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op841'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op843'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op844'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=True, is_weak=False),
    ]
]
op833.group.device = cuda:0
op833.group.iteration = (3538944, 1)
op833.sizes = ([4608, 768], [])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf813_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg544_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf832_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op833_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf806', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf813', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg543_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg544_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf832', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg554_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf833', get_index_7, add_3, None)
        return store


op834: SchedulerNode(ComputedBuffer)
op834.writes = [MemoryDep('buf834', c0, {c0: 4608}, None)]
op834.unmet_dependencies = [MemoryDep('buf833', c0, {c0: 3538944}, None)]
op834.met_dependencies = []
op834.outputs = [
    buf834: ComputedBuffer
    buf834.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf834.users = [NodeUser(node=SchedulerNode(name='op837'), can_inplace=False, is_weak=False)]
]
op834.group.device = cuda:0
op834.group.iteration = (4608, 768)
op834.sizes = ([4608], [768])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf834_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op834_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf834', get_index_1, getitem)
        return store_reduction


op835: SchedulerNode(ComputedBuffer)
op835.writes = [MemoryDep('buf835', c0, {c0: 4608}, None)]
op835.unmet_dependencies = [MemoryDep('buf833', c0, {c0: 3538944}, None)]
op835.met_dependencies = []
op835.outputs = [
    buf835: ComputedBuffer
    buf835.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf835.users = [NodeUser(node=SchedulerNode(name='op837'), can_inplace=False, is_weak=False)]
]
op835.group.device = cuda:0
op835.group.iteration = (4608, 768)
op835.sizes = ([4608], [768])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf835_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op835_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf835', get_index_1, getitem_1)
        return store_reduction


op837: SchedulerNode(ComputedBuffer)
op837.writes = [MemoryDep('buf837', c0, {c0: 3538944}, None)]
op837.unmet_dependencies = 
    [   MemoryDep('buf833', c0, {c0: 3538944}, None),
        MemoryDep('buf834', c0, {c0: 4608}, None),
        MemoryDep('buf835', c0, {c0: 4608}, None)]
op837.met_dependencies = 
    [   MemoryDep('arg556_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg557_1', c1, {c0: 4608, c1: 768}, None)]
op837.outputs = [
    buf837: ComputedBuffer
    buf837.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf837.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
]
op837.group.device = cuda:0
op837.group.iteration = (3538944, 1)
op837.sizes = ([4608, 768], [])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf834_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf835_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg556_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg557_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf837_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op837_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf834', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf835', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg556_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg557_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf837', get_index_5, add_1, None)
        return store


op838: ExternKernelSchedulerNode(ExternKernelOut)
op838.writes = [StarDep(name='buf838', mode=None)]
op838.unmet_dependencies = [StarDep(name='buf837', mode=None)]
op838.met_dependencies = [StarDep(name='arg558_1', mode=None)]
op838.outputs = [
    buf838: ExternKernelOut
    buf838.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf838.users = [NodeUser(node=SchedulerNode(name='op839'), can_inplace=True, is_weak=False)]
]
op838.node.kernel = extern_kernels.mm


op839: SchedulerNode(ComputedBuffer)
op839.writes = [MemoryDep('buf839', c0, {c0: 14155776}, None)]
op839.unmet_dependencies = [MemoryDep('buf838', c0, {c0: 14155776}, None)]
op839.met_dependencies = [MemoryDep('arg559_1', c1, {c0: 4608, c1: 3072}, None)]
op839.outputs = [
    buf839: ComputedBuffer
    buf839.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf839.users = [NodeUser(node=ExternKernelSchedulerNode(name='op840'), can_inplace=False, is_weak=False)]
]
op839.group.device = cuda:0
op839.group.iteration = (14155776, 1)
op839.sizes = ([4608, 3072], [])
buf838_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf839_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op839_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg559_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf838', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg559_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf839', get_index_4, mul_2, None)
        return store


op840: ExternKernelSchedulerNode(ExternKernelOut)
op840.writes = [StarDep(name='buf840', mode=None)]
op840.unmet_dependencies = [StarDep(name='buf839', mode=None)]
op840.met_dependencies = [StarDep(name='arg560_1', mode=None)]
op840.outputs = [
    buf840: ExternKernelOut
    buf840.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf840.users = [
        NodeUser(node=SchedulerNode(name='op841'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op843'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op844'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=True, is_weak=False),
    ]
]
op840.node.kernel = extern_kernels.mm


op841: SchedulerNode(ComputedBuffer)
op841.writes = [MemoryDep('buf841', c0, {c0: 4608}, None)]
op841.unmet_dependencies = 
    [   MemoryDep('buf833', c0, {c0: 3538944}, None),
        MemoryDep('buf840', c0, {c0: 3538944}, None)]
op841.met_dependencies = 
    [   MemoryDep('arg555_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg561_1', c1, {c0: 4608, c1: 768}, None)]
op841.outputs = [
    buf841: ComputedBuffer
    buf841.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf841.users = [NodeUser(node=SchedulerNode(name='op844'), can_inplace=False, is_weak=False)]
]
op841.group.device = cuda:0
op841.group.iteration = (4608, 768)
op841.sizes = ([4608], [768])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf840_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf841_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op841_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg555_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf840', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg561_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf841', get_index_4, getitem)
        return store_reduction


op842: SchedulerNode(ComputedBuffer)
op842.writes = [MemoryDep('buf842', c0, {c0: 4608}, None)]
op842.unmet_dependencies = 
    [   MemoryDep('buf833', c0, {c0: 3538944}, None),
        MemoryDep('buf840', c0, {c0: 3538944}, None)]
op842.met_dependencies = 
    [   MemoryDep('arg555_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg561_1', c1, {c0: 4608, c1: 768}, None)]
op842.outputs = [
    buf842: ComputedBuffer
    buf842.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf842.users = [NodeUser(node=SchedulerNode(name='op844'), can_inplace=False, is_weak=False)]
]
op842.group.device = cuda:0
op842.group.iteration = (4608, 768)
op842.sizes = ([4608], [768])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf840_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf842_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op842_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg555_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf840', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg561_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf842', get_index_4, getitem_1)
        return store_reduction


op844: SchedulerNode(ComputedBuffer)
op844.writes = [MemoryDep('buf844', c0, {c0: 3538944}, None)]
op844.unmet_dependencies = 
    [   MemoryDep('buf833', c0, {c0: 3538944}, None),
        MemoryDep('buf840', c0, {c0: 3538944}, None),
        MemoryDep('buf841', c0, {c0: 4608}, None),
        MemoryDep('buf842', c0, {c0: 4608}, None)]
op844.met_dependencies = 
    [   MemoryDep('arg555_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg561_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg563_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg564_1', c1, {c0: 4608, c1: 768}, None)]
op844.outputs = [
    buf844: ComputedBuffer
    buf844.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf844.users = [NodeUser(node=ExternKernelSchedulerNode(name='op845'), can_inplace=False, is_weak=False)]
]
op844.group.device = cuda:0
op844.group.iteration = (3538944, 1)
op844.sizes = ([4608, 768], [])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf840_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf841_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf842_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg563_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg564_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf844_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op844_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg555_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf840', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg561_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf841', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf842', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg563_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg564_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf844', get_index_8, add_3, None)
        return store


op845: ExternKernelSchedulerNode(ExternKernelOut)
op845.writes = [StarDep(name='buf845', mode=None)]
op845.unmet_dependencies = [StarDep(name='buf844', mode=None)]
op845.met_dependencies = [StarDep(name='arg565_1', mode=None)]
op845.outputs = [
    buf845: ExternKernelOut
    buf845.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf845.users = [
        NodeUser(node=SchedulerNode(name='op846'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op847'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op856'), can_inplace=False, is_weak=False),
    ]
]
op845.node.kernel = extern_kernels.mm


op846: SchedulerNode(ComputedBuffer)
op846.writes = [MemoryDep('buf846', c0, {c0: 3538944}, None)]
op846.unmet_dependencies = [   MemoryDep('buf845', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op846.met_dependencies = [MemoryDep('arg566_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op846.outputs = [
    buf846: ComputedBuffer
    buf846.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf846.users = [NodeUser(node=ExternKernelSchedulerNode(name='op848'), can_inplace=False, is_weak=False)]
]
op846.group.device = cuda:0
op846.group.iteration = (3538944, 1)
op846.sizes = ([8, 16, 576, 48], [])
buf845_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf846_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op846_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf845', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg566_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf846', get_index_2, mul, None)
        return store


op847: SchedulerNode(ComputedBuffer)
op847.writes = [MemoryDep('buf847', c0, {c0: 3538944}, None)]
op847.unmet_dependencies = [   MemoryDep('buf845', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op847.met_dependencies = [MemoryDep('arg566_1', c1 + 768, {c0: 8, c1: 768}, None)]
op847.outputs = [
    buf847: ComputedBuffer
    buf847.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf847.users = [NodeUser(node=ExternKernelSchedulerNode(name='op848'), can_inplace=False, is_weak=False)]
]
op847.group.device = cuda:0
op847.group.iteration = (3538944, 1)
op847.sizes = ([8, 768, 576], [])
buf845_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf847_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op847_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf845', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg566_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf847', get_index_2, add, None)
        return store


op848: ExternKernelSchedulerNode(ExternKernelOut)
op848.writes = [StarDep(name='buf848', mode=None)]
op848.unmet_dependencies = [StarDep(name='buf846', mode=None), StarDep(name='buf847', mode=None)]
op848.met_dependencies = []
op848.outputs = [
    buf848: ExternKernelOut
    buf848.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf848.users = [NodeUser(node=SchedulerNode(name='op849'), can_inplace=False, is_weak=False)]
]
op848.node.kernel = extern_kernels.bmm


op849: SchedulerNode(ComputedBuffer)
op849.writes = [MemoryDep('buf849', c0, {c0: 42467328}, None)]
op849.unmet_dependencies = [   MemoryDep('buf848', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op849.met_dependencies = []
op849.outputs = [
    buf849: ComputedBuffer
    buf849.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf849.users = [NodeUser(node=ExternKernelSchedulerNode(name='op850'), can_inplace=False, is_weak=False)]
]
op849.group.device = cuda:0
op849.group.iteration = (42467328, 1)
op849.sizes = ([8, 331776, 16], [])
buf848_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf849_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op849_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf848', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf849', get_index_1, load, None)
        return store


op850: ExternKernelSchedulerNode(ExternKernelOut)
op850.writes = [StarDep(name='buf850', mode=None)]
op850.unmet_dependencies = [StarDep(name='buf849', mode=None)]
op850.met_dependencies = [StarDep(name='arg567_1', mode=None)]
op850.outputs = [
    buf850: ExternKernelOut
    buf850.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf850.users = [
        NodeUser(node=SchedulerNode(name='op851'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op852'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op853'), can_inplace=True, is_weak=False),
    ]
]
op850.node.kernel = extern_kernels.mm


op851: SchedulerNode(ComputedBuffer)
op851.writes = [MemoryDep('buf851', c0, {c0: 73728}, None)]
op851.unmet_dependencies = [MemoryDep('buf850', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op851.met_dependencies = [MemoryDep('arg568_1', c1, {c0: 4608, c1: 16}, None)]
op851.outputs = [
    buf851: ComputedBuffer
    buf851.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf851.users = [
        NodeUser(node=SchedulerNode(name='op852'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op853'), can_inplace=False, is_weak=False),
    ]
]
op851.group.device = cuda:0
op851.group.iteration = (73728, 576)
op851.sizes = ([4608, 16], [576])
buf850_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf851_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op851_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg568_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf851', get_index_2, reduction)
        return store_reduction


op852: SchedulerNode(ComputedBuffer)
op852.writes = [MemoryDep('buf852', c0, {c0: 73728}, None)]
op852.unmet_dependencies = 
    [   MemoryDep('buf850', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf851', c0, {c0: 73728}, None)]
op852.met_dependencies = [MemoryDep('arg568_1', c1, {c0: 4608, c1: 16}, None)]
op852.outputs = [
    buf852: ComputedBuffer
    buf852.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf852.users = [NodeUser(node=SchedulerNode(name='op853'), can_inplace=False, is_weak=False)]
]
op852.group.device = cuda:0
op852.group.iteration = (73728, 576)
op852.sizes = ([4608, 16], [576])
buf850_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf851_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf852_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op852_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg568_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf851', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf852', get_index_3, reduction)
        return store_reduction


op853: SchedulerNode(ComputedBuffer)
op853.writes = [MemoryDep('buf853', c0, {c0: 42467328}, None)]
op853.unmet_dependencies = 
    [   MemoryDep('buf850', c0, {c0: 42467328}, None),
        MemoryDep('buf851', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf852', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op853.met_dependencies = [MemoryDep('arg568_1', c1, {c0: 2654208, c1: 16}, None)]
op853.outputs = [
    buf853: ComputedBuffer
    buf853.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf853.users = [NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False)]
]
op853.group.device = cuda:0
op853.group.iteration = (42467328, 1)
op853.sizes = ([4608, 576, 16], [])
buf850_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf851_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf852_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf853_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op853_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg568_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf851', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf852', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf853', get_index_4, truediv, None)
        return store


op854: ExternKernelSchedulerNode(ExternKernelOut)
op854.writes = [StarDep(name='buf854', mode=None)]
op854.unmet_dependencies = [StarDep(name='buf853', mode=None)]
op854.met_dependencies = [StarDep(name='arg569_1', mode=None)]
op854.outputs = [
    buf854: ExternKernelOut
    buf854.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf854.users = [NodeUser(node=SchedulerNode(name='op855'), can_inplace=False, is_weak=False)]
]
op854.node.kernel = extern_kernels.mm


op855: SchedulerNode(ComputedBuffer)
op855.writes = [MemoryDep('buf855', c0, {c0: 42467328}, None)]
op855.unmet_dependencies = [   MemoryDep('buf854', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op855.met_dependencies = [MemoryDep('arg570_1', c1, {c0: 8, c1: 16}, None)]
op855.outputs = [
    buf855: ComputedBuffer
    buf855.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf855.users = [NodeUser(node=ExternKernelSchedulerNode(name='op857'), can_inplace=False, is_weak=False)]
]
op855.group.device = cuda:0
op855.group.iteration = (42467328, 1)
op855.sizes = ([8, 16, 331776], [])
buf854_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg570_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf855_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op855_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf854', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg570_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf855', get_index_2, add, None)
        return store


op856: SchedulerNode(ComputedBuffer)
op856.writes = [MemoryDep('buf856', c0, {c0: 3538944}, None)]
op856.unmet_dependencies = [   MemoryDep('buf845', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op856.met_dependencies = [   MemoryDep('arg566_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op856.outputs = [
    buf856: ComputedBuffer
    buf856.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf856.users = [NodeUser(node=ExternKernelSchedulerNode(name='op857'), can_inplace=False, is_weak=False)]
]
op856.group.device = cuda:0
op856.group.iteration = (3538944, 1)
op856.sizes = ([8, 16, 576, 48], [])
buf845_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf856_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op856_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf845', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg566_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf856', get_index_2, add, None)
        return store


op857: ExternKernelSchedulerNode(ExternKernelOut)
op857.writes = [StarDep(name='buf857', mode=None)]
op857.unmet_dependencies = [StarDep(name='buf855', mode=None), StarDep(name='buf856', mode=None)]
op857.met_dependencies = []
op857.outputs = [
    buf857: ExternKernelOut
    buf857.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf857.users = [NodeUser(node=SchedulerNode(name='op858'), can_inplace=False, is_weak=False)]
]
op857.node.kernel = extern_kernels.bmm


op858: SchedulerNode(ComputedBuffer)
op858.writes = [MemoryDep('buf858', c0, {c0: 3538944}, None)]
op858.unmet_dependencies = [   MemoryDep('buf857', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op858.met_dependencies = []
op858.outputs = [
    buf858: ComputedBuffer
    buf858.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf858.users = [NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False)]
]
op858.group.device = cuda:0
op858.group.iteration = (3538944, 1)
op858.sizes = ([8, 576, 16, 48], [])
buf857_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf858_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op858_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf857', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf858', get_index_1, load, None)
        return store


op859: ExternKernelSchedulerNode(ExternKernelOut)
op859.writes = [StarDep(name='buf859', mode=None)]
op859.unmet_dependencies = [StarDep(name='buf858', mode=None)]
op859.met_dependencies = [StarDep(name='arg571_1', mode=None)]
op859.outputs = [
    buf859: ExternKernelOut
    buf859.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf859.users = [NodeUser(node=SchedulerNode(name='op860'), can_inplace=True, is_weak=False)]
]
op859.node.kernel = extern_kernels.mm


op860: SchedulerNode(ComputedBuffer)
op860.writes = [MemoryDep('buf860', c0, {c0: 3538944}, None)]
op860.unmet_dependencies = 
    [   MemoryDep('buf833', c0, {c0: 3538944}, None),
        MemoryDep('buf840', c0, {c0: 3538944}, None),
        MemoryDep('buf859', c0, {c0: 3538944}, None)]
op860.met_dependencies = 
    [   MemoryDep('arg555_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg561_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg562_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg572_1', c1, {c0: 4608, c1: 768}, None)]
op860.outputs = [
    buf860: ComputedBuffer
    buf860.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf860.users = [
        NodeUser(node=SchedulerNode(name='op861'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op862'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op863'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op864'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op869'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op870'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op871'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op887'), can_inplace=True, is_weak=False),
    ]
]
op860.group.device = cuda:0
op860.group.iteration = (3538944, 1)
op860.sizes = ([4608, 768], [])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf840_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg562_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf859_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg572_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op860_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf833', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg555_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf840', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg561_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg562_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf859', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg572_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf860', get_index_7, add_3, None)
        return store


op861: SchedulerNode(ComputedBuffer)
op861.writes = [MemoryDep('buf861', c0, {c0: 4608}, None)]
op861.unmet_dependencies = [MemoryDep('buf860', c0, {c0: 3538944}, None)]
op861.met_dependencies = []
op861.outputs = [
    buf861: ComputedBuffer
    buf861.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf861.users = [NodeUser(node=SchedulerNode(name='op864'), can_inplace=False, is_weak=False)]
]
op861.group.device = cuda:0
op861.group.iteration = (4608, 768)
op861.sizes = ([4608], [768])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf861_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op861_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf861', get_index_1, getitem)
        return store_reduction


op862: SchedulerNode(ComputedBuffer)
op862.writes = [MemoryDep('buf862', c0, {c0: 4608}, None)]
op862.unmet_dependencies = [MemoryDep('buf860', c0, {c0: 3538944}, None)]
op862.met_dependencies = []
op862.outputs = [
    buf862: ComputedBuffer
    buf862.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf862.users = [NodeUser(node=SchedulerNode(name='op864'), can_inplace=False, is_weak=False)]
]
op862.group.device = cuda:0
op862.group.iteration = (4608, 768)
op862.sizes = ([4608], [768])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf862_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op862_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf862', get_index_1, getitem_1)
        return store_reduction


op864: SchedulerNode(ComputedBuffer)
op864.writes = [MemoryDep('buf864', c0, {c0: 3538944}, None)]
op864.unmet_dependencies = 
    [   MemoryDep('buf860', c0, {c0: 3538944}, None),
        MemoryDep('buf861', c0, {c0: 4608}, None),
        MemoryDep('buf862', c0, {c0: 4608}, None)]
op864.met_dependencies = 
    [   MemoryDep('arg574_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg575_1', c1, {c0: 4608, c1: 768}, None)]
op864.outputs = [
    buf864: ComputedBuffer
    buf864.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf864.users = [NodeUser(node=ExternKernelSchedulerNode(name='op865'), can_inplace=False, is_weak=False)]
]
op864.group.device = cuda:0
op864.group.iteration = (3538944, 1)
op864.sizes = ([4608, 768], [])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf861_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf862_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg574_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg575_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf864_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op864_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf861', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf862', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg574_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg575_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf864', get_index_5, add_1, None)
        return store


op865: ExternKernelSchedulerNode(ExternKernelOut)
op865.writes = [StarDep(name='buf865', mode=None)]
op865.unmet_dependencies = [StarDep(name='buf864', mode=None)]
op865.met_dependencies = [StarDep(name='arg576_1', mode=None)]
op865.outputs = [
    buf865: ExternKernelOut
    buf865.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf865.users = [NodeUser(node=SchedulerNode(name='op866'), can_inplace=True, is_weak=False)]
]
op865.node.kernel = extern_kernels.mm


op866: SchedulerNode(ComputedBuffer)
op866.writes = [MemoryDep('buf866', c0, {c0: 14155776}, None)]
op866.unmet_dependencies = [MemoryDep('buf865', c0, {c0: 14155776}, None)]
op866.met_dependencies = [MemoryDep('arg577_1', c1, {c0: 4608, c1: 3072}, None)]
op866.outputs = [
    buf866: ComputedBuffer
    buf866.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf866.users = [NodeUser(node=ExternKernelSchedulerNode(name='op867'), can_inplace=False, is_weak=False)]
]
op866.group.device = cuda:0
op866.group.iteration = (14155776, 1)
op866.sizes = ([4608, 3072], [])
buf865_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf866_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op866_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf865', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg577_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf865', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg577_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf866', get_index_4, mul_2, None)
        return store


op867: ExternKernelSchedulerNode(ExternKernelOut)
op867.writes = [StarDep(name='buf867', mode=None)]
op867.unmet_dependencies = [StarDep(name='buf866', mode=None)]
op867.met_dependencies = [StarDep(name='arg578_1', mode=None)]
op867.outputs = [
    buf867: ExternKernelOut
    buf867.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf867.users = [
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op869'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op870'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op871'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op887'), can_inplace=True, is_weak=False),
    ]
]
op867.node.kernel = extern_kernels.mm


op868: SchedulerNode(ComputedBuffer)
op868.writes = [MemoryDep('buf868', c0, {c0: 4608}, None)]
op868.unmet_dependencies = 
    [   MemoryDep('buf860', c0, {c0: 3538944}, None),
        MemoryDep('buf867', c0, {c0: 3538944}, None)]
op868.met_dependencies = 
    [   MemoryDep('arg573_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg579_1', c1, {c0: 4608, c1: 768}, None)]
op868.outputs = [
    buf868: ComputedBuffer
    buf868.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf868.users = [NodeUser(node=SchedulerNode(name='op871'), can_inplace=False, is_weak=False)]
]
op868.group.device = cuda:0
op868.group.iteration = (4608, 768)
op868.sizes = ([4608], [768])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf867_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf868_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op868_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg573_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf867', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf868', get_index_4, getitem)
        return store_reduction


op869: SchedulerNode(ComputedBuffer)
op869.writes = [MemoryDep('buf869', c0, {c0: 4608}, None)]
op869.unmet_dependencies = 
    [   MemoryDep('buf860', c0, {c0: 3538944}, None),
        MemoryDep('buf867', c0, {c0: 3538944}, None)]
op869.met_dependencies = 
    [   MemoryDep('arg573_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg579_1', c1, {c0: 4608, c1: 768}, None)]
op869.outputs = [
    buf869: ComputedBuffer
    buf869.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf869.users = [NodeUser(node=SchedulerNode(name='op871'), can_inplace=False, is_weak=False)]
]
op869.group.device = cuda:0
op869.group.iteration = (4608, 768)
op869.sizes = ([4608], [768])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf867_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf869_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op869_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg573_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf867', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf869', get_index_4, getitem_1)
        return store_reduction


op871: SchedulerNode(ComputedBuffer)
op871.writes = [MemoryDep('buf871', c0, {c0: 3538944}, None)]
op871.unmet_dependencies = 
    [   MemoryDep('buf860', c0, {c0: 3538944}, None),
        MemoryDep('buf867', c0, {c0: 3538944}, None),
        MemoryDep('buf868', c0, {c0: 4608}, None),
        MemoryDep('buf869', c0, {c0: 4608}, None)]
op871.met_dependencies = 
    [   MemoryDep('arg573_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg579_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg581_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg582_1', c1, {c0: 4608, c1: 768}, None)]
op871.outputs = [
    buf871: ComputedBuffer
    buf871.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf871.users = [NodeUser(node=ExternKernelSchedulerNode(name='op872'), can_inplace=False, is_weak=False)]
]
op871.group.device = cuda:0
op871.group.iteration = (3538944, 1)
op871.sizes = ([4608, 768], [])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf867_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf868_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf869_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg581_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf871_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op871_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg573_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf867', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf868', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf869', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg581_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg582_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf871', get_index_8, add_3, None)
        return store


op872: ExternKernelSchedulerNode(ExternKernelOut)
op872.writes = [StarDep(name='buf872', mode=None)]
op872.unmet_dependencies = [StarDep(name='buf871', mode=None)]
op872.met_dependencies = [StarDep(name='arg583_1', mode=None)]
op872.outputs = [
    buf872: ExternKernelOut
    buf872.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf872.users = [
        NodeUser(node=SchedulerNode(name='op873'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op874'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op883'), can_inplace=False, is_weak=False),
    ]
]
op872.node.kernel = extern_kernels.mm


op873: SchedulerNode(ComputedBuffer)
op873.writes = [MemoryDep('buf873', c0, {c0: 3538944}, None)]
op873.unmet_dependencies = [   MemoryDep('buf872', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op873.met_dependencies = [MemoryDep('arg584_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op873.outputs = [
    buf873: ComputedBuffer
    buf873.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf873.users = [NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False)]
]
op873.group.device = cuda:0
op873.group.iteration = (3538944, 1)
op873.sizes = ([8, 16, 576, 48], [])
buf872_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf873_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op873_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg584_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf873', get_index_2, mul, None)
        return store


op874: SchedulerNode(ComputedBuffer)
op874.writes = [MemoryDep('buf874', c0, {c0: 3538944}, None)]
op874.unmet_dependencies = [   MemoryDep('buf872', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op874.met_dependencies = [MemoryDep('arg584_1', c1 + 768, {c0: 8, c1: 768}, None)]
op874.outputs = [
    buf874: ComputedBuffer
    buf874.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf874.users = [NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False)]
]
op874.group.device = cuda:0
op874.group.iteration = (3538944, 1)
op874.sizes = ([8, 768, 576], [])
buf872_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf874_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op874_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg584_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf874', get_index_2, add, None)
        return store


op875: ExternKernelSchedulerNode(ExternKernelOut)
op875.writes = [StarDep(name='buf875', mode=None)]
op875.unmet_dependencies = [StarDep(name='buf873', mode=None), StarDep(name='buf874', mode=None)]
op875.met_dependencies = []
op875.outputs = [
    buf875: ExternKernelOut
    buf875.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf875.users = [NodeUser(node=SchedulerNode(name='op876'), can_inplace=False, is_weak=False)]
]
op875.node.kernel = extern_kernels.bmm


op876: SchedulerNode(ComputedBuffer)
op876.writes = [MemoryDep('buf876', c0, {c0: 42467328}, None)]
op876.unmet_dependencies = [   MemoryDep('buf875', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op876.met_dependencies = []
op876.outputs = [
    buf876: ComputedBuffer
    buf876.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf876.users = [NodeUser(node=ExternKernelSchedulerNode(name='op877'), can_inplace=False, is_weak=False)]
]
op876.group.device = cuda:0
op876.group.iteration = (42467328, 1)
op876.sizes = ([8, 331776, 16], [])
buf875_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf876_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op876_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf875', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf876', get_index_1, load, None)
        return store


op877: ExternKernelSchedulerNode(ExternKernelOut)
op877.writes = [StarDep(name='buf877', mode=None)]
op877.unmet_dependencies = [StarDep(name='buf876', mode=None)]
op877.met_dependencies = [StarDep(name='arg585_1', mode=None)]
op877.outputs = [
    buf877: ExternKernelOut
    buf877.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf877.users = [
        NodeUser(node=SchedulerNode(name='op878'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op879'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op880'), can_inplace=True, is_weak=False),
    ]
]
op877.node.kernel = extern_kernels.mm


op878: SchedulerNode(ComputedBuffer)
op878.writes = [MemoryDep('buf878', c0, {c0: 73728}, None)]
op878.unmet_dependencies = [MemoryDep('buf877', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op878.met_dependencies = [MemoryDep('arg586_1', c1, {c0: 4608, c1: 16}, None)]
op878.outputs = [
    buf878: ComputedBuffer
    buf878.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf878.users = [
        NodeUser(node=SchedulerNode(name='op879'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op880'), can_inplace=False, is_weak=False),
    ]
]
op878.group.device = cuda:0
op878.group.iteration = (73728, 576)
op878.sizes = ([4608, 16], [576])
buf877_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf878_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op878_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg586_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf878', get_index_2, reduction)
        return store_reduction


op879: SchedulerNode(ComputedBuffer)
op879.writes = [MemoryDep('buf879', c0, {c0: 73728}, None)]
op879.unmet_dependencies = 
    [   MemoryDep('buf877', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf878', c0, {c0: 73728}, None)]
op879.met_dependencies = [MemoryDep('arg586_1', c1, {c0: 4608, c1: 16}, None)]
op879.outputs = [
    buf879: ComputedBuffer
    buf879.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf879.users = [NodeUser(node=SchedulerNode(name='op880'), can_inplace=False, is_weak=False)]
]
op879.group.device = cuda:0
op879.group.iteration = (73728, 576)
op879.sizes = ([4608, 16], [576])
buf877_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf878_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf879_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op879_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg586_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf878', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf879', get_index_3, reduction)
        return store_reduction


op880: SchedulerNode(ComputedBuffer)
op880.writes = [MemoryDep('buf880', c0, {c0: 42467328}, None)]
op880.unmet_dependencies = 
    [   MemoryDep('buf877', c0, {c0: 42467328}, None),
        MemoryDep('buf878', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf879', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op880.met_dependencies = [MemoryDep('arg586_1', c1, {c0: 2654208, c1: 16}, None)]
op880.outputs = [
    buf880: ComputedBuffer
    buf880.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf880.users = [NodeUser(node=ExternKernelSchedulerNode(name='op881'), can_inplace=False, is_weak=False)]
]
op880.group.device = cuda:0
op880.group.iteration = (42467328, 1)
op880.sizes = ([4608, 576, 16], [])
buf877_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf878_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf879_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf880_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op880_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg586_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf878', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf879', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf880', get_index_4, truediv, None)
        return store


op881: ExternKernelSchedulerNode(ExternKernelOut)
op881.writes = [StarDep(name='buf881', mode=None)]
op881.unmet_dependencies = [StarDep(name='buf880', mode=None)]
op881.met_dependencies = [StarDep(name='arg587_1', mode=None)]
op881.outputs = [
    buf881: ExternKernelOut
    buf881.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf881.users = [NodeUser(node=SchedulerNode(name='op882'), can_inplace=False, is_weak=False)]
]
op881.node.kernel = extern_kernels.mm


op882: SchedulerNode(ComputedBuffer)
op882.writes = [MemoryDep('buf882', c0, {c0: 42467328}, None)]
op882.unmet_dependencies = [   MemoryDep('buf881', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op882.met_dependencies = [MemoryDep('arg588_1', c1, {c0: 8, c1: 16}, None)]
op882.outputs = [
    buf882: ComputedBuffer
    buf882.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf882.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op882.group.device = cuda:0
op882.group.iteration = (42467328, 1)
op882.sizes = ([8, 16, 331776], [])
buf881_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg588_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf882_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op882_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf881', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg588_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf882', get_index_2, add, None)
        return store


op883: SchedulerNode(ComputedBuffer)
op883.writes = [MemoryDep('buf883', c0, {c0: 3538944}, None)]
op883.unmet_dependencies = [   MemoryDep('buf872', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op883.met_dependencies = [   MemoryDep('arg584_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op883.outputs = [
    buf883: ComputedBuffer
    buf883.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf883.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op883.group.device = cuda:0
op883.group.iteration = (3538944, 1)
op883.sizes = ([8, 16, 576, 48], [])
buf872_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf883_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op883_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg584_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf883', get_index_2, add, None)
        return store


op884: ExternKernelSchedulerNode(ExternKernelOut)
op884.writes = [StarDep(name='buf884', mode=None)]
op884.unmet_dependencies = [StarDep(name='buf882', mode=None), StarDep(name='buf883', mode=None)]
op884.met_dependencies = []
op884.outputs = [
    buf884: ExternKernelOut
    buf884.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf884.users = [NodeUser(node=SchedulerNode(name='op885'), can_inplace=False, is_weak=False)]
]
op884.node.kernel = extern_kernels.bmm


op885: SchedulerNode(ComputedBuffer)
op885.writes = [MemoryDep('buf885', c0, {c0: 3538944}, None)]
op885.unmet_dependencies = [   MemoryDep('buf884', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op885.met_dependencies = []
op885.outputs = [
    buf885: ComputedBuffer
    buf885.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf885.users = [NodeUser(node=ExternKernelSchedulerNode(name='op886'), can_inplace=False, is_weak=False)]
]
op885.group.device = cuda:0
op885.group.iteration = (3538944, 1)
op885.sizes = ([8, 576, 16, 48], [])
buf884_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf885_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op885_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf884', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf885', get_index_1, load, None)
        return store


op886: ExternKernelSchedulerNode(ExternKernelOut)
op886.writes = [StarDep(name='buf886', mode=None)]
op886.unmet_dependencies = [StarDep(name='buf885', mode=None)]
op886.met_dependencies = [StarDep(name='arg589_1', mode=None)]
op886.outputs = [
    buf886: ExternKernelOut
    buf886.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf886.users = [NodeUser(node=SchedulerNode(name='op887'), can_inplace=True, is_weak=False)]
]
op886.node.kernel = extern_kernels.mm


op887: SchedulerNode(ComputedBuffer)
op887.writes = [MemoryDep('buf887', c0, {c0: 3538944}, None)]
op887.unmet_dependencies = 
    [   MemoryDep('buf860', c0, {c0: 3538944}, None),
        MemoryDep('buf867', c0, {c0: 3538944}, None),
        MemoryDep('buf886', c0, {c0: 3538944}, None)]
op887.met_dependencies = 
    [   MemoryDep('arg573_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg579_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg580_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg590_1', c1, {c0: 4608, c1: 768}, None)]
op887.outputs = [
    buf887: ComputedBuffer
    buf887.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf887.users = [
        NodeUser(node=SchedulerNode(name='op888'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op889'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op898'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op914'), can_inplace=True, is_weak=False),
    ]
]
op887.group.device = cuda:0
op887.group.iteration = (3538944, 1)
op887.sizes = ([4608, 768], [])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf867_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg580_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf886_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg590_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op887_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg573_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf867', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg580_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf886', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg590_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf887', get_index_7, add_3, None)
        return store


op888: SchedulerNode(ComputedBuffer)
op888.writes = [MemoryDep('buf888', c0, {c0: 4608}, None)]
op888.unmet_dependencies = [MemoryDep('buf887', c0, {c0: 3538944}, None)]
op888.met_dependencies = []
op888.outputs = [
    buf888: ComputedBuffer
    buf888.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf888.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=False, is_weak=False)]
]
op888.group.device = cuda:0
op888.group.iteration = (4608, 768)
op888.sizes = ([4608], [768])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf888_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op888_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf888', get_index_1, getitem)
        return store_reduction


op889: SchedulerNode(ComputedBuffer)
op889.writes = [MemoryDep('buf889', c0, {c0: 4608}, None)]
op889.unmet_dependencies = [MemoryDep('buf887', c0, {c0: 3538944}, None)]
op889.met_dependencies = []
op889.outputs = [
    buf889: ComputedBuffer
    buf889.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf889.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=False, is_weak=False)]
]
op889.group.device = cuda:0
op889.group.iteration = (4608, 768)
op889.sizes = ([4608], [768])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf889_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op889_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf889', get_index_1, getitem_1)
        return store_reduction


op891: SchedulerNode(ComputedBuffer)
op891.writes = [MemoryDep('buf891', c0, {c0: 3538944}, None)]
op891.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 3538944}, None),
        MemoryDep('buf888', c0, {c0: 4608}, None),
        MemoryDep('buf889', c0, {c0: 4608}, None)]
op891.met_dependencies = 
    [   MemoryDep('arg592_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg593_1', c1, {c0: 4608, c1: 768}, None)]
op891.outputs = [
    buf891: ComputedBuffer
    buf891.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf891.users = [NodeUser(node=ExternKernelSchedulerNode(name='op892'), can_inplace=False, is_weak=False)]
]
op891.group.device = cuda:0
op891.group.iteration = (3538944, 1)
op891.sizes = ([4608, 768], [])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf888_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf889_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg592_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg593_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf891_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op891_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf888', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf889', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg592_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg593_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf891', get_index_5, add_1, None)
        return store


op892: ExternKernelSchedulerNode(ExternKernelOut)
op892.writes = [StarDep(name='buf892', mode=None)]
op892.unmet_dependencies = [StarDep(name='buf891', mode=None)]
op892.met_dependencies = [StarDep(name='arg594_1', mode=None)]
op892.outputs = [
    buf892: ExternKernelOut
    buf892.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf892.users = [NodeUser(node=SchedulerNode(name='op893'), can_inplace=True, is_weak=False)]
]
op892.node.kernel = extern_kernels.mm


op893: SchedulerNode(ComputedBuffer)
op893.writes = [MemoryDep('buf893', c0, {c0: 14155776}, None)]
op893.unmet_dependencies = [MemoryDep('buf892', c0, {c0: 14155776}, None)]
op893.met_dependencies = [MemoryDep('arg595_1', c1, {c0: 4608, c1: 3072}, None)]
op893.outputs = [
    buf893: ComputedBuffer
    buf893.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf893.users = [NodeUser(node=ExternKernelSchedulerNode(name='op894'), can_inplace=False, is_weak=False)]
]
op893.group.device = cuda:0
op893.group.iteration = (14155776, 1)
op893.sizes = ([4608, 3072], [])
buf892_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf893_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op893_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf892', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg595_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf892', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg595_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf893', get_index_4, mul_2, None)
        return store


op894: ExternKernelSchedulerNode(ExternKernelOut)
op894.writes = [StarDep(name='buf894', mode=None)]
op894.unmet_dependencies = [StarDep(name='buf893', mode=None)]
op894.met_dependencies = [StarDep(name='arg596_1', mode=None)]
op894.outputs = [
    buf894: ExternKernelOut
    buf894.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf894.users = [
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op898'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op914'), can_inplace=True, is_weak=False),
    ]
]
op894.node.kernel = extern_kernels.mm


op895: SchedulerNode(ComputedBuffer)
op895.writes = [MemoryDep('buf895', c0, {c0: 4608}, None)]
op895.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 3538944}, None),
        MemoryDep('buf894', c0, {c0: 3538944}, None)]
op895.met_dependencies = 
    [   MemoryDep('arg591_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg597_1', c1, {c0: 4608, c1: 768}, None)]
op895.outputs = [
    buf895: ComputedBuffer
    buf895.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf895.users = [NodeUser(node=SchedulerNode(name='op898'), can_inplace=False, is_weak=False)]
]
op895.group.device = cuda:0
op895.group.iteration = (4608, 768)
op895.sizes = ([4608], [768])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf895_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op895_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg591_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf894', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg597_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf895', get_index_4, getitem)
        return store_reduction


op896: SchedulerNode(ComputedBuffer)
op896.writes = [MemoryDep('buf896', c0, {c0: 4608}, None)]
op896.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 3538944}, None),
        MemoryDep('buf894', c0, {c0: 3538944}, None)]
op896.met_dependencies = 
    [   MemoryDep('arg591_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg597_1', c1, {c0: 4608, c1: 768}, None)]
op896.outputs = [
    buf896: ComputedBuffer
    buf896.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf896.users = [NodeUser(node=SchedulerNode(name='op898'), can_inplace=False, is_weak=False)]
]
op896.group.device = cuda:0
op896.group.iteration = (4608, 768)
op896.sizes = ([4608], [768])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf896_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op896_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg591_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf894', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg597_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf896', get_index_4, getitem_1)
        return store_reduction


op898: SchedulerNode(ComputedBuffer)
op898.writes = [MemoryDep('buf898', c0, {c0: 3538944}, None)]
op898.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 3538944}, None),
        MemoryDep('buf894', c0, {c0: 3538944}, None),
        MemoryDep('buf895', c0, {c0: 4608}, None),
        MemoryDep('buf896', c0, {c0: 4608}, None)]
op898.met_dependencies = 
    [   MemoryDep('arg591_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg597_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg599_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg600_1', c1, {c0: 4608, c1: 768}, None)]
op898.outputs = [
    buf898: ComputedBuffer
    buf898.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf898.users = [NodeUser(node=ExternKernelSchedulerNode(name='op899'), can_inplace=False, is_weak=False)]
]
op898.group.device = cuda:0
op898.group.iteration = (3538944, 1)
op898.sizes = ([4608, 768], [])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf895_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf896_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg599_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf898_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op898_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg591_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf894', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg597_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf895', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf896', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg599_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg600_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf898', get_index_8, add_3, None)
        return store


op899: ExternKernelSchedulerNode(ExternKernelOut)
op899.writes = [StarDep(name='buf899', mode=None)]
op899.unmet_dependencies = [StarDep(name='buf898', mode=None)]
op899.met_dependencies = [StarDep(name='arg601_1', mode=None)]
op899.outputs = [
    buf899: ExternKernelOut
    buf899.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf899.users = [
        NodeUser(node=SchedulerNode(name='op900'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op910'), can_inplace=False, is_weak=False),
    ]
]
op899.node.kernel = extern_kernels.mm


op900: SchedulerNode(ComputedBuffer)
op900.writes = [MemoryDep('buf900', c0, {c0: 3538944}, None)]
op900.unmet_dependencies = [   MemoryDep('buf899', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op900.met_dependencies = [MemoryDep('arg602_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op900.outputs = [
    buf900: ComputedBuffer
    buf900.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf900.users = [NodeUser(node=ExternKernelSchedulerNode(name='op902'), can_inplace=False, is_weak=False)]
]
op900.group.device = cuda:0
op900.group.iteration = (3538944, 1)
op900.sizes = ([8, 16, 576, 48], [])
buf899_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf900_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op900_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf899', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf900', get_index_2, mul, None)
        return store


op901: SchedulerNode(ComputedBuffer)
op901.writes = [MemoryDep('buf901', c0, {c0: 3538944}, None)]
op901.unmet_dependencies = [   MemoryDep('buf899', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op901.met_dependencies = [MemoryDep('arg602_1', c1 + 768, {c0: 8, c1: 768}, None)]
op901.outputs = [
    buf901: ComputedBuffer
    buf901.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf901.users = [NodeUser(node=ExternKernelSchedulerNode(name='op902'), can_inplace=False, is_weak=False)]
]
op901.group.device = cuda:0
op901.group.iteration = (3538944, 1)
op901.sizes = ([8, 768, 576], [])
buf899_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf901_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op901_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf899', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf901', get_index_2, add, None)
        return store


op902: ExternKernelSchedulerNode(ExternKernelOut)
op902.writes = [StarDep(name='buf902', mode=None)]
op902.unmet_dependencies = [StarDep(name='buf900', mode=None), StarDep(name='buf901', mode=None)]
op902.met_dependencies = []
op902.outputs = [
    buf902: ExternKernelOut
    buf902.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf902.users = [NodeUser(node=SchedulerNode(name='op903'), can_inplace=False, is_weak=False)]
]
op902.node.kernel = extern_kernels.bmm


op903: SchedulerNode(ComputedBuffer)
op903.writes = [MemoryDep('buf903', c0, {c0: 42467328}, None)]
op903.unmet_dependencies = [   MemoryDep('buf902', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op903.met_dependencies = []
op903.outputs = [
    buf903: ComputedBuffer
    buf903.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf903.users = [NodeUser(node=ExternKernelSchedulerNode(name='op904'), can_inplace=False, is_weak=False)]
]
op903.group.device = cuda:0
op903.group.iteration = (42467328, 1)
op903.sizes = ([8, 331776, 16], [])
buf902_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf903_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op903_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf902', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf903', get_index_1, load, None)
        return store


op904: ExternKernelSchedulerNode(ExternKernelOut)
op904.writes = [StarDep(name='buf904', mode=None)]
op904.unmet_dependencies = [StarDep(name='buf903', mode=None)]
op904.met_dependencies = [StarDep(name='arg603_1', mode=None)]
op904.outputs = [
    buf904: ExternKernelOut
    buf904.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf904.users = [
        NodeUser(node=SchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op906'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=True, is_weak=False),
    ]
]
op904.node.kernel = extern_kernels.mm


op905: SchedulerNode(ComputedBuffer)
op905.writes = [MemoryDep('buf905', c0, {c0: 73728}, None)]
op905.unmet_dependencies = [MemoryDep('buf904', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op905.met_dependencies = [MemoryDep('arg604_1', c1, {c0: 4608, c1: 16}, None)]
op905.outputs = [
    buf905: ComputedBuffer
    buf905.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf905.users = [
        NodeUser(node=SchedulerNode(name='op906'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=False, is_weak=False),
    ]
]
op905.group.device = cuda:0
op905.group.iteration = (73728, 576)
op905.sizes = ([4608, 16], [576])
buf904_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf905_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op905_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf904', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg604_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf905', get_index_2, reduction)
        return store_reduction


op906: SchedulerNode(ComputedBuffer)
op906.writes = [MemoryDep('buf906', c0, {c0: 73728}, None)]
op906.unmet_dependencies = 
    [   MemoryDep('buf904', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf905', c0, {c0: 73728}, None)]
op906.met_dependencies = [MemoryDep('arg604_1', c1, {c0: 4608, c1: 16}, None)]
op906.outputs = [
    buf906: ComputedBuffer
    buf906.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf906.users = [NodeUser(node=SchedulerNode(name='op907'), can_inplace=False, is_weak=False)]
]
op906.group.device = cuda:0
op906.group.iteration = (73728, 576)
op906.sizes = ([4608, 16], [576])
buf904_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf905_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf906_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op906_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf904', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg604_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf905', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf906', get_index_3, reduction)
        return store_reduction


op907: SchedulerNode(ComputedBuffer)
op907.writes = [MemoryDep('buf907', c0, {c0: 42467328}, None)]
op907.unmet_dependencies = 
    [   MemoryDep('buf904', c0, {c0: 42467328}, None),
        MemoryDep('buf905', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf906', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op907.met_dependencies = [MemoryDep('arg604_1', c1, {c0: 2654208, c1: 16}, None)]
op907.outputs = [
    buf907: ComputedBuffer
    buf907.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf907.users = [NodeUser(node=ExternKernelSchedulerNode(name='op908'), can_inplace=False, is_weak=False)]
]
op907.group.device = cuda:0
op907.group.iteration = (42467328, 1)
op907.sizes = ([4608, 576, 16], [])
buf904_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf905_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf906_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf907_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op907_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf904', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg604_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf905', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf906', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf907', get_index_4, truediv, None)
        return store


op908: ExternKernelSchedulerNode(ExternKernelOut)
op908.writes = [StarDep(name='buf908', mode=None)]
op908.unmet_dependencies = [StarDep(name='buf907', mode=None)]
op908.met_dependencies = [StarDep(name='arg605_1', mode=None)]
op908.outputs = [
    buf908: ExternKernelOut
    buf908.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf908.users = [NodeUser(node=SchedulerNode(name='op909'), can_inplace=False, is_weak=False)]
]
op908.node.kernel = extern_kernels.mm


op909: SchedulerNode(ComputedBuffer)
op909.writes = [MemoryDep('buf909', c0, {c0: 42467328}, None)]
op909.unmet_dependencies = [   MemoryDep('buf908', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op909.met_dependencies = [MemoryDep('arg606_1', c1, {c0: 8, c1: 16}, None)]
op909.outputs = [
    buf909: ComputedBuffer
    buf909.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf909.users = [NodeUser(node=ExternKernelSchedulerNode(name='op911'), can_inplace=False, is_weak=False)]
]
op909.group.device = cuda:0
op909.group.iteration = (42467328, 1)
op909.sizes = ([8, 16, 331776], [])
buf908_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg606_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf909_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op909_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf908', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg606_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf909', get_index_2, add, None)
        return store


op910: SchedulerNode(ComputedBuffer)
op910.writes = [MemoryDep('buf910', c0, {c0: 3538944}, None)]
op910.unmet_dependencies = [   MemoryDep('buf899', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op910.met_dependencies = [   MemoryDep('arg602_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op910.outputs = [
    buf910: ComputedBuffer
    buf910.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf910.users = [NodeUser(node=ExternKernelSchedulerNode(name='op911'), can_inplace=False, is_weak=False)]
]
op910.group.device = cuda:0
op910.group.iteration = (3538944, 1)
op910.sizes = ([8, 16, 576, 48], [])
buf899_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf910_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op910_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf899', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf910', get_index_2, add, None)
        return store


op911: ExternKernelSchedulerNode(ExternKernelOut)
op911.writes = [StarDep(name='buf911', mode=None)]
op911.unmet_dependencies = [StarDep(name='buf909', mode=None), StarDep(name='buf910', mode=None)]
op911.met_dependencies = []
op911.outputs = [
    buf911: ExternKernelOut
    buf911.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf911.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=False, is_weak=False)]
]
op911.node.kernel = extern_kernels.bmm


op912: SchedulerNode(ComputedBuffer)
op912.writes = [MemoryDep('buf912', c0, {c0: 3538944}, None)]
op912.unmet_dependencies = [   MemoryDep('buf911', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op912.met_dependencies = []
op912.outputs = [
    buf912: ComputedBuffer
    buf912.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf912.users = [NodeUser(node=ExternKernelSchedulerNode(name='op913'), can_inplace=False, is_weak=False)]
]
op912.group.device = cuda:0
op912.group.iteration = (3538944, 1)
op912.sizes = ([8, 576, 16, 48], [])
buf911_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf912_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op912_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf911', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf912', get_index_1, load, None)
        return store


op913: ExternKernelSchedulerNode(ExternKernelOut)
op913.writes = [StarDep(name='buf913', mode=None)]
op913.unmet_dependencies = [StarDep(name='buf912', mode=None)]
op913.met_dependencies = [StarDep(name='arg607_1', mode=None)]
op913.outputs = [
    buf913: ExternKernelOut
    buf913.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf913.users = [NodeUser(node=SchedulerNode(name='op914'), can_inplace=True, is_weak=False)]
]
op913.node.kernel = extern_kernels.mm


op914: SchedulerNode(ComputedBuffer)
op914.writes = [MemoryDep('buf914', c0, {c0: 3538944}, None)]
op914.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 3538944}, None),
        MemoryDep('buf894', c0, {c0: 3538944}, None),
        MemoryDep('buf913', c0, {c0: 3538944}, None)]
op914.met_dependencies = 
    [   MemoryDep('arg591_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg597_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg598_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg608_1', c1, {c0: 4608, c1: 768}, None)]
op914.outputs = [
    buf914: ComputedBuffer
    buf914.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf914.users = [
        NodeUser(node=SchedulerNode(name='op915'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op916'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op917'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op918'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op922'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op923'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op924'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op925'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op941'), can_inplace=True, is_weak=False),
    ]
]
op914.group.device = cuda:0
op914.group.iteration = (3538944, 1)
op914.sizes = ([4608, 768], [])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg598_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf913_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg608_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op914_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg591_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf894', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg597_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg598_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf913', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg608_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf914', get_index_7, add_3, None)
        return store


op915: SchedulerNode(ComputedBuffer)
op915.writes = [MemoryDep('buf915', c0, {c0: 4608}, None)]
op915.unmet_dependencies = [MemoryDep('buf914', c0, {c0: 3538944}, None)]
op915.met_dependencies = []
op915.outputs = [
    buf915: ComputedBuffer
    buf915.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf915.users = [NodeUser(node=SchedulerNode(name='op918'), can_inplace=False, is_weak=False)]
]
op915.group.device = cuda:0
op915.group.iteration = (4608, 768)
op915.sizes = ([4608], [768])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf915_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op915_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf915', get_index_1, getitem)
        return store_reduction


op916: SchedulerNode(ComputedBuffer)
op916.writes = [MemoryDep('buf916', c0, {c0: 4608}, None)]
op916.unmet_dependencies = [MemoryDep('buf914', c0, {c0: 3538944}, None)]
op916.met_dependencies = []
op916.outputs = [
    buf916: ComputedBuffer
    buf916.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf916.users = [NodeUser(node=SchedulerNode(name='op918'), can_inplace=False, is_weak=False)]
]
op916.group.device = cuda:0
op916.group.iteration = (4608, 768)
op916.sizes = ([4608], [768])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf916_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op916_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf916', get_index_1, getitem_1)
        return store_reduction


op918: SchedulerNode(ComputedBuffer)
op918.writes = [MemoryDep('buf918', c0, {c0: 3538944}, None)]
op918.unmet_dependencies = 
    [   MemoryDep('buf914', c0, {c0: 3538944}, None),
        MemoryDep('buf915', c0, {c0: 4608}, None),
        MemoryDep('buf916', c0, {c0: 4608}, None)]
op918.met_dependencies = 
    [   MemoryDep('arg610_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg611_1', c1, {c0: 4608, c1: 768}, None)]
op918.outputs = [
    buf918: ComputedBuffer
    buf918.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf918.users = [NodeUser(node=ExternKernelSchedulerNode(name='op919'), can_inplace=False, is_weak=False)]
]
op918.group.device = cuda:0
op918.group.iteration = (3538944, 1)
op918.sizes = ([4608, 768], [])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf915_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf916_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg610_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg611_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf918_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op918_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf915', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf916', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg610_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg611_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf918', get_index_5, add_1, None)
        return store


op919: ExternKernelSchedulerNode(ExternKernelOut)
op919.writes = [StarDep(name='buf919', mode=None)]
op919.unmet_dependencies = [StarDep(name='buf918', mode=None)]
op919.met_dependencies = [StarDep(name='arg612_1', mode=None)]
op919.outputs = [
    buf919: ExternKernelOut
    buf919.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf919.users = [NodeUser(node=SchedulerNode(name='op920'), can_inplace=True, is_weak=False)]
]
op919.node.kernel = extern_kernels.mm


op920: SchedulerNode(ComputedBuffer)
op920.writes = [MemoryDep('buf920', c0, {c0: 14155776}, None)]
op920.unmet_dependencies = [MemoryDep('buf919', c0, {c0: 14155776}, None)]
op920.met_dependencies = [MemoryDep('arg613_1', c1, {c0: 4608, c1: 3072}, None)]
op920.outputs = [
    buf920: ComputedBuffer
    buf920.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf920.users = [NodeUser(node=ExternKernelSchedulerNode(name='op921'), can_inplace=False, is_weak=False)]
]
op920.group.device = cuda:0
op920.group.iteration = (14155776, 1)
op920.sizes = ([4608, 3072], [])
buf919_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf920_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op920_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf919', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg613_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf919', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg613_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf920', get_index_4, mul_2, None)
        return store


op921: ExternKernelSchedulerNode(ExternKernelOut)
op921.writes = [StarDep(name='buf921', mode=None)]
op921.unmet_dependencies = [StarDep(name='buf920', mode=None)]
op921.met_dependencies = [StarDep(name='arg614_1', mode=None)]
op921.outputs = [
    buf921: ExternKernelOut
    buf921.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf921.users = [
        NodeUser(node=SchedulerNode(name='op922'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op923'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op924'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op925'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op941'), can_inplace=True, is_weak=False),
    ]
]
op921.node.kernel = extern_kernels.mm


op922: SchedulerNode(ComputedBuffer)
op922.writes = [MemoryDep('buf922', c0, {c0: 4608}, None)]
op922.unmet_dependencies = 
    [   MemoryDep('buf914', c0, {c0: 3538944}, None),
        MemoryDep('buf921', c0, {c0: 3538944}, None)]
op922.met_dependencies = 
    [   MemoryDep('arg609_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg615_1', c1, {c0: 4608, c1: 768}, None)]
op922.outputs = [
    buf922: ComputedBuffer
    buf922.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf922.users = [NodeUser(node=SchedulerNode(name='op925'), can_inplace=False, is_weak=False)]
]
op922.group.device = cuda:0
op922.group.iteration = (4608, 768)
op922.sizes = ([4608], [768])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf921_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf922_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op922_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg609_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf921', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg615_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf922', get_index_4, getitem)
        return store_reduction


op923: SchedulerNode(ComputedBuffer)
op923.writes = [MemoryDep('buf923', c0, {c0: 4608}, None)]
op923.unmet_dependencies = 
    [   MemoryDep('buf914', c0, {c0: 3538944}, None),
        MemoryDep('buf921', c0, {c0: 3538944}, None)]
op923.met_dependencies = 
    [   MemoryDep('arg609_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg615_1', c1, {c0: 4608, c1: 768}, None)]
op923.outputs = [
    buf923: ComputedBuffer
    buf923.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf923.users = [NodeUser(node=SchedulerNode(name='op925'), can_inplace=False, is_weak=False)]
]
op923.group.device = cuda:0
op923.group.iteration = (4608, 768)
op923.sizes = ([4608], [768])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf921_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf923_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op923_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg609_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf921', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg615_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf923', get_index_4, getitem_1)
        return store_reduction


op925: SchedulerNode(ComputedBuffer)
op925.writes = [MemoryDep('buf925', c0, {c0: 3538944}, None)]
op925.unmet_dependencies = 
    [   MemoryDep('buf914', c0, {c0: 3538944}, None),
        MemoryDep('buf921', c0, {c0: 3538944}, None),
        MemoryDep('buf922', c0, {c0: 4608}, None),
        MemoryDep('buf923', c0, {c0: 4608}, None)]
op925.met_dependencies = 
    [   MemoryDep('arg609_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg615_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg617_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg618_1', c1, {c0: 4608, c1: 768}, None)]
op925.outputs = [
    buf925: ComputedBuffer
    buf925.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf925.users = [NodeUser(node=ExternKernelSchedulerNode(name='op926'), can_inplace=False, is_weak=False)]
]
op925.group.device = cuda:0
op925.group.iteration = (3538944, 1)
op925.sizes = ([4608, 768], [])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf921_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf922_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf923_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg618_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf925_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op925_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg609_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf921', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg615_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf922', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf923', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg617_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg618_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf925', get_index_8, add_3, None)
        return store


op926: ExternKernelSchedulerNode(ExternKernelOut)
op926.writes = [StarDep(name='buf926', mode=None)]
op926.unmet_dependencies = [StarDep(name='buf925', mode=None)]
op926.met_dependencies = [StarDep(name='arg619_1', mode=None)]
op926.outputs = [
    buf926: ExternKernelOut
    buf926.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf926.users = [
        NodeUser(node=SchedulerNode(name='op927'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op928'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op937'), can_inplace=False, is_weak=False),
    ]
]
op926.node.kernel = extern_kernels.mm


op927: SchedulerNode(ComputedBuffer)
op927.writes = [MemoryDep('buf927', c0, {c0: 3538944}, None)]
op927.unmet_dependencies = [   MemoryDep('buf926', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op927.met_dependencies = [MemoryDep('arg620_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op927.outputs = [
    buf927: ComputedBuffer
    buf927.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf927.users = [NodeUser(node=ExternKernelSchedulerNode(name='op929'), can_inplace=False, is_weak=False)]
]
op927.group.device = cuda:0
op927.group.iteration = (3538944, 1)
op927.sizes = ([8, 16, 576, 48], [])
buf926_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf927_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op927_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf926', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg620_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf927', get_index_2, mul, None)
        return store


op928: SchedulerNode(ComputedBuffer)
op928.writes = [MemoryDep('buf928', c0, {c0: 3538944}, None)]
op928.unmet_dependencies = [   MemoryDep('buf926', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op928.met_dependencies = [MemoryDep('arg620_1', c1 + 768, {c0: 8, c1: 768}, None)]
op928.outputs = [
    buf928: ComputedBuffer
    buf928.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf928.users = [NodeUser(node=ExternKernelSchedulerNode(name='op929'), can_inplace=False, is_weak=False)]
]
op928.group.device = cuda:0
op928.group.iteration = (3538944, 1)
op928.sizes = ([8, 768, 576], [])
buf926_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf928_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op928_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf926', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg620_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf928', get_index_2, add, None)
        return store


op929: ExternKernelSchedulerNode(ExternKernelOut)
op929.writes = [StarDep(name='buf929', mode=None)]
op929.unmet_dependencies = [StarDep(name='buf927', mode=None), StarDep(name='buf928', mode=None)]
op929.met_dependencies = []
op929.outputs = [
    buf929: ExternKernelOut
    buf929.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf929.users = [NodeUser(node=SchedulerNode(name='op930'), can_inplace=False, is_weak=False)]
]
op929.node.kernel = extern_kernels.bmm


op930: SchedulerNode(ComputedBuffer)
op930.writes = [MemoryDep('buf930', c0, {c0: 42467328}, None)]
op930.unmet_dependencies = [   MemoryDep('buf929', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op930.met_dependencies = []
op930.outputs = [
    buf930: ComputedBuffer
    buf930.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf930.users = [NodeUser(node=ExternKernelSchedulerNode(name='op931'), can_inplace=False, is_weak=False)]
]
op930.group.device = cuda:0
op930.group.iteration = (42467328, 1)
op930.sizes = ([8, 331776, 16], [])
buf929_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf930_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op930_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf929', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf930', get_index_1, load, None)
        return store


op931: ExternKernelSchedulerNode(ExternKernelOut)
op931.writes = [StarDep(name='buf931', mode=None)]
op931.unmet_dependencies = [StarDep(name='buf930', mode=None)]
op931.met_dependencies = [StarDep(name='arg621_1', mode=None)]
op931.outputs = [
    buf931: ExternKernelOut
    buf931.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf931.users = [
        NodeUser(node=SchedulerNode(name='op932'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op933'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op934'), can_inplace=True, is_weak=False),
    ]
]
op931.node.kernel = extern_kernels.mm


op932: SchedulerNode(ComputedBuffer)
op932.writes = [MemoryDep('buf932', c0, {c0: 73728}, None)]
op932.unmet_dependencies = [MemoryDep('buf931', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op932.met_dependencies = [MemoryDep('arg622_1', c1, {c0: 4608, c1: 16}, None)]
op932.outputs = [
    buf932: ComputedBuffer
    buf932.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf932.users = [
        NodeUser(node=SchedulerNode(name='op933'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op934'), can_inplace=False, is_weak=False),
    ]
]
op932.group.device = cuda:0
op932.group.iteration = (73728, 576)
op932.sizes = ([4608, 16], [576])
buf931_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf932_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op932_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf931', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf932', get_index_2, reduction)
        return store_reduction


op933: SchedulerNode(ComputedBuffer)
op933.writes = [MemoryDep('buf933', c0, {c0: 73728}, None)]
op933.unmet_dependencies = 
    [   MemoryDep('buf931', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf932', c0, {c0: 73728}, None)]
op933.met_dependencies = [MemoryDep('arg622_1', c1, {c0: 4608, c1: 16}, None)]
op933.outputs = [
    buf933: ComputedBuffer
    buf933.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf933.users = [NodeUser(node=SchedulerNode(name='op934'), can_inplace=False, is_weak=False)]
]
op933.group.device = cuda:0
op933.group.iteration = (73728, 576)
op933.sizes = ([4608, 16], [576])
buf931_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf932_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf933_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op933_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf931', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf932', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf933', get_index_3, reduction)
        return store_reduction


op934: SchedulerNode(ComputedBuffer)
op934.writes = [MemoryDep('buf934', c0, {c0: 42467328}, None)]
op934.unmet_dependencies = 
    [   MemoryDep('buf931', c0, {c0: 42467328}, None),
        MemoryDep('buf932', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf933', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op934.met_dependencies = [MemoryDep('arg622_1', c1, {c0: 2654208, c1: 16}, None)]
op934.outputs = [
    buf934: ComputedBuffer
    buf934.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf934.users = [NodeUser(node=ExternKernelSchedulerNode(name='op935'), can_inplace=False, is_weak=False)]
]
op934.group.device = cuda:0
op934.group.iteration = (42467328, 1)
op934.sizes = ([4608, 576, 16], [])
buf931_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf932_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf933_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf934_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op934_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf931', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf932', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf933', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf934', get_index_4, truediv, None)
        return store


op935: ExternKernelSchedulerNode(ExternKernelOut)
op935.writes = [StarDep(name='buf935', mode=None)]
op935.unmet_dependencies = [StarDep(name='buf934', mode=None)]
op935.met_dependencies = [StarDep(name='arg623_1', mode=None)]
op935.outputs = [
    buf935: ExternKernelOut
    buf935.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf935.users = [NodeUser(node=SchedulerNode(name='op936'), can_inplace=False, is_weak=False)]
]
op935.node.kernel = extern_kernels.mm


op936: SchedulerNode(ComputedBuffer)
op936.writes = [MemoryDep('buf936', c0, {c0: 42467328}, None)]
op936.unmet_dependencies = [   MemoryDep('buf935', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op936.met_dependencies = [MemoryDep('arg624_1', c1, {c0: 8, c1: 16}, None)]
op936.outputs = [
    buf936: ComputedBuffer
    buf936.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf936.users = [NodeUser(node=ExternKernelSchedulerNode(name='op938'), can_inplace=False, is_weak=False)]
]
op936.group.device = cuda:0
op936.group.iteration = (42467328, 1)
op936.sizes = ([8, 16, 331776], [])
buf935_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg624_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf936_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op936_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf935', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg624_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf936', get_index_2, add, None)
        return store


op937: SchedulerNode(ComputedBuffer)
op937.writes = [MemoryDep('buf937', c0, {c0: 3538944}, None)]
op937.unmet_dependencies = [   MemoryDep('buf926', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op937.met_dependencies = [   MemoryDep('arg620_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op937.outputs = [
    buf937: ComputedBuffer
    buf937.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf937.users = [NodeUser(node=ExternKernelSchedulerNode(name='op938'), can_inplace=False, is_weak=False)]
]
op937.group.device = cuda:0
op937.group.iteration = (3538944, 1)
op937.sizes = ([8, 16, 576, 48], [])
buf926_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf937_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op937_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf926', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg620_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf937', get_index_2, add, None)
        return store


op938: ExternKernelSchedulerNode(ExternKernelOut)
op938.writes = [StarDep(name='buf938', mode=None)]
op938.unmet_dependencies = [StarDep(name='buf936', mode=None), StarDep(name='buf937', mode=None)]
op938.met_dependencies = []
op938.outputs = [
    buf938: ExternKernelOut
    buf938.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf938.users = [NodeUser(node=SchedulerNode(name='op939'), can_inplace=False, is_weak=False)]
]
op938.node.kernel = extern_kernels.bmm


op939: SchedulerNode(ComputedBuffer)
op939.writes = [MemoryDep('buf939', c0, {c0: 3538944}, None)]
op939.unmet_dependencies = [   MemoryDep('buf938', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op939.met_dependencies = []
op939.outputs = [
    buf939: ComputedBuffer
    buf939.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf939.users = [NodeUser(node=ExternKernelSchedulerNode(name='op940'), can_inplace=False, is_weak=False)]
]
op939.group.device = cuda:0
op939.group.iteration = (3538944, 1)
op939.sizes = ([8, 576, 16, 48], [])
buf938_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf939_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op939_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf938', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf939', get_index_1, load, None)
        return store


op940: ExternKernelSchedulerNode(ExternKernelOut)
op940.writes = [StarDep(name='buf940', mode=None)]
op940.unmet_dependencies = [StarDep(name='buf939', mode=None)]
op940.met_dependencies = [StarDep(name='arg625_1', mode=None)]
op940.outputs = [
    buf940: ExternKernelOut
    buf940.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf940.users = [NodeUser(node=SchedulerNode(name='op941'), can_inplace=True, is_weak=False)]
]
op940.node.kernel = extern_kernels.mm


op941: SchedulerNode(ComputedBuffer)
op941.writes = [MemoryDep('buf941', c0, {c0: 3538944}, None)]
op941.unmet_dependencies = 
    [   MemoryDep('buf914', c0, {c0: 3538944}, None),
        MemoryDep('buf921', c0, {c0: 3538944}, None),
        MemoryDep('buf940', c0, {c0: 3538944}, None)]
op941.met_dependencies = 
    [   MemoryDep('arg609_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg615_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg616_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg626_1', c1, {c0: 4608, c1: 768}, None)]
op941.outputs = [
    buf941: ComputedBuffer
    buf941.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf941.users = [
        NodeUser(node=SchedulerNode(name='op942'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op943'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op944'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op945'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op949'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op950'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op951'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op952'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op968'), can_inplace=True, is_weak=False),
    ]
]
op941.group.device = cuda:0
op941.group.iteration = (3538944, 1)
op941.sizes = ([4608, 768], [])
buf914_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf921_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg616_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf940_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg626_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op941_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf914', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg609_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf921', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg615_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg616_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf940', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg626_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf941', get_index_7, add_3, None)
        return store


op942: SchedulerNode(ComputedBuffer)
op942.writes = [MemoryDep('buf942', c0, {c0: 4608}, None)]
op942.unmet_dependencies = [MemoryDep('buf941', c0, {c0: 3538944}, None)]
op942.met_dependencies = []
op942.outputs = [
    buf942: ComputedBuffer
    buf942.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf942.users = [NodeUser(node=SchedulerNode(name='op945'), can_inplace=False, is_weak=False)]
]
op942.group.device = cuda:0
op942.group.iteration = (4608, 768)
op942.sizes = ([4608], [768])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf942_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op942_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf942', get_index_1, getitem)
        return store_reduction


op943: SchedulerNode(ComputedBuffer)
op943.writes = [MemoryDep('buf943', c0, {c0: 4608}, None)]
op943.unmet_dependencies = [MemoryDep('buf941', c0, {c0: 3538944}, None)]
op943.met_dependencies = []
op943.outputs = [
    buf943: ComputedBuffer
    buf943.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf943.users = [NodeUser(node=SchedulerNode(name='op945'), can_inplace=False, is_weak=False)]
]
op943.group.device = cuda:0
op943.group.iteration = (4608, 768)
op943.sizes = ([4608], [768])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf943_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op943_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf943', get_index_1, getitem_1)
        return store_reduction


op945: SchedulerNode(ComputedBuffer)
op945.writes = [MemoryDep('buf945', c0, {c0: 3538944}, None)]
op945.unmet_dependencies = 
    [   MemoryDep('buf941', c0, {c0: 3538944}, None),
        MemoryDep('buf942', c0, {c0: 4608}, None),
        MemoryDep('buf943', c0, {c0: 4608}, None)]
op945.met_dependencies = 
    [   MemoryDep('arg628_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg629_1', c1, {c0: 4608, c1: 768}, None)]
op945.outputs = [
    buf945: ComputedBuffer
    buf945.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf945.users = [NodeUser(node=ExternKernelSchedulerNode(name='op946'), can_inplace=False, is_weak=False)]
]
op945.group.device = cuda:0
op945.group.iteration = (3538944, 1)
op945.sizes = ([4608, 768], [])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf942_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf943_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg629_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf945_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op945_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf942', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf943', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg628_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg629_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf945', get_index_5, add_1, None)
        return store


op946: ExternKernelSchedulerNode(ExternKernelOut)
op946.writes = [StarDep(name='buf946', mode=None)]
op946.unmet_dependencies = [StarDep(name='buf945', mode=None)]
op946.met_dependencies = [StarDep(name='arg630_1', mode=None)]
op946.outputs = [
    buf946: ExternKernelOut
    buf946.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf946.users = [NodeUser(node=SchedulerNode(name='op947'), can_inplace=True, is_weak=False)]
]
op946.node.kernel = extern_kernels.mm


op947: SchedulerNode(ComputedBuffer)
op947.writes = [MemoryDep('buf947', c0, {c0: 14155776}, None)]
op947.unmet_dependencies = [MemoryDep('buf946', c0, {c0: 14155776}, None)]
op947.met_dependencies = [MemoryDep('arg631_1', c1, {c0: 4608, c1: 3072}, None)]
op947.outputs = [
    buf947: ComputedBuffer
    buf947.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf947.users = [NodeUser(node=ExternKernelSchedulerNode(name='op948'), can_inplace=False, is_weak=False)]
]
op947.group.device = cuda:0
op947.group.iteration = (14155776, 1)
op947.sizes = ([4608, 3072], [])
buf946_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf947_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op947_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf946', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg631_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf946', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg631_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf947', get_index_4, mul_2, None)
        return store


op948: ExternKernelSchedulerNode(ExternKernelOut)
op948.writes = [StarDep(name='buf948', mode=None)]
op948.unmet_dependencies = [StarDep(name='buf947', mode=None)]
op948.met_dependencies = [StarDep(name='arg632_1', mode=None)]
op948.outputs = [
    buf948: ExternKernelOut
    buf948.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf948.users = [
        NodeUser(node=SchedulerNode(name='op949'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op950'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op951'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op952'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op968'), can_inplace=True, is_weak=False),
    ]
]
op948.node.kernel = extern_kernels.mm


op949: SchedulerNode(ComputedBuffer)
op949.writes = [MemoryDep('buf949', c0, {c0: 4608}, None)]
op949.unmet_dependencies = 
    [   MemoryDep('buf941', c0, {c0: 3538944}, None),
        MemoryDep('buf948', c0, {c0: 3538944}, None)]
op949.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg633_1', c1, {c0: 4608, c1: 768}, None)]
op949.outputs = [
    buf949: ComputedBuffer
    buf949.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf949.users = [NodeUser(node=SchedulerNode(name='op952'), can_inplace=False, is_weak=False)]
]
op949.group.device = cuda:0
op949.group.iteration = (4608, 768)
op949.sizes = ([4608], [768])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf948_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf949_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op949_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg627_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf948', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg633_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf949', get_index_4, getitem)
        return store_reduction


op950: SchedulerNode(ComputedBuffer)
op950.writes = [MemoryDep('buf950', c0, {c0: 4608}, None)]
op950.unmet_dependencies = 
    [   MemoryDep('buf941', c0, {c0: 3538944}, None),
        MemoryDep('buf948', c0, {c0: 3538944}, None)]
op950.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg633_1', c1, {c0: 4608, c1: 768}, None)]
op950.outputs = [
    buf950: ComputedBuffer
    buf950.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf950.users = [NodeUser(node=SchedulerNode(name='op952'), can_inplace=False, is_weak=False)]
]
op950.group.device = cuda:0
op950.group.iteration = (4608, 768)
op950.sizes = ([4608], [768])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf948_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf950_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op950_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg627_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf948', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg633_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf950', get_index_4, getitem_1)
        return store_reduction


op952: SchedulerNode(ComputedBuffer)
op952.writes = [MemoryDep('buf952', c0, {c0: 3538944}, None)]
op952.unmet_dependencies = 
    [   MemoryDep('buf941', c0, {c0: 3538944}, None),
        MemoryDep('buf948', c0, {c0: 3538944}, None),
        MemoryDep('buf949', c0, {c0: 4608}, None),
        MemoryDep('buf950', c0, {c0: 4608}, None)]
op952.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg633_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg635_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg636_1', c1, {c0: 4608, c1: 768}, None)]
op952.outputs = [
    buf952: ComputedBuffer
    buf952.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf952.users = [NodeUser(node=ExternKernelSchedulerNode(name='op953'), can_inplace=False, is_weak=False)]
]
op952.group.device = cuda:0
op952.group.iteration = (3538944, 1)
op952.sizes = ([4608, 768], [])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf948_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf949_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf950_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg636_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf952_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op952_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg627_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf948', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg633_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf949', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf950', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg635_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg636_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf952', get_index_8, add_3, None)
        return store


op953: ExternKernelSchedulerNode(ExternKernelOut)
op953.writes = [StarDep(name='buf953', mode=None)]
op953.unmet_dependencies = [StarDep(name='buf952', mode=None)]
op953.met_dependencies = [StarDep(name='arg637_1', mode=None)]
op953.outputs = [
    buf953: ExternKernelOut
    buf953.layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
    buf953.users = [
        NodeUser(node=SchedulerNode(name='op954'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op955'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op964'), can_inplace=False, is_weak=False),
    ]
]
op953.node.kernel = extern_kernels.mm


op954: SchedulerNode(ComputedBuffer)
op954.writes = [MemoryDep('buf954', c0, {c0: 3538944}, None)]
op954.unmet_dependencies = [   MemoryDep('buf953', 1327104*c0 + 48*c1 + 2304*c2 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op954.met_dependencies = [MemoryDep('arg638_1', 48*c1 + c3, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op954.outputs = [
    buf954: ComputedBuffer
    buf954.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf954.users = [NodeUser(node=ExternKernelSchedulerNode(name='op956'), can_inplace=False, is_weak=False)]
]
op954.group.device = cuda:0
op954.group.iteration = (3538944, 1)
op954.sizes = ([8, 16, 576, 48], [])
buf953_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf954_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op954_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3
    index1 = 48*z1 + z3
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf953', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg638_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.14433756729740643, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf954', get_index_2, mul, None)
        return store


op955: SchedulerNode(ComputedBuffer)
op955.writes = [MemoryDep('buf955', c0, {c0: 3538944}, None)]
op955.unmet_dependencies = [   MemoryDep('buf953', 1327104*c0 + c1 + 2304*c2 + 768, {c0: 8, c1: 768, c2: 576}, None)]
op955.met_dependencies = [MemoryDep('arg638_1', c1 + 768, {c0: 8, c1: 768}, None)]
op955.outputs = [
    buf955: ComputedBuffer
    buf955.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
    buf955.users = [NodeUser(node=ExternKernelSchedulerNode(name='op956'), can_inplace=False, is_weak=False)]
]
op955.group.device = cuda:0
op955.group.iteration = (3538944, 1)
op955.sizes = ([8, 768, 576], [])
buf953_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf955_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 48, 576], stride=[442368, 27648, 576, 1])
class op955_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 576}
    index0 = 1327104*z0 + z1 + 2304*z2 + 768
    index1 = z1 + 768
    index2 = 442368*z0 + 576*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf953', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg638_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf955', get_index_2, add, None)
        return store


op956: ExternKernelSchedulerNode(ExternKernelOut)
op956.writes = [StarDep(name='buf956', mode=None)]
op956.unmet_dependencies = [StarDep(name='buf954', mode=None), StarDep(name='buf955', mode=None)]
op956.met_dependencies = []
op956.outputs = [
    buf956: ExternKernelOut
    buf956.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
    buf956.users = [NodeUser(node=SchedulerNode(name='op957'), can_inplace=False, is_weak=False)]
]
op956.node.kernel = extern_kernels.bmm


op957: SchedulerNode(ComputedBuffer)
op957.writes = [MemoryDep('buf957', c0, {c0: 42467328}, None)]
op957.unmet_dependencies = [   MemoryDep('buf956', 5308416*c0 + c1 + 331776*c2, {c0: 8, c1: 331776, c2: 16}, None)]
op957.met_dependencies = []
op957.outputs = [
    buf957: ComputedBuffer
    buf957.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf957.users = [NodeUser(node=ExternKernelSchedulerNode(name='op958'), can_inplace=False, is_weak=False)]
]
op957.group.device = cuda:0
op957.group.iteration = (42467328, 1)
op957.sizes = ([8, 331776, 16], [])
buf956_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 576], stride=[331776, 576, 1])
buf957_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op957_loop_body:
    var_ranges = {z0: 8, z1: 331776, z2: 16}
    index0 = 5308416*z0 + z1 + 331776*z2
    index1 = 5308416*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf956', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf957', get_index_1, load, None)
        return store


op958: ExternKernelSchedulerNode(ExternKernelOut)
op958.writes = [StarDep(name='buf958', mode=None)]
op958.unmet_dependencies = [StarDep(name='buf957', mode=None)]
op958.met_dependencies = [StarDep(name='arg639_1', mode=None)]
op958.outputs = [
    buf958: ExternKernelOut
    buf958.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf958.users = [
        NodeUser(node=SchedulerNode(name='op959'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op960'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op961'), can_inplace=True, is_weak=False),
    ]
]
op958.node.kernel = extern_kernels.mm


op959: SchedulerNode(ComputedBuffer)
op959.writes = [MemoryDep('buf959', c0, {c0: 73728}, None)]
op959.unmet_dependencies = [MemoryDep('buf958', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None)]
op959.met_dependencies = [MemoryDep('arg640_1', c1, {c0: 4608, c1: 16}, None)]
op959.outputs = [
    buf959: ComputedBuffer
    buf959.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf959.users = [
        NodeUser(node=SchedulerNode(name='op960'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op961'), can_inplace=False, is_weak=False),
    ]
]
op959.group.device = cuda:0
op959.group.iteration = (73728, 576)
op959.sizes = ([4608, 16], [576])
buf958_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf959_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op959_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf958', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg640_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf959', get_index_2, reduction)
        return store_reduction


op960: SchedulerNode(ComputedBuffer)
op960.writes = [MemoryDep('buf960', c0, {c0: 73728}, None)]
op960.unmet_dependencies = 
    [   MemoryDep('buf958', 9216*c0 + c1 + 16*c2, {c0: 4608, c1: 16, c2: 576}, None),
        MemoryDep('buf959', c0, {c0: 73728}, None)]
op960.met_dependencies = [MemoryDep('arg640_1', c1, {c0: 4608, c1: 16}, None)]
op960.outputs = [
    buf960: ComputedBuffer
    buf960.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
    buf960.users = [NodeUser(node=SchedulerNode(name='op961'), can_inplace=False, is_weak=False)]
]
op960.group.device = cuda:0
op960.group.iteration = (73728, 576)
op960.sizes = ([4608, 16], [576])
buf958_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf959_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf960_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
class op960_loop_body:
    var_ranges = {z0: 4608, z1: 16, z2: 576}
    index0 = 9216*z0 + z1 + 16*z2
    index1 = z1
    index2 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf958', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg640_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf959', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf960', get_index_3, reduction)
        return store_reduction


op961: SchedulerNode(ComputedBuffer)
op961.writes = [MemoryDep('buf961', c0, {c0: 42467328}, None)]
op961.unmet_dependencies = 
    [   MemoryDep('buf958', c0, {c0: 42467328}, None),
        MemoryDep('buf959', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None),
        MemoryDep('buf960', 16*c0 + c2, {c0: 4608, c1: 576, c2: 16}, None)]
op961.met_dependencies = [MemoryDep('arg640_1', c1, {c0: 2654208, c1: 16}, None)]
op961.outputs = [
    buf961: ComputedBuffer
    buf961.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
    buf961.users = [NodeUser(node=ExternKernelSchedulerNode(name='op962'), can_inplace=False, is_weak=False)]
]
op961.group.device = cuda:0
op961.group.iteration = (42467328, 1)
op961.sizes = ([4608, 576, 16], [])
buf958_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf959_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf960_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 1], stride=[9216, 1, 16, 73728])
buf961_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 576, 16], stride=[5308416, 9216, 16, 1])
class op961_loop_body:
    var_ranges = {z0: 4608, z1: 576, z2: 16}
    index0 = 9216*z0 + 16*z1 + z2
    index1 = z2
    index2 = 16*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf958', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg640_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf959', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf960', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf961', get_index_4, truediv, None)
        return store


op962: ExternKernelSchedulerNode(ExternKernelOut)
op962.writes = [StarDep(name='buf962', mode=None)]
op962.unmet_dependencies = [StarDep(name='buf961', mode=None)]
op962.met_dependencies = [StarDep(name='arg641_1', mode=None)]
op962.outputs = [
    buf962: ExternKernelOut
    buf962.layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
    buf962.users = [NodeUser(node=SchedulerNode(name='op963'), can_inplace=False, is_weak=False)]
]
op962.node.kernel = extern_kernels.mm


op963: SchedulerNode(ComputedBuffer)
op963.writes = [MemoryDep('buf963', c0, {c0: 42467328}, None)]
op963.unmet_dependencies = [   MemoryDep('buf962', 5308416*c0 + c1 + 16*c2, {c0: 8, c1: 16, c2: 331776}, None)]
op963.met_dependencies = [MemoryDep('arg642_1', c1, {c0: 8, c1: 16}, None)]
op963.outputs = [
    buf963: ComputedBuffer
    buf963.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
    buf963.users = [NodeUser(node=ExternKernelSchedulerNode(name='op965'), can_inplace=False, is_weak=False)]
]
op963.group.device = cuda:0
op963.group.iteration = (42467328, 1)
op963.sizes = ([8, 16, 331776], [])
buf962_layout = FixedLayout('cuda', torch.float32, size=[2654208, 16], stride=[16, 1])
arg642_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf963_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 576], stride=[5308416, 331776, 576, 1])
class op963_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 331776}
    index0 = 5308416*z0 + z1 + 16*z2
    index1 = z1
    index2 = 5308416*z0 + 331776*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf962', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg642_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf963', get_index_2, add, None)
        return store


op964: SchedulerNode(ComputedBuffer)
op964.writes = [MemoryDep('buf964', c0, {c0: 3538944}, None)]
op964.unmet_dependencies = [   MemoryDep('buf953', 1327104*c0 + 48*c1 + 2304*c2 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op964.met_dependencies = [   MemoryDep('arg638_1', 48*c1 + c3 + 1536, {c0: 8, c1: 16, c2: 576, c3: 48}, None)]
op964.outputs = [
    buf964: ComputedBuffer
    buf964.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
    buf964.users = [NodeUser(node=ExternKernelSchedulerNode(name='op965'), can_inplace=False, is_weak=False)]
]
op964.group.device = cuda:0
op964.group.iteration = (3538944, 1)
op964.sizes = ([8, 16, 576, 48], [])
buf953_layout = FixedLayout('cuda', torch.float32, size=[4608, 2304], stride=[2304, 1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[2304], stride=[1])
buf964_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 576, 48], stride=[442368, 27648, 48, 1])
class op964_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 576, z3: 48}
    index0 = 1327104*z0 + 48*z1 + 2304*z2 + z3 + 1536
    index1 = 48*z1 + z3 + 1536
    index2 = 442368*z0 + 27648*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf953', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg638_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf964', get_index_2, add, None)
        return store


op965: ExternKernelSchedulerNode(ExternKernelOut)
op965.writes = [StarDep(name='buf965', mode=None)]
op965.unmet_dependencies = [StarDep(name='buf963', mode=None), StarDep(name='buf964', mode=None)]
op965.met_dependencies = []
op965.outputs = [
    buf965: ExternKernelOut
    buf965.layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
    buf965.users = [NodeUser(node=SchedulerNode(name='op966'), can_inplace=False, is_weak=False)]
]
op965.node.kernel = extern_kernels.bmm


op966: SchedulerNode(ComputedBuffer)
op966.writes = [MemoryDep('buf966', c0, {c0: 3538944}, None)]
op966.unmet_dependencies = [   MemoryDep('buf965', 442368*c0 + 48*c1 + 27648*c2 + c3, {c0: 8, c1: 576, c2: 16, c3: 48}, None)]
op966.met_dependencies = []
op966.outputs = [
    buf966: ComputedBuffer
    buf966.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
    buf966.users = [NodeUser(node=ExternKernelSchedulerNode(name='op967'), can_inplace=False, is_weak=False)]
]
op966.group.device = cuda:0
op966.group.iteration = (3538944, 1)
op966.sizes = ([8, 576, 16, 48], [])
buf965_layout = FixedLayout('cuda', torch.float32, size=[128, 576, 48], stride=[27648, 48, 1])
buf966_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 16, 48], stride=[442368, 768, 48, 1])
class op966_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 16, z3: 48}
    index0 = 442368*z0 + 48*z1 + 27648*z2 + z3
    index1 = 442368*z0 + 768*z1 + 48*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf965', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf966', get_index_1, load, None)
        return store


op967: ExternKernelSchedulerNode(ExternKernelOut)
op967.writes = [StarDep(name='buf967', mode=None)]
op967.unmet_dependencies = [StarDep(name='buf966', mode=None)]
op967.met_dependencies = [StarDep(name='arg643_1', mode=None)]
op967.outputs = [
    buf967: ExternKernelOut
    buf967.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf967.users = [NodeUser(node=SchedulerNode(name='op968'), can_inplace=True, is_weak=False)]
]
op967.node.kernel = extern_kernels.mm


op968: SchedulerNode(ComputedBuffer)
op968.writes = [MemoryDep('buf968', c0, {c0: 3538944}, None)]
op968.unmet_dependencies = 
    [   MemoryDep('buf941', c0, {c0: 3538944}, None),
        MemoryDep('buf948', c0, {c0: 3538944}, None),
        MemoryDep('buf967', c0, {c0: 3538944}, None)]
op968.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg633_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg634_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg644_1', c1, {c0: 4608, c1: 768}, None)]
op968.outputs = [
    buf968: ComputedBuffer
    buf968.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf968.users = [
        NodeUser(node=SchedulerNode(name='op969'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op970'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op971'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op972'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op976'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op998'), can_inplace=False, is_weak=False),
    ]
]
op968.group.device = cuda:0
op968.group.iteration = (3538944, 1)
op968.sizes = ([4608, 768], [])
buf941_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf948_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg634_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf967_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg644_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op968_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf941', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg627_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf948', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg633_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg634_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf967', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg644_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf968', get_index_7, add_3, None)
        return store


op969: SchedulerNode(ComputedBuffer)
op969.writes = [MemoryDep('buf969', c0, {c0: 4608}, None)]
op969.unmet_dependencies = [MemoryDep('buf968', c0, {c0: 3538944}, None)]
op969.met_dependencies = []
op969.outputs = [
    buf969: ComputedBuffer
    buf969.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf969.users = [NodeUser(node=SchedulerNode(name='op972'), can_inplace=False, is_weak=False)]
]
op969.group.device = cuda:0
op969.group.iteration = (4608, 768)
op969.sizes = ([4608], [768])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf969_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op969_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf968', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf969', get_index_1, getitem)
        return store_reduction


op970: SchedulerNode(ComputedBuffer)
op970.writes = [MemoryDep('buf970', c0, {c0: 4608}, None)]
op970.unmet_dependencies = [MemoryDep('buf968', c0, {c0: 3538944}, None)]
op970.met_dependencies = []
op970.outputs = [
    buf970: ComputedBuffer
    buf970.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
    buf970.users = [NodeUser(node=SchedulerNode(name='op972'), can_inplace=False, is_weak=False)]
]
op970.group.device = cuda:0
op970.group.iteration = (4608, 768)
op970.sizes = ([4608], [768])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf970_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
class op970_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf968', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf970', get_index_1, getitem_1)
        return store_reduction


op972: SchedulerNode(ComputedBuffer)
op972.writes = [MemoryDep('buf972', c0, {c0: 3538944}, None)]
op972.unmet_dependencies = 
    [   MemoryDep('buf968', c0, {c0: 3538944}, None),
        MemoryDep('buf969', c0, {c0: 4608}, None),
        MemoryDep('buf970', c0, {c0: 4608}, None)]
op972.met_dependencies = 
    [   MemoryDep('arg646_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg647_1', c1, {c0: 4608, c1: 768}, None)]
op972.outputs = [
    buf972: ComputedBuffer
    buf972.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
    buf972.users = [NodeUser(node=ExternKernelSchedulerNode(name='op973'), can_inplace=False, is_weak=False)]
]
op972.group.device = cuda:0
op972.group.iteration = (3538944, 1)
op972.sizes = ([4608, 768], [])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
buf969_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
buf970_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 1], stride=[576, 1, 4608])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg647_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf972_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
class op972_loop_body:
    var_ranges = {z0: 4608, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf968', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf969', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf970', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg646_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg647_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf972', get_index_5, add_1, None)
        return store


op973: ExternKernelSchedulerNode(ExternKernelOut)
op973.writes = [StarDep(name='buf973', mode=None)]
op973.unmet_dependencies = [StarDep(name='buf972', mode=None)]
op973.met_dependencies = [StarDep(name='arg648_1', mode=None)]
op973.outputs = [
    buf973: ExternKernelOut
    buf973.layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
    buf973.users = [NodeUser(node=SchedulerNode(name='op974'), can_inplace=True, is_weak=False)]
]
op973.node.kernel = extern_kernels.mm


op974: SchedulerNode(ComputedBuffer)
op974.writes = [MemoryDep('buf974', c0, {c0: 14155776}, None)]
op974.unmet_dependencies = [MemoryDep('buf973', c0, {c0: 14155776}, None)]
op974.met_dependencies = [MemoryDep('arg649_1', c1, {c0: 4608, c1: 3072}, None)]
op974.outputs = [
    buf974: ComputedBuffer
    buf974.layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
    buf974.users = [NodeUser(node=ExternKernelSchedulerNode(name='op975'), can_inplace=False, is_weak=False)]
]
op974.group.device = cuda:0
op974.group.iteration = (14155776, 1)
op974.sizes = ([4608, 3072], [])
buf973_layout = FixedLayout('cuda', torch.float32, size=[4608, 3072], stride=[3072, 1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf974_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 3072], stride=[1769472, 3072, 1])
class op974_loop_body:
    var_ranges = {z0: 4608, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf973', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg649_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf973', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg649_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf974', get_index_4, mul_2, None)
        return store


op975: ExternKernelSchedulerNode(ExternKernelOut)
op975.writes = [StarDep(name='buf975', mode=None)]
op975.unmet_dependencies = [StarDep(name='buf974', mode=None)]
op975.met_dependencies = [StarDep(name='arg650_1', mode=None)]
op975.outputs = [
    buf975: ExternKernelOut
    buf975.layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
    buf975.users = [
        NodeUser(node=SchedulerNode(name='op976'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op998'), can_inplace=False, is_weak=False),
    ]
]
op975.node.kernel = extern_kernels.mm


op976: SchedulerNode(ComputedBuffer)
op976.writes = [MemoryDep('buf976', c0, {c0: 3545088}, None)]
op976.unmet_dependencies = 
    [   MemoryDep('buf968', 442368*c0 + c2 + 768*I, {c0: 8, c1: 577, c2: 768}, None),
        MemoryDep('buf975', 442368*c0 + c2 + 768*I, {c0: 8, c1: 577, c2: 768}, None)]
op976.met_dependencies = 
    [   MemoryDep('arg645_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg651_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg652_1', c1, {c0: 4616, c1: 768}, None)]
op976.outputs = [
    buf976: ComputedBuffer
    buf976.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
    buf976.users = [
        NodeUser(node=SchedulerNode(name='op977'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op978'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op979'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op980'), can_inplace=True, is_weak=False),
    ]
]
op976.group.device = cuda:0
op976.group.iteration = (3545088, 1)
op976.sizes = ([8, 577, 768], [])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg645_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf975_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg651_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf976_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
class op976_loop_body:
    var_ranges = {z0: 8, z1: 577, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 442368*z0 + z2 + 768*I
    index3 = 443136*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(577, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf976', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg652_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf968', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg645_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf975', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg651_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        return add_1


op977: SchedulerNode(ComputedBuffer)
op977.writes = [MemoryDep('buf977', c0, {c0: 4616}, None)]
op977.unmet_dependencies = [MemoryDep('buf976', c0, {c0: 3545088}, None)]
op977.met_dependencies = []
op977.outputs = [
    buf977: ComputedBuffer
    buf977.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf977.users = [NodeUser(node=SchedulerNode(name='op980'), can_inplace=False, is_weak=False)]
]
op977.group.device = cuda:0
op977.group.iteration = (4616, 768)
op977.sizes = ([4616], [768])
buf976_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf977_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op977_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf976', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf977', get_index_1, getitem)
        return store_reduction


op978: SchedulerNode(ComputedBuffer)
op978.writes = [MemoryDep('buf978', c0, {c0: 4616}, None)]
op978.unmet_dependencies = [MemoryDep('buf976', c0, {c0: 3545088}, None)]
op978.met_dependencies = []
op978.outputs = [
    buf978: ComputedBuffer
    buf978.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf978.users = [NodeUser(node=SchedulerNode(name='op980'), can_inplace=False, is_weak=False)]
]
op978.group.device = cuda:0
op978.group.iteration = (4616, 768)
op978.sizes = ([4616], [768])
buf976_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf978_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op978_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf976', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf978', get_index_1, getitem_1)
        return store_reduction


op980: SchedulerNode(ComputedBuffer)
op980.writes = [MemoryDep('buf980', c0, {c0: 3545088}, None)]
op980.unmet_dependencies = 
    [   MemoryDep('buf976', c0, {c0: 3545088}, None),
        MemoryDep('buf977', c0, {c0: 4616}, None),
        MemoryDep('buf978', c0, {c0: 4616}, None)]
op980.met_dependencies = 
    [   MemoryDep('arg654_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg655_1', c1, {c0: 4616, c1: 768}, None)]
op980.outputs = [
    buf980: ComputedBuffer
    buf980.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
    buf980.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op981'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op982'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op983'), can_inplace=False, is_weak=False),
    ]
]
op980.group.device = cuda:0
op980.group.iteration = (3545088, 1)
op980.sizes = ([4616, 768], [])
buf976_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf977_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
buf978_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
arg654_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg655_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf980_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
class op980_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf976', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf977', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf978', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg654_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg655_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf980', get_index_5, add_1, None)
        return store


op981: ExternKernelSchedulerNode(ExternKernelOut)
op981.writes = [StarDep(name='buf981', mode=None)]
op981.unmet_dependencies = [StarDep(name='buf980', mode=None)]
op981.met_dependencies = [StarDep(name='arg656_1', mode=None), StarDep(name='arg657_1', mode=None)]
op981.outputs = [
    buf981: ExternKernelOut
    buf981.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf981.users = [NodeUser(node=ExternKernelSchedulerNode(name='op984'), can_inplace=False, is_weak=False)]
]
op981.node.kernel = extern_kernels.addmm


op982: ExternKernelSchedulerNode(ExternKernelOut)
op982.writes = [StarDep(name='buf982', mode=None)]
op982.unmet_dependencies = [StarDep(name='buf980', mode=None)]
op982.met_dependencies = [StarDep(name='arg658_1', mode=None), StarDep(name='arg659_1', mode=None)]
op982.outputs = [
    buf982: ExternKernelOut
    buf982.layout = FixedLayout('cuda', torch.float32, size=[4616, 768], stride=[768, 1])
    buf982.users = [NodeUser(node=ExternKernelSchedulerNode(name='op984'), can_inplace=False, is_weak=False)]
]
op982.node.kernel = extern_kernels.addmm


op983: ExternKernelSchedulerNode(ExternKernelOut)
op983.writes = [StarDep(name='buf983', mode=None)]
op983.unmet_dependencies = [StarDep(name='buf980', mode=None)]
op983.met_dependencies = [StarDep(name='arg660_1', mode=None), StarDep(name='arg661_1', mode=None)]
op983.outputs = [
    buf983: ExternKernelOut
    buf983.layout = FixedLayout('cuda', torch.float32, size=[4616, 768], stride=[768, 1])
    buf983.users = [NodeUser(node=ExternKernelSchedulerNode(name='op984'), can_inplace=False, is_weak=False)]
]
op983.node.kernel = extern_kernels.addmm


op984: ExternKernelSchedulerNode(FallbackKernel)
op984.writes = [StarDep(name='buf984', mode=None)]
op984.unmet_dependencies = 
    [   StarDep(name='buf981', mode=None),
        StarDep(name='buf982', mode=None),
        StarDep(name='buf983', mode=None)]
op984.met_dependencies = []
op984.outputs = [
    buf984: FallbackKernel
    buf984.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf984.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op985'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op986'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op987'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op988'), can_inplace=False, is_weak=False),
    ]
]
op984.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op985: ExternKernelSchedulerNode(MultiOutput)
op985.writes = [StarDep(name='buf985', mode=None)]
op985.unmet_dependencies = [StarDep(name='buf984', mode=None)]
op985.met_dependencies = []
op985.outputs = [
    buf985: MultiOutput
    buf985.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 48], stride=[768, 48, 768, 1])
    buf985.users = [NodeUser(node=ExternKernelSchedulerNode(name='op989'), can_inplace=False, is_weak=False)]
]
op985.node.kernel = None


op989: ExternKernelSchedulerNode(ExternKernelOut)
op989.writes = [StarDep(name='buf989', mode=None)]
op989.unmet_dependencies = [StarDep(name='buf985', mode=None)]
op989.met_dependencies = [StarDep(name='arg662_1', mode=None)]
op989.outputs = [
    buf989: ExternKernelOut
    buf989.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf989.users = [
        NodeUser(node=SchedulerNode(name='op990'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op991'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op992'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op993'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op997'), can_inplace=False, is_weak=False),
    ]
]
op989.node.kernel = extern_kernels.mm


op990: SchedulerNode(ComputedBuffer)
op990.writes = [MemoryDep('buf990', c0, {c0: 8}, None)]
op990.unmet_dependencies = [MemoryDep('buf989', c0, {c0: 6144}, None)]
op990.met_dependencies = 
    [   MemoryDep('arg652_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg653_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg663_1', c1, {c0: 8, c1: 768}, None)]
op990.outputs = [
    buf990: ComputedBuffer
    buf990.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf990.users = [NodeUser(node=SchedulerNode(name='op993'), can_inplace=False, is_weak=False)]
]
op990.group.device = cuda:0
op990.group.iteration = (8, 768)
op990.sizes = ([8], [768])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf989_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf990_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op990_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg652_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg653_1', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf989', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg663_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf990', get_index_4, getitem)
        return store_reduction


op991: SchedulerNode(ComputedBuffer)
op991.writes = [MemoryDep('buf991', c0, {c0: 8}, None)]
op991.unmet_dependencies = [MemoryDep('buf989', c0, {c0: 6144}, None)]
op991.met_dependencies = 
    [   MemoryDep('arg652_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg653_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg663_1', c1, {c0: 8, c1: 768}, None)]
op991.outputs = [
    buf991: ComputedBuffer
    buf991.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf991.users = [NodeUser(node=SchedulerNode(name='op993'), can_inplace=False, is_weak=False)]
]
op991.group.device = cuda:0
op991.group.iteration = (8, 768)
op991.sizes = ([8], [768])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf989_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf991_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op991_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg652_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg653_1', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf989', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg663_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf991', get_index_4, getitem_1)
        return store_reduction


op993: SchedulerNode(ComputedBuffer)
op993.writes = [MemoryDep('buf993', c0, {c0: 6144}, None)]
op993.unmet_dependencies = 
    [   MemoryDep('buf989', c0, {c0: 6144}, None),
        MemoryDep('buf990', c0, {c0: 8}, None),
        MemoryDep('buf991', c0, {c0: 8}, None)]
op993.met_dependencies = 
    [   MemoryDep('arg652_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg653_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg663_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg665_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg666_1', c1, {c0: 8, c1: 768}, None)]
op993.outputs = [
    buf993: ComputedBuffer
    buf993.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 768], stride=[768, 768, 1])
    buf993.users = [NodeUser(node=ExternKernelSchedulerNode(name='op994'), can_inplace=False, is_weak=False)]
]
op993.group.device = cuda:0
op993.group.iteration = (6144, 1)
op993.sizes = ([8, 768], [])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf989_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf990_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf991_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf993_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 768], stride=[768, 768, 1])
class op993_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg652_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg653_1', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf989', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg663_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf990', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf991', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg665_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('arg666_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index1')
        store = ops.store('buf993', get_index_8, add_3, None)
        return store


op994: ExternKernelSchedulerNode(ExternKernelOut)
op994.writes = [StarDep(name='buf994', mode=None)]
op994.unmet_dependencies = [StarDep(name='buf993', mode=None)]
op994.met_dependencies = [StarDep(name='arg667_1', mode=None)]
op994.outputs = [
    buf994: ExternKernelOut
    buf994.layout = FixedLayout('cuda', torch.float32, size=[8, 3072], stride=[3072, 1])
    buf994.users = [NodeUser(node=SchedulerNode(name='op995'), can_inplace=True, is_weak=False)]
]
op994.node.kernel = extern_kernels.mm


op995: SchedulerNode(ComputedBuffer)
op995.writes = [MemoryDep('buf995', c0, {c0: 24576}, None)]
op995.unmet_dependencies = [MemoryDep('buf994', c0, {c0: 24576}, None)]
op995.met_dependencies = [MemoryDep('arg668_1', c1, {c0: 8, c1: 3072}, None)]
op995.outputs = [
    buf995: ComputedBuffer
    buf995.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3072], stride=[3072, 3072, 1])
    buf995.users = [NodeUser(node=ExternKernelSchedulerNode(name='op996'), can_inplace=False, is_weak=False)]
]
op995.group.device = cuda:0
op995.group.iteration = (24576, 1)
op995.sizes = ([8, 3072], [])
buf994_layout = FixedLayout('cuda', torch.float32, size=[8, 3072], stride=[3072, 1])
arg668_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf995_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3072], stride=[3072, 3072, 1])
class op995_loop_body:
    var_ranges = {z0: 8, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf994', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg668_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf994', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg668_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf995', get_index_4, mul_2, None)
        return store


op996: ExternKernelSchedulerNode(ExternKernelOut)
op996.writes = [StarDep(name='buf996', mode=None)]
op996.unmet_dependencies = [StarDep(name='buf995', mode=None)]
op996.met_dependencies = [StarDep(name='arg669_1', mode=None)]
op996.outputs = [
    buf996: ExternKernelOut
    buf996.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf996.users = [NodeUser(node=SchedulerNode(name='op997'), can_inplace=False, is_weak=False)]
]
op996.node.kernel = extern_kernels.mm


op997: SchedulerNode(ComputedBuffer)
op997.writes = [MemoryDep('buf997', 443136*c0 + c1, {c0: 8, c1: 768}, None)]
op997.unmet_dependencies = 
    [   MemoryDep('buf989', c0, {c0: 6144}, None),
        MemoryDep('buf996', c0, {c0: 6144}, None)]
op997.met_dependencies = 
    [   MemoryDep('arg652_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg653_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg663_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg664_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg670_1', c1, {c0: 8, c1: 768}, None)]
op997.outputs = [
    buf997: ComputedBuffer
    buf997.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
    buf997.aliases = ['buf999']
    buf997.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op999'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1000'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1002'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1003'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1013'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1014'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1015'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1016'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1020'), can_inplace=False, is_weak=False),
    ]
]
op997.group.device = cuda:0
op997.group.iteration = (6144, 1)
op997.sizes = ([8, 768], [])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf989_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg664_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf996_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg670_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf997_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
class op997_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = z1
    index1 = 768*z0 + z1
    index2 = 443136*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg652_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg653_1', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf989', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg663_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('arg664_1', get_index_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf996', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('arg670_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf997', get_index_7, add_3, None)
        return store


op998: SchedulerNode(ComputedBuffer)
op998.writes = [MemoryDep('buf998', 443136*c0 + c1, {c0: 8, c1: 442368}, None)]
op998.unmet_dependencies = 
    [   MemoryDep('buf968', c0, {c0: 3538944}, None),
        MemoryDep('buf975', c0, {c0: 3538944}, None)]
op998.met_dependencies = 
    [   MemoryDep('arg645_1', c1, {c0: 4608, c1: 768}, None),
        MemoryDep('arg651_1', c1, {c0: 4608, c1: 768}, None)]
op998.outputs = [
    buf998: ComputedBuffer
    buf998.layout = NonOwningLayout('cuda', torch.float32, size=[8, 576, 768], stride=[443136, 768, 1])
    buf998.aliases = ['buf999']
    buf998.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op999'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1000'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1002'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1003'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1013'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1014'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1015'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1016'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1020'), can_inplace=False, is_weak=False),
    ]
]
op998.group.device = cuda:0
op998.group.iteration = (3538944, 1)
op998.sizes = ([8, 576, 768], [])
buf968_layout = FixedLayout('cuda', torch.float32, size=[8, 576, 768], stride=[442368, 768, 1])
arg645_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf975_layout = FixedLayout('cuda', torch.float32, size=[4608, 768], stride=[768, 1])
arg651_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf998_layout = NonOwningLayout('cuda', torch.float32, size=[8, 576, 768], stride=[443136, 768, 1])
class op998_loop_body:
    var_ranges = {z0: 8, z1: 576, z2: 768}
    index0 = 442368*z0 + 768*z1 + z2
    index1 = z2
    index2 = 443136*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf968', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg645_1', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf975', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg651_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf998', get_index_4, add_1, None)
        return store


op999: NopKernelSchedulerNode(ConcatKernel)
op999.writes = [StarDep(name='buf999', mode=None)]
op999.unmet_dependencies = [StarDep(name='buf997', mode=None), StarDep(name='buf998', mode=None)]
op999.met_dependencies = []
op999.outputs = [
    buf999: ConcatKernel
    buf999.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
    buf999.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op999'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1000'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1001'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1002'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1003'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1013'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1014'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1015'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1016'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1020'), can_inplace=False, is_weak=False),
    ]
]


op1000: SchedulerNode(ComputedBuffer)
op1000.writes = [MemoryDep('buf1000', c0, {c0: 4616}, None)]
op1000.unmet_dependencies = [MemoryDep('buf999', c0, {c0: 3545088}, None)]
op1000.met_dependencies = []
op1000.outputs = [
    buf1000: ComputedBuffer
    buf1000.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf1000.users = [NodeUser(node=SchedulerNode(name='op1003'), can_inplace=False, is_weak=False)]
]
op1000.group.device = cuda:0
op1000.group.iteration = (4616, 768)
op1000.sizes = ([4616], [768])
buf999_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1000_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op1000_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf999', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1000', get_index_1, getitem)
        return store_reduction


op1001: SchedulerNode(ComputedBuffer)
op1001.writes = [MemoryDep('buf1001', c0, {c0: 4616}, None)]
op1001.unmet_dependencies = [MemoryDep('buf999', c0, {c0: 3545088}, None)]
op1001.met_dependencies = []
op1001.outputs = [
    buf1001: ComputedBuffer
    buf1001.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf1001.users = [NodeUser(node=SchedulerNode(name='op1003'), can_inplace=False, is_weak=False)]
]
op1001.group.device = cuda:0
op1001.group.iteration = (4616, 768)
op1001.sizes = ([4616], [768])
buf999_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1001_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op1001_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf999', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1001', get_index_1, getitem_1)
        return store_reduction


op1003: SchedulerNode(ComputedBuffer)
op1003.writes = [MemoryDep('buf1003', c0, {c0: 3545088}, None)]
op1003.unmet_dependencies = 
    [   MemoryDep('buf1000', c0, {c0: 4616}, None),
        MemoryDep('buf1001', c0, {c0: 4616}, None),
        MemoryDep('buf999', c0, {c0: 3545088}, None)]
op1003.met_dependencies = 
    [   MemoryDep('arg672_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg673_1', c1, {c0: 4616, c1: 768}, None)]
op1003.outputs = [
    buf1003: ComputedBuffer
    buf1003.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
    buf1003.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1004'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1005'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1006'), can_inplace=False, is_weak=False),
    ]
]
op1003.group.device = cuda:0
op1003.group.iteration = (3545088, 1)
op1003.sizes = ([4616, 768], [])
buf999_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1000_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
buf1001_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
arg672_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1003_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
class op1003_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf999', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1000', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1001', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg672_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg673_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf1003', get_index_5, add_1, None)
        return store


op1004: ExternKernelSchedulerNode(ExternKernelOut)
op1004.writes = [StarDep(name='buf1004', mode=None)]
op1004.unmet_dependencies = [StarDep(name='buf1003', mode=None)]
op1004.met_dependencies = [StarDep(name='arg674_1', mode=None), StarDep(name='arg675_1', mode=None)]
op1004.outputs = [
    buf1004: ExternKernelOut
    buf1004.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf1004.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1007'), can_inplace=False, is_weak=False)]
]
op1004.node.kernel = extern_kernels.addmm


op1005: ExternKernelSchedulerNode(ExternKernelOut)
op1005.writes = [StarDep(name='buf1005', mode=None)]
op1005.unmet_dependencies = [StarDep(name='buf1003', mode=None)]
op1005.met_dependencies = [StarDep(name='arg676_1', mode=None), StarDep(name='arg677_1', mode=None)]
op1005.outputs = [
    buf1005: ExternKernelOut
    buf1005.layout = FixedLayout('cuda', torch.float32, size=[4616, 768], stride=[768, 1])
    buf1005.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1007'), can_inplace=False, is_weak=False)]
]
op1005.node.kernel = extern_kernels.addmm


op1006: ExternKernelSchedulerNode(ExternKernelOut)
op1006.writes = [StarDep(name='buf1006', mode=None)]
op1006.unmet_dependencies = [StarDep(name='buf1003', mode=None)]
op1006.met_dependencies = [StarDep(name='arg678_1', mode=None), StarDep(name='arg679_1', mode=None)]
op1006.outputs = [
    buf1006: ExternKernelOut
    buf1006.layout = FixedLayout('cuda', torch.float32, size=[4616, 768], stride=[768, 1])
    buf1006.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1007'), can_inplace=False, is_weak=False)]
]
op1006.node.kernel = extern_kernels.addmm


op1007: ExternKernelSchedulerNode(FallbackKernel)
op1007.writes = [StarDep(name='buf1007', mode=None)]
op1007.unmet_dependencies = 
    [   StarDep(name='buf1004', mode=None),
        StarDep(name='buf1005', mode=None),
        StarDep(name='buf1006', mode=None)]
op1007.met_dependencies = []
op1007.outputs = [
    buf1007: FallbackKernel
    buf1007.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf1007.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1008'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1009'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1010'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op1011'), can_inplace=False, is_weak=False),
    ]
]
op1007.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op1008: ExternKernelSchedulerNode(MultiOutput)
op1008.writes = [StarDep(name='buf1008', mode=None)]
op1008.unmet_dependencies = [StarDep(name='buf1007', mode=None)]
op1008.met_dependencies = []
op1008.outputs = [
    buf1008: MultiOutput
    buf1008.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 48], stride=[768, 48, 768, 1])
    buf1008.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1012'), can_inplace=False, is_weak=False)]
]
op1008.node.kernel = None


op1012: ExternKernelSchedulerNode(ExternKernelOut)
op1012.writes = [StarDep(name='buf1012', mode=None)]
op1012.unmet_dependencies = [StarDep(name='buf1008', mode=None)]
op1012.met_dependencies = [StarDep(name='arg680_1', mode=None)]
op1012.outputs = [
    buf1012: ExternKernelOut
    buf1012.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf1012.users = [
        NodeUser(node=SchedulerNode(name='op1013'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1014'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1015'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1016'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1020'), can_inplace=False, is_weak=False),
    ]
]
op1012.node.kernel = extern_kernels.mm


op1013: SchedulerNode(ComputedBuffer)
op1013.writes = [MemoryDep('buf1013', c0, {c0: 8}, None)]
op1013.unmet_dependencies = 
    [   MemoryDep('buf1012', c0, {c0: 6144}, None),
        MemoryDep('buf997', 443136*c0 + c1, {c0: 8, c1: 768}, None)]
op1013.met_dependencies = 
    [   MemoryDep('arg671_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg681_1', c1, {c0: 8, c1: 768}, None)]
op1013.outputs = [
    buf1013: ComputedBuffer
    buf1013.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf1013.users = [NodeUser(node=SchedulerNode(name='op1016'), can_inplace=False, is_weak=False)]
]
op1013.group.device = cuda:0
op1013.group.iteration = (8, 768)
op1013.sizes = ([8], [768])
buf997_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1012_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1013_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op1013_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 443136*z0 + z1
    index1 = z1
    index2 = 768*z0 + z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf997', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg671_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1012', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg681_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1013', get_index_4, getitem)
        return store_reduction


op1014: SchedulerNode(ComputedBuffer)
op1014.writes = [MemoryDep('buf1014', c0, {c0: 8}, None)]
op1014.unmet_dependencies = 
    [   MemoryDep('buf1012', c0, {c0: 6144}, None),
        MemoryDep('buf997', 443136*c0 + c1, {c0: 8, c1: 768}, None)]
op1014.met_dependencies = 
    [   MemoryDep('arg671_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg681_1', c1, {c0: 8, c1: 768}, None)]
op1014.outputs = [
    buf1014: ComputedBuffer
    buf1014.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf1014.users = [NodeUser(node=SchedulerNode(name='op1016'), can_inplace=False, is_weak=False)]
]
op1014.group.device = cuda:0
op1014.group.iteration = (8, 768)
op1014.sizes = ([8], [768])
buf997_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1012_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1014_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op1014_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 443136*z0 + z1
    index1 = z1
    index2 = 768*z0 + z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf997', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg671_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1012', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg681_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1014', get_index_4, getitem_1)
        return store_reduction


op1016: SchedulerNode(ComputedBuffer)
op1016.writes = [MemoryDep('buf1016', c0, {c0: 6144}, None)]
op1016.unmet_dependencies = 
    [   MemoryDep('buf1012', c0, {c0: 6144}, None),
        MemoryDep('buf1013', c0, {c0: 8}, None),
        MemoryDep('buf1014', c0, {c0: 8}, None),
        MemoryDep('buf997', 443136*c0 + c1, {c0: 8, c1: 768}, None)]
op1016.met_dependencies = 
    [   MemoryDep('arg671_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg681_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg683_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg684_1', c1, {c0: 8, c1: 768}, None)]
op1016.outputs = [
    buf1016: ComputedBuffer
    buf1016.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 768], stride=[768, 768, 1])
    buf1016.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1017'), can_inplace=False, is_weak=False)]
]
op1016.group.device = cuda:0
op1016.group.iteration = (6144, 1)
op1016.sizes = ([8, 768], [])
buf997_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1012_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1013_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf1014_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1016_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 768], stride=[768, 768, 1])
class op1016_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 443136*z0 + z1
    index1 = z1
    index2 = 768*z0 + z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf997', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg671_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf1012', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg681_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf1013', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1014', get_index_5)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg683_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg684_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf1016', get_index_8, add_3, None)
        return store


op1017: ExternKernelSchedulerNode(ExternKernelOut)
op1017.writes = [StarDep(name='buf1017', mode=None)]
op1017.unmet_dependencies = [StarDep(name='buf1016', mode=None)]
op1017.met_dependencies = [StarDep(name='arg685_1', mode=None)]
op1017.outputs = [
    buf1017: ExternKernelOut
    buf1017.layout = FixedLayout('cuda', torch.float32, size=[8, 3072], stride=[3072, 1])
    buf1017.users = [NodeUser(node=SchedulerNode(name='op1018'), can_inplace=True, is_weak=False)]
]
op1017.node.kernel = extern_kernels.mm


op1018: SchedulerNode(ComputedBuffer)
op1018.writes = [MemoryDep('buf1018', c0, {c0: 24576}, None)]
op1018.unmet_dependencies = [MemoryDep('buf1017', c0, {c0: 24576}, None)]
op1018.met_dependencies = [MemoryDep('arg686_1', c1, {c0: 8, c1: 3072}, None)]
op1018.outputs = [
    buf1018: ComputedBuffer
    buf1018.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3072], stride=[3072, 3072, 1])
    buf1018.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1019'), can_inplace=False, is_weak=False)]
]
op1018.group.device = cuda:0
op1018.group.iteration = (24576, 1)
op1018.sizes = ([8, 3072], [])
buf1017_layout = FixedLayout('cuda', torch.float32, size=[8, 3072], stride=[3072, 1])
arg686_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf1018_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3072], stride=[3072, 3072, 1])
class op1018_loop_body:
    var_ranges = {z0: 8, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1017', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg686_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1017', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg686_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf1018', get_index_4, mul_2, None)
        return store


op1019: ExternKernelSchedulerNode(ExternKernelOut)
op1019.writes = [StarDep(name='buf1019', mode=None)]
op1019.unmet_dependencies = [StarDep(name='buf1018', mode=None)]
op1019.met_dependencies = [StarDep(name='arg687_1', mode=None)]
op1019.outputs = [
    buf1019: ExternKernelOut
    buf1019.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf1019.users = [NodeUser(node=SchedulerNode(name='op1020'), can_inplace=False, is_weak=False)]
]
op1019.node.kernel = extern_kernels.mm


op1020: SchedulerNode(ComputedBuffer)
op1020.writes = [MemoryDep('buf1020', c0, {c0: 3545088}, None)]
op1020.unmet_dependencies = 
    [   MemoryDep('buf1012', 768*c0 + c2, {c0: 8, c1: 577, c2: 768}, None),
        MemoryDep('buf1019', 768*c0 + c2, {c0: 8, c1: 577, c2: 768}, None),
        MemoryDep('buf997', 443136*c0 + c2, {c0: 8, c1: 577, c2: 768}, None),
        MemoryDep('buf998', 443136*c0 + c2 + 768*I, {c0: 8, c1: 577, c2: 768}, None)]
op1020.met_dependencies = 
    [   MemoryDep('arg671_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg681_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg682_1', c1, {c0: 4616, c1: 768}, None),
        MemoryDep('arg688_1', c1, {c0: 4616, c1: 768}, None)]
op1020.outputs = [
    buf1020: ComputedBuffer
    buf1020.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
    buf1020.users = [
        NodeUser(node=SchedulerNode(name='op1021'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1022'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1023'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op1024'), can_inplace=False, is_weak=False),
    ]
]
op1020.group.device = cuda:0
op1020.group.iteration = (3545088, 1)
op1020.sizes = ([8, 577, 768], [])
buf997_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1, 768], stride=[443136, 768, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1012_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg682_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1019_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
arg688_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf998_layout = NonOwningLayout('cuda', torch.float32, size=[8, 576, 768], stride=[443136, 768, 1])
buf1020_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
class op1020_loop_body:
    var_ranges = {z0: 8, z1: 577, z2: 768}
    index0 = z1
    index1 = 443136*z0 + z2
    index2 = z2
    index3 = 768*z0 + z2
    index4 = 443136*z0 + z2 + 768*I
    index5 = 443136*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(577, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf1020', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf997', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg671_1', get_index_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf1012', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg681_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg682_1', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1019', get_index_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg688_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        return add_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf998', get_index)
        return load


op1021: SchedulerNode(ComputedBuffer)
op1021.writes = [MemoryDep('buf1021', c0, {c0: 4616}, None)]
op1021.unmet_dependencies = [MemoryDep('buf1020', c0, {c0: 3545088}, None)]
op1021.met_dependencies = []
op1021.outputs = [
    buf1021: ComputedBuffer
    buf1021.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf1021.users = [NodeUser(node=SchedulerNode(name='op1024'), can_inplace=False, is_weak=False)]
]
op1021.group.device = cuda:0
op1021.group.iteration = (4616, 768)
op1021.sizes = ([4616], [768])
buf1020_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1021_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op1021_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1020', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1021', get_index_1, getitem)
        return store_reduction


op1022: SchedulerNode(ComputedBuffer)
op1022.writes = [MemoryDep('buf1022', c0, {c0: 4616}, None)]
op1022.unmet_dependencies = [MemoryDep('buf1020', c0, {c0: 3545088}, None)]
op1022.met_dependencies = []
op1022.outputs = [
    buf1022: ComputedBuffer
    buf1022.layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
    buf1022.users = [NodeUser(node=SchedulerNode(name='op1024'), can_inplace=False, is_weak=False)]
]
op1022.group.device = cuda:0
op1022.group.iteration = (4616, 768)
op1022.sizes = ([4616], [768])
buf1020_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1022_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
class op1022_loop_body:
    var_ranges = {z0: 4616, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1020', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1022', get_index_1, getitem_1)
        return store_reduction


op1024: SchedulerNode(ComputedBuffer)
op1024.writes = [MemoryDep('buf1024', c0, {c0: 6144}, None)]
op1024.unmet_dependencies = 
    [   MemoryDep('buf1020', 443136*c0 + c1, {c0: 8, c1: 768}, None),
        MemoryDep('buf1021', 577*c0, {c0: 8}, None),
        MemoryDep('buf1022', 577*c0, {c0: 8}, None)]
op1024.met_dependencies = 
    [   MemoryDep('arg689_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg690_1', c1, {c0: 8, c1: 768}, None)]
op1024.outputs = [
    buf1024: ComputedBuffer
    buf1024.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf1024.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1025'), can_inplace=False, is_weak=False)]
]
op1024.group.device = cuda:0
op1024.group.iteration = (6144, 1)
op1024.sizes = ([8, 768], [])
buf1020_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 768], stride=[443136, 768, 1])
buf1021_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
buf1022_layout = FixedLayout('cuda', torch.float32, size=[8, 577, 1], stride=[577, 1, 4640])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg690_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf1024_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
class op1024_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 443136*z0 + z1
    index1 = 577*z0
    index2 = z1
    index3 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1020', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1021', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1022', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg689_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg690_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf1024', get_index_5, add_1, None)
        return store


op1025: ExternKernelSchedulerNode(ExternKernelOut)
op1025.writes = [StarDep(name='buf1025', mode=None)]
op1025.unmet_dependencies = [StarDep(name='buf1024', mode=None)]
op1025.met_dependencies = [StarDep(name='arg691_1', mode=None), StarDep(name='arg692_1', mode=None)]
op1025.outputs = [
    buf1025: ExternKernelOut
    buf1025.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf1025.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op1025.node.kernel = extern_kernels.addmm



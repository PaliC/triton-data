op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 32, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 864}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (864, 1)
op1.sizes = ([32, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3_op4: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op4.writes = 
    [   MemoryDep('buf3', c0, {c0: 3211264}, None),
        MemoryDep('buf4', c0, {c0: 3211264}, None)]
op3_op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3211264}, None)]
op3_op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 32}, None)]
op3_op4.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3_op4.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3211264}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 32}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3211264, 1)
op3.sizes = ([100352, 32], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store
op3_op4.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 3211264}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (3211264, 1)
op4.sizes = ([3211264], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op4_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 3211264}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 3211264}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 100352, c1: 32}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (3211264, 1)
op6.sizes = ([100352, 32], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op6_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_2)
        constant_3 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, minimum, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.node.kernel = extern_kernels.convolution


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1605632}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1605632}, None)]
op8.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg13_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg14_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg15_1', c1, {c0: 100352, c1: 16}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1605632, 1)
op8.sizes = ([100352, 16], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op8_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, add_1, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelAlloc)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelAlloc
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.convolution


op10_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op10_op11.writes = 
    [   MemoryDep('buf10', c0, {c0: 9633792}, None),
        MemoryDep('buf11', c0, {c0: 9633792}, None)]
op10_op11.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 9633792}, None)]
op10_op11.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg18_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg19_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg20_1', c1, {c0: 100352, c1: 96}, None)]
op10_op11.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10_op11.snodes[0] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 9633792}, None)]
op10.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 9633792}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg18_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg19_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg20_1', c1, {c0: 100352, c1: 96}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (9633792, 1)
op10.sizes = ([100352, 96], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
class op10_loop_body:
    var_ranges = {z0: 100352, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf10', get_index_5, add_1, None)
        return store
op10_op11.snodes[1] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 9633792}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 9633792}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (9633792, 1)
op11.sizes = ([9633792], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
class op11_loop_body:
    var_ranges = {z0: 9633792}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf10', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf11', get_index_2, mul, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2408448}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 2408448}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 96}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (2408448, 1)
op13.sizes = ([25088, 96], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op13_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_2)
        constant_3 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, minimum, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 27, 56, 56], stride=[84672, 1, 1512, 27])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 677376}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 677376}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 25088, c1: 27}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 27}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 27}, None),
        MemoryDep('arg30_1', c1, {c0: 25088, c1: 27}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 27, 56, 56], stride=[84672, 1, 1512, 27])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (677376, 1)
op15.sizes = ([25088, 27], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 27, 56, 56], stride=[84672, 1, 1512, 27])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[27], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[27], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[27], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[27], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 27, 56, 56], stride=[84672, 1, 1512, 27])
class op15_loop_body:
    var_ranges = {z0: 25088, z1: 27}
    index0 = 27*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf15', get_index_5, add_1, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17_op18: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op17_op18.writes = 
    [   MemoryDep('buf17', c0, {c0: 4064256}, None),
        MemoryDep('buf18', c0, {c0: 4064256}, None)]
op17_op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4064256}, None)]
op17_op18.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 162}, None)]
op17_op18.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17_op18.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 4064256}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 4064256}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 162}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (4064256, 1)
op17.sizes = ([25088, 162], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
class op17_loop_body:
    var_ranges = {z0: 25088, z1: 162}
    index0 = 162*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, add_1, None)
        return store
op17_op18.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4064256}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4064256}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4064256, 1)
op18.sizes = ([4064256], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
class op18_loop_body:
    var_ranges = {z0: 4064256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf17', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf18', get_index_2, mul, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 4064256}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 4064256}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 162}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 162}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (4064256, 1)
op20.sizes = ([25088, 162], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 56, 56], stride=[508032, 1, 9072, 162])
class op20_loop_body:
    var_ranges = {z0: 25088, z1: 162}
    index0 = 162*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_2)
        constant_3 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, minimum, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 953344}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 953344}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 38}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 38}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 38}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 38}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (953344, 1)
op22.sizes = ([25088, 38], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[38], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[38], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[38], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[38], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
class op22_loop_body:
    var_ranges = {z0: 25088, z1: 38}
    index0 = 38*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, add_1, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 953344}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf15', 27*c0 + I, {c0: 25088, c1: 38}, None),
        MemoryDep('buf22', 38*c0 + I + 27, {c0: 25088, c1: 38}, None),
        MemoryDep('buf22', 38*c0 + I, {c0: 25088, c1: 38}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (953344, 1)
op23.sizes = ([25088, 38], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 27, 56, 56], stride=[84672, 1, 1512, 27])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 38, 56, 56], stride=[119168, 1, 2128, 38])
class op23_loop_body:
    var_ranges = {z0: 25088, z1: 38}
    index0 = z1
    index1 = 38*z0 + I
    index2 = 27*z0 + I
    index3 = 38*z0 + I + 27
    index4 = 38*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(27, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(27, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(38, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf23', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf15', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf22', get_index)
        return load


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25_op26: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op25_op26.writes = 
    [   MemoryDep('buf25', c0, {c0: 5720064}, None),
        MemoryDep('buf26', c0, {c0: 5720064}, None)]
op25_op26.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 5720064}, None)]
op25_op26.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 228}, None)]
op25_op26.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25_op26.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 5720064}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 5720064}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 228}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 228}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (5720064, 1)
op25.sizes = ([25088, 228], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
class op25_loop_body:
    var_ranges = {z0: 25088, z1: 228}
    index0 = 228*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, add_1, None)
        return store
op25_op26.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 5720064}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 5720064}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (5720064, 1)
op26.sizes = ([5720064], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 56, 56], stride=[715008, 1, 12768, 228])
class op26_loop_body:
    var_ranges = {z0: 5720064}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf25', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf26', get_index_2, mul, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1430016}, None)]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 1430016}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 6272, c1: 228}, None),
        MemoryDep('arg53_1', c1, {c0: 6272, c1: 228}, None),
        MemoryDep('arg54_1', c1, {c0: 6272, c1: 228}, None),
        MemoryDep('arg55_1', c1, {c0: 6272, c1: 228}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (1430016, 1)
op28.sizes = ([6272, 228], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
class op28_loop_body:
    var_ranges = {z0: 6272, z1: 228}
    index0 = 228*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf28', get_index_5, add_1, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 12768}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', 25536*c0 + c1 + 228*c2, {c0: 56, c1: 228, c2: 112}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1, 7], stride=[1596, 1, 12768, 12768, 228])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (12768, 112)
op29.sizes = ([56, 228], [112])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1, 7], stride=[1596, 1, 12768, 12768, 228])
class op29_loop_body:
    var_ranges = {z0: 56, z1: 228, z2: 112}
    index0 = 25536*z0 + z1 + 228*z2
    index1 = 228*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, reduction)
        return store_reduction


op30_op31: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op30_op31.writes = 
    [   MemoryDep('buf30', c0, {c0: 1824}, None),
        MemoryDep('buf31', c0, {c0: 1824}, None)]
op30_op31.unmet_dependencies = [MemoryDep('buf29', 1596*c0 + c1 + 228*c2, {c0: 8, c1: 228, c2: 7}, None)]
op30_op31.met_dependencies = []
op30_op31.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1824, 1824])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30_op31.snodes[0] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 1824}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', 1596*c0 + c1 + 228*c2, {c0: 8, c1: 228, c2: 7}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1824, 1824])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (1824, 7)
op30.sizes = ([8, 228], [7])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1, 7], stride=[1596, 1, 12768, 12768, 228])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1824, 1824])
class op30_loop_body:
    var_ranges = {z0: 8, z1: 228, z2: 7}
    index0 = 1596*z0 + z1 + 228*z2
    index1 = 228*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf30', get_index_1, reduction)
        return store_reduction
op30_op31.snodes[1] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1824}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 1824}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (1824, 1)
op31.sizes = ([1824], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1824, 1824])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1, 1])
class op31_loop_body:
    var_ranges = {z0: 1824}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf31', get_index_1, truediv, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 19, 1, 1], stride=[19, 1, 1, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 152}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 152}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 8, c1: 19}, None),
        MemoryDep('arg58_1', c1, {c0: 8, c1: 19}, None),
        MemoryDep('arg59_1', c1, {c0: 8, c1: 19}, None),
        MemoryDep('arg60_1', c1, {c0: 8, c1: 19}, None),
        MemoryDep('arg61_1', c1, {c0: 8, c1: 19}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 19, 1, 1], stride=[19, 1, 1, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (152, 1)
op33.sizes = ([8, 19], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 19, 1, 1], stride=[19, 1, 1, 1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[19], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[19], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[19], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[19], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[19], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 19, 1, 1], stride=[19, 1, 1, 1])
class op33_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg61_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf33', get_index_6, relu, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1430016}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 1430016}, None),
        MemoryDep('buf34', 228*c0 + c2, {c0: 8, c1: 784, c2: 228}, None)]
op35.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 6272, c1: 228}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1430016, 1)
op35.sizes = ([8, 784, 228], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 1, 1], stride=[228, 1, 1, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[228], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 228, 28, 28], stride=[178752, 1, 6384, 228])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 228}
    index0 = 178752*z0 + 228*z1 + z2
    index1 = 228*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg63_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf35', get_index_3, minimum, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelAlloc)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelAlloc
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 28, 28], stride=[39200, 1, 1400, 50])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.convolution


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 313600}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 313600}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg65_1', c1, {c0: 6272, c1: 50}, None),
        MemoryDep('arg66_1', c1, {c0: 6272, c1: 50}, None),
        MemoryDep('arg67_1', c1, {c0: 6272, c1: 50}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 50}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 50, 28, 28], stride=[39200, 1, 1400, 50])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (313600, 1)
op37.sizes = ([6272, 50], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 28, 28], stride=[39200, 1, 1400, 50])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[50], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[50], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[50], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[50], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 28, 28], stride=[39200, 1, 1400, 50])
class op37_loop_body:
    var_ranges = {z0: 6272, z1: 50}
    index0 = 50*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf37', get_index_5, add_1, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39_op40: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op39_op40.writes = 
    [   MemoryDep('buf39', c0, {c0: 1881600}, None),
        MemoryDep('buf40', c0, {c0: 1881600}, None)]
op39_op40.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 1881600}, None)]
op39_op40.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg71_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 300}, None)]
op39_op40.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op39_op40.snodes[0] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1881600}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 1881600}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg71_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 300}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1881600, 1)
op39.sizes = ([6272, 300], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
class op39_loop_body:
    var_ranges = {z0: 6272, z1: 300}
    index0 = 300*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, add_1, None)
        return store
op39_op40.snodes[1] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1881600}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 1881600}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1881600, 1)
op40.sizes = ([1881600], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
class op40_loop_body:
    var_ranges = {z0: 1881600}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf40', get_index_2, mul, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1881600}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 1881600}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg76_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg77_1', c1, {c0: 6272, c1: 300}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 300}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (1881600, 1)
op42.sizes = ([6272, 300], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
class op42_loop_body:
    var_ranges = {z0: 6272, z1: 300}
    index0 = 300*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg78_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_1, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 16800}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', 33600*c0 + c1 + 300*c2, {c0: 56, c1: 300, c2: 112}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1, 7], stride=[2100, 1, 16800, 16800, 300])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (16800, 112)
op43.sizes = ([56, 300], [112])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1, 7], stride=[2100, 1, 16800, 16800, 300])
class op43_loop_body:
    var_ranges = {z0: 56, z1: 300, z2: 112}
    index0 = 33600*z0 + z1 + 300*z2
    index1 = 300*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, reduction)
        return store_reduction


op44_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op44_op45.writes = 
    [   MemoryDep('buf44', c0, {c0: 2400}, None),
        MemoryDep('buf45', c0, {c0: 2400}, None)]
op44_op45.unmet_dependencies = [MemoryDep('buf43', 2100*c0 + c1 + 300*c2, {c0: 8, c1: 300, c2: 7}, None)]
op44_op45.met_dependencies = []
op44_op45.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 2400, 2400])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 1, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44_op45.snodes[0] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 2400}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', 2100*c0 + c1 + 300*c2, {c0: 8, c1: 300, c2: 7}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 2400, 2400])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (2400, 7)
op44.sizes = ([8, 300], [7])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1, 7], stride=[2100, 1, 16800, 16800, 300])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 2400, 2400])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 300, z2: 7}
    index0 = 2100*z0 + z1 + 300*z2
    index1 = 300*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, reduction)
        return store_reduction
op44_op45.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 2400}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 2400}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 1, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (2400, 1)
op45.sizes = ([2400], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 2400, 2400])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 1, 1])
class op45_loop_body:
    var_ranges = {z0: 2400}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf45', get_index_1, truediv, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 25, 1, 1], stride=[25, 1, 1, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 200}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 200}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 8, c1: 25}, None),
        MemoryDep('arg81_1', c1, {c0: 8, c1: 25}, None),
        MemoryDep('arg82_1', c1, {c0: 8, c1: 25}, None),
        MemoryDep('arg83_1', c1, {c0: 8, c1: 25}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 25}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 25, 1, 1], stride=[25, 1, 1, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (200, 1)
op47.sizes = ([8, 25], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 25, 1, 1], stride=[25, 1, 1, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[25], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[25], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[25], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[25], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[25], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 25, 1, 1], stride=[25, 1, 1, 1])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 25}
    index0 = 25*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg81_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg82_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg83_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg84_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf47', get_index_6, relu, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelAlloc)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelAlloc
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 1, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.convolution


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 1881600}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1881600}, None),
        MemoryDep('buf48', 300*c0 + c2, {c0: 8, c1: 784, c2: 300}, None)]
op49.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 6272, c1: 300}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1881600, 1)
op49.sizes = ([8, 784, 300], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 1, 1], stride=[300, 1, 1, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[300], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 300, 28, 28], stride=[235200, 1, 8400, 300])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 300}
    index0 = 235200*z0 + 300*z1 + z2
    index1 = 300*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg86_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf49', get_index_3, minimum, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 382592}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 382592}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 6272, c1: 61}, None),
        MemoryDep('arg89_1', c1, {c0: 6272, c1: 61}, None),
        MemoryDep('arg90_1', c1, {c0: 6272, c1: 61}, None),
        MemoryDep('arg91_1', c1, {c0: 6272, c1: 61}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (382592, 1)
op51.sizes = ([6272, 61], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[61], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[61], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[61], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[61], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
class op51_loop_body:
    var_ranges = {z0: 6272, z1: 61}
    index0 = 61*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg89_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_1, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 382592}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf37', 50*c0 + I, {c0: 6272, c1: 61}, None),
        MemoryDep('buf51', 61*c0 + I + 50, {c0: 6272, c1: 61}, None),
        MemoryDep('buf51', 61*c0 + I, {c0: 6272, c1: 61}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (382592, 1)
op52.sizes = ([6272, 61], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 50, 28, 28], stride=[39200, 1, 1400, 50])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 61, 28, 28], stride=[47824, 1, 1708, 61])
class op52_loop_body:
    var_ranges = {z0: 6272, z1: 61}
    index0 = z1
    index1 = 61*z0 + I
    index2 = 50*z0 + I
    index3 = 61*z0 + I + 50
    index4 = 61*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(50, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(50, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(61, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf52', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf37', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf51', get_index)
        return load


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54_op55: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op54_op55.writes = 
    [   MemoryDep('buf54', c0, {c0: 2295552}, None),
        MemoryDep('buf55', c0, {c0: 2295552}, None)]
op54_op55.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 2295552}, None)]
op54_op55.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg96_1', c1, {c0: 6272, c1: 366}, None)]
op54_op55.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54_op55.snodes[0] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 2295552}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 2295552}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 366}, None),
        MemoryDep('arg96_1', c1, {c0: 6272, c1: 366}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (2295552, 1)
op54.sizes = ([6272, 366], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
class op54_loop_body:
    var_ranges = {z0: 6272, z1: 366}
    index0 = 366*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg94_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg95_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg96_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_1, None)
        return store
op54_op55.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 2295552}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 2295552}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (2295552, 1)
op55.sizes = ([2295552], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 28, 28], stride=[286944, 1, 10248, 366])
class op55_loop_body:
    var_ranges = {z0: 2295552}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf55', get_index_2, mul, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 573888}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 573888}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1568, c1: 366}, None),
        MemoryDep('arg101_1', c1, {c0: 1568, c1: 366}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 366}, None),
        MemoryDep('arg99_1', c1, {c0: 1568, c1: 366}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (573888, 1)
op57.sizes = ([1568, 366], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
class op57_loop_body:
    var_ranges = {z0: 1568, z1: 366}
    index0 = 366*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg99_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf57', get_index_5, add_1, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 5856}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', 35868*c0 + c1 + 366*c2, {c0: 16, c1: 366, c2: 98}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1, 2], stride=[732, 1, 5856, 5856, 366])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (5856, 98)
op58.sizes = ([16, 366], [98])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1, 2], stride=[732, 1, 5856, 5856, 366])
class op58_loop_body:
    var_ranges = {z0: 16, z1: 366, z2: 98}
    index0 = 35868*z0 + z1 + 366*z2
    index1 = 366*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_1, reduction)
        return store_reduction


op59_op60: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op59_op60.writes = 
    [   MemoryDep('buf59', c0, {c0: 2928}, None),
        MemoryDep('buf60', c0, {c0: 2928}, None)]
op59_op60.unmet_dependencies = [MemoryDep('buf58', 732*c0 + c1 + 366*c2, {c0: 8, c1: 366, c2: 2}, None)]
op59_op60.met_dependencies = []
op59_op60.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 2928, 2928])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 1, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59_op60.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 2928}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', 732*c0 + c1 + 366*c2, {c0: 8, c1: 366, c2: 2}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 2928, 2928])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (2928, 2)
op59.sizes = ([8, 366], [2])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1, 2], stride=[732, 1, 5856, 5856, 366])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 2928, 2928])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 366, z2: 2}
    index0 = 732*z0 + z1 + 366*z2
    index1 = 366*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf59', get_index_1, reduction)
        return store_reduction
op59_op60.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 2928}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 2928}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 1, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (2928, 1)
op60.sizes = ([2928], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 2928, 2928])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 1, 1])
class op60_loop_body:
    var_ranges = {z0: 2928}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf60', get_index_1, truediv, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 30, 1, 1], stride=[30, 1, 1, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 240}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 240}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8, c1: 30}, None),
        MemoryDep('arg104_1', c1, {c0: 8, c1: 30}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 30}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 30}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 30}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 30, 1, 1], stride=[30, 1, 1, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (240, 1)
op62.sizes = ([8, 30], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 30, 1, 1], stride=[30, 1, 1, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[30], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[30], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[30], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[30], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[30], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 30, 1, 1], stride=[30, 1, 1, 1])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 30}
    index0 = 30*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg105_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg106_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg107_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf62', get_index_6, relu, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 1, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 573888}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 573888}, None),
        MemoryDep('buf63', 366*c0 + c2, {c0: 8, c1: 196, c2: 366}, None)]
op64.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 1568, c1: 366}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (573888, 1)
op64.sizes = ([8, 196, 366], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 1, 1], stride=[366, 1, 1, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[366], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 366, 14, 14], stride=[71736, 1, 5124, 366])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 366}
    index0 = 71736*z0 + 366*z1 + z2
    index1 = 366*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf63', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg109_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf64', get_index_3, minimum, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 112896}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 112896}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg113_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg114_1', c1, {c0: 1568, c1: 72}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (112896, 1)
op66.sizes = ([1568, 72], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op66_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf66', get_index_5, add_1, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op68_op69.writes = 
    [   MemoryDep('buf68', c0, {c0: 677376}, None),
        MemoryDep('buf69', c0, {c0: 677376}, None)]
op68_op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 677376}, None)]
op68_op69.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg119_1', c1, {c0: 1568, c1: 432}, None)]
op68_op69.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68_op69.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 677376}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 677376}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg119_1', c1, {c0: 1568, c1: 432}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (677376, 1)
op68.sizes = ([1568, 432], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
class op68_loop_body:
    var_ranges = {z0: 1568, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, add_1, None)
        return store
op68_op69.snodes[1] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 677376}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 677376}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (677376, 1)
op69.sizes = ([677376], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
class op69_loop_body:
    var_ranges = {z0: 677376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf68', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, mul, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 677376}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 677376}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg121_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 432}, None),
        MemoryDep('arg124_1', c1, {c0: 1568, c1: 432}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (677376, 1)
op71.sizes = ([1568, 432], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
class op71_loop_body:
    var_ranges = {z0: 1568, z1: 432}
    index0 = 432*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg122_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 6912}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', 42336*c0 + c1 + 432*c2, {c0: 16, c1: 432, c2: 98}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1, 2], stride=[864, 1, 6912, 6912, 432])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (6912, 98)
op72.sizes = ([16, 432], [98])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1, 2], stride=[864, 1, 6912, 6912, 432])
class op72_loop_body:
    var_ranges = {z0: 16, z1: 432, z2: 98}
    index0 = 42336*z0 + z1 + 432*z2
    index1 = 432*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_1, reduction)
        return store_reduction


op73_op74: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op73_op74.writes = 
    [   MemoryDep('buf73', c0, {c0: 3456}, None),
        MemoryDep('buf74', c0, {c0: 3456}, None)]
op73_op74.unmet_dependencies = [MemoryDep('buf72', 864*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 2}, None)]
op73_op74.met_dependencies = []
op73_op74.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 3456, 3456])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 1, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73_op74.snodes[0] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 3456}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', 864*c0 + c1 + 432*c2, {c0: 8, c1: 432, c2: 2}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 3456, 3456])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (3456, 2)
op73.sizes = ([8, 432], [2])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1, 2], stride=[864, 1, 6912, 6912, 432])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 3456, 3456])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 432, z2: 2}
    index0 = 864*z0 + z1 + 432*z2
    index1 = 432*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_1, reduction)
        return store_reduction
op73_op74.snodes[1] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 3456}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 3456}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 1, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (3456, 1)
op74.sizes = ([3456], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 3456, 3456])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 1, 1])
class op74_loop_body:
    var_ranges = {z0: 3456}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf74', get_index_1, truediv, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 1, 1], stride=[36, 1, 1, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 288}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 288}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg127_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg128_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 36}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 1, 1], stride=[36, 1, 1, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (288, 1)
op76.sizes = ([8, 36], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 1, 1], stride=[36, 1, 1, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 1, 1], stride=[36, 1, 1, 1])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg128_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg129_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg130_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf76', get_index_6, relu, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 1, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 677376}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf71', c0, {c0: 677376}, None),
        MemoryDep('buf77', 432*c0 + c2, {c0: 8, c1: 196, c2: 432}, None)]
op78.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 1568, c1: 432}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (677376, 1)
op78.sizes = ([8, 196, 432], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 1, 1], stride=[432, 1, 1, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[432], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 14, 14], stride=[84672, 1, 6048, 432])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 432}
    index0 = 84672*z0 + 432*z1 + z2
    index1 = 432*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf77', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf78', get_index_3, minimum, None)
        return store


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 131712}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 131712}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 1568, c1: 84}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 84}, None),
        MemoryDep('arg136_1', c1, {c0: 1568, c1: 84}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 84}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (131712, 1)
op80.sizes = ([1568, 84], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[84], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[84], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[84], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[84], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
class op80_loop_body:
    var_ranges = {z0: 1568, z1: 84}
    index0 = 84*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf80', get_index_5, add_1, None)
        return store


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 131712}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf66', 72*c0 + I, {c0: 1568, c1: 84}, None),
        MemoryDep('buf80', 84*c0 + I + 72, {c0: 1568, c1: 84}, None),
        MemoryDep('buf80', 84*c0 + I, {c0: 1568, c1: 84}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (131712, 1)
op81.sizes = ([1568, 84], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
class op81_loop_body:
    var_ranges = {z0: 1568, z1: 84}
    index0 = z1
    index1 = 84*z0 + I
    index2 = 72*z0 + I
    index3 = 84*z0 + I + 72
    index4 = 84*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(72, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(72, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(84, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf81', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf66', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf80', get_index)
        return load


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op83_op84.writes = 
    [   MemoryDep('buf83', c0, {c0: 790272}, None),
        MemoryDep('buf84', c0, {c0: 790272}, None)]
op83_op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 790272}, None)]
op83_op84.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 504}, None)]
op83_op84.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83_op84.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 790272}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 790272}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 504}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (790272, 1)
op83.sizes = ([1568, 504], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 504}
    index0 = 504*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf83', get_index_5, add_1, None)
        return store
op83_op84.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 790272}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 790272}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (790272, 1)
op84.sizes = ([790272], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
class op84_loop_body:
    var_ranges = {z0: 790272}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf84', get_index_2, mul, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelAlloc)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelAlloc
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.node.kernel = extern_kernels.convolution


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 790272}, None)]
op86.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 790272}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg146_1', c1, {c0: 1568, c1: 504}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 504}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (790272, 1)
op86.sizes = ([1568, 504], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
class op86_loop_body:
    var_ranges = {z0: 1568, z1: 504}
    index0 = 504*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg145_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf86', get_index_5, add_1, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 8064}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', 49392*c0 + c1 + 504*c2, {c0: 16, c1: 504, c2: 98}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1, 2], stride=[1008, 1, 8064, 8064, 504])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (8064, 98)
op87.sizes = ([16, 504], [98])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1, 2], stride=[1008, 1, 8064, 8064, 504])
class op87_loop_body:
    var_ranges = {z0: 16, z1: 504, z2: 98}
    index0 = 49392*z0 + z1 + 504*z2
    index1 = 504*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, reduction)
        return store_reduction


op88_op89: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op88_op89.writes = 
    [   MemoryDep('buf88', c0, {c0: 4032}, None),
        MemoryDep('buf89', c0, {c0: 4032}, None)]
op88_op89.unmet_dependencies = [MemoryDep('buf87', 1008*c0 + c1 + 504*c2, {c0: 8, c1: 504, c2: 2}, None)]
op88_op89.met_dependencies = []
op88_op89.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 4032, 4032])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 1, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88_op89.snodes[0] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 4032}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', 1008*c0 + c1 + 504*c2, {c0: 8, c1: 504, c2: 2}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 4032, 4032])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (4032, 2)
op88.sizes = ([8, 504], [2])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1, 2], stride=[1008, 1, 8064, 8064, 504])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 4032, 4032])
class op88_loop_body:
    var_ranges = {z0: 8, z1: 504, z2: 2}
    index0 = 1008*z0 + z1 + 504*z2
    index1 = 504*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_1, reduction)
        return store_reduction
op88_op89.snodes[1] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 4032}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 4032}, None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 1, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (4032, 1)
op89.sizes = ([4032], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 4032, 4032])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 1, 1])
class op89_loop_body:
    var_ranges = {z0: 4032}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf89', get_index_1, truediv, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 42, 1, 1], stride=[42, 1, 1, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 336}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 336}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 8, c1: 42}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 42}, None),
        MemoryDep('arg151_1', c1, {c0: 8, c1: 42}, None),
        MemoryDep('arg152_1', c1, {c0: 8, c1: 42}, None),
        MemoryDep('arg153_1', c1, {c0: 8, c1: 42}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 42, 1, 1], stride=[42, 1, 1, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (336, 1)
op91.sizes = ([8, 42], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 42, 1, 1], stride=[42, 1, 1, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[42], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[42], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[42], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[42], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[42], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 42, 1, 1], stride=[42, 1, 1, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 42}
    index0 = 42*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg153_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf91', get_index_6, relu, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 1, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 790272}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 790272}, None),
        MemoryDep('buf92', 504*c0 + c2, {c0: 8, c1: 196, c2: 504}, None)]
op93.met_dependencies = [MemoryDep('arg155_1', c1, {c0: 1568, c1: 504}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (790272, 1)
op93.sizes = ([8, 196, 504], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 1, 1], stride=[504, 1, 1, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[504], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 504, 14, 14], stride=[98784, 1, 7056, 504])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 504}
    index0 = 98784*z0 + 504*z1 + z2
    index1 = 504*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf93', get_index_3, minimum, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelAlloc)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelAlloc
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.convolution


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 148960}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 148960}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 1568, c1: 95}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 95}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 95}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 95}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (148960, 1)
op95.sizes = ([1568, 95], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[95], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[95], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[95], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[95], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
class op95_loop_body:
    var_ranges = {z0: 1568, z1: 95}
    index0 = 95*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, add_1, None)
        return store


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 148960}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf81', 84*c0 + I, {c0: 1568, c1: 95}, None),
        MemoryDep('buf95', 95*c0 + I + 84, {c0: 1568, c1: 95}, None),
        MemoryDep('buf95', 95*c0 + I, {c0: 1568, c1: 95}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (148960, 1)
op96.sizes = ([1568, 95], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 84, 14, 14], stride=[16464, 1, 1176, 84])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
class op96_loop_body:
    var_ranges = {z0: 1568, z1: 95}
    index0 = z1
    index1 = 95*z0 + I
    index2 = 84*z0 + I
    index3 = 95*z0 + I + 84
    index4 = 95*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(84, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(84, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(95, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf96', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf81', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf95', get_index)
        return load


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98_op99: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op98_op99.writes = 
    [   MemoryDep('buf98', c0, {c0: 893760}, None),
        MemoryDep('buf99', c0, {c0: 893760}, None)]
op98_op99.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 893760}, None)]
op98_op99.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 570}, None)]
op98_op99.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98_op99.snodes[0] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 893760}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 893760}, None)]
op98.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 570}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (893760, 1)
op98.sizes = ([1568, 570], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
class op98_loop_body:
    var_ranges = {z0: 1568, z1: 570}
    index0 = 570*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf98', get_index_5, add_1, None)
        return store
op98_op99.snodes[1] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 893760}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 893760}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (893760, 1)
op99.sizes = ([893760], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
class op99_loop_body:
    var_ranges = {z0: 893760}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf99', get_index_2, mul, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 893760}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 893760}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 570}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 570}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (893760, 1)
op101.sizes = ([1568, 570], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
class op101_loop_body:
    var_ranges = {z0: 1568, z1: 570}
    index0 = 570*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 9120}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', 55860*c0 + c1 + 570*c2, {c0: 16, c1: 570, c2: 98}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1, 2], stride=[1140, 1, 9120, 9120, 570])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (9120, 98)
op102.sizes = ([16, 570], [98])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1, 2], stride=[1140, 1, 9120, 9120, 570])
class op102_loop_body:
    var_ranges = {z0: 16, z1: 570, z2: 98}
    index0 = 55860*z0 + z1 + 570*z2
    index1 = 570*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf102', get_index_1, reduction)
        return store_reduction


op103_op104: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op103_op104.writes = 
    [   MemoryDep('buf103', c0, {c0: 4560}, None),
        MemoryDep('buf104', c0, {c0: 4560}, None)]
op103_op104.unmet_dependencies = [MemoryDep('buf102', 1140*c0 + c1 + 570*c2, {c0: 8, c1: 570, c2: 2}, None)]
op103_op104.met_dependencies = []
op103_op104.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 4560, 4560])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 1, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103_op104.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 4560}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', 1140*c0 + c1 + 570*c2, {c0: 8, c1: 570, c2: 2}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 4560, 4560])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (4560, 2)
op103.sizes = ([8, 570], [2])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1, 2], stride=[1140, 1, 9120, 9120, 570])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 4560, 4560])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 570, z2: 2}
    index0 = 1140*z0 + z1 + 570*z2
    index1 = 570*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, reduction)
        return store_reduction
op103_op104.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 4560}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 4560}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 1, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (4560, 1)
op104.sizes = ([4560], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 4560, 4560])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 1, 1])
class op104_loop_body:
    var_ranges = {z0: 4560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf104', get_index_1, truediv, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelAlloc)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelAlloc
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 47, 1, 1], stride=[47, 1, 1, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.convolution


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 376}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 376}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 8, c1: 47}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 47}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 47}, None),
        MemoryDep('arg175_1', c1, {c0: 8, c1: 47}, None),
        MemoryDep('arg176_1', c1, {c0: 8, c1: 47}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 47, 1, 1], stride=[47, 1, 1, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (376, 1)
op106.sizes = ([8, 47], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 47, 1, 1], stride=[47, 1, 1, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[47], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[47], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[47], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[47], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[47], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 47, 1, 1], stride=[47, 1, 1, 1])
class op106_loop_body:
    var_ranges = {z0: 8, z1: 47}
    index0 = 47*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf106', get_index_6, relu, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelAlloc)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelAlloc
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 1, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.convolution


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 893760}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 893760}, None),
        MemoryDep('buf107', 570*c0 + c2, {c0: 8, c1: 196, c2: 570}, None)]
op108.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 1568, c1: 570}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (893760, 1)
op108.sizes = ([8, 196, 570], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 1, 1], stride=[570, 1, 1, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[570], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 570, 14, 14], stride=[111720, 1, 7980, 570])
class op108_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 570}
    index0 = 111720*z0 + 570*z1 + z2
    index1 = 570*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf108', get_index_3, minimum, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.convolution


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 166208}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 166208}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 106}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 106}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 106}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 106}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (166208, 1)
op110.sizes = ([1568, 106], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[106], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[106], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[106], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[106], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
class op110_loop_body:
    var_ranges = {z0: 1568, z1: 106}
    index0 = 106*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg181_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf110', get_index_5, add_1, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 166208}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf110', 106*c0 + I + 95, {c0: 1568, c1: 106}, None),
        MemoryDep('buf110', 106*c0 + I, {c0: 1568, c1: 106}, None),
        MemoryDep('buf96', 95*c0 + I, {c0: 1568, c1: 106}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (166208, 1)
op111.sizes = ([1568, 106], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 95, 14, 14], stride=[18620, 1, 1330, 95])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
class op111_loop_body:
    var_ranges = {z0: 1568, z1: 106}
    index0 = z1
    index1 = 106*z0 + I
    index2 = 95*z0 + I
    index3 = 106*z0 + I + 95
    index4 = 106*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(95, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(95, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(106, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf111', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf96', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf110', get_index)
        return load


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113_op114: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op113_op114.writes = 
    [   MemoryDep('buf113', c0, {c0: 997248}, None),
        MemoryDep('buf114', c0, {c0: 997248}, None)]
op113_op114.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 997248}, None)]
op113_op114.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg186_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 636}, None)]
op113_op114.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113_op114.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 997248}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 997248}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg186_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg187_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 636}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (997248, 1)
op113.sizes = ([1568, 636], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
class op113_loop_body:
    var_ranges = {z0: 1568, z1: 636}
    index0 = 636*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg186_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg187_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg188_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, add_1, None)
        return store
op113_op114.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 997248}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 997248}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (997248, 1)
op114.sizes = ([997248], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
class op114_loop_body:
    var_ranges = {z0: 997248}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf113', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf114', get_index_2, mul, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.convolution


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 997248}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 997248}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg190_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg191_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg192_1', c1, {c0: 1568, c1: 636}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 636}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (997248, 1)
op116.sizes = ([1568, 636], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
class op116_loop_body:
    var_ranges = {z0: 1568, z1: 636}
    index0 = 636*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg192_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg193_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf116', get_index_5, add_1, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 10176}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', 62328*c0 + c1 + 636*c2, {c0: 16, c1: 636, c2: 98}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1, 2], stride=[1272, 1, 10176, 10176, 636])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (10176, 98)
op117.sizes = ([16, 636], [98])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1, 2], stride=[1272, 1, 10176, 10176, 636])
class op117_loop_body:
    var_ranges = {z0: 16, z1: 636, z2: 98}
    index0 = 62328*z0 + z1 + 636*z2
    index1 = 636*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, reduction)
        return store_reduction


op118_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op118_op119.writes = 
    [   MemoryDep('buf118', c0, {c0: 5088}, None),
        MemoryDep('buf119', c0, {c0: 5088}, None)]
op118_op119.unmet_dependencies = [MemoryDep('buf117', 1272*c0 + c1 + 636*c2, {c0: 8, c1: 636, c2: 2}, None)]
op118_op119.met_dependencies = []
op118_op119.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 5088, 5088])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 1, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118_op119.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 5088}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', 1272*c0 + c1 + 636*c2, {c0: 8, c1: 636, c2: 2}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 5088, 5088])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (5088, 2)
op118.sizes = ([8, 636], [2])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1, 2], stride=[1272, 1, 10176, 10176, 636])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 5088, 5088])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 636, z2: 2}
    index0 = 1272*z0 + z1 + 636*z2
    index1 = 636*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, reduction)
        return store_reduction
op118_op119.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 5088}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 5088}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 1, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (5088, 1)
op119.sizes = ([5088], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 5088, 5088])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 1, 1])
class op119_loop_body:
    var_ranges = {z0: 5088}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf119', get_index_1, truediv, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 53, 1, 1], stride=[53, 1, 1, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 424}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 424}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 53}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 53}, None),
        MemoryDep('arg197_1', c1, {c0: 8, c1: 53}, None),
        MemoryDep('arg198_1', c1, {c0: 8, c1: 53}, None),
        MemoryDep('arg199_1', c1, {c0: 8, c1: 53}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 53, 1, 1], stride=[53, 1, 1, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (424, 1)
op121.sizes = ([8, 53], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 53, 1, 1], stride=[53, 1, 1, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[53], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[53], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[53], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[53], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[53], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 53, 1, 1], stride=[53, 1, 1, 1])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 53}
    index0 = 53*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg195_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg196_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg197_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg198_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg199_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf121', get_index_6, relu, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg200_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 1, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 997248}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 997248}, None),
        MemoryDep('buf122', 636*c0 + c2, {c0: 8, c1: 196, c2: 636}, None)]
op123.met_dependencies = [MemoryDep('arg201_1', c1, {c0: 1568, c1: 636}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (997248, 1)
op123.sizes = ([8, 196, 636], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 1, 1], stride=[636, 1, 1, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[636], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 636, 14, 14], stride=[124656, 1, 8904, 636])
class op123_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 636}
    index0 = 124656*z0 + 636*z1 + z2
    index1 = 636*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg201_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf123', get_index_3, minimum, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelAlloc)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelAlloc
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False)]
]
op124.node.kernel = extern_kernels.convolution


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 183456}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 183456}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg203_1', c1, {c0: 1568, c1: 117}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 117}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 117}, None),
        MemoryDep('arg206_1', c1, {c0: 1568, c1: 117}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (183456, 1)
op125.sizes = ([1568, 117], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[117], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[117], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[117], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[117], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
class op125_loop_body:
    var_ranges = {z0: 1568, z1: 117}
    index0 = 117*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg204_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf125', get_index_5, add_1, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 183456}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf111', 106*c0 + I, {c0: 1568, c1: 117}, None),
        MemoryDep('buf125', 117*c0 + I + 106, {c0: 1568, c1: 117}, None),
        MemoryDep('buf125', 117*c0 + I, {c0: 1568, c1: 117}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (183456, 1)
op126.sizes = ([1568, 117], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 106, 14, 14], stride=[20776, 1, 1484, 106])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
class op126_loop_body:
    var_ranges = {z0: 1568, z1: 117}
    index0 = z1
    index1 = 117*z0 + I
    index2 = 106*z0 + I
    index3 = 117*z0 + I + 106
    index4 = 117*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(106, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(106, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(117, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf126', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf111', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf125', get_index)
        return load


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128_op129: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op128_op129.writes = 
    [   MemoryDep('buf128', c0, {c0: 1100736}, None),
        MemoryDep('buf129', c0, {c0: 1100736}, None)]
op128_op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1100736}, None)]
op128_op129.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 702}, None)]
op128_op129.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op128_op129.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1100736}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1100736}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg208_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 702}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1100736, 1)
op128.sizes = ([1568, 702], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
class op128_loop_body:
    var_ranges = {z0: 1568, z1: 702}
    index0 = 702*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg209_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg210_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg211_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf128', get_index_5, add_1, None)
        return store
op128_op129.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 1100736}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 1100736}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (1100736, 1)
op129.sizes = ([1100736], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
class op129_loop_body:
    var_ranges = {z0: 1100736}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf129', get_index_2, mul, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1100736}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1100736}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg213_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg215_1', c1, {c0: 1568, c1: 702}, None),
        MemoryDep('arg216_1', c1, {c0: 1568, c1: 702}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (1100736, 1)
op131.sizes = ([1568, 702], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
class op131_loop_body:
    var_ranges = {z0: 1568, z1: 702}
    index0 = 702*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg214_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg215_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg216_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf131', get_index_5, add_1, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 11232}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', 68796*c0 + c1 + 702*c2, {c0: 16, c1: 702, c2: 98}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1, 2], stride=[1404, 1, 11232, 11232, 702])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (11232, 98)
op132.sizes = ([16, 702], [98])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1, 2], stride=[1404, 1, 11232, 11232, 702])
class op132_loop_body:
    var_ranges = {z0: 16, z1: 702, z2: 98}
    index0 = 68796*z0 + z1 + 702*z2
    index1 = 702*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, reduction)
        return store_reduction


op133_op134: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op133_op134.writes = 
    [   MemoryDep('buf133', c0, {c0: 5616}, None),
        MemoryDep('buf134', c0, {c0: 5616}, None)]
op133_op134.unmet_dependencies = [MemoryDep('buf132', 1404*c0 + c1 + 702*c2, {c0: 8, c1: 702, c2: 2}, None)]
op133_op134.met_dependencies = []
op133_op134.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 5616, 5616])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 1, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133_op134.snodes[0] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 5616}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', 1404*c0 + c1 + 702*c2, {c0: 8, c1: 702, c2: 2}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 5616, 5616])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (5616, 2)
op133.sizes = ([8, 702], [2])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1, 2], stride=[1404, 1, 11232, 11232, 702])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 5616, 5616])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 702, z2: 2}
    index0 = 1404*z0 + z1 + 702*z2
    index1 = 702*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, reduction)
        return store_reduction
op133_op134.snodes[1] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 5616}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 5616}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 1, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (5616, 1)
op134.sizes = ([5616], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 5616, 5616])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 1, 1])
class op134_loop_body:
    var_ranges = {z0: 5616}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf134', get_index_1, truediv, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelAlloc)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelAlloc
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 58, 1, 1], stride=[58, 1, 1, 1])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op135.node.kernel = extern_kernels.convolution


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 464}, None)]
op136.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 464}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 8, c1: 58}, None),
        MemoryDep('arg219_1', c1, {c0: 8, c1: 58}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 58}, None),
        MemoryDep('arg221_1', c1, {c0: 8, c1: 58}, None),
        MemoryDep('arg222_1', c1, {c0: 8, c1: 58}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 58, 1, 1], stride=[58, 1, 1, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (464, 1)
op136.sizes = ([8, 58], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 58, 1, 1], stride=[58, 1, 1, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[58], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[58], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[58], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[58], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[58], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 58, 1, 1], stride=[58, 1, 1, 1])
class op136_loop_body:
    var_ranges = {z0: 8, z1: 58}
    index0 = 58*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg220_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg221_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg222_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf136', get_index_6, relu, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 1, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1100736}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 1100736}, None),
        MemoryDep('buf137', 702*c0 + c2, {c0: 8, c1: 196, c2: 702}, None)]
op138.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 1568, c1: 702}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1100736, 1)
op138.sizes = ([8, 196, 702], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 1, 1], stride=[702, 1, 1, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[702], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 702, 14, 14], stride=[137592, 1, 9828, 702])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 702}
    index0 = 137592*z0 + 702*z1 + z2
    index1 = 702*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg224_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf138', get_index_3, minimum, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False)]
]
op139.node.kernel = extern_kernels.convolution


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 200704}, None)]
op140.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 200704}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg227_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 128}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (200704, 1)
op140.sizes = ([1568, 128], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
class op140_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg227_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg228_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg229_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf140', get_index_5, add_1, None)
        return store


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 200704}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf126', 117*c0 + I, {c0: 1568, c1: 128}, None),
        MemoryDep('buf140', 128*c0 + I + 117, {c0: 1568, c1: 128}, None),
        MemoryDep('buf140', 128*c0 + I, {c0: 1568, c1: 128}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (200704, 1)
op141.sizes = ([1568, 128], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 117, 14, 14], stride=[22932, 1, 1638, 117])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
class op141_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = z1
    index1 = 128*z0 + I
    index2 = 117*z0 + I
    index3 = 128*z0 + I + 117
    index4 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(117, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(117, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf141', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf126', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf140', get_index)
        return load


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg230_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143_op144: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op143_op144.writes = 
    [   MemoryDep('buf143', c0, {c0: 1204224}, None),
        MemoryDep('buf144', c0, {c0: 1204224}, None)]
op143_op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1204224}, None)]
op143_op144.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg232_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 768}, None)]
op143_op144.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143_op144.snodes[0] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 1204224}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1204224}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg231_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg232_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 768}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 768}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (1204224, 1)
op143.sizes = ([1568, 768], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
class op143_loop_body:
    var_ranges = {z0: 1568, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg232_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg233_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg234_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf143', get_index_5, add_1, None)
        return store
op143_op144.snodes[1] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1204224}, None)]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 1204224}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1204224, 1)
op144.sizes = ([1204224], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 1, 10752, 768])
class op144_loop_body:
    var_ranges = {z0: 1204224}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, mul, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 301056}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 301056}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg237_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg238_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg239_1', c1, {c0: 392, c1: 768}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (301056, 1)
op146.sizes = ([392, 768], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op146_loop_body:
    var_ranges = {z0: 392, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg237_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg238_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg239_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store


op147_op148: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op147_op148.writes = 
    [   MemoryDep('buf147', c0, {c0: 6144}, None),
        MemoryDep('buf148', c0, {c0: 6144}, None)]
op147_op148.unmet_dependencies = [MemoryDep('buf146', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op147_op148.met_dependencies = []
op147_op148.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147_op148.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 6144}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (6144, 49)
op147.sizes = ([8, 768], [49])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + z1 + 768*z2
    index1 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, reduction)
        return store_reduction
op147_op148.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 6144}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 6144}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (6144, 1)
op148.sizes = ([6144], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op148_loop_body:
    var_ranges = {z0: 6144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf148', get_index_1, truediv, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 512}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 512}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg241_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg242_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg243_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg244_1', c1, {c0: 8, c1: 64}, None),
        MemoryDep('arg245_1', c1, {c0: 8, c1: 64}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (512, 1)
op150.sizes = ([8, 64], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 1, 1], stride=[64, 1, 1, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg241_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg243_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg244_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg245_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf150', get_index_6, relu, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelAlloc)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelAlloc
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.convolution


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 301056}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 301056}, None),
        MemoryDep('buf151', 768*c0 + c2, {c0: 8, c1: 49, c2: 768}, None)]
op152.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 392, c1: 768}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (301056, 1)
op152.sizes = ([8, 49, 768], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 768}
    index0 = 37632*z0 + 768*z1 + z2
    index1 = 768*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf151', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf152', get_index_3, minimum, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelAlloc)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelAlloc
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 140, 7, 7], stride=[6860, 1, 980, 140])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.convolution


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 54880}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 54880}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 392, c1: 140}, None),
        MemoryDep('arg250_1', c1, {c0: 392, c1: 140}, None),
        MemoryDep('arg251_1', c1, {c0: 392, c1: 140}, None),
        MemoryDep('arg252_1', c1, {c0: 392, c1: 140}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 140, 7, 7], stride=[6860, 1, 980, 140])
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (54880, 1)
op154.sizes = ([392, 140], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 140, 7, 7], stride=[6860, 1, 980, 140])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[140], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[140], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[140], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[140], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 140, 7, 7], stride=[6860, 1, 980, 140])
class op154_loop_body:
    var_ranges = {z0: 392, z1: 140}
    index0 = 140*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg251_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg252_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, add_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156_op157: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op156_op157.writes = 
    [   MemoryDep('buf156', c0, {c0: 329280}, None),
        MemoryDep('buf157', c0, {c0: 329280}, None)]
op156_op157.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 329280}, None)]
op156_op157.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg255_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg256_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg257_1', c1, {c0: 392, c1: 840}, None)]
op156_op157.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156_op157.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 329280}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 329280}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg255_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg256_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg257_1', c1, {c0: 392, c1: 840}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (329280, 1)
op156.sizes = ([392, 840], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
class op156_loop_body:
    var_ranges = {z0: 392, z1: 840}
    index0 = 840*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg257_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf156', get_index_5, add_1, None)
        return store
op156_op157.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 329280}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 329280}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (329280, 1)
op157.sizes = ([329280], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
class op157_loop_body:
    var_ranges = {z0: 329280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf157', get_index_2, mul, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 329280}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 329280}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg260_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg261_1', c1, {c0: 392, c1: 840}, None),
        MemoryDep('arg262_1', c1, {c0: 392, c1: 840}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (329280, 1)
op159.sizes = ([392, 840], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
class op159_loop_body:
    var_ranges = {z0: 392, z1: 840}
    index0 = 840*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg260_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg261_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg262_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf159', get_index_5, add_1, None)
        return store


op160_op161: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op160_op161.writes = 
    [   MemoryDep('buf160', c0, {c0: 6720}, None),
        MemoryDep('buf161', c0, {c0: 6720}, None)]
op160_op161.unmet_dependencies = [MemoryDep('buf159', 41160*c0 + c1 + 840*c2, {c0: 8, c1: 840, c2: 49}, None)]
op160_op161.met_dependencies = []
op160_op161.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 6720, 6720])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 1, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160_op161.snodes[0] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 6720}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', 41160*c0 + c1 + 840*c2, {c0: 8, c1: 840, c2: 49}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 6720, 6720])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (6720, 49)
op160.sizes = ([8, 840], [49])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 6720, 6720])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 840, z2: 49}
    index0 = 41160*z0 + z1 + 840*z2
    index1 = 840*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_1, reduction)
        return store_reduction
op160_op161.snodes[1] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 6720}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 6720}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 1, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (6720, 1)
op161.sizes = ([6720], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 6720, 6720])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 1, 1])
class op161_loop_body:
    var_ranges = {z0: 6720}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf161', get_index_1, truediv, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelAlloc)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelAlloc
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 70, 1, 1], stride=[70, 1, 1, 1])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op162.node.kernel = extern_kernels.convolution


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 560}, None)]
op163.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 560}, None)]
op163.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 8, c1: 70}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 70}, None),
        MemoryDep('arg266_1', c1, {c0: 8, c1: 70}, None),
        MemoryDep('arg267_1', c1, {c0: 8, c1: 70}, None),
        MemoryDep('arg268_1', c1, {c0: 8, c1: 70}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 70, 1, 1], stride=[70, 1, 1, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (560, 1)
op163.sizes = ([8, 70], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 70, 1, 1], stride=[70, 1, 1, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[70], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[70], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[70], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[70], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[70], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 70, 1, 1], stride=[70, 1, 1, 1])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 70}
    index0 = 70*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg267_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg268_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf163', get_index_6, relu, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelAlloc)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelAlloc
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 1, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.convolution


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 329280}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 329280}, None),
        MemoryDep('buf164', 840*c0 + c2, {c0: 8, c1: 49, c2: 840}, None)]
op165.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 392, c1: 840}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (329280, 1)
op165.sizes = ([8, 49, 840], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 1, 1], stride=[840, 1, 1, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[840], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 840, 7, 7], stride=[41160, 1, 5880, 840])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 840}
    index0 = 41160*z0 + 840*z1 + z2
    index1 = 840*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf165', get_index_3, minimum, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelAlloc)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelAlloc
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.convolution


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 59192}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 59192}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 392, c1: 151}, None),
        MemoryDep('arg273_1', c1, {c0: 392, c1: 151}, None),
        MemoryDep('arg274_1', c1, {c0: 392, c1: 151}, None),
        MemoryDep('arg275_1', c1, {c0: 392, c1: 151}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (59192, 1)
op167.sizes = ([392, 151], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[151], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[151], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[151], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[151], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
class op167_loop_body:
    var_ranges = {z0: 392, z1: 151}
    index0 = 151*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_1, None)
        return store


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 59192}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf154', 140*c0 + I, {c0: 392, c1: 151}, None),
        MemoryDep('buf167', 151*c0 + I + 140, {c0: 392, c1: 151}, None),
        MemoryDep('buf167', 151*c0 + I, {c0: 392, c1: 151}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (59192, 1)
op168.sizes = ([392, 151], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 140, 7, 7], stride=[6860, 1, 980, 140])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
class op168_loop_body:
    var_ranges = {z0: 392, z1: 151}
    index0 = z1
    index1 = 151*z0 + I
    index2 = 140*z0 + I
    index3 = 151*z0 + I + 140
    index4 = 151*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(140, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(140, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(151, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf168', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf154', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf167', get_index)
        return load


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.convolution


op170_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op170_op171.writes = 
    [   MemoryDep('buf170', c0, {c0: 355152}, None),
        MemoryDep('buf171', c0, {c0: 355152}, None)]
op170_op171.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 355152}, None)]
op170_op171.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg278_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg279_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg280_1', c1, {c0: 392, c1: 906}, None)]
op170_op171.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170_op171.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 355152}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 355152}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg278_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg279_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg280_1', c1, {c0: 392, c1: 906}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (355152, 1)
op170.sizes = ([392, 906], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
class op170_loop_body:
    var_ranges = {z0: 392, z1: 906}
    index0 = 906*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf170', get_index_5, add_1, None)
        return store
op170_op171.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 355152}, None)]
op171.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 355152}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (355152, 1)
op171.sizes = ([355152], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
class op171_loop_body:
    var_ranges = {z0: 355152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf171', get_index_2, mul, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 355152}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 355152}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg283_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg284_1', c1, {c0: 392, c1: 906}, None),
        MemoryDep('arg285_1', c1, {c0: 392, c1: 906}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (355152, 1)
op173.sizes = ([392, 906], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
class op173_loop_body:
    var_ranges = {z0: 392, z1: 906}
    index0 = 906*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, add_1, None)
        return store


op174_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op174_op175.writes = 
    [   MemoryDep('buf174', c0, {c0: 7248}, None),
        MemoryDep('buf175', c0, {c0: 7248}, None)]
op174_op175.unmet_dependencies = [MemoryDep('buf173', 44394*c0 + c1 + 906*c2, {c0: 8, c1: 906, c2: 49}, None)]
op174_op175.met_dependencies = []
op174_op175.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 7248, 7248])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 1, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174_op175.snodes[0] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 7248}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', 44394*c0 + c1 + 906*c2, {c0: 8, c1: 906, c2: 49}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 7248, 7248])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (7248, 49)
op174.sizes = ([8, 906], [49])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 7248, 7248])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 906, z2: 49}
    index0 = 44394*z0 + z1 + 906*z2
    index1 = 906*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_1, reduction)
        return store_reduction
op174_op175.snodes[1] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 7248}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 7248}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 1, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (7248, 1)
op175.sizes = ([7248], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 7248, 7248])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 1, 1])
class op175_loop_body:
    var_ranges = {z0: 7248}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, truediv, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 75, 1, 1], stride=[75, 1, 1, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 600}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 600}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 8, c1: 75}, None),
        MemoryDep('arg288_1', c1, {c0: 8, c1: 75}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 75}, None),
        MemoryDep('arg290_1', c1, {c0: 8, c1: 75}, None),
        MemoryDep('arg291_1', c1, {c0: 8, c1: 75}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 75, 1, 1], stride=[75, 1, 1, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (600, 1)
op177.sizes = ([8, 75], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 75, 1, 1], stride=[75, 1, 1, 1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[75], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[75], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[75], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[75], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[75], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 75, 1, 1], stride=[75, 1, 1, 1])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 75}
    index0 = 75*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg291_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf177', get_index_6, relu, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 1, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 355152}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 355152}, None),
        MemoryDep('buf178', 906*c0 + c2, {c0: 8, c1: 49, c2: 906}, None)]
op179.met_dependencies = [MemoryDep('arg293_1', c1, {c0: 392, c1: 906}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (355152, 1)
op179.sizes = ([8, 49, 906], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 1, 1], stride=[906, 1, 1, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[906], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 906, 7, 7], stride=[44394, 1, 6342, 906])
class op179_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 906}
    index0 = 44394*z0 + 906*z1 + z2
    index1 = 906*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf178', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg293_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf179', get_index_3, minimum, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 63504}, None)]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 63504}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 392, c1: 162}, None),
        MemoryDep('arg296_1', c1, {c0: 392, c1: 162}, None),
        MemoryDep('arg297_1', c1, {c0: 392, c1: 162}, None),
        MemoryDep('arg298_1', c1, {c0: 392, c1: 162}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (63504, 1)
op181.sizes = ([392, 162], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[162], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
class op181_loop_body:
    var_ranges = {z0: 392, z1: 162}
    index0 = 162*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg295_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg297_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg298_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf181', get_index_5, add_1, None)
        return store


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 63504}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf168', 151*c0 + I, {c0: 392, c1: 162}, None),
        MemoryDep('buf181', 162*c0 + I + 151, {c0: 392, c1: 162}, None),
        MemoryDep('buf181', 162*c0 + I, {c0: 392, c1: 162}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (63504, 1)
op182.sizes = ([392, 162], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 151, 7, 7], stride=[7399, 1, 1057, 151])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
class op182_loop_body:
    var_ranges = {z0: 392, z1: 162}
    index0 = z1
    index1 = 162*z0 + I
    index2 = 151*z0 + I
    index3 = 162*z0 + I + 151
    index4 = 162*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(151, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(151, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(162, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf182', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf181', get_index)
        return load


op183: ExternKernelSchedulerNode(ExternKernelAlloc)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelAlloc
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf183.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False)]
]
op183.node.kernel = extern_kernels.convolution


op184_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op184_op185.writes = 
    [   MemoryDep('buf184', c0, {c0: 381024}, None),
        MemoryDep('buf185', c0, {c0: 381024}, None)]
op184_op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 381024}, None)]
op184_op185.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg301_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg302_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg303_1', c1, {c0: 392, c1: 972}, None)]
op184_op185.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184_op185.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 381024}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 381024}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg301_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg302_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg303_1', c1, {c0: 392, c1: 972}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (381024, 1)
op184.sizes = ([392, 972], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
class op184_loop_body:
    var_ranges = {z0: 392, z1: 972}
    index0 = 972*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg301_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg302_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg303_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf184', get_index_5, add_1, None)
        return store
op184_op185.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 381024}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 381024}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (381024, 1)
op185.sizes = ([381024], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
class op185_loop_body:
    var_ranges = {z0: 381024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf184', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf185', get_index_2, mul, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 381024}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 381024}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg305_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg306_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg307_1', c1, {c0: 392, c1: 972}, None),
        MemoryDep('arg308_1', c1, {c0: 392, c1: 972}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (381024, 1)
op187.sizes = ([392, 972], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
class op187_loop_body:
    var_ranges = {z0: 392, z1: 972}
    index0 = 972*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg305_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg307_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg308_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, add_1, None)
        return store


op188_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op188_op189.writes = 
    [   MemoryDep('buf188', c0, {c0: 7776}, None),
        MemoryDep('buf189', c0, {c0: 7776}, None)]
op188_op189.unmet_dependencies = [MemoryDep('buf187', 47628*c0 + c1 + 972*c2, {c0: 8, c1: 972, c2: 49}, None)]
op188_op189.met_dependencies = []
op188_op189.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 7776, 7776])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 1, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188_op189.snodes[0] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 7776}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', 47628*c0 + c1 + 972*c2, {c0: 8, c1: 972, c2: 49}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 7776, 7776])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (7776, 49)
op188.sizes = ([8, 972], [49])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 7776, 7776])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 972, z2: 49}
    index0 = 47628*z0 + z1 + 972*z2
    index1 = 972*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, reduction)
        return store_reduction
op188_op189.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 7776}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 7776}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 1, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (7776, 1)
op189.sizes = ([7776], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 7776, 7776])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 1, 1])
class op189_loop_body:
    var_ranges = {z0: 7776}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf189', get_index_1, truediv, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 81, 1, 1], stride=[81, 1, 1, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 648}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 648}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg310_1', c1, {c0: 8, c1: 81}, None),
        MemoryDep('arg311_1', c1, {c0: 8, c1: 81}, None),
        MemoryDep('arg312_1', c1, {c0: 8, c1: 81}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 81}, None),
        MemoryDep('arg314_1', c1, {c0: 8, c1: 81}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 81, 1, 1], stride=[81, 1, 1, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (648, 1)
op191.sizes = ([8, 81], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 81, 1, 1], stride=[81, 1, 1, 1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[81], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[81], stride=[1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[81], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[81], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[81], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 81, 1, 1], stride=[81, 1, 1, 1])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 81}
    index0 = 81*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg310_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg311_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg312_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg313_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg314_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf191', get_index_6, relu, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelAlloc)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelAlloc
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 1, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = extern_kernels.convolution


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 381024}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 381024}, None),
        MemoryDep('buf192', 972*c0 + c2, {c0: 8, c1: 49, c2: 972}, None)]
op193.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 392, c1: 972}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (381024, 1)
op193.sizes = ([8, 49, 972], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 1, 1], stride=[972, 1, 1, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[972], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 972, 7, 7], stride=[47628, 1, 6804, 972])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 972}
    index0 = 47628*z0 + 972*z1 + z2
    index1 = 972*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg316_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf193', get_index_3, minimum, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 68208}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 68208}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg318_1', c1, {c0: 392, c1: 174}, None),
        MemoryDep('arg319_1', c1, {c0: 392, c1: 174}, None),
        MemoryDep('arg320_1', c1, {c0: 392, c1: 174}, None),
        MemoryDep('arg321_1', c1, {c0: 392, c1: 174}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (68208, 1)
op195.sizes = ([392, 174], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[174], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[174], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[174], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[174], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
class op195_loop_body:
    var_ranges = {z0: 392, z1: 174}
    index0 = 174*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg318_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg319_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg321_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_1, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 68208}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf182', 162*c0 + I, {c0: 392, c1: 174}, None),
        MemoryDep('buf195', 174*c0 + I + 162, {c0: 392, c1: 174}, None),
        MemoryDep('buf195', 174*c0 + I, {c0: 392, c1: 174}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
    buf196.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (68208, 1)
op196.sizes = ([392, 174], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 162, 7, 7], stride=[7938, 1, 1134, 162])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
class op196_loop_body:
    var_ranges = {z0: 392, z1: 174}
    index0 = z1
    index1 = 174*z0 + I
    index2 = 162*z0 + I
    index3 = 174*z0 + I + 162
    index4 = 174*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(162, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(162, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(174, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf196', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf182', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf195', get_index)
        return load


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg322_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198_op199: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op198_op199.writes = 
    [   MemoryDep('buf198', c0, {c0: 409248}, None),
        MemoryDep('buf199', c0, {c0: 409248}, None)]
op198_op199.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 409248}, None)]
op198_op199.met_dependencies = 
    [   MemoryDep('arg323_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg324_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg325_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg326_1', c1, {c0: 392, c1: 1044}, None)]
op198_op199.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198_op199.snodes[0] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 409248}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 409248}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg323_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg324_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg325_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg326_1', c1, {c0: 392, c1: 1044}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (409248, 1)
op198.sizes = ([392, 1044], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
class op198_loop_body:
    var_ranges = {z0: 392, z1: 1044}
    index0 = 1044*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg323_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg324_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg325_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg326_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf198', get_index_5, add_1, None)
        return store
op198_op199.snodes[1] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 409248}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 409248}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (409248, 1)
op199.sizes = ([409248], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
class op199_loop_body:
    var_ranges = {z0: 409248}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf199', get_index_2, mul, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 409248}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 409248}, None)]
op201.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg329_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg330_1', c1, {c0: 392, c1: 1044}, None),
        MemoryDep('arg331_1', c1, {c0: 392, c1: 1044}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (409248, 1)
op201.sizes = ([392, 1044], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
class op201_loop_body:
    var_ranges = {z0: 392, z1: 1044}
    index0 = 1044*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg328_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg329_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg330_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg331_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf201', get_index_5, add_1, None)
        return store


op202_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op202_op203.writes = 
    [   MemoryDep('buf202', c0, {c0: 8352}, None),
        MemoryDep('buf203', c0, {c0: 8352}, None)]
op202_op203.unmet_dependencies = [MemoryDep('buf201', 51156*c0 + c1 + 1044*c2, {c0: 8, c1: 1044, c2: 49}, None)]
op202_op203.met_dependencies = []
op202_op203.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 8352, 8352])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 1, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202_op203.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 8352}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', 51156*c0 + c1 + 1044*c2, {c0: 8, c1: 1044, c2: 49}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 8352, 8352])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (8352, 49)
op202.sizes = ([8, 1044], [49])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 8352, 8352])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 1044, z2: 49}
    index0 = 51156*z0 + z1 + 1044*z2
    index1 = 1044*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf202', get_index_1, reduction)
        return store_reduction
op202_op203.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 8352}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 8352}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 1, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (8352, 1)
op203.sizes = ([8352], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 8352, 8352])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 1, 1])
class op203_loop_body:
    var_ranges = {z0: 8352}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf203', get_index_1, truediv, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 87, 1, 1], stride=[87, 1, 1, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 696}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 696}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 8, c1: 87}, None),
        MemoryDep('arg334_1', c1, {c0: 8, c1: 87}, None),
        MemoryDep('arg335_1', c1, {c0: 8, c1: 87}, None),
        MemoryDep('arg336_1', c1, {c0: 8, c1: 87}, None),
        MemoryDep('arg337_1', c1, {c0: 8, c1: 87}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 87, 1, 1], stride=[87, 1, 1, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (696, 1)
op205.sizes = ([8, 87], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 87, 1, 1], stride=[87, 1, 1, 1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[87], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[87], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[87], stride=[1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[87], stride=[1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[87], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 87, 1, 1], stride=[87, 1, 1, 1])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 87}
    index0 = 87*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg334_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg335_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg336_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg337_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf205', get_index_6, relu, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelAlloc)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg338_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelAlloc
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 1, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = extern_kernels.convolution


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 409248}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 409248}, None),
        MemoryDep('buf206', 1044*c0 + c2, {c0: 8, c1: 49, c2: 1044}, None)]
op207.met_dependencies = [MemoryDep('arg339_1', c1, {c0: 392, c1: 1044}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (409248, 1)
op207.sizes = ([8, 49, 1044], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 1, 1], stride=[1044, 1, 1, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1044], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 1044, 7, 7], stride=[51156, 1, 7308, 1044])
class op207_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1044}
    index0 = 51156*z0 + 1044*z1 + z2
    index1 = 1044*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf206', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg339_1', get_index_2)
        add = ops.add(load_1, load_2)
        sigmoid = ops.sigmoid(add)
        mul = ops.mul(load, sigmoid)
        constant = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(mul, constant)
        constant_1 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf207', get_index_3, minimum, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg340_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False)]
]
op208.node.kernel = extern_kernels.convolution


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 72520}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 72520}, None)]
op209.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 392, c1: 185}, None),
        MemoryDep('arg342_1', c1, {c0: 392, c1: 185}, None),
        MemoryDep('arg343_1', c1, {c0: 392, c1: 185}, None),
        MemoryDep('arg344_1', c1, {c0: 392, c1: 185}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (72520, 1)
op209.sizes = ([392, 185], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[185], stride=[1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[185], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[185], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[185], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
class op209_loop_body:
    var_ranges = {z0: 392, z1: 185}
    index0 = 185*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg341_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg343_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg344_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf209', get_index_5, add_1, None)
        return store


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 72520}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf196', 174*c0 + I, {c0: 392, c1: 185}, None),
        MemoryDep('buf209', 185*c0 + I + 174, {c0: 392, c1: 185}, None),
        MemoryDep('buf209', 185*c0 + I, {c0: 392, c1: 185}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (72520, 1)
op210.sizes = ([392, 185], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 174, 7, 7], stride=[8526, 1, 1218, 174])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 185, 7, 7], stride=[9065, 1, 1295, 185])
class op210_loop_body:
    var_ranges = {z0: 392, z1: 185}
    index0 = z1
    index1 = 185*z0 + I
    index2 = 174*z0 + I
    index3 = 185*z0 + I + 174
    index4 = 185*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(174, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(174, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(185, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf210', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf196', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf209', get_index)
        return load


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 501760}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 501760}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg346_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg347_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg348_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 1280}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (501760, 1)
op212.sizes = ([392, 1280], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
class op212_loop_body:
    var_ranges = {z0: 392, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg347_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg348_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg349_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf212', get_index_5, add_1, None)
        return store


op213_op214: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op213_op214.writes = 
    [   MemoryDep('buf213', c0, {c0: 10240}, None),
        MemoryDep('buf214', c0, {c0: 10240}, None)]
op213_op214.unmet_dependencies = [MemoryDep('buf212', 62720*c0 + c1 + 1280*c2, {c0: 8, c1: 1280, c2: 49}, None)]
op213_op214.met_dependencies = []
op213_op214.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213_op214.snodes[0] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 10240}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', 62720*c0 + c1 + 1280*c2, {c0: 8, c1: 1280, c2: 49}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (10240, 49)
op213.sizes = ([8, 1280], [49])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 1280, z2: 49}
    index0 = 62720*z0 + z1 + 1280*z2
    index1 = 1280*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_2, reduction)
        return store_reduction
op213_op214.snodes[1] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 10240}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 10240}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (10240, 1)
op214.sizes = ([10240], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op214_loop_body:
    var_ranges = {z0: 10240}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf214', get_index_1, truediv, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg350_1', mode=None), StarDep(name='arg351_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf215.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.addmm



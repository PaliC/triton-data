op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 1728}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[64, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (1728, 1)
op1.sizes = ([64, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 6422528}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 6422528}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (6422528, 1)
op3.sizes = ([100352, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 36864}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (36864, 1)
op4.sizes = ([64, 64, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op4_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf4', mode=None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 1605632}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (1605632, 1)
op6.sizes = ([25088, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op6_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.node.kernel = extern_kernels.convolution


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1605632}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1605632}, None)]
op8.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 25088, c1: 64}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1605632, 1)
op8.sizes = ([25088, 64], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op8_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, relu, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 36864}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (36864, 1)
op9.sizes = ([64, 64, 9], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op9_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 1605632}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 1605632}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 25088, c1: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (1605632, 1)
op11.sizes = ([25088, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op11_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, relu, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf12.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op13.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 6422528}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf12', c0, {c0: 6422528}, None),
        MemoryDep('buf13', c0, {c0: 6422528}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg27_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg30_1', c1, {c0: 25088, c1: 256}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (6422528, 1)
op14.sizes = ([25088, 256], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op14_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf13', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg27_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg28_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg29_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg30_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf14', get_index_10, add_4, None)
        return store


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 6422528}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 6422528}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (6422528, 1)
op15.sizes = ([6422528], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op15_loop_body:
    var_ranges = {z0: 6422528}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf15', get_index_1, relu, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1605632}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1605632}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 64}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1605632, 1)
op17.sizes = ([25088, 64], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op17_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, relu, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op18.unmet_dependencies = []
op18.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 36864}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (36864, 1)
op18.sizes = ([64, 64, 9], [])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op18_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, load, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf18', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1605632}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 1605632}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 64}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1605632, 1)
op20.sizes = ([25088, 64], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op20_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, relu, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 6422528}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 6422528}, None),
        MemoryDep('buf21', c0, {c0: 6422528}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 256}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (6422528, 1)
op22.sizes = ([25088, 256], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op22_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf15', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf22', get_index_6, relu, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1605632}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 1605632}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 64}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1605632, 1)
op24.sizes = ([25088, 64], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op24_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf24', get_index_5, relu, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op25.unmet_dependencies = []
op25.met_dependencies = [MemoryDep('arg51_1', c0, {c0: 36864}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (36864, 1)
op25.sizes = ([64, 64, 9], [])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op25_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg51_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf25', get_index_1, load, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf25', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1605632}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 1605632}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 64}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1605632, 1)
op27.sizes = ([25088, 64], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op27_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, relu, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 6422528}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 6422528}, None),
        MemoryDep('buf28', c0, {c0: 6422528}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg60_1', c1, {c0: 25088, c1: 256}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (6422528, 1)
op29.sizes = ([25088, 256], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op29_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf22', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf29', get_index_6, relu, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1605632}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 1605632}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg63_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg64_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg65_1', c1, {c0: 25088, c1: 64}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (1605632, 1)
op31.sizes = ([25088, 64], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op31_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, relu, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op32.unmet_dependencies = []
op32.met_dependencies = [MemoryDep('arg66_1', c0, {c0: 36864}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (36864, 1)
op32.sizes = ([64, 64, 9], [])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op32_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg66_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, load, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1605632}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 1605632}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg68_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg69_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg70_1', c1, {c0: 25088, c1: 64}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (1605632, 1)
op34.sizes = ([25088, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op34_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf34', get_index_5, relu, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 6422528}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 6422528}, None),
        MemoryDep('buf35', c0, {c0: 6422528}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 25088, c1: 256}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (6422528, 1)
op36.sizes = ([25088, 256], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op36_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf29', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf36', get_index_6, relu, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 2304*c0 + c1 + 256*c2, {c0: 18, c1: 256, c2: 9}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 41472}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[18, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (41472, 1)
op37.sizes = ([18, 256, 9], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[18, 256, 3, 3], stride=[2304, 9, 3, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[18, 256, 3, 3], stride=[2304, 1, 768, 256])
class op37_loop_body:
    var_ranges = {z0: 18, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 451584}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 451584}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg78_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg79_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg80_1', c1, {c0: 25088, c1: 18}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (451584, 1)
op39.sizes = ([25088, 18], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op39_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, relu, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op40.unmet_dependencies = []
op40.met_dependencies = [MemoryDep('arg86_1', c0, {c0: 2916}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (2916, 1)
op40.sizes = ([18, 18, 9], [])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op40_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg86_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf39', mode=None), StarDep(name='buf40', mode=None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 451584}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 451584}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg88_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg89_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg90_1', c1, {c0: 25088, c1: 18}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (451584, 1)
op42.sizes = ([25088, 18], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op42_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, relu, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op43.unmet_dependencies = []
op43.met_dependencies = [MemoryDep('arg91_1', c0, {c0: 2916}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (2916, 1)
op43.sizes = ([18, 18, 9], [])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op43_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg91_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf43', get_index_1, load, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf42', mode=None), StarDep(name='buf43', mode=None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 451584}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 451584}, None),
        MemoryDep('buf44', c0, {c0: 451584}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg93_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg94_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg95_1', c1, {c0: 25088, c1: 18}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (451584, 1)
op45.sizes = ([25088, 18], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op45_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf39', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf45', get_index_6, relu, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op46.unmet_dependencies = []
op46.met_dependencies = [MemoryDep('arg96_1', c0, {c0: 2916}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (2916, 1)
op46.sizes = ([18, 18, 9], [])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op46_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf46', get_index_1, load, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf45', mode=None), StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 451584}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 451584}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg97_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg98_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg99_1', c1, {c0: 25088, c1: 18}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (451584, 1)
op48.sizes = ([25088, 18], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op48_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, relu, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('arg101_1', c0, {c0: 2916}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (2916, 1)
op49.sizes = ([18, 18, 9], [])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op49_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg101_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 451584}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 451584}, None),
        MemoryDep('buf50', c0, {c0: 451584}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg103_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg104_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg105_1', c1, {c0: 25088, c1: 18}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (451584, 1)
op51.sizes = ([25088, 18], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op51_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf45', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf51', get_index_6, relu, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op52.unmet_dependencies = []
op52.met_dependencies = [MemoryDep('arg106_1', c0, {c0: 2916}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (2916, 1)
op52.sizes = ([18, 18, 9], [])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op52_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg106_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf52', get_index_1, load, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf51', mode=None), StarDep(name='buf52', mode=None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 451584}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 451584}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg108_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg109_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg110_1', c1, {c0: 25088, c1: 18}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (451584, 1)
op54.sizes = ([25088, 18], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op54_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, relu, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op55.unmet_dependencies = []
op55.met_dependencies = [MemoryDep('arg111_1', c0, {c0: 2916}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (2916, 1)
op55.sizes = ([18, 18, 9], [])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op55_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg111_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, load, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 451584}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 451584}, None),
        MemoryDep('buf56', c0, {c0: 451584}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg113_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg114_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg115_1', c1, {c0: 25088, c1: 18}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (451584, 1)
op57.sizes = ([25088, 18], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op57_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf51', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf57', get_index_6, relu, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op58.unmet_dependencies = []
op58.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 2916}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2916, 1)
op58.sizes = ([18, 18, 9], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op58_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf57', mode=None), StarDep(name='buf58', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 451584}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 451584}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg118_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg119_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg120_1', c1, {c0: 25088, c1: 18}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (451584, 1)
op60.sizes = ([25088, 18], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op60_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, relu, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op61.unmet_dependencies = []
op61.met_dependencies = [MemoryDep('arg121_1', c0, {c0: 2916}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (2916, 1)
op61.sizes = ([18, 18, 9], [])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op61_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None), StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 451584}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 451584}, None),
        MemoryDep('buf62', c0, {c0: 451584}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg123_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg124_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg125_1', c1, {c0: 25088, c1: 18}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (451584, 1)
op63.sizes = ([25088, 18], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op63_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf57', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf63', get_index_6, relu, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 2304*c0 + c1 + 256*c2, {c0: 36, c1: 256, c2: 9}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = [MemoryDep('arg81_1', c0, {c0: 82944}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[36, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (82944, 1)
op64.sizes = ([36, 256, 9], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[36, 256, 3, 3], stride=[2304, 9, 3, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[36, 256, 3, 3], stride=[2304, 1, 768, 256])
class op64_loop_body:
    var_ranges = {z0: 36, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf64', get_index_1, load, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 225792}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 225792}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg83_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg84_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 36}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (225792, 1)
op66.sizes = ([6272, 36], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op66_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf66', get_index_5, relu, None)
        return store


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op67.unmet_dependencies = []
op67.met_dependencies = [MemoryDep('arg126_1', c0, {c0: 11664}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (11664, 1)
op67.sizes = ([36, 36, 9], [])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op67_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg126_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf67', get_index_1, load, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf66', mode=None), StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 225792}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 225792}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg128_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg129_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg130_1', c1, {c0: 6272, c1: 36}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (225792, 1)
op69.sizes = ([6272, 36], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op69_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf69', get_index_5, relu, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op70.unmet_dependencies = []
op70.met_dependencies = [MemoryDep('arg131_1', c0, {c0: 11664}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (11664, 1)
op70.sizes = ([36, 36, 9], [])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op70_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg131_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf70', get_index_1, load, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None), StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 225792}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 225792}, None),
        MemoryDep('buf71', c0, {c0: 225792}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg133_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg134_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg135_1', c1, {c0: 6272, c1: 36}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (225792, 1)
op72.sizes = ([6272, 36], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op72_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf66', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf72', get_index_6, relu, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op73.unmet_dependencies = []
op73.met_dependencies = [MemoryDep('arg136_1', c0, {c0: 11664}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (11664, 1)
op73.sizes = ([36, 36, 9], [])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op73_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg136_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf73', get_index_1, load, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf72', mode=None), StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 225792}, None)]
op75.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 225792}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg138_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg139_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg140_1', c1, {c0: 6272, c1: 36}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (225792, 1)
op75.sizes = ([6272, 36], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op75_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, relu, None)
        return store


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op76.unmet_dependencies = []
op76.met_dependencies = [MemoryDep('arg141_1', c0, {c0: 11664}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (11664, 1)
op76.sizes = ([36, 36, 9], [])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op76_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf75', mode=None), StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 225792}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 225792}, None),
        MemoryDep('buf77', c0, {c0: 225792}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg143_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg144_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg145_1', c1, {c0: 6272, c1: 36}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (225792, 1)
op78.sizes = ([6272, 36], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op78_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf72', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf78', get_index_6, relu, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op79.unmet_dependencies = []
op79.met_dependencies = [MemoryDep('arg146_1', c0, {c0: 11664}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (11664, 1)
op79.sizes = ([36, 36, 9], [])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op79_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg146_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf79', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 225792}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 225792}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg148_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg149_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg150_1', c1, {c0: 6272, c1: 36}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (225792, 1)
op81.sizes = ([6272, 36], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op81_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op82.unmet_dependencies = []
op82.met_dependencies = [MemoryDep('arg151_1', c0, {c0: 11664}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (11664, 1)
op82.sizes = ([36, 36, 9], [])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op82_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg151_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelAlloc)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ExternKernelAlloc
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.convolution


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 225792}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 225792}, None),
        MemoryDep('buf83', c0, {c0: 225792}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg153_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg154_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg155_1', c1, {c0: 6272, c1: 36}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (225792, 1)
op84.sizes = ([6272, 36], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op84_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf78', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf84', get_index_6, relu, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op85.unmet_dependencies = []
op85.met_dependencies = [MemoryDep('arg156_1', c0, {c0: 11664}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (11664, 1)
op85.sizes = ([36, 36, 9], [])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op85_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg156_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, load, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None), StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 225792}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 225792}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg158_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg159_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg160_1', c1, {c0: 6272, c1: 36}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (225792, 1)
op87.sizes = ([6272, 36], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op87_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, relu, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op88.unmet_dependencies = []
op88.met_dependencies = [MemoryDep('arg161_1', c0, {c0: 11664}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (11664, 1)
op88.sizes = ([36, 36, 9], [])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op88_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf88', get_index_1, load, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 225792}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 225792}, None),
        MemoryDep('buf89', c0, {c0: 225792}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg163_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg164_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg165_1', c1, {c0: 6272, c1: 36}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (225792, 1)
op90.sizes = ([6272, 36], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op90_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf84', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf90', get_index_6, relu, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.convolution


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 451584}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg168_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg169_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg170_1', c1, {c0: 8, c1: 18}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (451584, 1)
op92.sizes = ([8, 18, 56, 56], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf91', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg167_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg168_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg169_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg170_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf92', get_index_7, add_1, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 451584}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 451584}, None),
        MemoryDep('buf92', 56448*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 18}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf93.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (451584, 1)
op93.sizes = ([8, 3136, 18], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 18}
    index0 = 56448*z0 + 18*z1 + z2
    index1 = 56448*z0 + z1 + 3136*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf92', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf93', get_index_2, relu, None)
        return store


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op94.unmet_dependencies = []
op94.met_dependencies = [MemoryDep('arg181_1', c0, {c0: 2916}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (2916, 1)
op94.sizes = ([18, 18, 9], [])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op94_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf94', get_index_1, load, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf93', mode=None), StarDep(name='buf94', mode=None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 451584}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 451584}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg183_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg184_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg185_1', c1, {c0: 25088, c1: 18}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (451584, 1)
op96.sizes = ([25088, 18], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op96_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, relu, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg186_1', c0, {c0: 2916}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (2916, 1)
op97.sizes = ([18, 18, 9], [])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op97_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg186_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 451584}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 451584}, None),
        MemoryDep('buf98', c0, {c0: 451584}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg188_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg189_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg190_1', c1, {c0: 25088, c1: 18}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (451584, 1)
op99.sizes = ([25088, 18], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op99_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf93', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf99', get_index_6, relu, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op100.unmet_dependencies = []
op100.met_dependencies = [MemoryDep('arg191_1', c0, {c0: 2916}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (2916, 1)
op100.sizes = ([18, 18, 9], [])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op100_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg191_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 451584}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 451584}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg193_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg194_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg195_1', c1, {c0: 25088, c1: 18}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (451584, 1)
op102.sizes = ([25088, 18], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op102_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf102', get_index_5, relu, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op103.unmet_dependencies = []
op103.met_dependencies = [MemoryDep('arg196_1', c0, {c0: 2916}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (2916, 1)
op103.sizes = ([18, 18, 9], [])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op103_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg196_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf103', get_index_1, load, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 451584}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 451584}, None),
        MemoryDep('buf99', c0, {c0: 451584}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg198_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg199_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg200_1', c1, {c0: 25088, c1: 18}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (451584, 1)
op105.sizes = ([25088, 18], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op105_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf99', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf105', get_index_6, relu, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op106.unmet_dependencies = []
op106.met_dependencies = [MemoryDep('arg201_1', c0, {c0: 2916}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (2916, 1)
op106.sizes = ([18, 18, 9], [])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op106_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg201_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf106', get_index_1, load, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelAlloc)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf105', mode=None), StarDep(name='buf106', mode=None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ExternKernelAlloc
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.convolution


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 451584}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 451584}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg203_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg204_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg205_1', c1, {c0: 25088, c1: 18}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (451584, 1)
op108.sizes = ([25088, 18], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op108_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf108', get_index_5, relu, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op109.unmet_dependencies = []
op109.met_dependencies = [MemoryDep('arg206_1', c0, {c0: 2916}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2916, 1)
op109.sizes = ([18, 18, 9], [])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op109_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg206_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf108', mode=None), StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 451584}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 451584}, None),
        MemoryDep('buf110', c0, {c0: 451584}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg208_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg209_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg210_1', c1, {c0: 25088, c1: 18}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (451584, 1)
op111.sizes = ([25088, 18], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op111_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf105', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf111', get_index_6, relu, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op112.unmet_dependencies = []
op112.met_dependencies = [MemoryDep('arg211_1', c0, {c0: 2916}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (2916, 1)
op112.sizes = ([18, 18, 9], [])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op112_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg211_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 451584}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 451584}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg213_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg214_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg215_1', c1, {c0: 25088, c1: 18}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (451584, 1)
op114.sizes = ([25088, 18], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op114_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf114', get_index_5, relu, None)
        return store


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op115.unmet_dependencies = []
op115.met_dependencies = [MemoryDep('arg216_1', c0, {c0: 2916}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (2916, 1)
op115.sizes = ([18, 18, 9], [])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op115_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg216_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None), StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 451584}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 451584}, None),
        MemoryDep('buf116', c0, {c0: 451584}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg218_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg219_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg220_1', c1, {c0: 25088, c1: 18}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (451584, 1)
op117.sizes = ([25088, 18], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op117_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf111', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf117', get_index_6, relu, None)
        return store


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op118.unmet_dependencies = []
op118.met_dependencies = [MemoryDep('arg171_1', c0, {c0: 5832}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (5832, 1)
op118.sizes = ([36, 18, 9], [])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op118_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg171_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf118', get_index_1, load, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelAlloc)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None), StarDep(name='buf63', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ExternKernelAlloc
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.convolution


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 225792}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 225792}, None),
        MemoryDep('buf90', c0, {c0: 225792}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg173_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg174_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg175_1', c1, {c0: 6272, c1: 36}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (225792, 1)
op120.sizes = ([6272, 36], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op120_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf90', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf120', get_index_6, relu, None)
        return store


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op121.unmet_dependencies = []
op121.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 11664}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (11664, 1)
op121.sizes = ([36, 36, 9], [])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op121_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf121', get_index_1, load, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf120', mode=None), StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 225792}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 225792}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg223_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg224_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg225_1', c1, {c0: 6272, c1: 36}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (225792, 1)
op123.sizes = ([6272, 36], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op123_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf123', get_index_5, relu, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op124.unmet_dependencies = []
op124.met_dependencies = [MemoryDep('arg226_1', c0, {c0: 11664}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (11664, 1)
op124.sizes = ([36, 36, 9], [])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op124_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg226_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf124', get_index_1, load, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf123', mode=None), StarDep(name='buf124', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.convolution


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 225792}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf120', c0, {c0: 225792}, None),
        MemoryDep('buf125', c0, {c0: 225792}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg228_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg229_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg230_1', c1, {c0: 6272, c1: 36}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (225792, 1)
op126.sizes = ([6272, 36], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op126_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf120', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf126', get_index_6, relu, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op127.unmet_dependencies = []
op127.met_dependencies = [MemoryDep('arg231_1', c0, {c0: 11664}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (11664, 1)
op127.sizes = ([36, 36, 9], [])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op127_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg231_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf127', get_index_1, load, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 225792}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 225792}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg233_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg234_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg235_1', c1, {c0: 6272, c1: 36}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (225792, 1)
op129.sizes = ([6272, 36], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op129_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf129', get_index_5, relu, None)
        return store


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op130.unmet_dependencies = []
op130.met_dependencies = [MemoryDep('arg236_1', c0, {c0: 11664}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (11664, 1)
op130.sizes = ([36, 36, 9], [])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op130_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg236_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf130', get_index_1, load, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf129', mode=None), StarDep(name='buf130', mode=None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 225792}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 225792}, None),
        MemoryDep('buf131', c0, {c0: 225792}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg238_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg239_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg240_1', c1, {c0: 6272, c1: 36}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (225792, 1)
op132.sizes = ([6272, 36], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op132_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf126', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf132', get_index_6, relu, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op133.unmet_dependencies = []
op133.met_dependencies = [MemoryDep('arg241_1', c0, {c0: 11664}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (11664, 1)
op133.sizes = ([36, 36, 9], [])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op133_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg241_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf133', get_index_1, load, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None), StarDep(name='buf133', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 225792}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 225792}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg243_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg244_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg245_1', c1, {c0: 6272, c1: 36}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (225792, 1)
op135.sizes = ([6272, 36], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op135_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, relu, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op136.unmet_dependencies = []
op136.met_dependencies = [MemoryDep('arg246_1', c0, {c0: 11664}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (11664, 1)
op136.sizes = ([36, 36, 9], [])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op136_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg246_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None), StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 225792}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 225792}, None),
        MemoryDep('buf137', c0, {c0: 225792}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg248_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg249_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg250_1', c1, {c0: 6272, c1: 36}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf138.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (225792, 1)
op138.sizes = ([6272, 36], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op138_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf132', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf138', get_index_6, relu, None)
        return store


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op139.unmet_dependencies = []
op139.met_dependencies = [MemoryDep('arg251_1', c0, {c0: 11664}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (11664, 1)
op139.sizes = ([36, 36, 9], [])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op139_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg251_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf139', get_index_1, load, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf138', mode=None), StarDep(name='buf139', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 225792}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 225792}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg253_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg254_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg255_1', c1, {c0: 6272, c1: 36}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (225792, 1)
op141.sizes = ([6272, 36], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op141_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf141', get_index_5, relu, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op142.unmet_dependencies = []
op142.met_dependencies = [MemoryDep('arg256_1', c0, {c0: 11664}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (11664, 1)
op142.sizes = ([36, 36, 9], [])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op142_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg256_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf141', mode=None), StarDep(name='buf142', mode=None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 225792}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 225792}, None),
        MemoryDep('buf143', c0, {c0: 225792}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg258_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg259_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg260_1', c1, {c0: 6272, c1: 36}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf144.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (225792, 1)
op144.sizes = ([6272, 36], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op144_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf138', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf144', get_index_6, relu, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 451584}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg303_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg304_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg305_1', c1, {c0: 8, c1: 18}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (451584, 1)
op146.sizes = ([8, 18, 56, 56], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf145', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg302_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg303_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg304_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg305_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf146', get_index_7, add_1, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op147.unmet_dependencies = []
op147.met_dependencies = [MemoryDep('arg176_1', c0, {c0: 23328}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (23328, 1)
op147.sizes = ([72, 36, 9], [])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op147_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg176_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelAlloc)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf120', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ExternKernelAlloc
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.convolution


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 112896}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 112896}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg179_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg180_1', c1, {c0: 1568, c1: 72}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (112896, 1)
op149.sizes = ([1568, 72], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op149_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf149', get_index_5, relu, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op150.unmet_dependencies = []
op150.met_dependencies = [MemoryDep('arg261_1', c0, {c0: 46656}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (46656, 1)
op150.sizes = ([72, 72, 9], [])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op150_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg261_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf150', get_index_1, load, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelAlloc)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelAlloc
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.convolution


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 112896}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 112896}, None)]
op152.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg263_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 72}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (112896, 1)
op152.sizes = ([1568, 72], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op152_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf152', get_index_5, relu, None)
        return store


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op153.unmet_dependencies = []
op153.met_dependencies = [MemoryDep('arg266_1', c0, {c0: 46656}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (46656, 1)
op153.sizes = ([72, 72, 9], [])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op153_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg266_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf153', get_index_1, load, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf152', mode=None), StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 112896}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 112896}, None),
        MemoryDep('buf154', c0, {c0: 112896}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg268_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg269_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg270_1', c1, {c0: 1568, c1: 72}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (112896, 1)
op155.sizes = ([1568, 72], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op155_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf149', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf155', get_index_6, relu, None)
        return store


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op156.unmet_dependencies = []
op156.met_dependencies = [MemoryDep('arg271_1', c0, {c0: 46656}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (46656, 1)
op156.sizes = ([72, 72, 9], [])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op156_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg271_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf156', get_index_1, load, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None), StarDep(name='buf156', mode=None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 112896}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 112896}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg275_1', c1, {c0: 1568, c1: 72}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (112896, 1)
op158.sizes = ([1568, 72], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op158_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf158', get_index_5, relu, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op159.unmet_dependencies = []
op159.met_dependencies = [MemoryDep('arg276_1', c0, {c0: 46656}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (46656, 1)
op159.sizes = ([72, 72, 9], [])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op159_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg276_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 112896}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf155', c0, {c0: 112896}, None),
        MemoryDep('buf160', c0, {c0: 112896}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg279_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg280_1', c1, {c0: 1568, c1: 72}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (112896, 1)
op161.sizes = ([1568, 72], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op161_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf155', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf161', get_index_6, relu, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op162.unmet_dependencies = []
op162.met_dependencies = [MemoryDep('arg281_1', c0, {c0: 46656}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (46656, 1)
op162.sizes = ([72, 72, 9], [])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op162_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg281_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None), StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.convolution


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 112896}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 112896}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg283_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg285_1', c1, {c0: 1568, c1: 72}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (112896, 1)
op164.sizes = ([1568, 72], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf164', get_index_5, relu, None)
        return store


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op165.unmet_dependencies = []
op165.met_dependencies = [MemoryDep('arg286_1', c0, {c0: 46656}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (46656, 1)
op165.sizes = ([72, 72, 9], [])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op165_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg286_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelAlloc)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None), StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ExternKernelAlloc
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.convolution


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 112896}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 112896}, None),
        MemoryDep('buf166', c0, {c0: 112896}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 72}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (112896, 1)
op167.sizes = ([1568, 72], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op167_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf161', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf167', get_index_6, relu, None)
        return store


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op168.unmet_dependencies = []
op168.met_dependencies = [MemoryDep('arg291_1', c0, {c0: 46656}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (46656, 1)
op168.sizes = ([72, 72, 9], [])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op168_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg291_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf168', get_index_1, load, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf167', mode=None), StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.convolution


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 112896}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 112896}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg293_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg294_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg295_1', c1, {c0: 1568, c1: 72}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (112896, 1)
op170.sizes = ([1568, 72], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op170_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg293_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf170', get_index_5, relu, None)
        return store


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op171.unmet_dependencies = []
op171.met_dependencies = [MemoryDep('arg296_1', c0, {c0: 46656}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (46656, 1)
op171.sizes = ([72, 72, 9], [])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op171_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg296_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf171', get_index_1, load, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf170', mode=None), StarDep(name='buf171', mode=None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 112896}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 112896}, None),
        MemoryDep('buf172', c0, {c0: 112896}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg299_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 72}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (112896, 1)
op173.sizes = ([1568, 72], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op173_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg298_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf167', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf173', get_index_6, relu, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelAlloc)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelAlloc
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.convolution


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 451584}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg308_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg309_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg310_1', c1, {c0: 8, c1: 18}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (451584, 1)
op175.sizes = ([8, 18, 56, 56], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf174', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg307_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg308_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg309_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg310_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf175', get_index_7, add_1, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf117', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf146', c0, {c0: 451584}, None),
        MemoryDep('buf175', c0, {c0: 451584}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf176.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op176.group.device = cuda:0
op176.group.iteration = (451584, 1)
op176.sizes = ([8, 18, 3136], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op176_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf146', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf175', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf176', get_index_3, relu, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg336_1', c0, {c0: 2916}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2916, 1)
op177.sizes = ([18, 18, 9], [])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op177_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg336_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 451584}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 451584}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg338_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg339_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg340_1', c1, {c0: 25088, c1: 18}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (451584, 1)
op179.sizes = ([25088, 18], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op179_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, relu, None)
        return store


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op180.unmet_dependencies = []
op180.met_dependencies = [MemoryDep('arg341_1', c0, {c0: 2916}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (2916, 1)
op180.sizes = ([18, 18, 9], [])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op180_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg341_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf180', get_index_1, load, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None), StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.convolution


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 451584}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf176', c0, {c0: 451584}, None),
        MemoryDep('buf181', c0, {c0: 451584}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg343_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg344_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg345_1', c1, {c0: 25088, c1: 18}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (451584, 1)
op182.sizes = ([25088, 18], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op182_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf176', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf182', get_index_6, relu, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op183.unmet_dependencies = []
op183.met_dependencies = [MemoryDep('arg346_1', c0, {c0: 2916}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (2916, 1)
op183.sizes = ([18, 18, 9], [])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op183_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg346_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelAlloc)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ExternKernelAlloc
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.convolution


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 451584}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 451584}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg348_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg349_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg350_1', c1, {c0: 25088, c1: 18}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (451584, 1)
op185.sizes = ([25088, 18], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op185_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf185', get_index_5, relu, None)
        return store


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op186.unmet_dependencies = []
op186.met_dependencies = [MemoryDep('arg351_1', c0, {c0: 2916}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (2916, 1)
op186.sizes = ([18, 18, 9], [])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op186_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg351_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf186', get_index_1, load, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelAlloc)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf185', mode=None), StarDep(name='buf186', mode=None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ExternKernelAlloc
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.node.kernel = extern_kernels.convolution


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 451584}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 451584}, None),
        MemoryDep('buf187', c0, {c0: 451584}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg353_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg354_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg355_1', c1, {c0: 25088, c1: 18}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (451584, 1)
op188.sizes = ([25088, 18], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op188_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf182', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf188', get_index_6, relu, None)
        return store


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op189.unmet_dependencies = []
op189.met_dependencies = [MemoryDep('arg356_1', c0, {c0: 2916}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (2916, 1)
op189.sizes = ([18, 18, 9], [])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op189_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg356_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf189', get_index_1, load, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf188', mode=None), StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 451584}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 451584}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg358_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg359_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg360_1', c1, {c0: 25088, c1: 18}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (451584, 1)
op191.sizes = ([25088, 18], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op191_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf191', get_index_5, relu, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op192.unmet_dependencies = []
op192.met_dependencies = [MemoryDep('arg361_1', c0, {c0: 2916}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (2916, 1)
op192.sizes = ([18, 18, 9], [])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op192_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg361_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf192', get_index_1, load, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf191', mode=None), StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 451584}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 451584}, None),
        MemoryDep('buf193', c0, {c0: 451584}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg362_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg363_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg364_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg365_1', c1, {c0: 25088, c1: 18}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (451584, 1)
op194.sizes = ([25088, 18], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op194_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf188', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf194', get_index_6, relu, None)
        return store


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op195.unmet_dependencies = []
op195.met_dependencies = [MemoryDep('arg366_1', c0, {c0: 2916}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (2916, 1)
op195.sizes = ([18, 18, 9], [])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op195_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg366_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf195', get_index_1, load, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelAlloc)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None), StarDep(name='buf195', mode=None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ExternKernelAlloc
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.node.kernel = extern_kernels.convolution


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 451584}, None)]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 451584}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg368_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg369_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg370_1', c1, {c0: 25088, c1: 18}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (451584, 1)
op197.sizes = ([25088, 18], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op197_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg370_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf197', get_index_5, relu, None)
        return store


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op198.unmet_dependencies = []
op198.met_dependencies = [MemoryDep('arg371_1', c0, {c0: 2916}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (2916, 1)
op198.sizes = ([18, 18, 9], [])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op198_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg371_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf198', get_index_1, load, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None), StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 451584}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 451584}, None),
        MemoryDep('buf199', c0, {c0: 451584}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg372_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg373_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg374_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg375_1', c1, {c0: 25088, c1: 18}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (451584, 1)
op200.sizes = ([25088, 18], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op200_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf194', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf200', get_index_6, relu, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op201.unmet_dependencies = []
op201.met_dependencies = [MemoryDep('arg311_1', c0, {c0: 5832}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (5832, 1)
op201.sizes = ([36, 18, 9], [])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op201_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg311_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelAlloc)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf117', mode=None), StarDep(name='buf201', mode=None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ExternKernelAlloc
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf202.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op202.node.kernel = extern_kernels.convolution


op203: ExternKernelSchedulerNode(ExternKernelAlloc)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op203.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelAlloc
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.convolution


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 225792}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg318_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg319_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg320_1', c1, {c0: 8, c1: 36}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (225792, 1)
op204.sizes = ([8, 36, 28, 28], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf203', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg317_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg318_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg319_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg320_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf204', get_index_7, add_1, None)
        return store


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 225792}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 225792}, None),
        MemoryDep('buf202', c0, {c0: 225792}, None),
        MemoryDep('buf204', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg313_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg314_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg315_1', c1, {c0: 6272, c1: 36}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (225792, 1)
op205.sizes = ([8, 784, 36], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf144', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf204', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf205', get_index_7, relu, None)
        return store


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op206.unmet_dependencies = []
op206.met_dependencies = [MemoryDep('arg376_1', c0, {c0: 11664}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (11664, 1)
op206.sizes = ([36, 36, 9], [])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op206_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg376_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf205', mode=None), StarDep(name='buf206', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 225792}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 225792}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg377_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg378_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg379_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg380_1', c1, {c0: 6272, c1: 36}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (225792, 1)
op208.sizes = ([6272, 36], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op208_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg377_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg379_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, relu, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg381_1', c0, {c0: 11664}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (11664, 1)
op209.sizes = ([36, 36, 9], [])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op209_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg381_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.convolution


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 225792}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 225792}, None),
        MemoryDep('buf210', c0, {c0: 225792}, None)]
op211.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg383_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg384_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg385_1', c1, {c0: 6272, c1: 36}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf211.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (225792, 1)
op211.sizes = ([6272, 36], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op211_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf205', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf211', get_index_6, relu, None)
        return store


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op212.unmet_dependencies = []
op212.met_dependencies = [MemoryDep('arg386_1', c0, {c0: 11664}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (11664, 1)
op212.sizes = ([36, 36, 9], [])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op212_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg386_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf212', get_index_1, load, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelAlloc)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf211', mode=None), StarDep(name='buf212', mode=None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ExternKernelAlloc
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.convolution


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 225792}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 225792}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg388_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg389_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg390_1', c1, {c0: 6272, c1: 36}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (225792, 1)
op214.sizes = ([6272, 36], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op214_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg388_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg389_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf214', get_index_5, relu, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op215.unmet_dependencies = []
op215.met_dependencies = [MemoryDep('arg391_1', c0, {c0: 11664}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (11664, 1)
op215.sizes = ([36, 36, 9], [])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op215_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg391_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf214', mode=None), StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 225792}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf211', c0, {c0: 225792}, None),
        MemoryDep('buf216', c0, {c0: 225792}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg392_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg393_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg394_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg395_1', c1, {c0: 6272, c1: 36}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (225792, 1)
op217.sizes = ([6272, 36], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op217_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg392_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg393_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg394_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg395_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf211', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf217', get_index_6, relu, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op218.unmet_dependencies = []
op218.met_dependencies = [MemoryDep('arg396_1', c0, {c0: 11664}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (11664, 1)
op218.sizes = ([36, 36, 9], [])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op218_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg396_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf218', get_index_1, load, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf217', mode=None), StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 225792}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 225792}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg397_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg398_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg399_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg400_1', c1, {c0: 6272, c1: 36}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (225792, 1)
op220.sizes = ([6272, 36], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op220_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg397_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg398_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf220', get_index_5, relu, None)
        return store


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op221.unmet_dependencies = []
op221.met_dependencies = [MemoryDep('arg401_1', c0, {c0: 11664}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (11664, 1)
op221.sizes = ([36, 36, 9], [])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op221_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf221', get_index_1, load, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelAlloc)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf220', mode=None), StarDep(name='buf221', mode=None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ExternKernelAlloc
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.convolution


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 225792}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 225792}, None),
        MemoryDep('buf222', c0, {c0: 225792}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg403_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg404_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg405_1', c1, {c0: 6272, c1: 36}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf223.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (225792, 1)
op223.sizes = ([6272, 36], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op223_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg403_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg404_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg405_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf217', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf223', get_index_6, relu, None)
        return store


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op224.unmet_dependencies = []
op224.met_dependencies = [MemoryDep('arg406_1', c0, {c0: 11664}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (11664, 1)
op224.sizes = ([36, 36, 9], [])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op224_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg406_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf224', get_index_1, load, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf223', mode=None), StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 225792}, None)]
op226.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 225792}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg408_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg409_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg410_1', c1, {c0: 6272, c1: 36}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (225792, 1)
op226.sizes = ([6272, 36], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op226_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg407_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg408_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg409_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg410_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf226', get_index_5, relu, None)
        return store


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op227.unmet_dependencies = []
op227.met_dependencies = [MemoryDep('arg411_1', c0, {c0: 11664}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (11664, 1)
op227.sizes = ([36, 36, 9], [])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op227_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg411_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelAlloc)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ExternKernelAlloc
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.convolution


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 225792}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 225792}, None),
        MemoryDep('buf228', c0, {c0: 225792}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg412_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg413_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg414_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg415_1', c1, {c0: 6272, c1: 36}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (225792, 1)
op229.sizes = ([6272, 36], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op229_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg413_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf223', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf229', get_index_6, relu, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg456_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 451584}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg457_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg458_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg459_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg460_1', c1, {c0: 8, c1: 18}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (451584, 1)
op231.sizes = ([8, 18, 56, 56], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf230', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg457_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg458_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg459_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg460_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf231', get_index_7, add_1, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op232.unmet_dependencies = []
op232.met_dependencies = [MemoryDep('arg321_1', c0, {c0: 2916}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (2916, 1)
op232.sizes = ([18, 18, 9], [])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op232_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg321_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf117', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 112896}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 112896}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg323_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg324_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg325_1', c1, {c0: 6272, c1: 18}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (112896, 1)
op234.sizes = ([6272, 18], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op234_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf234', get_index_5, relu, None)
        return store


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op235.unmet_dependencies = []
op235.met_dependencies = [MemoryDep('arg326_1', c0, {c0: 11664}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (11664, 1)
op235.sizes = ([72, 18, 9], [])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op235_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg326_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf235', get_index_1, load, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelAlloc)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf234', mode=None), StarDep(name='buf235', mode=None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ExternKernelAlloc
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.convolution


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op237.unmet_dependencies = []
op237.met_dependencies = [MemoryDep('arg331_1', c0, {c0: 23328}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (23328, 1)
op237.sizes = ([72, 36, 9], [])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op237_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg331_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf237', get_index_1, load, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelAlloc)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf144', mode=None), StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ExternKernelAlloc
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 112896}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 112896}, None),
        MemoryDep('buf238', c0, {c0: 112896}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg328_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg329_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg330_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg332_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg333_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg334_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg335_1', c1, {c0: 1568, c1: 72}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (112896, 1)
op239.sizes = ([1568, 72], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op239_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf238', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg332_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg333_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg334_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg335_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf239', get_index_10, add_4, None)
        return store


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 112896}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 112896}, None),
        MemoryDep('buf239', c0, {c0: 112896}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (112896, 1)
op240.sizes = ([112896], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op240_loop_body:
    var_ranges = {z0: 112896}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf240', get_index_2, relu, None)
        return store


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op241.unmet_dependencies = []
op241.met_dependencies = [MemoryDep('arg416_1', c0, {c0: 46656}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (46656, 1)
op241.sizes = ([72, 72, 9], [])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op241_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg416_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf241', get_index_1, load, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelAlloc)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf240', mode=None), StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ExternKernelAlloc
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.convolution


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 112896}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 112896}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg417_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg418_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg419_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg420_1', c1, {c0: 1568, c1: 72}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (112896, 1)
op243.sizes = ([1568, 72], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op243_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg417_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg418_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg419_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg420_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, relu, None)
        return store


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op244.unmet_dependencies = []
op244.met_dependencies = [MemoryDep('arg421_1', c0, {c0: 46656}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (46656, 1)
op244.sizes = ([72, 72, 9], [])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op244_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg421_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf244', get_index_1, load, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelAlloc)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf243', mode=None), StarDep(name='buf244', mode=None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ExternKernelAlloc
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.convolution


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 112896}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 112896}, None),
        MemoryDep('buf245', c0, {c0: 112896}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg422_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg423_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg424_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg425_1', c1, {c0: 1568, c1: 72}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf246.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op246.group.device = cuda:0
op246.group.iteration = (112896, 1)
op246.sizes = ([1568, 72], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op246_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg423_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg424_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg425_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf240', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf246', get_index_6, relu, None)
        return store


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op247.unmet_dependencies = []
op247.met_dependencies = [MemoryDep('arg426_1', c0, {c0: 46656}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (46656, 1)
op247.sizes = ([72, 72, 9], [])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op247_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg426_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf247', get_index_1, load, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelAlloc)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf246', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelAlloc
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf248.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False)]
]
op248.node.kernel = extern_kernels.convolution


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 112896}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 112896}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg429_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg430_1', c1, {c0: 1568, c1: 72}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (112896, 1)
op249.sizes = ([1568, 72], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op249_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg427_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg428_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg429_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg430_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf249', get_index_5, relu, None)
        return store


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op250.unmet_dependencies = []
op250.met_dependencies = [MemoryDep('arg431_1', c0, {c0: 46656}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (46656, 1)
op250.sizes = ([72, 72, 9], [])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op250_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg431_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf250', get_index_1, load, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelAlloc)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None), StarDep(name='buf250', mode=None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ExternKernelAlloc
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.convolution


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 112896}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf246', c0, {c0: 112896}, None),
        MemoryDep('buf251', c0, {c0: 112896}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg433_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg434_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg435_1', c1, {c0: 1568, c1: 72}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (112896, 1)
op252.sizes = ([1568, 72], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op252_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg432_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg433_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg434_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg435_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf246', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf252', get_index_6, relu, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg436_1', c0, {c0: 46656}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (46656, 1)
op253.sizes = ([72, 72, 9], [])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op253_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg436_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf253', get_index_1, load, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelAlloc)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelAlloc
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.convolution


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 112896}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 112896}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg437_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg438_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg439_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg440_1', c1, {c0: 1568, c1: 72}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (112896, 1)
op255.sizes = ([1568, 72], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op255_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg437_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg438_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg439_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg440_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf255', get_index_5, relu, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op256.unmet_dependencies = []
op256.met_dependencies = [MemoryDep('arg441_1', c0, {c0: 46656}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (46656, 1)
op256.sizes = ([72, 72, 9], [])
arg441_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op256_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg441_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf256', get_index_1, load, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelAlloc)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf255', mode=None), StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ExternKernelAlloc
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.convolution


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 112896}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 112896}, None),
        MemoryDep('buf257', c0, {c0: 112896}, None)]
op258.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg443_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg444_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg445_1', c1, {c0: 1568, c1: 72}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (112896, 1)
op258.sizes = ([1568, 72], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op258_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf252', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf258', get_index_6, relu, None)
        return store


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op259.unmet_dependencies = []
op259.met_dependencies = [MemoryDep('arg446_1', c0, {c0: 46656}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (46656, 1)
op259.sizes = ([72, 72, 9], [])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op259_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg446_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf259', get_index_1, load, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelAlloc)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf258', mode=None), StarDep(name='buf259', mode=None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ExternKernelAlloc
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op260.node.kernel = extern_kernels.convolution


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 112896}, None)]
op261.unmet_dependencies = [MemoryDep('buf260', c0, {c0: 112896}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg448_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg449_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg450_1', c1, {c0: 1568, c1: 72}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (112896, 1)
op261.sizes = ([1568, 72], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg448_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg449_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg450_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf261', get_index_5, relu, None)
        return store


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op262.unmet_dependencies = []
op262.met_dependencies = [MemoryDep('arg451_1', c0, {c0: 46656}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (46656, 1)
op262.sizes = ([72, 72, 9], [])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op262_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg451_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.convolution


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 112896}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 112896}, None),
        MemoryDep('buf263', c0, {c0: 112896}, None)]
op264.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg453_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg454_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg455_1', c1, {c0: 1568, c1: 72}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf264.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (112896, 1)
op264.sizes = ([1568, 72], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op264_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf258', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf264', get_index_6, relu, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.node.kernel = extern_kernels.convolution


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 451584}, None)]
op266.unmet_dependencies = [MemoryDep('buf265', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg462_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg463_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg464_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg465_1', c1, {c0: 8, c1: 18}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (451584, 1)
op266.sizes = ([8, 18, 56, 56], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf265', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg462_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg463_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg464_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg465_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf266', get_index_7, add_1, None)
        return store


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf200', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf231', c0, {c0: 451584}, None),
        MemoryDep('buf266', c0, {c0: 451584}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf267.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (451584, 1)
op267.sizes = ([8, 18, 3136], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op267_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf231', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf266', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf267', get_index_3, relu, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op268.unmet_dependencies = []
op268.met_dependencies = [MemoryDep('arg491_1', c0, {c0: 2916}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (2916, 1)
op268.sizes = ([18, 18, 9], [])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op268_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg491_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf268', get_index_1, load, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelAlloc)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ExternKernelAlloc
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.convolution


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 451584}, None)]
op270.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 451584}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg492_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg493_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg494_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg495_1', c1, {c0: 25088, c1: 18}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (451584, 1)
op270.sizes = ([25088, 18], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op270_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg493_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg495_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, relu, None)
        return store


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op271.unmet_dependencies = []
op271.met_dependencies = [MemoryDep('arg496_1', c0, {c0: 2916}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (2916, 1)
op271.sizes = ([18, 18, 9], [])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op271_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg496_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 451584}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 451584}, None),
        MemoryDep('buf272', c0, {c0: 451584}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg498_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg499_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg500_1', c1, {c0: 25088, c1: 18}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf273.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (451584, 1)
op273.sizes = ([25088, 18], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op273_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf267', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf273', get_index_6, relu, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op274.unmet_dependencies = []
op274.met_dependencies = [MemoryDep('arg501_1', c0, {c0: 2916}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (2916, 1)
op274.sizes = ([18, 18, 9], [])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op274_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg501_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf274', get_index_1, load, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf273', mode=None), StarDep(name='buf274', mode=None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.convolution


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 451584}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 451584}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg503_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg504_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg505_1', c1, {c0: 25088, c1: 18}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (451584, 1)
op276.sizes = ([25088, 18], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op276_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg503_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg504_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg505_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, relu, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op277.unmet_dependencies = []
op277.met_dependencies = [MemoryDep('arg506_1', c0, {c0: 2916}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (2916, 1)
op277.sizes = ([18, 18, 9], [])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op277_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg506_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf277', get_index_1, load, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelAlloc)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf276', mode=None), StarDep(name='buf277', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ExternKernelAlloc
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.convolution


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 451584}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 451584}, None),
        MemoryDep('buf278', c0, {c0: 451584}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg507_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg508_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg509_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg510_1', c1, {c0: 25088, c1: 18}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (451584, 1)
op279.sizes = ([25088, 18], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op279_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg507_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg509_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf273', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf279', get_index_6, relu, None)
        return store


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op280.unmet_dependencies = []
op280.met_dependencies = [MemoryDep('arg511_1', c0, {c0: 2916}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (2916, 1)
op280.sizes = ([18, 18, 9], [])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op280_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg511_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf280', get_index_1, load, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelAlloc)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None), StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ExternKernelAlloc
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.convolution


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 451584}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 451584}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg512_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg513_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg514_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg515_1', c1, {c0: 25088, c1: 18}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (451584, 1)
op282.sizes = ([25088, 18], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op282_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg513_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg514_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg515_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf282', get_index_5, relu, None)
        return store


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op283.unmet_dependencies = []
op283.met_dependencies = [MemoryDep('arg516_1', c0, {c0: 2916}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (2916, 1)
op283.sizes = ([18, 18, 9], [])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op283_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg516_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store


op284: ExternKernelSchedulerNode(ExternKernelAlloc)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf282', mode=None), StarDep(name='buf283', mode=None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ExternKernelAlloc
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False)]
]
op284.node.kernel = extern_kernels.convolution


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 451584}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 451584}, None),
        MemoryDep('buf284', c0, {c0: 451584}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg517_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg518_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg519_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg520_1', c1, {c0: 25088, c1: 18}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf285.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (451584, 1)
op285.sizes = ([25088, 18], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op285_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg517_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg518_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg519_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg520_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf279', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf285', get_index_6, relu, None)
        return store


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op286.unmet_dependencies = []
op286.met_dependencies = [MemoryDep('arg521_1', c0, {c0: 2916}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (2916, 1)
op286.sizes = ([18, 18, 9], [])
arg521_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op286_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg521_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf286', get_index_1, load, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelAlloc)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf285', mode=None), StarDep(name='buf286', mode=None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ExternKernelAlloc
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op287.node.kernel = extern_kernels.convolution


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 451584}, None)]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 451584}, None)]
op288.met_dependencies = 
    [   MemoryDep('arg522_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg523_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg524_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg525_1', c1, {c0: 25088, c1: 18}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (451584, 1)
op288.sizes = ([25088, 18], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg524_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op288_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg522_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg523_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg524_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg525_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf288', get_index_5, relu, None)
        return store


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op289.unmet_dependencies = []
op289.met_dependencies = [MemoryDep('arg526_1', c0, {c0: 2916}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (2916, 1)
op289.sizes = ([18, 18, 9], [])
arg526_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op289_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg526_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf289', get_index_1, load, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelAlloc)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf288', mode=None), StarDep(name='buf289', mode=None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ExternKernelAlloc
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False)]
]
op290.node.kernel = extern_kernels.convolution


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 451584}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 451584}, None),
        MemoryDep('buf290', c0, {c0: 451584}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg527_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg528_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg529_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg530_1', c1, {c0: 25088, c1: 18}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (451584, 1)
op291.sizes = ([25088, 18], [])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg529_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op291_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf290', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg527_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg528_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg529_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg530_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf285', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf291', get_index_6, relu, None)
        return store


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op292.unmet_dependencies = []
op292.met_dependencies = [MemoryDep('arg466_1', c0, {c0: 5832}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf292.users = [NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (5832, 1)
op292.sizes = ([36, 18, 9], [])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op292_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg466_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf292', get_index_1, load, None)
        return store


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf200', mode=None), StarDep(name='buf292', mode=None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.convolution


op294: ExternKernelSchedulerNode(ExternKernelAlloc)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op294.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelAlloc
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.node.kernel = extern_kernels.convolution


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 225792}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg473_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg474_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg475_1', c1, {c0: 8, c1: 36}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (225792, 1)
op295.sizes = ([8, 36, 28, 28], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op295_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf294', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg472_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg473_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg474_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg475_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf295', get_index_7, add_1, None)
        return store


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 225792}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 225792}, None),
        MemoryDep('buf293', c0, {c0: 225792}, None),
        MemoryDep('buf295', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg467_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg468_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg469_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg470_1', c1, {c0: 6272, c1: 36}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (225792, 1)
op296.sizes = ([8, 784, 36], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg467_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg469_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg470_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf229', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf295', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf296', get_index_7, relu, None)
        return store


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op297.unmet_dependencies = []
op297.met_dependencies = [MemoryDep('arg531_1', c0, {c0: 11664}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (11664, 1)
op297.sizes = ([36, 36, 9], [])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op297_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg531_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf297', get_index_1, load, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelAlloc)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf296', mode=None), StarDep(name='buf297', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ExternKernelAlloc
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.node.kernel = extern_kernels.convolution


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 225792}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 225792}, None)]
op299.met_dependencies = 
    [   MemoryDep('arg532_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg533_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg534_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg535_1', c1, {c0: 6272, c1: 36}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (225792, 1)
op299.sizes = ([6272, 36], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg533_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg534_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg535_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op299_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg532_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg533_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg534_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg535_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf299', get_index_5, relu, None)
        return store


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op300.unmet_dependencies = []
op300.met_dependencies = [MemoryDep('arg536_1', c0, {c0: 11664}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (11664, 1)
op300.sizes = ([36, 36, 9], [])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op300_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg536_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf300', get_index_1, load, None)
        return store


op301: ExternKernelSchedulerNode(ExternKernelAlloc)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf299', mode=None), StarDep(name='buf300', mode=None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ExternKernelAlloc
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.convolution


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 225792}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf296', c0, {c0: 225792}, None),
        MemoryDep('buf301', c0, {c0: 225792}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg538_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg539_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg540_1', c1, {c0: 6272, c1: 36}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf302.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (225792, 1)
op302.sizes = ([6272, 36], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg538_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg539_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg540_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op302_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg538_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg539_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg540_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf296', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf302', get_index_6, relu, None)
        return store


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op303.unmet_dependencies = []
op303.met_dependencies = [MemoryDep('arg541_1', c0, {c0: 11664}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (11664, 1)
op303.sizes = ([36, 36, 9], [])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op303_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg541_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf303', get_index_1, load, None)
        return store


op304: ExternKernelSchedulerNode(ExternKernelAlloc)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf302', mode=None), StarDep(name='buf303', mode=None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ExternKernelAlloc
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.node.kernel = extern_kernels.convolution


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 225792}, None)]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 225792}, None)]
op305.met_dependencies = 
    [   MemoryDep('arg542_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg543_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg544_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg545_1', c1, {c0: 6272, c1: 36}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (225792, 1)
op305.sizes = ([6272, 36], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg542_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg544_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg545_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op305_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg542_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg543_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg544_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg545_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf305', get_index_5, relu, None)
        return store


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op306.unmet_dependencies = []
op306.met_dependencies = [MemoryDep('arg546_1', c0, {c0: 11664}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (11664, 1)
op306.sizes = ([36, 36, 9], [])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op306_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg546_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf306', get_index_1, load, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf305', mode=None), StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.convolution


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 225792}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 225792}, None),
        MemoryDep('buf307', c0, {c0: 225792}, None)]
op308.met_dependencies = 
    [   MemoryDep('arg547_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg548_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg549_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg550_1', c1, {c0: 6272, c1: 36}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf308.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (225792, 1)
op308.sizes = ([6272, 36], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg547_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg549_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op308_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg547_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg548_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg549_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg550_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf302', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf308', get_index_6, relu, None)
        return store


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op309.unmet_dependencies = []
op309.met_dependencies = [MemoryDep('arg551_1', c0, {c0: 11664}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (11664, 1)
op309.sizes = ([36, 36, 9], [])
arg551_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op309_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg551_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf309', get_index_1, load, None)
        return store


op310: ExternKernelSchedulerNode(ExternKernelAlloc)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf308', mode=None), StarDep(name='buf309', mode=None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ExternKernelAlloc
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf310.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False)]
]
op310.node.kernel = extern_kernels.convolution


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 225792}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 225792}, None)]
op311.met_dependencies = 
    [   MemoryDep('arg552_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg553_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg554_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg555_1', c1, {c0: 6272, c1: 36}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (225792, 1)
op311.sizes = ([6272, 36], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg553_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op311_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg552_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg553_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg554_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg555_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf311', get_index_5, relu, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op312.unmet_dependencies = []
op312.met_dependencies = [MemoryDep('arg556_1', c0, {c0: 11664}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (11664, 1)
op312.sizes = ([36, 36, 9], [])
arg556_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op312_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg556_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf312', get_index_1, load, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelAlloc)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf311', mode=None), StarDep(name='buf312', mode=None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ExternKernelAlloc
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.convolution


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 225792}, None)]
op314.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 225792}, None),
        MemoryDep('buf313', c0, {c0: 225792}, None)]
op314.met_dependencies = 
    [   MemoryDep('arg557_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg558_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg559_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg560_1', c1, {c0: 6272, c1: 36}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf314.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
    ]
]
op314.group.device = cuda:0
op314.group.iteration = (225792, 1)
op314.sizes = ([6272, 36], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg557_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg558_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg560_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op314_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg557_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg558_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg559_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg560_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf308', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf314', get_index_6, relu, None)
        return store


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op315.unmet_dependencies = []
op315.met_dependencies = [MemoryDep('arg561_1', c0, {c0: 11664}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (11664, 1)
op315.sizes = ([36, 36, 9], [])
arg561_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op315_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg561_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf315', get_index_1, load, None)
        return store


op316: ExternKernelSchedulerNode(ExternKernelAlloc)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf314', mode=None), StarDep(name='buf315', mode=None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ExternKernelAlloc
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf316.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False)]
]
op316.node.kernel = extern_kernels.convolution


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 225792}, None)]
op317.unmet_dependencies = [MemoryDep('buf316', c0, {c0: 225792}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg562_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg563_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg564_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg565_1', c1, {c0: 6272, c1: 36}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (225792, 1)
op317.sizes = ([6272, 36], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg562_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg563_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg564_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg565_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op317_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg562_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg563_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg564_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg565_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, relu, None)
        return store


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op318.unmet_dependencies = []
op318.met_dependencies = [MemoryDep('arg566_1', c0, {c0: 11664}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (11664, 1)
op318.sizes = ([36, 36, 9], [])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op318_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg566_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelAlloc)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf317', mode=None), StarDep(name='buf318', mode=None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ExternKernelAlloc
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.node.kernel = extern_kernels.convolution


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 225792}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf314', c0, {c0: 225792}, None),
        MemoryDep('buf319', c0, {c0: 225792}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg567_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg568_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg569_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg570_1', c1, {c0: 6272, c1: 36}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf320.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (225792, 1)
op320.sizes = ([6272, 36], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg567_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg569_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg570_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op320_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg567_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg568_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg569_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg570_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf314', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf320', get_index_6, relu, None)
        return store


op321: ExternKernelSchedulerNode(ExternKernelAlloc)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf320', mode=None)]
op321.met_dependencies = [StarDep(name='arg611_1', mode=None)]
op321.outputs = [
    buf321: ExternKernelAlloc
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.node.kernel = extern_kernels.convolution


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 451584}, None)]
op322.unmet_dependencies = [MemoryDep('buf321', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op322.met_dependencies = 
    [   MemoryDep('arg612_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg613_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg614_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg615_1', c1, {c0: 8, c1: 18}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (451584, 1)
op322.sizes = ([8, 18, 56, 56], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg612_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg614_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op322_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf321', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg612_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg613_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg614_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg615_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf322', get_index_7, add_1, None)
        return store


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op323.unmet_dependencies = []
op323.met_dependencies = [MemoryDep('arg476_1', c0, {c0: 2916}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (2916, 1)
op323.sizes = ([18, 18, 9], [])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op323_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg476_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf323', get_index_1, load, None)
        return store


op324: ExternKernelSchedulerNode(ExternKernelAlloc)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf200', mode=None), StarDep(name='buf323', mode=None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ExternKernelAlloc
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.node.kernel = extern_kernels.convolution


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 112896}, None)]
op325.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 112896}, None)]
op325.met_dependencies = 
    [   MemoryDep('arg477_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg478_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg479_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg480_1', c1, {c0: 6272, c1: 18}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (112896, 1)
op325.sizes = ([6272, 18], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op325_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg477_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg479_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg480_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf325', get_index_5, relu, None)
        return store


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op326.unmet_dependencies = []
op326.met_dependencies = [MemoryDep('arg481_1', c0, {c0: 11664}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (11664, 1)
op326.sizes = ([72, 18, 9], [])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op326_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg481_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf326', get_index_1, load, None)
        return store


op327: ExternKernelSchedulerNode(ExternKernelAlloc)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf325', mode=None), StarDep(name='buf326', mode=None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ExternKernelAlloc
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf327.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op327.node.kernel = extern_kernels.convolution


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op328.unmet_dependencies = []
op328.met_dependencies = [MemoryDep('arg486_1', c0, {c0: 23328}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (23328, 1)
op328.sizes = ([72, 36, 9], [])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op328_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg486_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf328', get_index_1, load, None)
        return store


op329: ExternKernelSchedulerNode(ExternKernelAlloc)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ExternKernelAlloc
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op329.node.kernel = extern_kernels.convolution


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 112896}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf327', c0, {c0: 112896}, None),
        MemoryDep('buf329', c0, {c0: 112896}, None)]
op330.met_dependencies = 
    [   MemoryDep('arg482_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg483_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg484_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg485_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg487_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg488_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg489_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg490_1', c1, {c0: 1568, c1: 72}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (112896, 1)
op330.sizes = ([1568, 72], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op330_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg483_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg484_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg485_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf329', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg487_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg488_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg489_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg490_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf330', get_index_10, add_4, None)
        return store


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 112896}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf264', c0, {c0: 112896}, None),
        MemoryDep('buf330', c0, {c0: 112896}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf331.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (112896, 1)
op331.sizes = ([112896], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op331_loop_body:
    var_ranges = {z0: 112896}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf264', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf331', get_index_2, relu, None)
        return store


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op332.unmet_dependencies = []
op332.met_dependencies = [MemoryDep('arg571_1', c0, {c0: 46656}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (46656, 1)
op332.sizes = ([72, 72, 9], [])
arg571_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op332_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg571_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf332', get_index_1, load, None)
        return store


op333: ExternKernelSchedulerNode(ExternKernelAlloc)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf331', mode=None), StarDep(name='buf332', mode=None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ExternKernelAlloc
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.node.kernel = extern_kernels.convolution


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 112896}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 112896}, None)]
op334.met_dependencies = 
    [   MemoryDep('arg572_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg573_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg574_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg575_1', c1, {c0: 1568, c1: 72}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (112896, 1)
op334.sizes = ([1568, 72], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg572_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg574_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg575_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op334_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg572_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg573_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg574_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg575_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf334', get_index_5, relu, None)
        return store


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op335.unmet_dependencies = []
op335.met_dependencies = [MemoryDep('arg576_1', c0, {c0: 46656}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (46656, 1)
op335.sizes = ([72, 72, 9], [])
arg576_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op335_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg576_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf335', get_index_1, load, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf334', mode=None), StarDep(name='buf335', mode=None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 112896}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 112896}, None),
        MemoryDep('buf336', c0, {c0: 112896}, None)]
op337.met_dependencies = 
    [   MemoryDep('arg577_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg578_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg579_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg580_1', c1, {c0: 1568, c1: 72}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf337.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (112896, 1)
op337.sizes = ([1568, 72], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg578_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg580_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg577_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg578_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg580_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf331', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf337', get_index_6, relu, None)
        return store


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op338.unmet_dependencies = []
op338.met_dependencies = [MemoryDep('arg581_1', c0, {c0: 46656}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (46656, 1)
op338.sizes = ([72, 72, 9], [])
arg581_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op338_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg581_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf338', get_index_1, load, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelAlloc)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None), StarDep(name='buf338', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ExternKernelAlloc
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False)]
]
op339.node.kernel = extern_kernels.convolution


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 112896}, None)]
op340.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 112896}, None)]
op340.met_dependencies = 
    [   MemoryDep('arg582_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg583_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg584_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg585_1', c1, {c0: 1568, c1: 72}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (112896, 1)
op340.sizes = ([1568, 72], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg583_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg585_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op340_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg582_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg583_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg584_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg585_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf340', get_index_5, relu, None)
        return store


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op341.unmet_dependencies = []
op341.met_dependencies = [MemoryDep('arg586_1', c0, {c0: 46656}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (46656, 1)
op341.sizes = ([72, 72, 9], [])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op341_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg586_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf341', get_index_1, load, None)
        return store


op342: ExternKernelSchedulerNode(ExternKernelAlloc)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf340', mode=None), StarDep(name='buf341', mode=None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ExternKernelAlloc
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op342.node.kernel = extern_kernels.convolution


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 112896}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf337', c0, {c0: 112896}, None),
        MemoryDep('buf342', c0, {c0: 112896}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg587_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg588_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg589_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg590_1', c1, {c0: 1568, c1: 72}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf343.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (112896, 1)
op343.sizes = ([1568, 72], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg587_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg588_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg589_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg590_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op343_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg587_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg588_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg589_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg590_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf337', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf343', get_index_6, relu, None)
        return store


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op344.unmet_dependencies = []
op344.met_dependencies = [MemoryDep('arg591_1', c0, {c0: 46656}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (46656, 1)
op344.sizes = ([72, 72, 9], [])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op344_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg591_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf344', get_index_1, load, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelAlloc)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf343', mode=None), StarDep(name='buf344', mode=None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ExternKernelAlloc
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf345.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op345.node.kernel = extern_kernels.convolution


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 112896}, None)]
op346.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 112896}, None)]
op346.met_dependencies = 
    [   MemoryDep('arg592_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg593_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg594_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg595_1', c1, {c0: 1568, c1: 72}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (112896, 1)
op346.sizes = ([1568, 72], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg592_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg593_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg594_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op346_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg592_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg593_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg594_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg595_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf346', get_index_5, relu, None)
        return store


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op347.unmet_dependencies = []
op347.met_dependencies = [MemoryDep('arg596_1', c0, {c0: 46656}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (46656, 1)
op347.sizes = ([72, 72, 9], [])
arg596_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op347_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg596_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf347', get_index_1, load, None)
        return store


op348: ExternKernelSchedulerNode(ExternKernelAlloc)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf346', mode=None), StarDep(name='buf347', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ExternKernelAlloc
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.node.kernel = extern_kernels.convolution


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 112896}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 112896}, None),
        MemoryDep('buf348', c0, {c0: 112896}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg597_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg598_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg599_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg600_1', c1, {c0: 1568, c1: 72}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf349.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (112896, 1)
op349.sizes = ([1568, 72], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg598_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg599_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op349_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg597_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg598_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg599_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg600_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf343', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf349', get_index_6, relu, None)
        return store


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op350.unmet_dependencies = []
op350.met_dependencies = [MemoryDep('arg601_1', c0, {c0: 46656}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (46656, 1)
op350.sizes = ([72, 72, 9], [])
arg601_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op350_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg601_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf350', get_index_1, load, None)
        return store


op351: ExternKernelSchedulerNode(ExternKernelAlloc)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf349', mode=None), StarDep(name='buf350', mode=None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ExternKernelAlloc
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False)]
]
op351.node.kernel = extern_kernels.convolution


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 112896}, None)]
op352.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 112896}, None)]
op352.met_dependencies = 
    [   MemoryDep('arg602_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg603_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg604_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg605_1', c1, {c0: 1568, c1: 72}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (112896, 1)
op352.sizes = ([1568, 72], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg603_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg605_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op352_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg603_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg604_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg605_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf352', get_index_5, relu, None)
        return store


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op353.unmet_dependencies = []
op353.met_dependencies = [MemoryDep('arg606_1', c0, {c0: 46656}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (46656, 1)
op353.sizes = ([72, 72, 9], [])
arg606_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op353_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg606_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf353', get_index_1, load, None)
        return store


op354: ExternKernelSchedulerNode(ExternKernelAlloc)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf352', mode=None), StarDep(name='buf353', mode=None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ExternKernelAlloc
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf354.users = [NodeUser(node=SchedulerNode(name='op355'), can_inplace=True, is_weak=False)]
]
op354.node.kernel = extern_kernels.convolution


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 112896}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf349', c0, {c0: 112896}, None),
        MemoryDep('buf354', c0, {c0: 112896}, None)]
op355.met_dependencies = 
    [   MemoryDep('arg607_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg608_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg609_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg610_1', c1, {c0: 1568, c1: 72}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf355.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
    ]
]
op355.group.device = cuda:0
op355.group.iteration = (112896, 1)
op355.sizes = ([1568, 72], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg607_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg608_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg610_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op355_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg607_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg608_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg609_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg610_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf349', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf355', get_index_6, relu, None)
        return store


op356: ExternKernelSchedulerNode(ExternKernelAlloc)
op356.writes = [StarDep(name='buf356', mode=None)]
op356.unmet_dependencies = [StarDep(name='buf355', mode=None)]
op356.met_dependencies = [StarDep(name='arg616_1', mode=None)]
op356.outputs = [
    buf356: ExternKernelAlloc
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.node.kernel = extern_kernels.convolution


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 451584}, None)]
op357.unmet_dependencies = [MemoryDep('buf356', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op357.met_dependencies = 
    [   MemoryDep('arg617_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg618_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg619_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg620_1', c1, {c0: 8, c1: 18}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (451584, 1)
op357.sizes = ([8, 18, 56, 56], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg618_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg619_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf356', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg617_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg618_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg619_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg620_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf357', get_index_7, add_1, None)
        return store


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf291', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf322', c0, {c0: 451584}, None),
        MemoryDep('buf357', c0, {c0: 451584}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf358.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
    ]
]
op358.group.device = cuda:0
op358.group.iteration = (451584, 1)
op358.sizes = ([8, 18, 3136], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op358_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf322', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf358', get_index_3, relu, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op359.unmet_dependencies = []
op359.met_dependencies = [MemoryDep('arg646_1', c0, {c0: 2916}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (2916, 1)
op359.sizes = ([18, 18, 9], [])
arg646_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op359_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg646_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf359', get_index_1, load, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelAlloc)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf358', mode=None), StarDep(name='buf359', mode=None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ExternKernelAlloc
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False)]
]
op360.node.kernel = extern_kernels.convolution


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 451584}, None)]
op361.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 451584}, None)]
op361.met_dependencies = 
    [   MemoryDep('arg647_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg648_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg649_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg650_1', c1, {c0: 25088, c1: 18}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (451584, 1)
op361.sizes = ([25088, 18], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg647_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg648_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg650_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op361_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg647_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg648_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg649_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg650_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf361', get_index_5, relu, None)
        return store


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op362.unmet_dependencies = []
op362.met_dependencies = [MemoryDep('arg651_1', c0, {c0: 2916}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (2916, 1)
op362.sizes = ([18, 18, 9], [])
arg651_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op362_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg651_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, load, None)
        return store


op363: ExternKernelSchedulerNode(ExternKernelAlloc)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf361', mode=None), StarDep(name='buf362', mode=None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ExternKernelAlloc
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf363.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False)]
]
op363.node.kernel = extern_kernels.convolution


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 451584}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf358', c0, {c0: 451584}, None),
        MemoryDep('buf363', c0, {c0: 451584}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg652_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg653_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg654_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg655_1', c1, {c0: 25088, c1: 18}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (451584, 1)
op364.sizes = ([25088, 18], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg654_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg655_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op364_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg652_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg653_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg654_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg655_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf358', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf364', get_index_6, relu, None)
        return store


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op365.unmet_dependencies = []
op365.met_dependencies = [MemoryDep('arg656_1', c0, {c0: 2916}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (2916, 1)
op365.sizes = ([18, 18, 9], [])
arg656_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op365_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg656_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf365', get_index_1, load, None)
        return store


op366: ExternKernelSchedulerNode(ExternKernelAlloc)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf364', mode=None), StarDep(name='buf365', mode=None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ExternKernelAlloc
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op366.node.kernel = extern_kernels.convolution


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 451584}, None)]
op367.unmet_dependencies = [MemoryDep('buf366', c0, {c0: 451584}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg657_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg658_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg659_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg660_1', c1, {c0: 25088, c1: 18}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (451584, 1)
op367.sizes = ([25088, 18], [])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg657_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg658_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg659_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg660_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op367_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg657_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg658_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg659_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg660_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf367', get_index_5, relu, None)
        return store


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op368.unmet_dependencies = []
op368.met_dependencies = [MemoryDep('arg661_1', c0, {c0: 2916}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (2916, 1)
op368.sizes = ([18, 18, 9], [])
arg661_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op368_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg661_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf368', get_index_1, load, None)
        return store


op369: ExternKernelSchedulerNode(ExternKernelAlloc)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf367', mode=None), StarDep(name='buf368', mode=None)]
op369.met_dependencies = []
op369.outputs = [
    buf369: ExternKernelAlloc
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.convolution


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 451584}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 451584}, None),
        MemoryDep('buf369', c0, {c0: 451584}, None)]
op370.met_dependencies = 
    [   MemoryDep('arg662_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg663_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg664_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg665_1', c1, {c0: 25088, c1: 18}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf370.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (451584, 1)
op370.sizes = ([25088, 18], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg662_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg664_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op370_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg662_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg663_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg664_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg665_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf364', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf370', get_index_6, relu, None)
        return store


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op371.unmet_dependencies = []
op371.met_dependencies = [MemoryDep('arg666_1', c0, {c0: 2916}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (2916, 1)
op371.sizes = ([18, 18, 9], [])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op371_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg666_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf371', get_index_1, load, None)
        return store


op372: ExternKernelSchedulerNode(ExternKernelAlloc)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf370', mode=None), StarDep(name='buf371', mode=None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ExternKernelAlloc
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op372.node.kernel = extern_kernels.convolution


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 451584}, None)]
op373.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 451584}, None)]
op373.met_dependencies = 
    [   MemoryDep('arg667_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg668_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg669_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg670_1', c1, {c0: 25088, c1: 18}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (451584, 1)
op373.sizes = ([25088, 18], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg667_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg668_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg670_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op373_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg667_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg668_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg669_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg670_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf373', get_index_5, relu, None)
        return store


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op374.unmet_dependencies = []
op374.met_dependencies = [MemoryDep('arg671_1', c0, {c0: 2916}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (2916, 1)
op374.sizes = ([18, 18, 9], [])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op374_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg671_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf374', get_index_1, load, None)
        return store


op375: ExternKernelSchedulerNode(ExternKernelAlloc)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf373', mode=None), StarDep(name='buf374', mode=None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ExternKernelAlloc
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op375.node.kernel = extern_kernels.convolution


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 451584}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 451584}, None),
        MemoryDep('buf375', c0, {c0: 451584}, None)]
op376.met_dependencies = 
    [   MemoryDep('arg672_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg673_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg674_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg675_1', c1, {c0: 25088, c1: 18}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (451584, 1)
op376.sizes = ([25088, 18], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg672_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg674_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg675_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op376_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg672_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg673_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg674_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg675_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf370', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf376', get_index_6, relu, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op377.unmet_dependencies = []
op377.met_dependencies = [MemoryDep('arg676_1', c0, {c0: 2916}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (2916, 1)
op377.sizes = ([18, 18, 9], [])
arg676_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op377_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg676_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf377', get_index_1, load, None)
        return store


op378: ExternKernelSchedulerNode(ExternKernelAlloc)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf376', mode=None), StarDep(name='buf377', mode=None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ExternKernelAlloc
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf378.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=True, is_weak=False)]
]
op378.node.kernel = extern_kernels.convolution


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 451584}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', c0, {c0: 451584}, None)]
op379.met_dependencies = 
    [   MemoryDep('arg677_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg678_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg679_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg680_1', c1, {c0: 25088, c1: 18}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (451584, 1)
op379.sizes = ([25088, 18], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg677_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg678_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg679_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg680_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op379_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg677_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg678_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg679_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg680_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf379', get_index_5, relu, None)
        return store


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op380.unmet_dependencies = []
op380.met_dependencies = [MemoryDep('arg681_1', c0, {c0: 2916}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (2916, 1)
op380.sizes = ([18, 18, 9], [])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op380_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg681_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf380', get_index_1, load, None)
        return store


op381: ExternKernelSchedulerNode(ExternKernelAlloc)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf379', mode=None), StarDep(name='buf380', mode=None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ExternKernelAlloc
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf381.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False)]
]
op381.node.kernel = extern_kernels.convolution


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 451584}, None)]
op382.unmet_dependencies = 
    [   MemoryDep('buf376', c0, {c0: 451584}, None),
        MemoryDep('buf381', c0, {c0: 451584}, None)]
op382.met_dependencies = 
    [   MemoryDep('arg682_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg683_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg684_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg685_1', c1, {c0: 25088, c1: 18}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf382.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op382.group.device = cuda:0
op382.group.iteration = (451584, 1)
op382.sizes = ([25088, 18], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg682_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg685_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op382_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg682_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg683_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg684_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg685_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf376', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf382', get_index_6, relu, None)
        return store


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op383.unmet_dependencies = []
op383.met_dependencies = [MemoryDep('arg621_1', c0, {c0: 5832}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (5832, 1)
op383.sizes = ([36, 18, 9], [])
arg621_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op383_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg621_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf383', get_index_1, load, None)
        return store


op384: ExternKernelSchedulerNode(ExternKernelAlloc)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf291', mode=None), StarDep(name='buf383', mode=None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ExternKernelAlloc
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf384.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op384.node.kernel = extern_kernels.convolution


op385: ExternKernelSchedulerNode(ExternKernelAlloc)
op385.writes = [StarDep(name='buf385', mode=None)]
op385.unmet_dependencies = [StarDep(name='buf355', mode=None)]
op385.met_dependencies = [StarDep(name='arg626_1', mode=None)]
op385.outputs = [
    buf385: ExternKernelAlloc
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.node.kernel = extern_kernels.convolution


op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 225792}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op386.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg628_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg629_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg630_1', c1, {c0: 8, c1: 36}, None)]
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (225792, 1)
op386.sizes = ([8, 36, 28, 28], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg629_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg630_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op386_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf385', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg627_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg628_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg629_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg630_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf386', get_index_7, add_1, None)
        return store


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 225792}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 225792}, None),
        MemoryDep('buf384', c0, {c0: 225792}, None),
        MemoryDep('buf386', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg622_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg623_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg624_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg625_1', c1, {c0: 6272, c1: 36}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (225792, 1)
op387.sizes = ([8, 784, 36], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg624_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg625_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op387_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg623_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg624_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg625_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf320', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf386', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf387', get_index_7, relu, None)
        return store


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op388.unmet_dependencies = []
op388.met_dependencies = [MemoryDep('arg686_1', c0, {c0: 11664}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (11664, 1)
op388.sizes = ([36, 36, 9], [])
arg686_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op388_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg686_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf388', get_index_1, load, None)
        return store


op389: ExternKernelSchedulerNode(ExternKernelAlloc)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf387', mode=None), StarDep(name='buf388', mode=None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ExternKernelAlloc
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False)]
]
op389.node.kernel = extern_kernels.convolution


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 225792}, None)]
op390.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 225792}, None)]
op390.met_dependencies = 
    [   MemoryDep('arg687_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg688_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg689_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg690_1', c1, {c0: 6272, c1: 36}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf390.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (225792, 1)
op390.sizes = ([6272, 36], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg687_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg688_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg690_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op390_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg687_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg688_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg689_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg690_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf390', get_index_5, relu, None)
        return store


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op391.unmet_dependencies = []
op391.met_dependencies = [MemoryDep('arg691_1', c0, {c0: 11664}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (11664, 1)
op391.sizes = ([36, 36, 9], [])
arg691_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op391_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg691_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf391', get_index_1, load, None)
        return store


op392: ExternKernelSchedulerNode(ExternKernelAlloc)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf390', mode=None), StarDep(name='buf391', mode=None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ExternKernelAlloc
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op392.node.kernel = extern_kernels.convolution


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 225792}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 225792}, None),
        MemoryDep('buf392', c0, {c0: 225792}, None)]
op393.met_dependencies = 
    [   MemoryDep('arg692_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg693_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg694_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg695_1', c1, {c0: 6272, c1: 36}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf393.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (225792, 1)
op393.sizes = ([6272, 36], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg693_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg694_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg695_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op393_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg692_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg693_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg694_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg695_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf387', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf393', get_index_6, relu, None)
        return store


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op394.unmet_dependencies = []
op394.met_dependencies = [MemoryDep('arg696_1', c0, {c0: 11664}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (11664, 1)
op394.sizes = ([36, 36, 9], [])
arg696_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op394_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg696_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf394', get_index_1, load, None)
        return store


op395: ExternKernelSchedulerNode(ExternKernelAlloc)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf393', mode=None), StarDep(name='buf394', mode=None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ExternKernelAlloc
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf395.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False)]
]
op395.node.kernel = extern_kernels.convolution


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 225792}, None)]
op396.unmet_dependencies = [MemoryDep('buf395', c0, {c0: 225792}, None)]
op396.met_dependencies = 
    [   MemoryDep('arg697_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg698_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg699_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg700_1', c1, {c0: 6272, c1: 36}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (225792, 1)
op396.sizes = ([6272, 36], [])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg697_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg698_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg699_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg700_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op396_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg697_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg698_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg699_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg700_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf396', get_index_5, relu, None)
        return store


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op397.unmet_dependencies = []
op397.met_dependencies = [MemoryDep('arg701_1', c0, {c0: 11664}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (11664, 1)
op397.sizes = ([36, 36, 9], [])
arg701_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op397_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg701_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf397', get_index_1, load, None)
        return store


op398: ExternKernelSchedulerNode(ExternKernelAlloc)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf396', mode=None), StarDep(name='buf397', mode=None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ExternKernelAlloc
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
]
op398.node.kernel = extern_kernels.convolution


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 225792}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 225792}, None),
        MemoryDep('buf398', c0, {c0: 225792}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg702_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg703_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg704_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg705_1', c1, {c0: 6272, c1: 36}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf399.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
    ]
]
op399.group.device = cuda:0
op399.group.iteration = (225792, 1)
op399.sizes = ([6272, 36], [])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg702_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg703_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg704_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg705_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op399_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg702_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg703_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg704_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg705_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf393', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf399', get_index_6, relu, None)
        return store


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op400.unmet_dependencies = []
op400.met_dependencies = [MemoryDep('arg706_1', c0, {c0: 11664}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf400.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (11664, 1)
op400.sizes = ([36, 36, 9], [])
arg706_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op400_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg706_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf400', get_index_1, load, None)
        return store


op401: ExternKernelSchedulerNode(ExternKernelAlloc)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf399', mode=None), StarDep(name='buf400', mode=None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ExternKernelAlloc
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False)]
]
op401.node.kernel = extern_kernels.convolution


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 225792}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 225792}, None)]
op402.met_dependencies = 
    [   MemoryDep('arg707_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg708_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg709_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg710_1', c1, {c0: 6272, c1: 36}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf402.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (225792, 1)
op402.sizes = ([6272, 36], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg707_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg708_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg709_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg710_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op402_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg707_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg708_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg709_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg710_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf402', get_index_5, relu, None)
        return store


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op403.unmet_dependencies = []
op403.met_dependencies = [MemoryDep('arg711_1', c0, {c0: 11664}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (11664, 1)
op403.sizes = ([36, 36, 9], [])
arg711_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op403_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg711_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf403', get_index_1, load, None)
        return store


op404: ExternKernelSchedulerNode(ExternKernelAlloc)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf402', mode=None), StarDep(name='buf403', mode=None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ExternKernelAlloc
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
]
op404.node.kernel = extern_kernels.convolution


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 225792}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 225792}, None),
        MemoryDep('buf404', c0, {c0: 225792}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg712_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg713_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg714_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg715_1', c1, {c0: 6272, c1: 36}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf405.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op405.group.device = cuda:0
op405.group.iteration = (225792, 1)
op405.sizes = ([6272, 36], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg712_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg713_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg714_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op405_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg712_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg713_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg714_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg715_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf399', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf405', get_index_6, relu, None)
        return store


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op406.unmet_dependencies = []
op406.met_dependencies = [MemoryDep('arg716_1', c0, {c0: 11664}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (11664, 1)
op406.sizes = ([36, 36, 9], [])
arg716_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op406_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg716_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf406', get_index_1, load, None)
        return store


op407: ExternKernelSchedulerNode(ExternKernelAlloc)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf405', mode=None), StarDep(name='buf406', mode=None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ExternKernelAlloc
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=True, is_weak=False)]
]
op407.node.kernel = extern_kernels.convolution


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 225792}, None)]
op408.unmet_dependencies = [MemoryDep('buf407', c0, {c0: 225792}, None)]
op408.met_dependencies = 
    [   MemoryDep('arg717_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg718_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg719_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg720_1', c1, {c0: 6272, c1: 36}, None)]
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (225792, 1)
op408.sizes = ([6272, 36], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg717_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg718_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg719_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg720_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op408_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg717_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg718_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg719_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg720_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf408', get_index_5, relu, None)
        return store


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op409.unmet_dependencies = []
op409.met_dependencies = [MemoryDep('arg721_1', c0, {c0: 11664}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (11664, 1)
op409.sizes = ([36, 36, 9], [])
arg721_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op409_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg721_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf409', get_index_1, load, None)
        return store


op410: ExternKernelSchedulerNode(ExternKernelAlloc)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf408', mode=None), StarDep(name='buf409', mode=None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ExternKernelAlloc
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf410.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False)]
]
op410.node.kernel = extern_kernels.convolution


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 225792}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 225792}, None),
        MemoryDep('buf410', c0, {c0: 225792}, None)]
op411.met_dependencies = 
    [   MemoryDep('arg722_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg723_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg724_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg725_1', c1, {c0: 6272, c1: 36}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf411.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False),
    ]
]
op411.group.device = cuda:0
op411.group.iteration = (225792, 1)
op411.sizes = ([6272, 36], [])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg722_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg723_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg724_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg725_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op411_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg722_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg723_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg724_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg725_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf405', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf411', get_index_6, relu, None)
        return store


op412: ExternKernelSchedulerNode(ExternKernelAlloc)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op412.met_dependencies = [StarDep(name='arg766_1', mode=None)]
op412.outputs = [
    buf412: ExternKernelAlloc
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = extern_kernels.convolution


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 451584}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op413.met_dependencies = 
    [   MemoryDep('arg767_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg768_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg769_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg770_1', c1, {c0: 8, c1: 18}, None)]
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf413.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (451584, 1)
op413.sizes = ([8, 18, 56, 56], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg767_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg768_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg769_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg770_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op413_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf412', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg767_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg768_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg769_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg770_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf413', get_index_7, add_1, None)
        return store


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op414.unmet_dependencies = []
op414.met_dependencies = [MemoryDep('arg631_1', c0, {c0: 2916}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (2916, 1)
op414.sizes = ([18, 18, 9], [])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op414_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg631_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf414', get_index_1, load, None)
        return store


op415: ExternKernelSchedulerNode(ExternKernelAlloc)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf291', mode=None), StarDep(name='buf414', mode=None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ExternKernelAlloc
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
]
op415.node.kernel = extern_kernels.convolution


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 112896}, None)]
op416.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 112896}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg632_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg633_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg634_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg635_1', c1, {c0: 6272, c1: 18}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (112896, 1)
op416.sizes = ([6272, 18], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg632_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg634_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op416_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg632_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg633_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg634_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg635_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf416', get_index_5, relu, None)
        return store


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op417.unmet_dependencies = []
op417.met_dependencies = [MemoryDep('arg636_1', c0, {c0: 11664}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (11664, 1)
op417.sizes = ([72, 18, 9], [])
arg636_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op417_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg636_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf417', get_index_1, load, None)
        return store


op418: ExternKernelSchedulerNode(ExternKernelAlloc)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf416', mode=None), StarDep(name='buf417', mode=None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ExternKernelAlloc
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf418.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False)]
]
op418.node.kernel = extern_kernels.convolution


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op419.unmet_dependencies = []
op419.met_dependencies = [MemoryDep('arg641_1', c0, {c0: 23328}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (23328, 1)
op419.sizes = ([72, 36, 9], [])
arg641_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op419_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg641_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf419', get_index_1, load, None)
        return store


op420: ExternKernelSchedulerNode(ExternKernelAlloc)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf320', mode=None), StarDep(name='buf419', mode=None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ExternKernelAlloc
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf420.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False)]
]
op420.node.kernel = extern_kernels.convolution


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 112896}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 112896}, None),
        MemoryDep('buf420', c0, {c0: 112896}, None)]
op421.met_dependencies = 
    [   MemoryDep('arg637_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg638_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg639_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg640_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg642_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg643_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg644_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg645_1', c1, {c0: 1568, c1: 72}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf421.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (112896, 1)
op421.sizes = ([1568, 72], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg637_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg639_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg642_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg643_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg644_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg645_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op421_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg637_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg638_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg639_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg640_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf420', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg642_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg643_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg644_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg645_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf421', get_index_10, add_4, None)
        return store


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 112896}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 112896}, None),
        MemoryDep('buf421', c0, {c0: 112896}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf422.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
    ]
]
op422.group.device = cuda:0
op422.group.iteration = (112896, 1)
op422.sizes = ([112896], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op422_loop_body:
    var_ranges = {z0: 112896}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf422', get_index_2, relu, None)
        return store


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op423.unmet_dependencies = []
op423.met_dependencies = [MemoryDep('arg726_1', c0, {c0: 46656}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (46656, 1)
op423.sizes = ([72, 72, 9], [])
arg726_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op423_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg726_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf423', get_index_1, load, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelAlloc)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf422', mode=None), StarDep(name='buf423', mode=None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ExternKernelAlloc
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf424.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False)]
]
op424.node.kernel = extern_kernels.convolution


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 112896}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 112896}, None)]
op425.met_dependencies = 
    [   MemoryDep('arg727_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg728_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg729_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg730_1', c1, {c0: 1568, c1: 72}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (112896, 1)
op425.sizes = ([1568, 72], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg727_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg728_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg729_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg730_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op425_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg727_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg728_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg729_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg730_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf425', get_index_5, relu, None)
        return store


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op426.unmet_dependencies = []
op426.met_dependencies = [MemoryDep('arg731_1', c0, {c0: 46656}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (46656, 1)
op426.sizes = ([72, 72, 9], [])
arg731_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op426_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg731_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op427: ExternKernelSchedulerNode(ExternKernelAlloc)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf425', mode=None), StarDep(name='buf426', mode=None)]
op427.met_dependencies = []
op427.outputs = [
    buf427: ExternKernelAlloc
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.convolution


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 112896}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf422', c0, {c0: 112896}, None),
        MemoryDep('buf427', c0, {c0: 112896}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg732_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg733_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg734_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg735_1', c1, {c0: 1568, c1: 72}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (112896, 1)
op428.sizes = ([1568, 72], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg732_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg733_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg734_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg735_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op428_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg732_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg733_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg734_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg735_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf422', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf428', get_index_6, relu, None)
        return store


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op429.unmet_dependencies = []
op429.met_dependencies = [MemoryDep('arg736_1', c0, {c0: 46656}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (46656, 1)
op429.sizes = ([72, 72, 9], [])
arg736_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op429_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg736_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf429', get_index_1, load, None)
        return store


op430: ExternKernelSchedulerNode(ExternKernelAlloc)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf428', mode=None), StarDep(name='buf429', mode=None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ExternKernelAlloc
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op430.node.kernel = extern_kernels.convolution


op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 112896}, None)]
op431.unmet_dependencies = [MemoryDep('buf430', c0, {c0: 112896}, None)]
op431.met_dependencies = 
    [   MemoryDep('arg737_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg738_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg739_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg740_1', c1, {c0: 1568, c1: 72}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op431.group.device = cuda:0
op431.group.iteration = (112896, 1)
op431.sizes = ([1568, 72], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg737_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg738_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg739_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg740_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op431_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg737_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg738_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg739_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg740_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf431', get_index_5, relu, None)
        return store


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op432.unmet_dependencies = []
op432.met_dependencies = [MemoryDep('arg741_1', c0, {c0: 46656}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (46656, 1)
op432.sizes = ([72, 72, 9], [])
arg741_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op432_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg741_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf432', get_index_1, load, None)
        return store


op433: ExternKernelSchedulerNode(ExternKernelAlloc)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf431', mode=None), StarDep(name='buf432', mode=None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ExternKernelAlloc
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False)]
]
op433.node.kernel = extern_kernels.convolution


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 112896}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 112896}, None),
        MemoryDep('buf433', c0, {c0: 112896}, None)]
op434.met_dependencies = 
    [   MemoryDep('arg742_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg743_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg744_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg745_1', c1, {c0: 1568, c1: 72}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf434.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False),
    ]
]
op434.group.device = cuda:0
op434.group.iteration = (112896, 1)
op434.sizes = ([1568, 72], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg742_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg743_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg744_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg745_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op434_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg742_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg743_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg744_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg745_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf428', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf434', get_index_6, relu, None)
        return store


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op435.unmet_dependencies = []
op435.met_dependencies = [MemoryDep('arg746_1', c0, {c0: 46656}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (46656, 1)
op435.sizes = ([72, 72, 9], [])
arg746_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op435_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg746_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf435', get_index_1, load, None)
        return store


op436: ExternKernelSchedulerNode(ExternKernelAlloc)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf434', mode=None), StarDep(name='buf435', mode=None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ExternKernelAlloc
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf436.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=True, is_weak=False)]
]
op436.node.kernel = extern_kernels.convolution


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 112896}, None)]
op437.unmet_dependencies = [MemoryDep('buf436', c0, {c0: 112896}, None)]
op437.met_dependencies = 
    [   MemoryDep('arg747_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg748_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg749_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg750_1', c1, {c0: 1568, c1: 72}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf437.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (112896, 1)
op437.sizes = ([1568, 72], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg747_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg748_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg749_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg750_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op437_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg747_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg748_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg749_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg750_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf437', get_index_5, relu, None)
        return store


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op438.unmet_dependencies = []
op438.met_dependencies = [MemoryDep('arg751_1', c0, {c0: 46656}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (46656, 1)
op438.sizes = ([72, 72, 9], [])
arg751_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op438_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg751_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf438', get_index_1, load, None)
        return store


op439: ExternKernelSchedulerNode(ExternKernelAlloc)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf437', mode=None), StarDep(name='buf438', mode=None)]
op439.met_dependencies = []
op439.outputs = [
    buf439: ExternKernelAlloc
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf439.users = [NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False)]
]
op439.node.kernel = extern_kernels.convolution


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 112896}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf434', c0, {c0: 112896}, None),
        MemoryDep('buf439', c0, {c0: 112896}, None)]
op440.met_dependencies = 
    [   MemoryDep('arg752_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg753_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg754_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg755_1', c1, {c0: 1568, c1: 72}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf440.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
    ]
]
op440.group.device = cuda:0
op440.group.iteration = (112896, 1)
op440.sizes = ([1568, 72], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg752_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg753_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg754_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg755_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op440_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg752_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg753_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg754_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg755_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf434', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf440', get_index_6, relu, None)
        return store


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op441.unmet_dependencies = []
op441.met_dependencies = [MemoryDep('arg756_1', c0, {c0: 46656}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (46656, 1)
op441.sizes = ([72, 72, 9], [])
arg756_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op441_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg756_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf441', get_index_1, load, None)
        return store


op442: ExternKernelSchedulerNode(ExternKernelAlloc)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf440', mode=None), StarDep(name='buf441', mode=None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ExternKernelAlloc
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf442.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False)]
]
op442.node.kernel = extern_kernels.convolution


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 112896}, None)]
op443.unmet_dependencies = [MemoryDep('buf442', c0, {c0: 112896}, None)]
op443.met_dependencies = 
    [   MemoryDep('arg757_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg758_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg759_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg760_1', c1, {c0: 1568, c1: 72}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf443.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (112896, 1)
op443.sizes = ([1568, 72], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg757_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg758_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg759_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg760_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op443_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg757_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg758_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg759_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg760_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf443', get_index_5, relu, None)
        return store


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op444.unmet_dependencies = []
op444.met_dependencies = [MemoryDep('arg761_1', c0, {c0: 46656}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (46656, 1)
op444.sizes = ([72, 72, 9], [])
arg761_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op444_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg761_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf444', get_index_1, load, None)
        return store


op445: ExternKernelSchedulerNode(ExternKernelAlloc)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf443', mode=None), StarDep(name='buf444', mode=None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ExternKernelAlloc
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf445.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False)]
]
op445.node.kernel = extern_kernels.convolution


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 112896}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 112896}, None),
        MemoryDep('buf445', c0, {c0: 112896}, None)]
op446.met_dependencies = 
    [   MemoryDep('arg762_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg763_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg764_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg765_1', c1, {c0: 1568, c1: 72}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf446.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False),
    ]
]
op446.group.device = cuda:0
op446.group.iteration = (112896, 1)
op446.sizes = ([1568, 72], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg762_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg763_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg764_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg765_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op446_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg762_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg763_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg764_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg765_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf440', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf446', get_index_6, relu, None)
        return store


op447: ExternKernelSchedulerNode(ExternKernelAlloc)
op447.writes = [StarDep(name='buf447', mode=None)]
op447.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op447.met_dependencies = [StarDep(name='arg771_1', mode=None)]
op447.outputs = [
    buf447: ExternKernelAlloc
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf447.users = [NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.node.kernel = extern_kernels.convolution


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 451584}, None)]
op448.unmet_dependencies = [MemoryDep('buf447', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op448.met_dependencies = 
    [   MemoryDep('arg772_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg773_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg774_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg775_1', c1, {c0: 8, c1: 18}, None)]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf448.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (451584, 1)
op448.sizes = ([8, 18, 56, 56], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg772_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg773_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg774_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg775_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op448_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf447', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg772_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg773_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg774_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg775_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf448', get_index_7, add_1, None)
        return store


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf382', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf413', c0, {c0: 451584}, None),
        MemoryDep('buf448', c0, {c0: 451584}, None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf449.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
    ]
]
op449.group.device = cuda:0
op449.group.iteration = (451584, 1)
op449.sizes = ([8, 18, 3136], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op449_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf413', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf448', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf449', get_index_3, relu, None)
        return store


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op450.unmet_dependencies = []
op450.met_dependencies = [MemoryDep('arg806_1', c0, {c0: 2916}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (2916, 1)
op450.sizes = ([18, 18, 9], [])
arg806_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op450_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg806_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf450', get_index_1, load, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelAlloc)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf449', mode=None), StarDep(name='buf450', mode=None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ExternKernelAlloc
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf451.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=True, is_weak=False)]
]
op451.node.kernel = extern_kernels.convolution


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 451584}, None)]
op452.unmet_dependencies = [MemoryDep('buf451', c0, {c0: 451584}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg807_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg808_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg809_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg810_1', c1, {c0: 25088, c1: 18}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf452.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (451584, 1)
op452.sizes = ([25088, 18], [])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg807_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg808_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg809_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg810_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op452_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg807_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg808_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg809_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg810_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf452', get_index_5, relu, None)
        return store


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op453.unmet_dependencies = []
op453.met_dependencies = [MemoryDep('arg811_1', c0, {c0: 2916}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (2916, 1)
op453.sizes = ([18, 18, 9], [])
arg811_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op453_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg811_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf453', get_index_1, load, None)
        return store


op454: ExternKernelSchedulerNode(ExternKernelAlloc)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf452', mode=None), StarDep(name='buf453', mode=None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ExternKernelAlloc
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf454.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False)]
]
op454.node.kernel = extern_kernels.convolution


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 451584}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 451584}, None),
        MemoryDep('buf454', c0, {c0: 451584}, None)]
op455.met_dependencies = 
    [   MemoryDep('arg812_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg813_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg814_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg815_1', c1, {c0: 25088, c1: 18}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf455.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (451584, 1)
op455.sizes = ([25088, 18], [])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg812_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg813_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg814_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg815_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op455_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg812_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg813_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg814_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg815_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf449', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf455', get_index_6, relu, None)
        return store


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op456.unmet_dependencies = []
op456.met_dependencies = [MemoryDep('arg816_1', c0, {c0: 2916}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf456.users = [NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (2916, 1)
op456.sizes = ([18, 18, 9], [])
arg816_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op456_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg816_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf456', get_index_1, load, None)
        return store


op457: ExternKernelSchedulerNode(ExternKernelAlloc)
op457.writes = [StarDep(name='buf457', mode=None)]
op457.unmet_dependencies = [StarDep(name='buf455', mode=None), StarDep(name='buf456', mode=None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ExternKernelAlloc
    buf457.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf457.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False)]
]
op457.node.kernel = extern_kernels.convolution


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 451584}, None)]
op458.unmet_dependencies = [MemoryDep('buf457', c0, {c0: 451584}, None)]
op458.met_dependencies = 
    [   MemoryDep('arg817_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg818_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg819_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg820_1', c1, {c0: 25088, c1: 18}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (451584, 1)
op458.sizes = ([25088, 18], [])
buf457_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg817_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg818_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg819_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg820_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op458_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg817_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg818_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg819_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg820_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf458', get_index_5, relu, None)
        return store


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op459.unmet_dependencies = []
op459.met_dependencies = [MemoryDep('arg821_1', c0, {c0: 2916}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf459.users = [NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (2916, 1)
op459.sizes = ([18, 18, 9], [])
arg821_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op459_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg821_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf459', get_index_1, load, None)
        return store


op460: ExternKernelSchedulerNode(ExternKernelAlloc)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf458', mode=None), StarDep(name='buf459', mode=None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ExternKernelAlloc
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf460.users = [NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False)]
]
op460.node.kernel = extern_kernels.convolution


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 451584}, None)]
op461.unmet_dependencies = 
    [   MemoryDep('buf455', c0, {c0: 451584}, None),
        MemoryDep('buf460', c0, {c0: 451584}, None)]
op461.met_dependencies = 
    [   MemoryDep('arg822_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg823_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg824_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg825_1', c1, {c0: 25088, c1: 18}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf461.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op461.group.device = cuda:0
op461.group.iteration = (451584, 1)
op461.sizes = ([25088, 18], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg822_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg823_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg824_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg825_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op461_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg822_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg823_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg824_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg825_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf455', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf461', get_index_6, relu, None)
        return store


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op462.unmet_dependencies = []
op462.met_dependencies = [MemoryDep('arg826_1', c0, {c0: 2916}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf462.users = [NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (2916, 1)
op462.sizes = ([18, 18, 9], [])
arg826_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op462_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg826_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf462', get_index_1, load, None)
        return store


op463: ExternKernelSchedulerNode(ExternKernelAlloc)
op463.writes = [StarDep(name='buf463', mode=None)]
op463.unmet_dependencies = [StarDep(name='buf461', mode=None), StarDep(name='buf462', mode=None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ExternKernelAlloc
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf463.users = [NodeUser(node=SchedulerNode(name='op464'), can_inplace=True, is_weak=False)]
]
op463.node.kernel = extern_kernels.convolution


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 451584}, None)]
op464.unmet_dependencies = [MemoryDep('buf463', c0, {c0: 451584}, None)]
op464.met_dependencies = 
    [   MemoryDep('arg827_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg828_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg829_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg830_1', c1, {c0: 25088, c1: 18}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf464.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (451584, 1)
op464.sizes = ([25088, 18], [])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg827_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg828_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg829_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg830_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op464_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg827_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg828_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg829_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg830_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf464', get_index_5, relu, None)
        return store


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op465.unmet_dependencies = []
op465.met_dependencies = [MemoryDep('arg831_1', c0, {c0: 2916}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (2916, 1)
op465.sizes = ([18, 18, 9], [])
arg831_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op465_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg831_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf465', get_index_1, load, None)
        return store


op466: ExternKernelSchedulerNode(ExternKernelAlloc)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf464', mode=None), StarDep(name='buf465', mode=None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ExternKernelAlloc
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op466.node.kernel = extern_kernels.convolution


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 451584}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 451584}, None),
        MemoryDep('buf466', c0, {c0: 451584}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg832_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg833_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg834_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg835_1', c1, {c0: 25088, c1: 18}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf467.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False),
    ]
]
op467.group.device = cuda:0
op467.group.iteration = (451584, 1)
op467.sizes = ([25088, 18], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg832_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg833_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg834_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg835_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op467_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg832_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg833_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg834_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg835_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf461', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf467', get_index_6, relu, None)
        return store


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op468.unmet_dependencies = []
op468.met_dependencies = [MemoryDep('arg836_1', c0, {c0: 2916}, None)]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (2916, 1)
op468.sizes = ([18, 18, 9], [])
arg836_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op468_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg836_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf468', get_index_1, load, None)
        return store


op469: ExternKernelSchedulerNode(ExternKernelAlloc)
op469.writes = [StarDep(name='buf469', mode=None)]
op469.unmet_dependencies = [StarDep(name='buf467', mode=None), StarDep(name='buf468', mode=None)]
op469.met_dependencies = []
op469.outputs = [
    buf469: ExternKernelAlloc
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf469.users = [NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False)]
]
op469.node.kernel = extern_kernels.convolution


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 451584}, None)]
op470.unmet_dependencies = [MemoryDep('buf469', c0, {c0: 451584}, None)]
op470.met_dependencies = 
    [   MemoryDep('arg837_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg838_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg839_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg840_1', c1, {c0: 25088, c1: 18}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (451584, 1)
op470.sizes = ([25088, 18], [])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg837_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg838_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg839_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg840_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op470_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg837_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg838_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg839_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg840_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf470', get_index_5, relu, None)
        return store


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op471.unmet_dependencies = []
op471.met_dependencies = [MemoryDep('arg841_1', c0, {c0: 2916}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (2916, 1)
op471.sizes = ([18, 18, 9], [])
arg841_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op471_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg841_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf471', get_index_1, load, None)
        return store


op472: ExternKernelSchedulerNode(ExternKernelAlloc)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf470', mode=None), StarDep(name='buf471', mode=None)]
op472.met_dependencies = []
op472.outputs = [
    buf472: ExternKernelAlloc
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf472.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False)]
]
op472.node.kernel = extern_kernels.convolution


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 451584}, None)]
op473.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 451584}, None),
        MemoryDep('buf472', c0, {c0: 451584}, None)]
op473.met_dependencies = 
    [   MemoryDep('arg842_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg843_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg844_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg845_1', c1, {c0: 25088, c1: 18}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (451584, 1)
op473.sizes = ([25088, 18], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg842_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg843_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg844_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg845_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op473_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg842_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg843_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg844_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg845_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf467', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf473', get_index_6, relu, None)
        return store


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op474.unmet_dependencies = []
op474.met_dependencies = [MemoryDep('arg776_1', c0, {c0: 5832}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (5832, 1)
op474.sizes = ([36, 18, 9], [])
arg776_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op474_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg776_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf474', get_index_1, load, None)
        return store


op475: ExternKernelSchedulerNode(ExternKernelAlloc)
op475.writes = [StarDep(name='buf475', mode=None)]
op475.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf474', mode=None)]
op475.met_dependencies = []
op475.outputs = [
    buf475: ExternKernelAlloc
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf475.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
]
op475.node.kernel = extern_kernels.convolution


op476: ExternKernelSchedulerNode(ExternKernelAlloc)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op476.met_dependencies = [StarDep(name='arg781_1', mode=None)]
op476.outputs = [
    buf476: ExternKernelAlloc
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf476.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.convolution


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 225792}, None)]
op477.unmet_dependencies = [MemoryDep('buf476', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op477.met_dependencies = 
    [   MemoryDep('arg782_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg783_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg784_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg785_1', c1, {c0: 8, c1: 36}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf477.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (225792, 1)
op477.sizes = ([8, 36, 28, 28], [])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg782_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg783_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg784_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg785_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf476', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg782_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg783_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg784_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg785_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf477', get_index_7, add_1, None)
        return store


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 225792}, None)]
op478.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 225792}, None),
        MemoryDep('buf475', c0, {c0: 225792}, None),
        MemoryDep('buf477', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op478.met_dependencies = 
    [   MemoryDep('arg777_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg778_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg779_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg780_1', c1, {c0: 6272, c1: 36}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (225792, 1)
op478.sizes = ([8, 784, 36], [])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg777_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg778_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg779_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg780_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op478_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf475', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg777_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg778_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg779_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg780_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf411', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf477', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf478', get_index_7, relu, None)
        return store


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op479.unmet_dependencies = []
op479.met_dependencies = [MemoryDep('arg846_1', c0, {c0: 11664}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (11664, 1)
op479.sizes = ([36, 36, 9], [])
arg846_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op479_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg846_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf479', get_index_1, load, None)
        return store


op480: ExternKernelSchedulerNode(ExternKernelAlloc)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf479', mode=None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ExternKernelAlloc
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=True, is_weak=False)]
]
op480.node.kernel = extern_kernels.convolution


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 225792}, None)]
op481.unmet_dependencies = [MemoryDep('buf480', c0, {c0: 225792}, None)]
op481.met_dependencies = 
    [   MemoryDep('arg847_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg848_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg849_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg850_1', c1, {c0: 6272, c1: 36}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf481.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (225792, 1)
op481.sizes = ([6272, 36], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg847_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg848_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg849_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg850_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op481_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg847_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg848_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg849_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg850_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf481', get_index_5, relu, None)
        return store


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op482.unmet_dependencies = []
op482.met_dependencies = [MemoryDep('arg851_1', c0, {c0: 11664}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (11664, 1)
op482.sizes = ([36, 36, 9], [])
arg851_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op482_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg851_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf482', get_index_1, load, None)
        return store


op483: ExternKernelSchedulerNode(ExternKernelAlloc)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf482', mode=None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ExternKernelAlloc
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf483.users = [NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False)]
]
op483.node.kernel = extern_kernels.convolution


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 225792}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf478', c0, {c0: 225792}, None),
        MemoryDep('buf483', c0, {c0: 225792}, None)]
op484.met_dependencies = 
    [   MemoryDep('arg852_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg853_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg854_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg855_1', c1, {c0: 6272, c1: 36}, None)]
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf484.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (225792, 1)
op484.sizes = ([6272, 36], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg852_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg853_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg854_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg855_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op484_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg852_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg853_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg854_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg855_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf478', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf484', get_index_6, relu, None)
        return store


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op485.unmet_dependencies = []
op485.met_dependencies = [MemoryDep('arg856_1', c0, {c0: 11664}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (11664, 1)
op485.sizes = ([36, 36, 9], [])
arg856_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op485_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg856_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf485', get_index_1, load, None)
        return store


op486: ExternKernelSchedulerNode(ExternKernelAlloc)
op486.writes = [StarDep(name='buf486', mode=None)]
op486.unmet_dependencies = [StarDep(name='buf484', mode=None), StarDep(name='buf485', mode=None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ExternKernelAlloc
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf486.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=True, is_weak=False)]
]
op486.node.kernel = extern_kernels.convolution


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 225792}, None)]
op487.unmet_dependencies = [MemoryDep('buf486', c0, {c0: 225792}, None)]
op487.met_dependencies = 
    [   MemoryDep('arg857_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg858_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg859_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg860_1', c1, {c0: 6272, c1: 36}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (225792, 1)
op487.sizes = ([6272, 36], [])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg857_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg858_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg859_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg860_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op487_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg857_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg858_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg859_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg860_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf487', get_index_5, relu, None)
        return store


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op488.unmet_dependencies = []
op488.met_dependencies = [MemoryDep('arg861_1', c0, {c0: 11664}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (11664, 1)
op488.sizes = ([36, 36, 9], [])
arg861_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op488_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg861_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf488', get_index_1, load, None)
        return store


op489: ExternKernelSchedulerNode(ExternKernelAlloc)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf487', mode=None), StarDep(name='buf488', mode=None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ExternKernelAlloc
    buf489.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf489.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False)]
]
op489.node.kernel = extern_kernels.convolution


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 225792}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 225792}, None),
        MemoryDep('buf489', c0, {c0: 225792}, None)]
op490.met_dependencies = 
    [   MemoryDep('arg862_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg863_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg864_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg865_1', c1, {c0: 6272, c1: 36}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf490.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False),
    ]
]
op490.group.device = cuda:0
op490.group.iteration = (225792, 1)
op490.sizes = ([6272, 36], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg862_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg863_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg864_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg865_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op490_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg862_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg863_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg864_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg865_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf484', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf490', get_index_6, relu, None)
        return store


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op491.unmet_dependencies = []
op491.met_dependencies = [MemoryDep('arg866_1', c0, {c0: 11664}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf491.users = [NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (11664, 1)
op491.sizes = ([36, 36, 9], [])
arg866_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op491_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg866_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf491', get_index_1, load, None)
        return store


op492: ExternKernelSchedulerNode(ExternKernelAlloc)
op492.writes = [StarDep(name='buf492', mode=None)]
op492.unmet_dependencies = [StarDep(name='buf490', mode=None), StarDep(name='buf491', mode=None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ExternKernelAlloc
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf492.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=True, is_weak=False)]
]
op492.node.kernel = extern_kernels.convolution


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 225792}, None)]
op493.unmet_dependencies = [MemoryDep('buf492', c0, {c0: 225792}, None)]
op493.met_dependencies = 
    [   MemoryDep('arg867_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg868_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg869_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg870_1', c1, {c0: 6272, c1: 36}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf493.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (225792, 1)
op493.sizes = ([6272, 36], [])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg867_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg868_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg869_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg870_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op493_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg867_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg868_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg869_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg870_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf493', get_index_5, relu, None)
        return store


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op494.unmet_dependencies = []
op494.met_dependencies = [MemoryDep('arg871_1', c0, {c0: 11664}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf494.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (11664, 1)
op494.sizes = ([36, 36, 9], [])
arg871_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op494_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg871_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf494', get_index_1, load, None)
        return store


op495: ExternKernelSchedulerNode(ExternKernelAlloc)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = [StarDep(name='buf493', mode=None), StarDep(name='buf494', mode=None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: ExternKernelAlloc
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf495.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False)]
]
op495.node.kernel = extern_kernels.convolution


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 225792}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf490', c0, {c0: 225792}, None),
        MemoryDep('buf495', c0, {c0: 225792}, None)]
op496.met_dependencies = 
    [   MemoryDep('arg872_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg873_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg874_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg875_1', c1, {c0: 6272, c1: 36}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf496.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False),
    ]
]
op496.group.device = cuda:0
op496.group.iteration = (225792, 1)
op496.sizes = ([6272, 36], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg872_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg873_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg874_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg875_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op496_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg872_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg873_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg874_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg875_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf490', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf496', get_index_6, relu, None)
        return store


op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op497.unmet_dependencies = []
op497.met_dependencies = [MemoryDep('arg876_1', c0, {c0: 11664}, None)]
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf497.users = [NodeUser(node=ExternKernelSchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (11664, 1)
op497.sizes = ([36, 36, 9], [])
arg876_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op497_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg876_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf497', get_index_1, load, None)
        return store


op498: ExternKernelSchedulerNode(ExternKernelAlloc)
op498.writes = [StarDep(name='buf498', mode=None)]
op498.unmet_dependencies = [StarDep(name='buf496', mode=None), StarDep(name='buf497', mode=None)]
op498.met_dependencies = []
op498.outputs = [
    buf498: ExternKernelAlloc
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf498.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False)]
]
op498.node.kernel = extern_kernels.convolution


op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 225792}, None)]
op499.unmet_dependencies = [MemoryDep('buf498', c0, {c0: 225792}, None)]
op499.met_dependencies = 
    [   MemoryDep('arg877_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg878_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg879_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg880_1', c1, {c0: 6272, c1: 36}, None)]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (225792, 1)
op499.sizes = ([6272, 36], [])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg877_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg878_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg879_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg880_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op499_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf498', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg877_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg878_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg879_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg880_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf499', get_index_5, relu, None)
        return store


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op500.unmet_dependencies = []
op500.met_dependencies = [MemoryDep('arg881_1', c0, {c0: 11664}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf500.users = [NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (11664, 1)
op500.sizes = ([36, 36, 9], [])
arg881_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op500_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg881_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf500', get_index_1, load, None)
        return store


op501: ExternKernelSchedulerNode(ExternKernelAlloc)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf499', mode=None), StarDep(name='buf500', mode=None)]
op501.met_dependencies = []
op501.outputs = [
    buf501: ExternKernelAlloc
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf501.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False)]
]
op501.node.kernel = extern_kernels.convolution


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 225792}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf496', c0, {c0: 225792}, None),
        MemoryDep('buf501', c0, {c0: 225792}, None)]
op502.met_dependencies = 
    [   MemoryDep('arg882_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg883_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg884_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg885_1', c1, {c0: 6272, c1: 36}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf502.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False),
    ]
]
op502.group.device = cuda:0
op502.group.iteration = (225792, 1)
op502.sizes = ([6272, 36], [])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg882_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg883_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg884_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg885_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op502_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf501', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg882_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg883_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg884_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg885_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf496', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf502', get_index_6, relu, None)
        return store


op503: ExternKernelSchedulerNode(ExternKernelAlloc)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf502', mode=None)]
op503.met_dependencies = [StarDep(name='arg966_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelAlloc
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf503.users = [NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = extern_kernels.convolution


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 451584}, None)]
op504.unmet_dependencies = [MemoryDep('buf503', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op504.met_dependencies = 
    [   MemoryDep('arg967_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg968_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg969_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg970_1', c1, {c0: 8, c1: 18}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf504.users = [NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (451584, 1)
op504.sizes = ([8, 18, 56, 56], [])
buf503_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg967_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg968_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg969_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg970_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op504_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf503', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg967_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg968_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg969_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg970_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf504', get_index_7, add_1, None)
        return store


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op505.unmet_dependencies = []
op505.met_dependencies = [MemoryDep('arg786_1', c0, {c0: 2916}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (2916, 1)
op505.sizes = ([18, 18, 9], [])
arg786_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op505_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg786_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf505', get_index_1, load, None)
        return store


op506: ExternKernelSchedulerNode(ExternKernelAlloc)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf505', mode=None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ExternKernelAlloc
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf506.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False)]
]
op506.node.kernel = extern_kernels.convolution


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 112896}, None)]
op507.unmet_dependencies = [MemoryDep('buf506', c0, {c0: 112896}, None)]
op507.met_dependencies = 
    [   MemoryDep('arg787_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg788_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg789_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg790_1', c1, {c0: 6272, c1: 18}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (112896, 1)
op507.sizes = ([6272, 18], [])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg787_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg788_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg790_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op507_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg787_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg788_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg789_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg790_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf507', get_index_5, relu, None)
        return store


op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op508.unmet_dependencies = []
op508.met_dependencies = [MemoryDep('arg791_1', c0, {c0: 11664}, None)]
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf508.users = [NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (11664, 1)
op508.sizes = ([72, 18, 9], [])
arg791_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op508_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg791_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf508', get_index_1, load, None)
        return store


op509: ExternKernelSchedulerNode(ExternKernelAlloc)
op509.writes = [StarDep(name='buf509', mode=None)]
op509.unmet_dependencies = [StarDep(name='buf507', mode=None), StarDep(name='buf508', mode=None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ExternKernelAlloc
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf509.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False)]
]
op509.node.kernel = extern_kernels.convolution


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op510.unmet_dependencies = []
op510.met_dependencies = [MemoryDep('arg796_1', c0, {c0: 23328}, None)]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf510.users = [NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (23328, 1)
op510.sizes = ([72, 36, 9], [])
arg796_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op510_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg796_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf510', get_index_1, load, None)
        return store


op511: ExternKernelSchedulerNode(ExternKernelAlloc)
op511.writes = [StarDep(name='buf511', mode=None)]
op511.unmet_dependencies = [StarDep(name='buf411', mode=None), StarDep(name='buf510', mode=None)]
op511.met_dependencies = []
op511.outputs = [
    buf511: ExternKernelAlloc
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf511.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=True, is_weak=False)]
]
op511.node.kernel = extern_kernels.convolution


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 112896}, None)]
op512.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 112896}, None),
        MemoryDep('buf511', c0, {c0: 112896}, None)]
op512.met_dependencies = 
    [   MemoryDep('arg792_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg793_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg794_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg795_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg797_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg798_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg799_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg800_1', c1, {c0: 1568, c1: 72}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf512.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (112896, 1)
op512.sizes = ([1568, 72], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg792_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg793_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg794_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg795_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg797_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg798_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg799_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg800_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op512_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg792_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg793_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg794_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg795_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf511', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg797_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg798_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg799_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg800_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf512', get_index_10, add_4, None)
        return store


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 112896}, None)]
op513.unmet_dependencies = 
    [   MemoryDep('buf446', c0, {c0: 112896}, None),
        MemoryDep('buf512', c0, {c0: 112896}, None)]
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf513.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False),
    ]
]
op513.group.device = cuda:0
op513.group.iteration = (112896, 1)
op513.sizes = ([112896], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf513_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op513_loop_body:
    var_ranges = {z0: 112896}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf446', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf513', get_index_2, relu, None)
        return store


op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op514.unmet_dependencies = []
op514.met_dependencies = [MemoryDep('arg886_1', c0, {c0: 46656}, None)]
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf514.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (46656, 1)
op514.sizes = ([72, 72, 9], [])
arg886_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op514_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg886_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf514', get_index_1, load, None)
        return store


op515: ExternKernelSchedulerNode(ExternKernelAlloc)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf513', mode=None), StarDep(name='buf514', mode=None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: ExternKernelAlloc
    buf515.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf515.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False)]
]
op515.node.kernel = extern_kernels.convolution


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 112896}, None)]
op516.unmet_dependencies = [MemoryDep('buf515', c0, {c0: 112896}, None)]
op516.met_dependencies = 
    [   MemoryDep('arg887_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg888_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg889_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg890_1', c1, {c0: 1568, c1: 72}, None)]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (112896, 1)
op516.sizes = ([1568, 72], [])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg887_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg888_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg889_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg890_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op516_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg887_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg888_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg889_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg890_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf516', get_index_5, relu, None)
        return store


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op517.unmet_dependencies = []
op517.met_dependencies = [MemoryDep('arg891_1', c0, {c0: 46656}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (46656, 1)
op517.sizes = ([72, 72, 9], [])
arg891_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op517_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg891_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf517', get_index_1, load, None)
        return store


op518: ExternKernelSchedulerNode(ExternKernelAlloc)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf516', mode=None), StarDep(name='buf517', mode=None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ExternKernelAlloc
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False)]
]
op518.node.kernel = extern_kernels.convolution


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 112896}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf513', c0, {c0: 112896}, None),
        MemoryDep('buf518', c0, {c0: 112896}, None)]
op519.met_dependencies = 
    [   MemoryDep('arg892_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg893_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg894_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg895_1', c1, {c0: 1568, c1: 72}, None)]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf519.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False),
    ]
]
op519.group.device = cuda:0
op519.group.iteration = (112896, 1)
op519.sizes = ([1568, 72], [])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg892_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg893_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg894_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg895_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op519_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg892_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg893_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg894_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg895_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf513', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf519', get_index_6, relu, None)
        return store


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op520.unmet_dependencies = []
op520.met_dependencies = [MemoryDep('arg896_1', c0, {c0: 46656}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf520.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (46656, 1)
op520.sizes = ([72, 72, 9], [])
arg896_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op520_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg896_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf520', get_index_1, load, None)
        return store


op521: ExternKernelSchedulerNode(ExternKernelAlloc)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf519', mode=None), StarDep(name='buf520', mode=None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: ExternKernelAlloc
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf521.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=True, is_weak=False)]
]
op521.node.kernel = extern_kernels.convolution


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 112896}, None)]
op522.unmet_dependencies = [MemoryDep('buf521', c0, {c0: 112896}, None)]
op522.met_dependencies = 
    [   MemoryDep('arg897_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg898_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg899_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg900_1', c1, {c0: 1568, c1: 72}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (112896, 1)
op522.sizes = ([1568, 72], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg897_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg898_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg899_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg900_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op522_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg897_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg898_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg899_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg900_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf522', get_index_5, relu, None)
        return store


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op523.unmet_dependencies = []
op523.met_dependencies = [MemoryDep('arg901_1', c0, {c0: 46656}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf523.users = [NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op523.group.device = cuda:0
op523.group.iteration = (46656, 1)
op523.sizes = ([72, 72, 9], [])
arg901_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op523_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg901_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf523', get_index_1, load, None)
        return store


op524: ExternKernelSchedulerNode(ExternKernelAlloc)
op524.writes = [StarDep(name='buf524', mode=None)]
op524.unmet_dependencies = [StarDep(name='buf522', mode=None), StarDep(name='buf523', mode=None)]
op524.met_dependencies = []
op524.outputs = [
    buf524: ExternKernelAlloc
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf524.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False)]
]
op524.node.kernel = extern_kernels.convolution


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 112896}, None)]
op525.unmet_dependencies = 
    [   MemoryDep('buf519', c0, {c0: 112896}, None),
        MemoryDep('buf524', c0, {c0: 112896}, None)]
op525.met_dependencies = 
    [   MemoryDep('arg902_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg903_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg904_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg905_1', c1, {c0: 1568, c1: 72}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf525.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op525.group.device = cuda:0
op525.group.iteration = (112896, 1)
op525.sizes = ([1568, 72], [])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg902_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg903_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg904_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg905_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op525_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf524', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg902_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg903_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg904_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg905_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf519', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf525', get_index_6, relu, None)
        return store


op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op526.unmet_dependencies = []
op526.met_dependencies = [MemoryDep('arg906_1', c0, {c0: 46656}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf526.users = [NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op526.group.device = cuda:0
op526.group.iteration = (46656, 1)
op526.sizes = ([72, 72, 9], [])
arg906_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op526_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg906_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf526', get_index_1, load, None)
        return store


op527: ExternKernelSchedulerNode(ExternKernelAlloc)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf526', mode=None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: ExternKernelAlloc
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf527.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False)]
]
op527.node.kernel = extern_kernels.convolution


op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 112896}, None)]
op528.unmet_dependencies = [MemoryDep('buf527', c0, {c0: 112896}, None)]
op528.met_dependencies = 
    [   MemoryDep('arg907_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg908_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg909_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg910_1', c1, {c0: 1568, c1: 72}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (112896, 1)
op528.sizes = ([1568, 72], [])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg907_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg908_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg909_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg910_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op528_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg907_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg908_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg909_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg910_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf528', get_index_5, relu, None)
        return store


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op529.unmet_dependencies = []
op529.met_dependencies = [MemoryDep('arg911_1', c0, {c0: 46656}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (46656, 1)
op529.sizes = ([72, 72, 9], [])
arg911_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op529_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg911_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf529', get_index_1, load, None)
        return store


op530: ExternKernelSchedulerNode(ExternKernelAlloc)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf528', mode=None), StarDep(name='buf529', mode=None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: ExternKernelAlloc
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False)]
]
op530.node.kernel = extern_kernels.convolution


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 112896}, None)]
op531.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 112896}, None),
        MemoryDep('buf530', c0, {c0: 112896}, None)]
op531.met_dependencies = 
    [   MemoryDep('arg912_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg913_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg914_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg915_1', c1, {c0: 1568, c1: 72}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False),
    ]
]
op531.group.device = cuda:0
op531.group.iteration = (112896, 1)
op531.sizes = ([1568, 72], [])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg912_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg913_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg914_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg915_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op531_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg912_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg913_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg914_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg915_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf525', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf531', get_index_6, relu, None)
        return store


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op532.unmet_dependencies = []
op532.met_dependencies = [MemoryDep('arg916_1', c0, {c0: 46656}, None)]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (46656, 1)
op532.sizes = ([72, 72, 9], [])
arg916_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op532_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg916_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf532', get_index_1, load, None)
        return store


op533: ExternKernelSchedulerNode(ExternKernelAlloc)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf531', mode=None), StarDep(name='buf532', mode=None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ExternKernelAlloc
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf533.users = [NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False)]
]
op533.node.kernel = extern_kernels.convolution


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 112896}, None)]
op534.unmet_dependencies = [MemoryDep('buf533', c0, {c0: 112896}, None)]
op534.met_dependencies = 
    [   MemoryDep('arg917_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg918_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg919_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg920_1', c1, {c0: 1568, c1: 72}, None)]
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (112896, 1)
op534.sizes = ([1568, 72], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg917_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg918_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg919_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg920_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op534_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg917_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg918_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg919_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg920_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf534', get_index_5, relu, None)
        return store


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op535.unmet_dependencies = []
op535.met_dependencies = [MemoryDep('arg921_1', c0, {c0: 46656}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (46656, 1)
op535.sizes = ([72, 72, 9], [])
arg921_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op535_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg921_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf535', get_index_1, load, None)
        return store


op536: ExternKernelSchedulerNode(ExternKernelAlloc)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf534', mode=None), StarDep(name='buf535', mode=None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: ExternKernelAlloc
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf536.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False)]
]
op536.node.kernel = extern_kernels.convolution


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 112896}, None)]
op537.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 112896}, None),
        MemoryDep('buf536', c0, {c0: 112896}, None)]
op537.met_dependencies = 
    [   MemoryDep('arg922_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg923_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg924_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg925_1', c1, {c0: 1568, c1: 72}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf537.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False),
    ]
]
op537.group.device = cuda:0
op537.group.iteration = (112896, 1)
op537.sizes = ([1568, 72], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg922_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg923_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg924_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg925_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op537_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg922_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg923_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg924_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg925_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf531', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf537', get_index_6, relu, None)
        return store


op538: ExternKernelSchedulerNode(ExternKernelAlloc)
op538.writes = [StarDep(name='buf538', mode=None)]
op538.unmet_dependencies = [StarDep(name='buf537', mode=None)]
op538.met_dependencies = [StarDep(name='arg971_1', mode=None)]
op538.outputs = [
    buf538: ExternKernelAlloc
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf538.users = [NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op538.node.kernel = extern_kernels.convolution


op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 451584}, None)]
op539.unmet_dependencies = [MemoryDep('buf538', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op539.met_dependencies = 
    [   MemoryDep('arg972_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg973_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg974_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg975_1', c1, {c0: 8, c1: 18}, None)]
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf539.users = [NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op539.group.device = cuda:0
op539.group.iteration = (451584, 1)
op539.sizes = ([8, 18, 56, 56], [])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg972_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg973_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg974_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg975_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op539_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf538', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg972_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg973_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg974_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg975_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf539', get_index_7, add_1, None)
        return store


op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', 648*c0 + c1 + 72*c2, {c0: 144, c1: 72, c2: 9}, None)]
op540.unmet_dependencies = []
op540.met_dependencies = [MemoryDep('arg801_1', c0, {c0: 93312}, None)]
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (93312, 1)
op540.sizes = ([144, 72, 9], [])
arg801_1_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 9, 3, 1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
class op540_loop_body:
    var_ranges = {z0: 144, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg801_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf540', get_index_1, load, None)
        return store


op541: ExternKernelSchedulerNode(ExternKernelAlloc)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf513', mode=None), StarDep(name='buf540', mode=None)]
op541.met_dependencies = []
op541.outputs = [
    buf541: ExternKernelAlloc
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.convolution


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 56448}, None)]
op542.unmet_dependencies = [MemoryDep('buf541', c0, {c0: 56448}, None)]
op542.met_dependencies = 
    [   MemoryDep('arg802_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg803_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg804_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg805_1', c1, {c0: 392, c1: 144}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf542.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op542.group.device = cuda:0
op542.group.iteration = (56448, 1)
op542.sizes = ([392, 144], [])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg802_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg803_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg804_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg805_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op542_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf541', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg802_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg803_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg804_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg805_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf542', get_index_5, relu, None)
        return store


op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op543.unmet_dependencies = []
op543.met_dependencies = [MemoryDep('arg926_1', c0, {c0: 186624}, None)]
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (186624, 1)
op543.sizes = ([144, 144, 9], [])
arg926_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op543_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg926_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf543', get_index_1, load, None)
        return store


op544: ExternKernelSchedulerNode(ExternKernelAlloc)
op544.writes = [StarDep(name='buf544', mode=None)]
op544.unmet_dependencies = [StarDep(name='buf542', mode=None), StarDep(name='buf543', mode=None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: ExternKernelAlloc
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf544.users = [NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False)]
]
op544.node.kernel = extern_kernels.convolution


op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 56448}, None)]
op545.unmet_dependencies = [MemoryDep('buf544', c0, {c0: 56448}, None)]
op545.met_dependencies = 
    [   MemoryDep('arg927_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg928_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg929_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg930_1', c1, {c0: 392, c1: 144}, None)]
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf545.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (56448, 1)
op545.sizes = ([392, 144], [])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg927_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg928_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg929_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg930_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op545_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg927_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg928_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg929_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg930_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf545', get_index_5, relu, None)
        return store


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op546.unmet_dependencies = []
op546.met_dependencies = [MemoryDep('arg931_1', c0, {c0: 186624}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (186624, 1)
op546.sizes = ([144, 144, 9], [])
arg931_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op546_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg931_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf546', get_index_1, load, None)
        return store


op547: ExternKernelSchedulerNode(ExternKernelAlloc)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf545', mode=None), StarDep(name='buf546', mode=None)]
op547.met_dependencies = []
op547.outputs = [
    buf547: ExternKernelAlloc
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
]
op547.node.kernel = extern_kernels.convolution


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 56448}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 56448}, None),
        MemoryDep('buf547', c0, {c0: 56448}, None)]
op548.met_dependencies = 
    [   MemoryDep('arg932_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg933_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg934_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg935_1', c1, {c0: 392, c1: 144}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf548.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False),
    ]
]
op548.group.device = cuda:0
op548.group.iteration = (56448, 1)
op548.sizes = ([392, 144], [])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg932_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg933_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg934_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg935_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op548_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg932_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg933_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg934_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg935_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf542', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf548', get_index_6, relu, None)
        return store


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op549.unmet_dependencies = []
op549.met_dependencies = [MemoryDep('arg936_1', c0, {c0: 186624}, None)]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf549.users = [NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (186624, 1)
op549.sizes = ([144, 144, 9], [])
arg936_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op549_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg936_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf549', get_index_1, load, None)
        return store


op550: ExternKernelSchedulerNode(ExternKernelAlloc)
op550.writes = [StarDep(name='buf550', mode=None)]
op550.unmet_dependencies = [StarDep(name='buf548', mode=None), StarDep(name='buf549', mode=None)]
op550.met_dependencies = []
op550.outputs = [
    buf550: ExternKernelAlloc
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf550.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False)]
]
op550.node.kernel = extern_kernels.convolution


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 56448}, None)]
op551.unmet_dependencies = [MemoryDep('buf550', c0, {c0: 56448}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg937_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg938_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg939_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg940_1', c1, {c0: 392, c1: 144}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf551.users = [NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op551.group.device = cuda:0
op551.group.iteration = (56448, 1)
op551.sizes = ([392, 144], [])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg937_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg938_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg939_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg940_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op551_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf550', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg937_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg938_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg939_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg940_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf551', get_index_5, relu, None)
        return store


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op552.unmet_dependencies = []
op552.met_dependencies = [MemoryDep('arg941_1', c0, {c0: 186624}, None)]
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf552.users = [NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (186624, 1)
op552.sizes = ([144, 144, 9], [])
arg941_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op552_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg941_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf552', get_index_1, load, None)
        return store


op553: ExternKernelSchedulerNode(ExternKernelAlloc)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf551', mode=None), StarDep(name='buf552', mode=None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ExternKernelAlloc
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf553.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False)]
]
op553.node.kernel = extern_kernels.convolution


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 56448}, None)]
op554.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 56448}, None),
        MemoryDep('buf553', c0, {c0: 56448}, None)]
op554.met_dependencies = 
    [   MemoryDep('arg942_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg943_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg944_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg945_1', c1, {c0: 392, c1: 144}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf554.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False),
    ]
]
op554.group.device = cuda:0
op554.group.iteration = (56448, 1)
op554.sizes = ([392, 144], [])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg942_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg943_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg944_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg945_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf554_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op554_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg942_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg943_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg944_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg945_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf548', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf554', get_index_6, relu, None)
        return store


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op555.unmet_dependencies = []
op555.met_dependencies = [MemoryDep('arg946_1', c0, {c0: 186624}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (186624, 1)
op555.sizes = ([144, 144, 9], [])
arg946_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op555_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg946_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf555', get_index_1, load, None)
        return store


op556: ExternKernelSchedulerNode(ExternKernelAlloc)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf554', mode=None), StarDep(name='buf555', mode=None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: ExternKernelAlloc
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf556.users = [NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False)]
]
op556.node.kernel = extern_kernels.convolution


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 56448}, None)]
op557.unmet_dependencies = [MemoryDep('buf556', c0, {c0: 56448}, None)]
op557.met_dependencies = 
    [   MemoryDep('arg947_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg948_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg949_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg950_1', c1, {c0: 392, c1: 144}, None)]
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (56448, 1)
op557.sizes = ([392, 144], [])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg947_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg948_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg949_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg950_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op557_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg947_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg948_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg949_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg950_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf557', get_index_5, relu, None)
        return store


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op558.unmet_dependencies = []
op558.met_dependencies = [MemoryDep('arg951_1', c0, {c0: 186624}, None)]
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (186624, 1)
op558.sizes = ([144, 144, 9], [])
arg951_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op558_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg951_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf558', get_index_1, load, None)
        return store


op559: ExternKernelSchedulerNode(ExternKernelAlloc)
op559.writes = [StarDep(name='buf559', mode=None)]
op559.unmet_dependencies = [StarDep(name='buf557', mode=None), StarDep(name='buf558', mode=None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ExternKernelAlloc
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf559.users = [NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False)]
]
op559.node.kernel = extern_kernels.convolution


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 56448}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf554', c0, {c0: 56448}, None),
        MemoryDep('buf559', c0, {c0: 56448}, None)]
op560.met_dependencies = 
    [   MemoryDep('arg952_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg953_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg954_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg955_1', c1, {c0: 392, c1: 144}, None)]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf560.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False),
    ]
]
op560.group.device = cuda:0
op560.group.iteration = (56448, 1)
op560.sizes = ([392, 144], [])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg952_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg953_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg954_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg955_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op560_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg952_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg953_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg954_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg955_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf554', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf560', get_index_6, relu, None)
        return store


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op561.unmet_dependencies = []
op561.met_dependencies = [MemoryDep('arg956_1', c0, {c0: 186624}, None)]
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op561.group.device = cuda:0
op561.group.iteration = (186624, 1)
op561.sizes = ([144, 144, 9], [])
arg956_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op561_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg956_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf561', get_index_1, load, None)
        return store


op562: ExternKernelSchedulerNode(ExternKernelAlloc)
op562.writes = [StarDep(name='buf562', mode=None)]
op562.unmet_dependencies = [StarDep(name='buf560', mode=None), StarDep(name='buf561', mode=None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ExternKernelAlloc
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf562.users = [NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False)]
]
op562.node.kernel = extern_kernels.convolution


op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 56448}, None)]
op563.unmet_dependencies = [MemoryDep('buf562', c0, {c0: 56448}, None)]
op563.met_dependencies = 
    [   MemoryDep('arg957_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg958_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg959_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg960_1', c1, {c0: 392, c1: 144}, None)]
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563.group.device = cuda:0
op563.group.iteration = (56448, 1)
op563.sizes = ([392, 144], [])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg957_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg958_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg959_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg960_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op563_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg957_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg958_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg959_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg960_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf563', get_index_5, relu, None)
        return store


op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op564.unmet_dependencies = []
op564.met_dependencies = [MemoryDep('arg961_1', c0, {c0: 186624}, None)]
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (186624, 1)
op564.sizes = ([144, 144, 9], [])
arg961_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op564_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg961_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf564', get_index_1, load, None)
        return store


op565: ExternKernelSchedulerNode(ExternKernelAlloc)
op565.writes = [StarDep(name='buf565', mode=None)]
op565.unmet_dependencies = [StarDep(name='buf563', mode=None), StarDep(name='buf564', mode=None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ExternKernelAlloc
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf565.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False)]
]
op565.node.kernel = extern_kernels.convolution


op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 56448}, None)]
op566.unmet_dependencies = 
    [   MemoryDep('buf560', c0, {c0: 56448}, None),
        MemoryDep('buf565', c0, {c0: 56448}, None)]
op566.met_dependencies = 
    [   MemoryDep('arg962_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg963_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg964_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg965_1', c1, {c0: 392, c1: 144}, None)]
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf566.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False),
    ]
]
op566.group.device = cuda:0
op566.group.iteration = (56448, 1)
op566.sizes = ([392, 144], [])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg962_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg963_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg964_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg965_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op566_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf565', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg962_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg963_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg964_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg965_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf560', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf566', get_index_6, relu, None)
        return store


op567: ExternKernelSchedulerNode(ExternKernelAlloc)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op567.met_dependencies = [StarDep(name='arg976_1', mode=None)]
op567.outputs = [
    buf567: ExternKernelAlloc
    buf567.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
    buf567.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op567.node.kernel = extern_kernels.convolution


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 451584}, None)]
op568.unmet_dependencies = [MemoryDep('buf567', 882*c0 + c1 + 126*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op568.met_dependencies = 
    [   MemoryDep('arg977_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg978_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg979_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg980_1', c1, {c0: 8, c1: 18}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf568.users = [NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (451584, 1)
op568.sizes = ([8, 18, 56, 56], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
arg977_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg978_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg979_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg980_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op568_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 126*indirect0 + 18*indirect1 + 882*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf567', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg977_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg978_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg979_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg980_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf568', get_index_7, add_1, None)
        return store


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op569.unmet_dependencies = 
    [   MemoryDep('buf473', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf504', c0, {c0: 451584}, None),
        MemoryDep('buf539', c0, {c0: 451584}, None),
        MemoryDep('buf568', c0, {c0: 451584}, None)]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf569.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
    ]
]
op569.group.device = cuda:0
op569.group.iteration = (451584, 1)
op569.sizes = ([8, 18, 3136], [])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op569_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf504', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf539', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf568', get_index_3)
        add_2 = ops.add(add_1, load_3)
        relu = ops.relu(add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf569', get_index_4, relu, None)
        return store


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op570.unmet_dependencies = []
op570.met_dependencies = [MemoryDep('arg1046_1', c0, {c0: 2916}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf570.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (2916, 1)
op570.sizes = ([18, 18, 9], [])
arg1046_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op570_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1046_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf570', get_index_1, load, None)
        return store


op571: ExternKernelSchedulerNode(ExternKernelAlloc)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf569', mode=None), StarDep(name='buf570', mode=None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: ExternKernelAlloc
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf571.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False)]
]
op571.node.kernel = extern_kernels.convolution


op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 451584}, None)]
op572.unmet_dependencies = [MemoryDep('buf571', c0, {c0: 451584}, None)]
op572.met_dependencies = 
    [   MemoryDep('arg1047_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1048_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1049_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1050_1', c1, {c0: 25088, c1: 18}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf572.users = [NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (451584, 1)
op572.sizes = ([25088, 18], [])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1047_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1048_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1049_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1050_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op572_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1047_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1048_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1049_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1050_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf572', get_index_5, relu, None)
        return store


op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op573.unmet_dependencies = []
op573.met_dependencies = [MemoryDep('arg1051_1', c0, {c0: 2916}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf573.users = [NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op573.group.device = cuda:0
op573.group.iteration = (2916, 1)
op573.sizes = ([18, 18, 9], [])
arg1051_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op573_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1051_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf573', get_index_1, load, None)
        return store


op574: ExternKernelSchedulerNode(ExternKernelAlloc)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf572', mode=None), StarDep(name='buf573', mode=None)]
op574.met_dependencies = []
op574.outputs = [
    buf574: ExternKernelAlloc
    buf574.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf574.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False)]
]
op574.node.kernel = extern_kernels.convolution


op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 451584}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf569', c0, {c0: 451584}, None),
        MemoryDep('buf574', c0, {c0: 451584}, None)]
op575.met_dependencies = 
    [   MemoryDep('arg1052_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1053_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1054_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1055_1', c1, {c0: 25088, c1: 18}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf575.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False),
    ]
]
op575.group.device = cuda:0
op575.group.iteration = (451584, 1)
op575.sizes = ([25088, 18], [])
buf574_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1052_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1053_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1054_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1055_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op575_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1052_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1053_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1054_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1055_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf569', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf575', get_index_6, relu, None)
        return store


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op576.unmet_dependencies = []
op576.met_dependencies = [MemoryDep('arg1056_1', c0, {c0: 2916}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf576.users = [NodeUser(node=ExternKernelSchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (2916, 1)
op576.sizes = ([18, 18, 9], [])
arg1056_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op576_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1056_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf576', get_index_1, load, None)
        return store


op577: ExternKernelSchedulerNode(ExternKernelAlloc)
op577.writes = [StarDep(name='buf577', mode=None)]
op577.unmet_dependencies = [StarDep(name='buf575', mode=None), StarDep(name='buf576', mode=None)]
op577.met_dependencies = []
op577.outputs = [
    buf577: ExternKernelAlloc
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf577.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False)]
]
op577.node.kernel = extern_kernels.convolution


op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 451584}, None)]
op578.unmet_dependencies = [MemoryDep('buf577', c0, {c0: 451584}, None)]
op578.met_dependencies = 
    [   MemoryDep('arg1057_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1058_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1059_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1060_1', c1, {c0: 25088, c1: 18}, None)]
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf578.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op578.group.device = cuda:0
op578.group.iteration = (451584, 1)
op578.sizes = ([25088, 18], [])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1057_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1058_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1059_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1060_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op578_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1057_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1058_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1059_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1060_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf578', get_index_5, relu, None)
        return store


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op579.unmet_dependencies = []
op579.met_dependencies = [MemoryDep('arg1061_1', c0, {c0: 2916}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (2916, 1)
op579.sizes = ([18, 18, 9], [])
arg1061_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op579_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1061_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf579', get_index_1, load, None)
        return store


op580: ExternKernelSchedulerNode(ExternKernelAlloc)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf578', mode=None), StarDep(name='buf579', mode=None)]
op580.met_dependencies = []
op580.outputs = [
    buf580: ExternKernelAlloc
    buf580.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf580.users = [NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False)]
]
op580.node.kernel = extern_kernels.convolution


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 451584}, None)]
op581.unmet_dependencies = 
    [   MemoryDep('buf575', c0, {c0: 451584}, None),
        MemoryDep('buf580', c0, {c0: 451584}, None)]
op581.met_dependencies = 
    [   MemoryDep('arg1062_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1063_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1064_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1065_1', c1, {c0: 25088, c1: 18}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf581.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (451584, 1)
op581.sizes = ([25088, 18], [])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1062_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1063_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1064_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1065_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op581_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1062_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1063_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1064_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1065_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf575', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf581', get_index_6, relu, None)
        return store


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op582.unmet_dependencies = []
op582.met_dependencies = [MemoryDep('arg1066_1', c0, {c0: 2916}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (2916, 1)
op582.sizes = ([18, 18, 9], [])
arg1066_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op582_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1066_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf582', get_index_1, load, None)
        return store


op583: ExternKernelSchedulerNode(ExternKernelAlloc)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf581', mode=None), StarDep(name='buf582', mode=None)]
op583.met_dependencies = []
op583.outputs = [
    buf583: ExternKernelAlloc
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf583.users = [NodeUser(node=SchedulerNode(name='op584'), can_inplace=True, is_weak=False)]
]
op583.node.kernel = extern_kernels.convolution


op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 451584}, None)]
op584.unmet_dependencies = [MemoryDep('buf583', c0, {c0: 451584}, None)]
op584.met_dependencies = 
    [   MemoryDep('arg1067_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1068_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1069_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1070_1', c1, {c0: 25088, c1: 18}, None)]
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf584.users = [NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (451584, 1)
op584.sizes = ([25088, 18], [])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1067_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1068_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1069_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1070_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op584_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1067_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1068_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1069_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1070_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf584', get_index_5, relu, None)
        return store


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op585.unmet_dependencies = []
op585.met_dependencies = [MemoryDep('arg1071_1', c0, {c0: 2916}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf585.users = [NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (2916, 1)
op585.sizes = ([18, 18, 9], [])
arg1071_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op585_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1071_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf585', get_index_1, load, None)
        return store


op586: ExternKernelSchedulerNode(ExternKernelAlloc)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf584', mode=None), StarDep(name='buf585', mode=None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ExternKernelAlloc
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf586.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False)]
]
op586.node.kernel = extern_kernels.convolution


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 451584}, None)]
op587.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 451584}, None),
        MemoryDep('buf586', c0, {c0: 451584}, None)]
op587.met_dependencies = 
    [   MemoryDep('arg1072_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1073_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1074_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1075_1', c1, {c0: 25088, c1: 18}, None)]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf587.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False),
    ]
]
op587.group.device = cuda:0
op587.group.iteration = (451584, 1)
op587.sizes = ([25088, 18], [])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1072_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1073_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1074_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1075_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf587_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op587_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf586', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1072_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1073_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1074_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1075_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf581', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf587', get_index_6, relu, None)
        return store


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op588.unmet_dependencies = []
op588.met_dependencies = [MemoryDep('arg1076_1', c0, {c0: 2916}, None)]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (2916, 1)
op588.sizes = ([18, 18, 9], [])
arg1076_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op588_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1076_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf588', get_index_1, load, None)
        return store


op589: ExternKernelSchedulerNode(ExternKernelAlloc)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf587', mode=None), StarDep(name='buf588', mode=None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ExternKernelAlloc
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False)]
]
op589.node.kernel = extern_kernels.convolution


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 451584}, None)]
op590.unmet_dependencies = [MemoryDep('buf589', c0, {c0: 451584}, None)]
op590.met_dependencies = 
    [   MemoryDep('arg1077_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1078_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1079_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1080_1', c1, {c0: 25088, c1: 18}, None)]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (451584, 1)
op590.sizes = ([25088, 18], [])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1077_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1078_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1079_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1080_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op590_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1077_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1078_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1079_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1080_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf590', get_index_5, relu, None)
        return store


op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op591.unmet_dependencies = []
op591.met_dependencies = [MemoryDep('arg1081_1', c0, {c0: 2916}, None)]
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (2916, 1)
op591.sizes = ([18, 18, 9], [])
arg1081_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op591_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1081_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf591', get_index_1, load, None)
        return store


op592: ExternKernelSchedulerNode(ExternKernelAlloc)
op592.writes = [StarDep(name='buf592', mode=None)]
op592.unmet_dependencies = [StarDep(name='buf590', mode=None), StarDep(name='buf591', mode=None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ExternKernelAlloc
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf592.users = [NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False)]
]
op592.node.kernel = extern_kernels.convolution


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 451584}, None)]
op593.unmet_dependencies = 
    [   MemoryDep('buf587', c0, {c0: 451584}, None),
        MemoryDep('buf592', c0, {c0: 451584}, None)]
op593.met_dependencies = 
    [   MemoryDep('arg1082_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1083_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1084_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1085_1', c1, {c0: 25088, c1: 18}, None)]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op778'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op815'), can_inplace=False, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (451584, 1)
op593.sizes = ([25088, 18], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1082_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1083_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1084_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1085_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op593_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1082_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1083_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1084_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1085_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf587', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf593', get_index_6, relu, None)
        return store


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op594.unmet_dependencies = []
op594.met_dependencies = [MemoryDep('arg981_1', c0, {c0: 5832}, None)]
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (5832, 1)
op594.sizes = ([36, 18, 9], [])
arg981_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op594_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg981_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf594', get_index_1, load, None)
        return store


op595: ExternKernelSchedulerNode(ExternKernelAlloc)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf473', mode=None), StarDep(name='buf594', mode=None)]
op595.met_dependencies = []
op595.outputs = [
    buf595: ExternKernelAlloc
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf595.users = [NodeUser(node=SchedulerNode(name='op600'), can_inplace=True, is_weak=False)]
]
op595.node.kernel = extern_kernels.convolution


op596: ExternKernelSchedulerNode(ExternKernelAlloc)
op596.writes = [StarDep(name='buf596', mode=None)]
op596.unmet_dependencies = [StarDep(name='buf537', mode=None)]
op596.met_dependencies = [StarDep(name='arg986_1', mode=None)]
op596.outputs = [
    buf596: ExternKernelAlloc
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf596.users = [NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.node.kernel = extern_kernels.convolution


op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 225792}, None)]
op597.unmet_dependencies = [MemoryDep('buf596', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op597.met_dependencies = 
    [   MemoryDep('arg987_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg988_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg989_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg990_1', c1, {c0: 8, c1: 36}, None)]
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf597.users = [NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (225792, 1)
op597.sizes = ([8, 36, 28, 28], [])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg987_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg988_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg989_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg990_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op597_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf596', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg987_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg988_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg989_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg990_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf597', get_index_7, add_1, None)
        return store


op598: ExternKernelSchedulerNode(ExternKernelAlloc)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op598.met_dependencies = [StarDep(name='arg991_1', mode=None)]
op598.outputs = [
    buf598: ExternKernelAlloc
    buf598.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
    buf598.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op598.node.kernel = extern_kernels.convolution


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 225792}, None)]
op599.unmet_dependencies = [MemoryDep('buf598', 1764*c0 + c1 + 252*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg992_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg993_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg994_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg995_1', c1, {c0: 8, c1: 36}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf599.users = [NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (225792, 1)
op599.sizes = ([8, 36, 28, 28], [])
buf598_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
arg992_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg993_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg994_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg995_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op599_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 36*indirect1 + 1764*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf598', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg992_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg993_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg994_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg995_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf599', get_index_7, add_1, None)
        return store


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 225792}, None)]
op600.unmet_dependencies = 
    [   MemoryDep('buf502', c0, {c0: 225792}, None),
        MemoryDep('buf595', c0, {c0: 225792}, None),
        MemoryDep('buf597', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None),
        MemoryDep('buf599', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op600.met_dependencies = 
    [   MemoryDep('arg982_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg983_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg984_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg985_1', c1, {c0: 6272, c1: 36}, None)]
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf600.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
    ]
]
op600.group.device = cuda:0
op600.group.iteration = (225792, 1)
op600.sizes = ([8, 784, 36], [])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg982_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg983_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg984_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg985_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op600_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf595', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg982_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg983_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg984_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg985_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf502', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf597', get_index_6)
        add_3 = ops.add(add_2, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf599', get_index_7)
        add_4 = ops.add(add_3, load_7)
        relu = ops.relu(add_4)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf600', get_index_8, relu, None)
        return store


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op601.unmet_dependencies = []
op601.met_dependencies = [MemoryDep('arg1086_1', c0, {c0: 11664}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (11664, 1)
op601.sizes = ([36, 36, 9], [])
arg1086_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op601_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1086_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf601', get_index_1, load, None)
        return store


op602: ExternKernelSchedulerNode(ExternKernelAlloc)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf600', mode=None), StarDep(name='buf601', mode=None)]
op602.met_dependencies = []
op602.outputs = [
    buf602: ExternKernelAlloc
    buf602.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf602.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False)]
]
op602.node.kernel = extern_kernels.convolution


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 225792}, None)]
op603.unmet_dependencies = [MemoryDep('buf602', c0, {c0: 225792}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg1087_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1088_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1089_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1090_1', c1, {c0: 6272, c1: 36}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf603.users = [NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (225792, 1)
op603.sizes = ([6272, 36], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1087_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1088_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1089_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1090_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op603_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1087_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1088_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1089_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1090_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf603', get_index_5, relu, None)
        return store


op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op604.unmet_dependencies = []
op604.met_dependencies = [MemoryDep('arg1091_1', c0, {c0: 11664}, None)]
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf604.users = [NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op604.group.device = cuda:0
op604.group.iteration = (11664, 1)
op604.sizes = ([36, 36, 9], [])
arg1091_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op604_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1091_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf604', get_index_1, load, None)
        return store


op605: ExternKernelSchedulerNode(ExternKernelAlloc)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf603', mode=None), StarDep(name='buf604', mode=None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ExternKernelAlloc
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf605.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False)]
]
op605.node.kernel = extern_kernels.convolution


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 225792}, None)]
op606.unmet_dependencies = 
    [   MemoryDep('buf600', c0, {c0: 225792}, None),
        MemoryDep('buf605', c0, {c0: 225792}, None)]
op606.met_dependencies = 
    [   MemoryDep('arg1092_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1093_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1094_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1095_1', c1, {c0: 6272, c1: 36}, None)]
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf606.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
    ]
]
op606.group.device = cuda:0
op606.group.iteration = (225792, 1)
op606.sizes = ([6272, 36], [])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1092_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1093_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1094_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1095_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op606_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1092_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1093_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1094_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1095_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf600', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf606', get_index_6, relu, None)
        return store


op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op607.unmet_dependencies = []
op607.met_dependencies = [MemoryDep('arg1096_1', c0, {c0: 11664}, None)]
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf607.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op607.group.device = cuda:0
op607.group.iteration = (11664, 1)
op607.sizes = ([36, 36, 9], [])
arg1096_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op607_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1096_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf607', get_index_1, load, None)
        return store


op608: ExternKernelSchedulerNode(ExternKernelAlloc)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf606', mode=None), StarDep(name='buf607', mode=None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: ExternKernelAlloc
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op608.node.kernel = extern_kernels.convolution


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 225792}, None)]
op609.unmet_dependencies = [MemoryDep('buf608', c0, {c0: 225792}, None)]
op609.met_dependencies = 
    [   MemoryDep('arg1097_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1098_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1099_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1100_1', c1, {c0: 6272, c1: 36}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (225792, 1)
op609.sizes = ([6272, 36], [])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1097_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1098_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1099_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1100_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op609_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf608', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1097_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1098_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1099_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf609', get_index_5, relu, None)
        return store


op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op610.unmet_dependencies = []
op610.met_dependencies = [MemoryDep('arg1101_1', c0, {c0: 11664}, None)]
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf610.users = [NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (11664, 1)
op610.sizes = ([36, 36, 9], [])
arg1101_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op610_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1101_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf610', get_index_1, load, None)
        return store


op611: ExternKernelSchedulerNode(ExternKernelAlloc)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf609', mode=None), StarDep(name='buf610', mode=None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ExternKernelAlloc
    buf611.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf611.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False)]
]
op611.node.kernel = extern_kernels.convolution


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 225792}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf606', c0, {c0: 225792}, None),
        MemoryDep('buf611', c0, {c0: 225792}, None)]
op612.met_dependencies = 
    [   MemoryDep('arg1102_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1103_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1104_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1105_1', c1, {c0: 6272, c1: 36}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf612.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False),
    ]
]
op612.group.device = cuda:0
op612.group.iteration = (225792, 1)
op612.sizes = ([6272, 36], [])
buf611_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1102_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1103_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1104_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1105_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op612_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf606', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf612', get_index_6, relu, None)
        return store


op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op613.unmet_dependencies = []
op613.met_dependencies = [MemoryDep('arg1106_1', c0, {c0: 11664}, None)]
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (11664, 1)
op613.sizes = ([36, 36, 9], [])
arg1106_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op613_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1106_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf613', get_index_1, load, None)
        return store


op614: ExternKernelSchedulerNode(ExternKernelAlloc)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = [StarDep(name='buf612', mode=None), StarDep(name='buf613', mode=None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: ExternKernelAlloc
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf614.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=True, is_weak=False)]
]
op614.node.kernel = extern_kernels.convolution


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 225792}, None)]
op615.unmet_dependencies = [MemoryDep('buf614', c0, {c0: 225792}, None)]
op615.met_dependencies = 
    [   MemoryDep('arg1107_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1108_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1109_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1110_1', c1, {c0: 6272, c1: 36}, None)]
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (225792, 1)
op615.sizes = ([6272, 36], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1107_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1108_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1109_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1110_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op615_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf615', get_index_5, relu, None)
        return store


op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op616.unmet_dependencies = []
op616.met_dependencies = [MemoryDep('arg1111_1', c0, {c0: 11664}, None)]
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf616.users = [NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op616.group.device = cuda:0
op616.group.iteration = (11664, 1)
op616.sizes = ([36, 36, 9], [])
arg1111_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op616_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1111_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf616', get_index_1, load, None)
        return store


op617: ExternKernelSchedulerNode(ExternKernelAlloc)
op617.writes = [StarDep(name='buf617', mode=None)]
op617.unmet_dependencies = [StarDep(name='buf615', mode=None), StarDep(name='buf616', mode=None)]
op617.met_dependencies = []
op617.outputs = [
    buf617: ExternKernelAlloc
    buf617.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf617.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False)]
]
op617.node.kernel = extern_kernels.convolution


op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 225792}, None)]
op618.unmet_dependencies = 
    [   MemoryDep('buf612', c0, {c0: 225792}, None),
        MemoryDep('buf617', c0, {c0: 225792}, None)]
op618.met_dependencies = 
    [   MemoryDep('arg1112_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1113_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1114_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1115_1', c1, {c0: 6272, c1: 36}, None)]
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf618.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False),
    ]
]
op618.group.device = cuda:0
op618.group.iteration = (225792, 1)
op618.sizes = ([6272, 36], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1112_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1113_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1114_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1115_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op618_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf612', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf618', get_index_6, relu, None)
        return store


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op619.unmet_dependencies = []
op619.met_dependencies = [MemoryDep('arg1116_1', c0, {c0: 11664}, None)]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf619.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (11664, 1)
op619.sizes = ([36, 36, 9], [])
arg1116_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op619_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf619', get_index_1, load, None)
        return store


op620: ExternKernelSchedulerNode(ExternKernelAlloc)
op620.writes = [StarDep(name='buf620', mode=None)]
op620.unmet_dependencies = [StarDep(name='buf618', mode=None), StarDep(name='buf619', mode=None)]
op620.met_dependencies = []
op620.outputs = [
    buf620: ExternKernelAlloc
    buf620.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf620.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=True, is_weak=False)]
]
op620.node.kernel = extern_kernels.convolution


op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 225792}, None)]
op621.unmet_dependencies = [MemoryDep('buf620', c0, {c0: 225792}, None)]
op621.met_dependencies = 
    [   MemoryDep('arg1117_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1118_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1119_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1120_1', c1, {c0: 6272, c1: 36}, None)]
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf621.users = [NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (225792, 1)
op621.sizes = ([6272, 36], [])
buf620_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1117_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1118_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1119_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1120_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op621_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf620', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf621', get_index_5, relu, None)
        return store


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op622.unmet_dependencies = []
op622.met_dependencies = [MemoryDep('arg1121_1', c0, {c0: 11664}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf622.users = [NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op622.group.device = cuda:0
op622.group.iteration = (11664, 1)
op622.sizes = ([36, 36, 9], [])
arg1121_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op622_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1121_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf622', get_index_1, load, None)
        return store


op623: ExternKernelSchedulerNode(ExternKernelAlloc)
op623.writes = [StarDep(name='buf623', mode=None)]
op623.unmet_dependencies = [StarDep(name='buf621', mode=None), StarDep(name='buf622', mode=None)]
op623.met_dependencies = []
op623.outputs = [
    buf623: ExternKernelAlloc
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf623.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op623.node.kernel = extern_kernels.convolution


op624: SchedulerNode(ComputedBuffer)
op624.writes = [MemoryDep('buf624', c0, {c0: 225792}, None)]
op624.unmet_dependencies = 
    [   MemoryDep('buf618', c0, {c0: 225792}, None),
        MemoryDep('buf623', c0, {c0: 225792}, None)]
op624.met_dependencies = 
    [   MemoryDep('arg1122_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1123_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1124_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1125_1', c1, {c0: 6272, c1: 36}, None)]
op624.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf624.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op823'), can_inplace=False, is_weak=False),
    ]
]
op624.group.device = cuda:0
op624.group.iteration = (225792, 1)
op624.sizes = ([6272, 36], [])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1122_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1123_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1124_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1125_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op624_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf618', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf624', get_index_6, relu, None)
        return store


op625: ExternKernelSchedulerNode(ExternKernelAlloc)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = [StarDep(name='buf624', mode=None)]
op625.met_dependencies = [StarDep(name='arg1206_1', mode=None)]
op625.outputs = [
    buf625: ExternKernelAlloc
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf625.users = [NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op625.node.kernel = extern_kernels.convolution


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 451584}, None)]
op626.unmet_dependencies = [MemoryDep('buf625', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op626.met_dependencies = 
    [   MemoryDep('arg1207_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1208_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1209_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1210_1', c1, {c0: 8, c1: 18}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf626.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (451584, 1)
op626.sizes = ([8, 18, 56, 56], [])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1207_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1208_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1209_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1210_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op626_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf625', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1207_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1208_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1209_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1210_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf626', get_index_7, add_1, None)
        return store


op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op627.unmet_dependencies = []
op627.met_dependencies = [MemoryDep('arg996_1', c0, {c0: 2916}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf627.users = [NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (2916, 1)
op627.sizes = ([18, 18, 9], [])
arg996_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op627_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg996_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf627', get_index_1, load, None)
        return store


op628: ExternKernelSchedulerNode(ExternKernelAlloc)
op628.writes = [StarDep(name='buf628', mode=None)]
op628.unmet_dependencies = [StarDep(name='buf473', mode=None), StarDep(name='buf627', mode=None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: ExternKernelAlloc
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf628.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=True, is_weak=False)]
]
op628.node.kernel = extern_kernels.convolution


op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 112896}, None)]
op629.unmet_dependencies = [MemoryDep('buf628', c0, {c0: 112896}, None)]
op629.met_dependencies = 
    [   MemoryDep('arg1000_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg997_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg998_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg999_1', c1, {c0: 6272, c1: 18}, None)]
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op629.group.device = cuda:0
op629.group.iteration = (112896, 1)
op629.sizes = ([6272, 18], [])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg997_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg998_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg999_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1000_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op629_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf628', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg997_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg998_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg999_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1000_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf629', get_index_5, relu, None)
        return store


op630: SchedulerNode(ComputedBuffer)
op630.writes = [MemoryDep('buf630', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op630.unmet_dependencies = []
op630.met_dependencies = [MemoryDep('arg1001_1', c0, {c0: 11664}, None)]
op630.outputs = [
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf630.users = [NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op630.group.device = cuda:0
op630.group.iteration = (11664, 1)
op630.sizes = ([72, 18, 9], [])
arg1001_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op630_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1001_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf630', get_index_1, load, None)
        return store


op631: ExternKernelSchedulerNode(ExternKernelAlloc)
op631.writes = [StarDep(name='buf631', mode=None)]
op631.unmet_dependencies = [StarDep(name='buf629', mode=None), StarDep(name='buf630', mode=None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: ExternKernelAlloc
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf631.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False)]
]
op631.node.kernel = extern_kernels.convolution


op632: SchedulerNode(ComputedBuffer)
op632.writes = [MemoryDep('buf632', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op632.unmet_dependencies = []
op632.met_dependencies = [MemoryDep('arg1006_1', c0, {c0: 23328}, None)]
op632.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op632.group.device = cuda:0
op632.group.iteration = (23328, 1)
op632.sizes = ([72, 36, 9], [])
arg1006_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf632_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op632_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1006_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf632', get_index_1, load, None)
        return store


op633: ExternKernelSchedulerNode(ExternKernelAlloc)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf502', mode=None), StarDep(name='buf632', mode=None)]
op633.met_dependencies = []
op633.outputs = [
    buf633: ExternKernelAlloc
    buf633.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf633.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False)]
]
op633.node.kernel = extern_kernels.convolution


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 112896}, None)]
op634.unmet_dependencies = 
    [   MemoryDep('buf631', c0, {c0: 112896}, None),
        MemoryDep('buf633', c0, {c0: 112896}, None)]
op634.met_dependencies = 
    [   MemoryDep('arg1002_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1003_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1004_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1005_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1007_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1008_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1009_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1010_1', c1, {c0: 1568, c1: 72}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf634.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (112896, 1)
op634.sizes = ([1568, 72], [])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1002_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1003_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1004_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1005_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf633_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1007_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1008_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1009_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1010_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op634_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf631', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1002_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1003_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1004_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1005_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf633', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1007_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1008_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1009_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1010_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf634', get_index_10, add_4, None)
        return store


op635: ExternKernelSchedulerNode(ExternKernelAlloc)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op635.met_dependencies = [StarDep(name='arg1011_1', mode=None)]
op635.outputs = [
    buf635: ExternKernelAlloc
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = extern_kernels.convolution


op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 112896}, None)]
op636.unmet_dependencies = [MemoryDep('buf635', 3528*c0 + c1 + 504*tmp0 + 72*tmp1, {c0: 8, c1: 72}, None)]
op636.met_dependencies = 
    [   MemoryDep('arg1012_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1013_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1014_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1015_1', c1, {c0: 8, c1: 72}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
    buf636.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op636.group.device = cuda:0
op636.group.iteration = (112896, 1)
op636.sizes = ([8, 72, 14, 14], [])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
arg1012_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1013_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1014_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1015_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
class op636_loop_body:
    var_ranges = {z0: 8, z1: 72, z2: 14, z3: 14}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 72*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 14112*z0 + 196*z1 + 14*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf635', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1012_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1013_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1014_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1015_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf636', get_index_7, add_1, None)
        return store


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 112896}, None)]
op637.unmet_dependencies = 
    [   MemoryDep('buf537', c0, {c0: 112896}, None),
        MemoryDep('buf634', c0, {c0: 112896}, None),
        MemoryDep('buf636', 14112*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 72}, None)]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf637.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
    ]
]
op637.group.device = cuda:0
op637.group.iteration = (112896, 1)
op637.sizes = ([8, 196, 72], [])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op637_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 72}
    index0 = 14112*z0 + 72*z1 + z2
    index1 = 14112*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf634', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf537', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf636', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf637', get_index_3, relu, None)
        return store


op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op638.unmet_dependencies = []
op638.met_dependencies = [MemoryDep('arg1126_1', c0, {c0: 46656}, None)]
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf638.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (46656, 1)
op638.sizes = ([72, 72, 9], [])
arg1126_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op638_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1126_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf638', get_index_1, load, None)
        return store


op639: ExternKernelSchedulerNode(ExternKernelAlloc)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = [StarDep(name='buf637', mode=None), StarDep(name='buf638', mode=None)]
op639.met_dependencies = []
op639.outputs = [
    buf639: ExternKernelAlloc
    buf639.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf639.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False)]
]
op639.node.kernel = extern_kernels.convolution


op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 112896}, None)]
op640.unmet_dependencies = [MemoryDep('buf639', c0, {c0: 112896}, None)]
op640.met_dependencies = 
    [   MemoryDep('arg1127_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1128_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1129_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1130_1', c1, {c0: 1568, c1: 72}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf640.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op640.group.device = cuda:0
op640.group.iteration = (112896, 1)
op640.sizes = ([1568, 72], [])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1127_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1128_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1129_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1130_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op640_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf639', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf640', get_index_5, relu, None)
        return store


op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op641.unmet_dependencies = []
op641.met_dependencies = [MemoryDep('arg1131_1', c0, {c0: 46656}, None)]
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf641.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (46656, 1)
op641.sizes = ([72, 72, 9], [])
arg1131_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op641_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1131_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf641', get_index_1, load, None)
        return store


op642: ExternKernelSchedulerNode(ExternKernelAlloc)
op642.writes = [StarDep(name='buf642', mode=None)]
op642.unmet_dependencies = [StarDep(name='buf640', mode=None), StarDep(name='buf641', mode=None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: ExternKernelAlloc
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf642.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False)]
]
op642.node.kernel = extern_kernels.convolution


op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 112896}, None)]
op643.unmet_dependencies = 
    [   MemoryDep('buf637', c0, {c0: 112896}, None),
        MemoryDep('buf642', c0, {c0: 112896}, None)]
op643.met_dependencies = 
    [   MemoryDep('arg1132_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1133_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1134_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1135_1', c1, {c0: 1568, c1: 72}, None)]
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf643.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False),
    ]
]
op643.group.device = cuda:0
op643.group.iteration = (112896, 1)
op643.sizes = ([1568, 72], [])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1132_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1133_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1134_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1135_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf643_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op643_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf642', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf637', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf643', get_index_6, relu, None)
        return store


op644: SchedulerNode(ComputedBuffer)
op644.writes = [MemoryDep('buf644', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op644.unmet_dependencies = []
op644.met_dependencies = [MemoryDep('arg1136_1', c0, {c0: 46656}, None)]
op644.outputs = [
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf644.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op644.group.device = cuda:0
op644.group.iteration = (46656, 1)
op644.sizes = ([72, 72, 9], [])
arg1136_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op644_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1136_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf644', get_index_1, load, None)
        return store


op645: ExternKernelSchedulerNode(ExternKernelAlloc)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = [StarDep(name='buf643', mode=None), StarDep(name='buf644', mode=None)]
op645.met_dependencies = []
op645.outputs = [
    buf645: ExternKernelAlloc
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf645.users = [NodeUser(node=SchedulerNode(name='op646'), can_inplace=True, is_weak=False)]
]
op645.node.kernel = extern_kernels.convolution


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 112896}, None)]
op646.unmet_dependencies = [MemoryDep('buf645', c0, {c0: 112896}, None)]
op646.met_dependencies = 
    [   MemoryDep('arg1137_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1138_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1139_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1140_1', c1, {c0: 1568, c1: 72}, None)]
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf646.users = [NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (112896, 1)
op646.sizes = ([1568, 72], [])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1137_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1138_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1139_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1140_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op646_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf645', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf646', get_index_5, relu, None)
        return store


op647: SchedulerNode(ComputedBuffer)
op647.writes = [MemoryDep('buf647', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op647.unmet_dependencies = []
op647.met_dependencies = [MemoryDep('arg1141_1', c0, {c0: 46656}, None)]
op647.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf647.users = [NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op647.group.device = cuda:0
op647.group.iteration = (46656, 1)
op647.sizes = ([72, 72, 9], [])
arg1141_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op647_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1141_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf647', get_index_1, load, None)
        return store


op648: ExternKernelSchedulerNode(ExternKernelAlloc)
op648.writes = [StarDep(name='buf648', mode=None)]
op648.unmet_dependencies = [StarDep(name='buf646', mode=None), StarDep(name='buf647', mode=None)]
op648.met_dependencies = []
op648.outputs = [
    buf648: ExternKernelAlloc
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf648.users = [NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False)]
]
op648.node.kernel = extern_kernels.convolution


op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 112896}, None)]
op649.unmet_dependencies = 
    [   MemoryDep('buf643', c0, {c0: 112896}, None),
        MemoryDep('buf648', c0, {c0: 112896}, None)]
op649.met_dependencies = 
    [   MemoryDep('arg1142_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1143_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1144_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1145_1', c1, {c0: 1568, c1: 72}, None)]
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf649.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False),
    ]
]
op649.group.device = cuda:0
op649.group.iteration = (112896, 1)
op649.sizes = ([1568, 72], [])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1142_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1143_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1144_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1145_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op649_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf648', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf643', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf649', get_index_6, relu, None)
        return store


op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op650.unmet_dependencies = []
op650.met_dependencies = [MemoryDep('arg1146_1', c0, {c0: 46656}, None)]
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf650.users = [NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op650.group.device = cuda:0
op650.group.iteration = (46656, 1)
op650.sizes = ([72, 72, 9], [])
arg1146_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op650_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1146_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf650', get_index_1, load, None)
        return store


op651: ExternKernelSchedulerNode(ExternKernelAlloc)
op651.writes = [StarDep(name='buf651', mode=None)]
op651.unmet_dependencies = [StarDep(name='buf649', mode=None), StarDep(name='buf650', mode=None)]
op651.met_dependencies = []
op651.outputs = [
    buf651: ExternKernelAlloc
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf651.users = [NodeUser(node=SchedulerNode(name='op652'), can_inplace=True, is_weak=False)]
]
op651.node.kernel = extern_kernels.convolution


op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 112896}, None)]
op652.unmet_dependencies = [MemoryDep('buf651', c0, {c0: 112896}, None)]
op652.met_dependencies = 
    [   MemoryDep('arg1147_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1148_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1149_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1150_1', c1, {c0: 1568, c1: 72}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf652.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (112896, 1)
op652.sizes = ([1568, 72], [])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1147_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1148_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1149_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1150_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op652_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf651', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf652', get_index_5, relu, None)
        return store


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op653.unmet_dependencies = []
op653.met_dependencies = [MemoryDep('arg1151_1', c0, {c0: 46656}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf653.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (46656, 1)
op653.sizes = ([72, 72, 9], [])
arg1151_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op653_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1151_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf653', get_index_1, load, None)
        return store


op654: ExternKernelSchedulerNode(ExternKernelAlloc)
op654.writes = [StarDep(name='buf654', mode=None)]
op654.unmet_dependencies = [StarDep(name='buf652', mode=None), StarDep(name='buf653', mode=None)]
op654.met_dependencies = []
op654.outputs = [
    buf654: ExternKernelAlloc
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf654.users = [NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False)]
]
op654.node.kernel = extern_kernels.convolution


op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 112896}, None)]
op655.unmet_dependencies = 
    [   MemoryDep('buf649', c0, {c0: 112896}, None),
        MemoryDep('buf654', c0, {c0: 112896}, None)]
op655.met_dependencies = 
    [   MemoryDep('arg1152_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1153_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1154_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1155_1', c1, {c0: 1568, c1: 72}, None)]
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf655.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False),
    ]
]
op655.group.device = cuda:0
op655.group.iteration = (112896, 1)
op655.sizes = ([1568, 72], [])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1152_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1153_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1154_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1155_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op655_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf654', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf649', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf655', get_index_6, relu, None)
        return store


op656: SchedulerNode(ComputedBuffer)
op656.writes = [MemoryDep('buf656', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op656.unmet_dependencies = []
op656.met_dependencies = [MemoryDep('arg1156_1', c0, {c0: 46656}, None)]
op656.outputs = [
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op656.group.device = cuda:0
op656.group.iteration = (46656, 1)
op656.sizes = ([72, 72, 9], [])
arg1156_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op656_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1156_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf656', get_index_1, load, None)
        return store


op657: ExternKernelSchedulerNode(ExternKernelAlloc)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf655', mode=None), StarDep(name='buf656', mode=None)]
op657.met_dependencies = []
op657.outputs = [
    buf657: ExternKernelAlloc
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf657.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False)]
]
op657.node.kernel = extern_kernels.convolution


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 112896}, None)]
op658.unmet_dependencies = [MemoryDep('buf657', c0, {c0: 112896}, None)]
op658.met_dependencies = 
    [   MemoryDep('arg1157_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1158_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1159_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1160_1', c1, {c0: 1568, c1: 72}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op658.group.device = cuda:0
op658.group.iteration = (112896, 1)
op658.sizes = ([1568, 72], [])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1157_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1158_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1159_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1160_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op658_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf657', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf658', get_index_5, relu, None)
        return store


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op659.unmet_dependencies = []
op659.met_dependencies = [MemoryDep('arg1161_1', c0, {c0: 46656}, None)]
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf659.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op659.group.device = cuda:0
op659.group.iteration = (46656, 1)
op659.sizes = ([72, 72, 9], [])
arg1161_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf659_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op659_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1161_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf659', get_index_1, load, None)
        return store


op660: ExternKernelSchedulerNode(ExternKernelAlloc)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf658', mode=None), StarDep(name='buf659', mode=None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: ExternKernelAlloc
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf660.users = [NodeUser(node=SchedulerNode(name='op661'), can_inplace=True, is_weak=False)]
]
op660.node.kernel = extern_kernels.convolution


op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 112896}, None)]
op661.unmet_dependencies = 
    [   MemoryDep('buf655', c0, {c0: 112896}, None),
        MemoryDep('buf660', c0, {c0: 112896}, None)]
op661.met_dependencies = 
    [   MemoryDep('arg1162_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1163_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1164_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1165_1', c1, {c0: 1568, c1: 72}, None)]
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf661.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op829'), can_inplace=False, is_weak=False),
    ]
]
op661.group.device = cuda:0
op661.group.iteration = (112896, 1)
op661.sizes = ([1568, 72], [])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1162_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1163_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1164_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1165_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op661_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf655', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf661', get_index_6, relu, None)
        return store


op662: ExternKernelSchedulerNode(ExternKernelAlloc)
op662.writes = [StarDep(name='buf662', mode=None)]
op662.unmet_dependencies = [StarDep(name='buf661', mode=None)]
op662.met_dependencies = [StarDep(name='arg1211_1', mode=None)]
op662.outputs = [
    buf662: ExternKernelAlloc
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf662.users = [NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False)]
]
op662.node.kernel = extern_kernels.convolution


op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 451584}, None)]
op663.unmet_dependencies = [MemoryDep('buf662', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op663.met_dependencies = 
    [   MemoryDep('arg1212_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1213_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1214_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1215_1', c1, {c0: 8, c1: 18}, None)]
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf663.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op663.group.device = cuda:0
op663.group.iteration = (451584, 1)
op663.sizes = ([8, 18, 56, 56], [])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg1212_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1213_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1214_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1215_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op663_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf662', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1212_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1213_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1214_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1215_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf663', get_index_7, add_1, None)
        return store


op664: SchedulerNode(ComputedBuffer)
op664.writes = [MemoryDep('buf664', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op664.unmet_dependencies = []
op664.met_dependencies = [MemoryDep('arg1016_1', c0, {c0: 2916}, None)]
op664.outputs = [
    buf664: ComputedBuffer
    buf664.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf664.users = [NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op664.group.device = cuda:0
op664.group.iteration = (2916, 1)
op664.sizes = ([18, 18, 9], [])
arg1016_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf664_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op664_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1016_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf664', get_index_1, load, None)
        return store


op665: ExternKernelSchedulerNode(ExternKernelAlloc)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf473', mode=None), StarDep(name='buf664', mode=None)]
op665.met_dependencies = []
op665.outputs = [
    buf665: ExternKernelAlloc
    buf665.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf665.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False)]
]
op665.node.kernel = extern_kernels.convolution


op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 112896}, None)]
op666.unmet_dependencies = [MemoryDep('buf665', c0, {c0: 112896}, None)]
op666.met_dependencies = 
    [   MemoryDep('arg1017_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1018_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1019_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1020_1', c1, {c0: 6272, c1: 18}, None)]
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf666.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op666.group.device = cuda:0
op666.group.iteration = (112896, 1)
op666.sizes = ([6272, 18], [])
buf665_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1017_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1018_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1019_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1020_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op666_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf665', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1017_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1018_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1019_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1020_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf666', get_index_5, relu, None)
        return store


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op667.unmet_dependencies = []
op667.met_dependencies = [MemoryDep('arg1021_1', c0, {c0: 2916}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf667.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op667.group.device = cuda:0
op667.group.iteration = (2916, 1)
op667.sizes = ([18, 18, 9], [])
arg1021_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op667_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1021_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf667', get_index_1, load, None)
        return store


op668: ExternKernelSchedulerNode(ExternKernelAlloc)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf666', mode=None), StarDep(name='buf667', mode=None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ExternKernelAlloc
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf668.users = [NodeUser(node=SchedulerNode(name='op669'), can_inplace=True, is_weak=False)]
]
op668.node.kernel = extern_kernels.convolution


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 28224}, None)]
op669.unmet_dependencies = [MemoryDep('buf668', c0, {c0: 28224}, None)]
op669.met_dependencies = 
    [   MemoryDep('arg1022_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1023_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1024_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1025_1', c1, {c0: 1568, c1: 18}, None)]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (28224, 1)
op669.sizes = ([1568, 18], [])
buf668_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg1022_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1023_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1024_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1025_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
class op669_loop_body:
    var_ranges = {z0: 1568, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf668', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1022_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1023_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1024_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1025_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf669', get_index_5, relu, None)
        return store


op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', 162*c0 + c1 + 18*c2, {c0: 144, c1: 18, c2: 9}, None)]
op670.unmet_dependencies = []
op670.met_dependencies = [MemoryDep('arg1026_1', c0, {c0: 23328}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
    buf670.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op670.group.device = cuda:0
op670.group.iteration = (23328, 1)
op670.sizes = ([144, 18, 9], [])
arg1026_1_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 9, 3, 1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
class op670_loop_body:
    var_ranges = {z0: 144, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1026_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf670', get_index_1, load, None)
        return store


op671: ExternKernelSchedulerNode(ExternKernelAlloc)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf669', mode=None), StarDep(name='buf670', mode=None)]
op671.met_dependencies = []
op671.outputs = [
    buf671: ExternKernelAlloc
    buf671.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf671.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=True, is_weak=False)]
]
op671.node.kernel = extern_kernels.convolution


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op672.unmet_dependencies = []
op672.met_dependencies = [MemoryDep('arg1031_1', c0, {c0: 11664}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (11664, 1)
op672.sizes = ([36, 36, 9], [])
arg1031_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op672_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1031_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf672', get_index_1, load, None)
        return store


op673: ExternKernelSchedulerNode(ExternKernelAlloc)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf502', mode=None), StarDep(name='buf672', mode=None)]
op673.met_dependencies = []
op673.outputs = [
    buf673: ExternKernelAlloc
    buf673.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf673.users = [NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False)]
]
op673.node.kernel = extern_kernels.convolution


op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 56448}, None)]
op674.unmet_dependencies = [MemoryDep('buf673', c0, {c0: 56448}, None)]
op674.met_dependencies = 
    [   MemoryDep('arg1032_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1033_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1034_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1035_1', c1, {c0: 1568, c1: 36}, None)]
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf674.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op674.group.device = cuda:0
op674.group.iteration = (56448, 1)
op674.sizes = ([1568, 36], [])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg1032_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1033_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1034_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1035_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
class op674_loop_body:
    var_ranges = {z0: 1568, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1032_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1033_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1034_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1035_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf674', get_index_5, relu, None)
        return store


op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', 324*c0 + c1 + 36*c2, {c0: 144, c1: 36, c2: 9}, None)]
op675.unmet_dependencies = []
op675.met_dependencies = [MemoryDep('arg1036_1', c0, {c0: 46656}, None)]
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
    buf675.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op675.group.device = cuda:0
op675.group.iteration = (46656, 1)
op675.sizes = ([144, 36, 9], [])
arg1036_1_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 9, 3, 1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
class op675_loop_body:
    var_ranges = {z0: 144, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1036_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf675', get_index_1, load, None)
        return store


op676: ExternKernelSchedulerNode(ExternKernelAlloc)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf674', mode=None), StarDep(name='buf675', mode=None)]
op676.met_dependencies = []
op676.outputs = [
    buf676: ExternKernelAlloc
    buf676.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf676.users = [NodeUser(node=SchedulerNode(name='op677'), can_inplace=True, is_weak=False)]
]
op676.node.kernel = extern_kernels.convolution


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 56448}, None)]
op677.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 56448}, None),
        MemoryDep('buf676', c0, {c0: 56448}, None)]
op677.met_dependencies = 
    [   MemoryDep('arg1027_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1028_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1029_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1030_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1037_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1038_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1039_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1040_1', c1, {c0: 392, c1: 144}, None)]
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf677.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (56448, 1)
op677.sizes = ([392, 144], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1027_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1028_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1029_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1030_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1037_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1038_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1039_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1040_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op677_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1027_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1028_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1029_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1030_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf676', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1037_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1038_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1039_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1040_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf677', get_index_10, add_4, None)
        return store


op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', 648*c0 + c1 + 72*c2, {c0: 144, c1: 72, c2: 9}, None)]
op678.unmet_dependencies = []
op678.met_dependencies = [MemoryDep('arg1041_1', c0, {c0: 93312}, None)]
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
    buf678.users = [NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False)]
]
op678.group.device = cuda:0
op678.group.iteration = (93312, 1)
op678.sizes = ([144, 72, 9], [])
arg1041_1_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 9, 3, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
class op678_loop_body:
    var_ranges = {z0: 144, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1041_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf678', get_index_1, load, None)
        return store


op679: ExternKernelSchedulerNode(ExternKernelAlloc)
op679.writes = [StarDep(name='buf679', mode=None)]
op679.unmet_dependencies = [StarDep(name='buf537', mode=None), StarDep(name='buf678', mode=None)]
op679.met_dependencies = []
op679.outputs = [
    buf679: ExternKernelAlloc
    buf679.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf679.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False)]
]
op679.node.kernel = extern_kernels.convolution


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 56448}, None)]
op680.unmet_dependencies = 
    [   MemoryDep('buf566', c0, {c0: 56448}, None),
        MemoryDep('buf677', c0, {c0: 56448}, None),
        MemoryDep('buf679', c0, {c0: 56448}, None)]
op680.met_dependencies = 
    [   MemoryDep('arg1042_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1043_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1044_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1045_1', c1, {c0: 392, c1: 144}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf680.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op680.group.device = cuda:0
op680.group.iteration = (56448, 1)
op680.sizes = ([392, 144], [])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1042_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1043_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1044_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1045_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op680_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf677', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf679', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1042_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1043_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1044_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1045_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf566', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf680', get_index_7, relu, None)
        return store


op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op681.unmet_dependencies = []
op681.met_dependencies = [MemoryDep('arg1166_1', c0, {c0: 186624}, None)]
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf681.users = [NodeUser(node=ExternKernelSchedulerNode(name='op682'), can_inplace=False, is_weak=False)]
]
op681.group.device = cuda:0
op681.group.iteration = (186624, 1)
op681.sizes = ([144, 144, 9], [])
arg1166_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op681_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1166_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf681', get_index_1, load, None)
        return store


op682: ExternKernelSchedulerNode(ExternKernelAlloc)
op682.writes = [StarDep(name='buf682', mode=None)]
op682.unmet_dependencies = [StarDep(name='buf680', mode=None), StarDep(name='buf681', mode=None)]
op682.met_dependencies = []
op682.outputs = [
    buf682: ExternKernelAlloc
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf682.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=True, is_weak=False)]
]
op682.node.kernel = extern_kernels.convolution


op683: SchedulerNode(ComputedBuffer)
op683.writes = [MemoryDep('buf683', c0, {c0: 56448}, None)]
op683.unmet_dependencies = [MemoryDep('buf682', c0, {c0: 56448}, None)]
op683.met_dependencies = 
    [   MemoryDep('arg1167_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1168_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1169_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1170_1', c1, {c0: 392, c1: 144}, None)]
op683.outputs = [
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf683.users = [NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False)]
]
op683.group.device = cuda:0
op683.group.iteration = (56448, 1)
op683.sizes = ([392, 144], [])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1167_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1168_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1169_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1170_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op683_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf682', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf683', get_index_5, relu, None)
        return store


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op684.unmet_dependencies = []
op684.met_dependencies = [MemoryDep('arg1171_1', c0, {c0: 186624}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf684.users = [NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False)]
]
op684.group.device = cuda:0
op684.group.iteration = (186624, 1)
op684.sizes = ([144, 144, 9], [])
arg1171_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op684_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1171_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf684', get_index_1, load, None)
        return store


op685: ExternKernelSchedulerNode(ExternKernelAlloc)
op685.writes = [StarDep(name='buf685', mode=None)]
op685.unmet_dependencies = [StarDep(name='buf683', mode=None), StarDep(name='buf684', mode=None)]
op685.met_dependencies = []
op685.outputs = [
    buf685: ExternKernelAlloc
    buf685.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf685.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False)]
]
op685.node.kernel = extern_kernels.convolution


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 56448}, None)]
op686.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 56448}, None),
        MemoryDep('buf685', c0, {c0: 56448}, None)]
op686.met_dependencies = 
    [   MemoryDep('arg1172_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1173_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1174_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1175_1', c1, {c0: 392, c1: 144}, None)]
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf686.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (56448, 1)
op686.sizes = ([392, 144], [])
buf685_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1172_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1173_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1174_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1175_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf686_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op686_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf685', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf680', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf686', get_index_6, relu, None)
        return store


op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op687.unmet_dependencies = []
op687.met_dependencies = [MemoryDep('arg1176_1', c0, {c0: 186624}, None)]
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf687.users = [NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False)]
]
op687.group.device = cuda:0
op687.group.iteration = (186624, 1)
op687.sizes = ([144, 144, 9], [])
arg1176_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op687_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1176_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf687', get_index_1, load, None)
        return store


op688: ExternKernelSchedulerNode(ExternKernelAlloc)
op688.writes = [StarDep(name='buf688', mode=None)]
op688.unmet_dependencies = [StarDep(name='buf686', mode=None), StarDep(name='buf687', mode=None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: ExternKernelAlloc
    buf688.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf688.users = [NodeUser(node=SchedulerNode(name='op689'), can_inplace=True, is_weak=False)]
]
op688.node.kernel = extern_kernels.convolution


op689: SchedulerNode(ComputedBuffer)
op689.writes = [MemoryDep('buf689', c0, {c0: 56448}, None)]
op689.unmet_dependencies = [MemoryDep('buf688', c0, {c0: 56448}, None)]
op689.met_dependencies = 
    [   MemoryDep('arg1177_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1178_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1179_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1180_1', c1, {c0: 392, c1: 144}, None)]
op689.outputs = [
    buf689: ComputedBuffer
    buf689.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf689.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op689.group.device = cuda:0
op689.group.iteration = (56448, 1)
op689.sizes = ([392, 144], [])
buf688_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1177_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1178_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1179_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1180_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf689_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op689_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf688', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf689', get_index_5, relu, None)
        return store


op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op690.unmet_dependencies = []
op690.met_dependencies = [MemoryDep('arg1181_1', c0, {c0: 186624}, None)]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf690.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op690.group.device = cuda:0
op690.group.iteration = (186624, 1)
op690.sizes = ([144, 144, 9], [])
arg1181_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf690_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op690_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1181_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf690', get_index_1, load, None)
        return store


op691: ExternKernelSchedulerNode(ExternKernelAlloc)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf689', mode=None), StarDep(name='buf690', mode=None)]
op691.met_dependencies = []
op691.outputs = [
    buf691: ExternKernelAlloc
    buf691.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf691.users = [NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False)]
]
op691.node.kernel = extern_kernels.convolution


op692: SchedulerNode(ComputedBuffer)
op692.writes = [MemoryDep('buf692', c0, {c0: 56448}, None)]
op692.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 56448}, None),
        MemoryDep('buf691', c0, {c0: 56448}, None)]
op692.met_dependencies = 
    [   MemoryDep('arg1182_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1183_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1184_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1185_1', c1, {c0: 392, c1: 144}, None)]
op692.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf692.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False),
    ]
]
op692.group.device = cuda:0
op692.group.iteration = (56448, 1)
op692.sizes = ([392, 144], [])
buf691_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1182_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1183_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1184_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1185_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf692_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op692_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf686', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf692', get_index_6, relu, None)
        return store


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op693.unmet_dependencies = []
op693.met_dependencies = [MemoryDep('arg1186_1', c0, {c0: 186624}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf693.users = [NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (186624, 1)
op693.sizes = ([144, 144, 9], [])
arg1186_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op693_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1186_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf693', get_index_1, load, None)
        return store


op694: ExternKernelSchedulerNode(ExternKernelAlloc)
op694.writes = [StarDep(name='buf694', mode=None)]
op694.unmet_dependencies = [StarDep(name='buf692', mode=None), StarDep(name='buf693', mode=None)]
op694.met_dependencies = []
op694.outputs = [
    buf694: ExternKernelAlloc
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf694.users = [NodeUser(node=SchedulerNode(name='op695'), can_inplace=True, is_weak=False)]
]
op694.node.kernel = extern_kernels.convolution


op695: SchedulerNode(ComputedBuffer)
op695.writes = [MemoryDep('buf695', c0, {c0: 56448}, None)]
op695.unmet_dependencies = [MemoryDep('buf694', c0, {c0: 56448}, None)]
op695.met_dependencies = 
    [   MemoryDep('arg1187_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1188_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1189_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1190_1', c1, {c0: 392, c1: 144}, None)]
op695.outputs = [
    buf695: ComputedBuffer
    buf695.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf695.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op695.group.device = cuda:0
op695.group.iteration = (56448, 1)
op695.sizes = ([392, 144], [])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1187_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1188_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1189_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1190_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op695_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf694', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf695', get_index_5, relu, None)
        return store


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op696.unmet_dependencies = []
op696.met_dependencies = [MemoryDep('arg1191_1', c0, {c0: 186624}, None)]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (186624, 1)
op696.sizes = ([144, 144, 9], [])
arg1191_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op696_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1191_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf696', get_index_1, load, None)
        return store


op697: ExternKernelSchedulerNode(ExternKernelAlloc)
op697.writes = [StarDep(name='buf697', mode=None)]
op697.unmet_dependencies = [StarDep(name='buf695', mode=None), StarDep(name='buf696', mode=None)]
op697.met_dependencies = []
op697.outputs = [
    buf697: ExternKernelAlloc
    buf697.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf697.users = [NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False)]
]
op697.node.kernel = extern_kernels.convolution


op698: SchedulerNode(ComputedBuffer)
op698.writes = [MemoryDep('buf698', c0, {c0: 56448}, None)]
op698.unmet_dependencies = 
    [   MemoryDep('buf692', c0, {c0: 56448}, None),
        MemoryDep('buf697', c0, {c0: 56448}, None)]
op698.met_dependencies = 
    [   MemoryDep('arg1192_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1193_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1194_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1195_1', c1, {c0: 392, c1: 144}, None)]
op698.outputs = [
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf698.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False),
    ]
]
op698.group.device = cuda:0
op698.group.iteration = (56448, 1)
op698.sizes = ([392, 144], [])
buf697_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1192_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1193_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1194_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1195_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op698_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf697', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf692', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf698', get_index_6, relu, None)
        return store


op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op699.unmet_dependencies = []
op699.met_dependencies = [MemoryDep('arg1196_1', c0, {c0: 186624}, None)]
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf699.users = [NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op699.group.device = cuda:0
op699.group.iteration = (186624, 1)
op699.sizes = ([144, 144, 9], [])
arg1196_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op699_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1196_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf699', get_index_1, load, None)
        return store


op700: ExternKernelSchedulerNode(ExternKernelAlloc)
op700.writes = [StarDep(name='buf700', mode=None)]
op700.unmet_dependencies = [StarDep(name='buf698', mode=None), StarDep(name='buf699', mode=None)]
op700.met_dependencies = []
op700.outputs = [
    buf700: ExternKernelAlloc
    buf700.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf700.users = [NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False)]
]
op700.node.kernel = extern_kernels.convolution


op701: SchedulerNode(ComputedBuffer)
op701.writes = [MemoryDep('buf701', c0, {c0: 56448}, None)]
op701.unmet_dependencies = [MemoryDep('buf700', c0, {c0: 56448}, None)]
op701.met_dependencies = 
    [   MemoryDep('arg1197_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1198_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1199_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1200_1', c1, {c0: 392, c1: 144}, None)]
op701.outputs = [
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf701.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op701.group.device = cuda:0
op701.group.iteration = (56448, 1)
op701.sizes = ([392, 144], [])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1197_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1198_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1199_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1200_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op701_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf700', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf701', get_index_5, relu, None)
        return store


op702: SchedulerNode(ComputedBuffer)
op702.writes = [MemoryDep('buf702', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op702.unmet_dependencies = []
op702.met_dependencies = [MemoryDep('arg1201_1', c0, {c0: 186624}, None)]
op702.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf702.users = [NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op702.group.device = cuda:0
op702.group.iteration = (186624, 1)
op702.sizes = ([144, 144, 9], [])
arg1201_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op702_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1201_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf702', get_index_1, load, None)
        return store


op703: ExternKernelSchedulerNode(ExternKernelAlloc)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = [StarDep(name='buf701', mode=None), StarDep(name='buf702', mode=None)]
op703.met_dependencies = []
op703.outputs = [
    buf703: ExternKernelAlloc
    buf703.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf703.users = [NodeUser(node=SchedulerNode(name='op704'), can_inplace=True, is_weak=False)]
]
op703.node.kernel = extern_kernels.convolution


op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 56448}, None)]
op704.unmet_dependencies = 
    [   MemoryDep('buf698', c0, {c0: 56448}, None),
        MemoryDep('buf703', c0, {c0: 56448}, None)]
op704.met_dependencies = 
    [   MemoryDep('arg1202_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1203_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1204_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1205_1', c1, {c0: 392, c1: 144}, None)]
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf704.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op830'), can_inplace=True, is_weak=False),
    ]
]
op704.group.device = cuda:0
op704.group.iteration = (56448, 1)
op704.sizes = ([392, 144], [])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1202_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1203_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1204_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1205_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf704_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op704_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf703', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf698', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf704', get_index_6, relu, None)
        return store


op705: ExternKernelSchedulerNode(ExternKernelAlloc)
op705.writes = [StarDep(name='buf705', mode=None)]
op705.unmet_dependencies = [StarDep(name='buf704', mode=None)]
op705.met_dependencies = [StarDep(name='arg1216_1', mode=None)]
op705.outputs = [
    buf705: ExternKernelAlloc
    buf705.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
    buf705.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
]
op705.node.kernel = extern_kernels.convolution


op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 451584}, None)]
op706.unmet_dependencies = [MemoryDep('buf705', 882*c0 + c1 + 126*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op706.met_dependencies = 
    [   MemoryDep('arg1217_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1218_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1219_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1220_1', c1, {c0: 8, c1: 18}, None)]
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf706.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False)]
]
op706.group.device = cuda:0
op706.group.iteration = (451584, 1)
op706.sizes = ([8, 18, 56, 56], [])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
arg1217_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1218_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1219_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1220_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op706_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 126*indirect0 + 18*indirect1 + 882*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf705', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1217_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1218_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1219_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1220_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf706', get_index_7, add_1, None)
        return store


op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op707.unmet_dependencies = 
    [   MemoryDep('buf593', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf626', c0, {c0: 451584}, None),
        MemoryDep('buf663', c0, {c0: 451584}, None),
        MemoryDep('buf706', c0, {c0: 451584}, None)]
op707.met_dependencies = []
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf707.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op713'), can_inplace=True, is_weak=False),
    ]
]
op707.group.device = cuda:0
op707.group.iteration = (451584, 1)
op707.sizes = ([8, 18, 3136], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op707_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf626', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf663', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf706', get_index_3)
        add_2 = ops.add(add_1, load_3)
        relu = ops.relu(add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf707', get_index_4, relu, None)
        return store


op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op708.unmet_dependencies = []
op708.met_dependencies = [MemoryDep('arg1286_1', c0, {c0: 2916}, None)]
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf708.users = [NodeUser(node=ExternKernelSchedulerNode(name='op709'), can_inplace=False, is_weak=False)]
]
op708.group.device = cuda:0
op708.group.iteration = (2916, 1)
op708.sizes = ([18, 18, 9], [])
arg1286_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op708_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1286_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf708', get_index_1, load, None)
        return store


op709: ExternKernelSchedulerNode(ExternKernelAlloc)
op709.writes = [StarDep(name='buf709', mode=None)]
op709.unmet_dependencies = [StarDep(name='buf707', mode=None), StarDep(name='buf708', mode=None)]
op709.met_dependencies = []
op709.outputs = [
    buf709: ExternKernelAlloc
    buf709.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf709.users = [NodeUser(node=SchedulerNode(name='op710'), can_inplace=True, is_weak=False)]
]
op709.node.kernel = extern_kernels.convolution


op710: SchedulerNode(ComputedBuffer)
op710.writes = [MemoryDep('buf710', c0, {c0: 451584}, None)]
op710.unmet_dependencies = [MemoryDep('buf709', c0, {c0: 451584}, None)]
op710.met_dependencies = 
    [   MemoryDep('arg1287_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1288_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1289_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1290_1', c1, {c0: 25088, c1: 18}, None)]
op710.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf710.users = [NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op710.group.device = cuda:0
op710.group.iteration = (451584, 1)
op710.sizes = ([25088, 18], [])
buf709_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1287_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1288_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1289_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1290_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf710_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op710_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf709', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1288_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf710', get_index_5, relu, None)
        return store


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op711.unmet_dependencies = []
op711.met_dependencies = [MemoryDep('arg1291_1', c0, {c0: 2916}, None)]
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (2916, 1)
op711.sizes = ([18, 18, 9], [])
arg1291_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op711_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1291_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf711', get_index_1, load, None)
        return store


op712: ExternKernelSchedulerNode(ExternKernelAlloc)
op712.writes = [StarDep(name='buf712', mode=None)]
op712.unmet_dependencies = [StarDep(name='buf710', mode=None), StarDep(name='buf711', mode=None)]
op712.met_dependencies = []
op712.outputs = [
    buf712: ExternKernelAlloc
    buf712.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf712.users = [NodeUser(node=SchedulerNode(name='op713'), can_inplace=True, is_weak=False)]
]
op712.node.kernel = extern_kernels.convolution


op713: SchedulerNode(ComputedBuffer)
op713.writes = [MemoryDep('buf713', c0, {c0: 451584}, None)]
op713.unmet_dependencies = 
    [   MemoryDep('buf707', c0, {c0: 451584}, None),
        MemoryDep('buf712', c0, {c0: 451584}, None)]
op713.met_dependencies = 
    [   MemoryDep('arg1292_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1293_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1294_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1295_1', c1, {c0: 25088, c1: 18}, None)]
op713.outputs = [
    buf713: ComputedBuffer
    buf713.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf713.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=True, is_weak=False),
    ]
]
op713.group.device = cuda:0
op713.group.iteration = (451584, 1)
op713.sizes = ([25088, 18], [])
buf712_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1292_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1293_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1294_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1295_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf713_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op713_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf712', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1293_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf707', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf713', get_index_6, relu, None)
        return store


op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op714.unmet_dependencies = []
op714.met_dependencies = [MemoryDep('arg1296_1', c0, {c0: 2916}, None)]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf714.users = [NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False)]
]
op714.group.device = cuda:0
op714.group.iteration = (2916, 1)
op714.sizes = ([18, 18, 9], [])
arg1296_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op714_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1296_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf714', get_index_1, load, None)
        return store


op715: ExternKernelSchedulerNode(ExternKernelAlloc)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf713', mode=None), StarDep(name='buf714', mode=None)]
op715.met_dependencies = []
op715.outputs = [
    buf715: ExternKernelAlloc
    buf715.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf715.users = [NodeUser(node=SchedulerNode(name='op716'), can_inplace=True, is_weak=False)]
]
op715.node.kernel = extern_kernels.convolution


op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 451584}, None)]
op716.unmet_dependencies = [MemoryDep('buf715', c0, {c0: 451584}, None)]
op716.met_dependencies = 
    [   MemoryDep('arg1297_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1298_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1299_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1300_1', c1, {c0: 25088, c1: 18}, None)]
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf716.users = [NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op716.group.device = cuda:0
op716.group.iteration = (451584, 1)
op716.sizes = ([25088, 18], [])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1297_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1298_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1299_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1300_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op716_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf715', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1297_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1298_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1299_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1300_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf716', get_index_5, relu, None)
        return store


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op717.unmet_dependencies = []
op717.met_dependencies = [MemoryDep('arg1301_1', c0, {c0: 2916}, None)]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf717.users = [NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op717.group.device = cuda:0
op717.group.iteration = (2916, 1)
op717.sizes = ([18, 18, 9], [])
arg1301_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op717_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1301_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf717', get_index_1, load, None)
        return store


op718: ExternKernelSchedulerNode(ExternKernelAlloc)
op718.writes = [StarDep(name='buf718', mode=None)]
op718.unmet_dependencies = [StarDep(name='buf716', mode=None), StarDep(name='buf717', mode=None)]
op718.met_dependencies = []
op718.outputs = [
    buf718: ExternKernelAlloc
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf718.users = [NodeUser(node=SchedulerNode(name='op719'), can_inplace=True, is_weak=False)]
]
op718.node.kernel = extern_kernels.convolution


op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 451584}, None)]
op719.unmet_dependencies = 
    [   MemoryDep('buf713', c0, {c0: 451584}, None),
        MemoryDep('buf718', c0, {c0: 451584}, None)]
op719.met_dependencies = 
    [   MemoryDep('arg1302_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1303_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1304_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1305_1', c1, {c0: 25088, c1: 18}, None)]
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf719.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
    ]
]
op719.group.device = cuda:0
op719.group.iteration = (451584, 1)
op719.sizes = ([25088, 18], [])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1302_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1303_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1304_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1305_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf713_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf719_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op719_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf718', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1302_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1303_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1304_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1305_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf713', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf719', get_index_6, relu, None)
        return store


op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op720.unmet_dependencies = []
op720.met_dependencies = [MemoryDep('arg1306_1', c0, {c0: 2916}, None)]
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf720.users = [NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False)]
]
op720.group.device = cuda:0
op720.group.iteration = (2916, 1)
op720.sizes = ([18, 18, 9], [])
arg1306_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op720_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1306_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf720', get_index_1, load, None)
        return store


op721: ExternKernelSchedulerNode(ExternKernelAlloc)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = [StarDep(name='buf719', mode=None), StarDep(name='buf720', mode=None)]
op721.met_dependencies = []
op721.outputs = [
    buf721: ExternKernelAlloc
    buf721.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf721.users = [NodeUser(node=SchedulerNode(name='op722'), can_inplace=True, is_weak=False)]
]
op721.node.kernel = extern_kernels.convolution


op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 451584}, None)]
op722.unmet_dependencies = [MemoryDep('buf721', c0, {c0: 451584}, None)]
op722.met_dependencies = 
    [   MemoryDep('arg1307_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1308_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1309_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1310_1', c1, {c0: 25088, c1: 18}, None)]
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf722.users = [NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False)]
]
op722.group.device = cuda:0
op722.group.iteration = (451584, 1)
op722.sizes = ([25088, 18], [])
buf721_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1307_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1308_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1309_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1310_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op722_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1307_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1308_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1309_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1310_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf722', get_index_5, relu, None)
        return store


op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op723.unmet_dependencies = []
op723.met_dependencies = [MemoryDep('arg1311_1', c0, {c0: 2916}, None)]
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf723.users = [NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (2916, 1)
op723.sizes = ([18, 18, 9], [])
arg1311_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf723_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op723_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1311_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf723', get_index_1, load, None)
        return store


op724: ExternKernelSchedulerNode(ExternKernelAlloc)
op724.writes = [StarDep(name='buf724', mode=None)]
op724.unmet_dependencies = [StarDep(name='buf722', mode=None), StarDep(name='buf723', mode=None)]
op724.met_dependencies = []
op724.outputs = [
    buf724: ExternKernelAlloc
    buf724.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf724.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False)]
]
op724.node.kernel = extern_kernels.convolution


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 451584}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf719', c0, {c0: 451584}, None),
        MemoryDep('buf724', c0, {c0: 451584}, None)]
op725.met_dependencies = 
    [   MemoryDep('arg1312_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1313_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1314_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1315_1', c1, {c0: 25088, c1: 18}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf725.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False),
    ]
]
op725.group.device = cuda:0
op725.group.iteration = (451584, 1)
op725.sizes = ([25088, 18], [])
buf724_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1312_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1313_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1314_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1315_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf719_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op725_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf724', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1313_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf719', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf725', get_index_6, relu, None)
        return store


op726: SchedulerNode(ComputedBuffer)
op726.writes = [MemoryDep('buf726', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op726.unmet_dependencies = []
op726.met_dependencies = [MemoryDep('arg1316_1', c0, {c0: 2916}, None)]
op726.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf726.users = [NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False)]
]
op726.group.device = cuda:0
op726.group.iteration = (2916, 1)
op726.sizes = ([18, 18, 9], [])
arg1316_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op726_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1316_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf726', get_index_1, load, None)
        return store


op727: ExternKernelSchedulerNode(ExternKernelAlloc)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf725', mode=None), StarDep(name='buf726', mode=None)]
op727.met_dependencies = []
op727.outputs = [
    buf727: ExternKernelAlloc
    buf727.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf727.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=True, is_weak=False)]
]
op727.node.kernel = extern_kernels.convolution


op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 451584}, None)]
op728.unmet_dependencies = [MemoryDep('buf727', c0, {c0: 451584}, None)]
op728.met_dependencies = 
    [   MemoryDep('arg1317_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1318_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1319_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1320_1', c1, {c0: 25088, c1: 18}, None)]
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf728.users = [NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False)]
]
op728.group.device = cuda:0
op728.group.iteration = (451584, 1)
op728.sizes = ([25088, 18], [])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1317_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1318_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1319_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1320_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op728_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1317_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1318_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1319_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1320_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf728', get_index_5, relu, None)
        return store


op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op729.unmet_dependencies = []
op729.met_dependencies = [MemoryDep('arg1321_1', c0, {c0: 2916}, None)]
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf729.users = [NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False)]
]
op729.group.device = cuda:0
op729.group.iteration = (2916, 1)
op729.sizes = ([18, 18, 9], [])
arg1321_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op729_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1321_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf729', get_index_1, load, None)
        return store


op730: ExternKernelSchedulerNode(ExternKernelAlloc)
op730.writes = [StarDep(name='buf730', mode=None)]
op730.unmet_dependencies = [StarDep(name='buf728', mode=None), StarDep(name='buf729', mode=None)]
op730.met_dependencies = []
op730.outputs = [
    buf730: ExternKernelAlloc
    buf730.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf730.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False)]
]
op730.node.kernel = extern_kernels.convolution


op731: SchedulerNode(ComputedBuffer)
op731.writes = [MemoryDep('buf731', c0, {c0: 451584}, None)]
op731.unmet_dependencies = 
    [   MemoryDep('buf725', c0, {c0: 451584}, None),
        MemoryDep('buf730', c0, {c0: 451584}, None)]
op731.met_dependencies = 
    [   MemoryDep('arg1322_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1323_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1324_1', c1, {c0: 25088, c1: 18}, None),
        MemoryDep('arg1325_1', c1, {c0: 25088, c1: 18}, None)]
op731.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf731.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op904'), can_inplace=True, is_weak=False),
    ]
]
op731.group.device = cuda:0
op731.group.iteration = (451584, 1)
op731.sizes = ([25088, 18], [])
buf730_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
arg1322_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1323_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1324_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1325_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf731_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op731_loop_body:
    var_ranges = {z0: 25088, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf730', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf725', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf731', get_index_6, relu, None)
        return store


op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op732.unmet_dependencies = []
op732.met_dependencies = [MemoryDep('arg1496_1', c0, {c0: 2916}, None)]
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf732.users = [NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
]
op732.group.device = cuda:0
op732.group.iteration = (2916, 1)
op732.sizes = ([18, 18, 9], [])
arg1496_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op732_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1496_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf732', get_index_1, load, None)
        return store


op733: ExternKernelSchedulerNode(ExternKernelAlloc)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf731', mode=None), StarDep(name='buf732', mode=None)]
op733.met_dependencies = []
op733.outputs = [
    buf733: ExternKernelAlloc
    buf733.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf733.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False)]
]
op733.node.kernel = extern_kernels.convolution


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 112896}, None)]
op734.unmet_dependencies = [MemoryDep('buf733', c0, {c0: 112896}, None)]
op734.met_dependencies = 
    [   MemoryDep('arg1497_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1498_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1499_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1500_1', c1, {c0: 6272, c1: 18}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf734.users = [NodeUser(node=ExternKernelSchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op734.group.device = cuda:0
op734.group.iteration = (112896, 1)
op734.sizes = ([6272, 18], [])
buf733_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1497_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1498_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1499_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1500_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op734_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf734', get_index_5, relu, None)
        return store


op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op735.unmet_dependencies = []
op735.met_dependencies = [MemoryDep('arg1501_1', c0, {c0: 2916}, None)]
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf735.users = [NodeUser(node=ExternKernelSchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op735.group.device = cuda:0
op735.group.iteration = (2916, 1)
op735.sizes = ([18, 18, 9], [])
arg1501_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf735_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op735_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1501_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf735', get_index_1, load, None)
        return store


op736: ExternKernelSchedulerNode(ExternKernelAlloc)
op736.writes = [StarDep(name='buf736', mode=None)]
op736.unmet_dependencies = [StarDep(name='buf734', mode=None), StarDep(name='buf735', mode=None)]
op736.met_dependencies = []
op736.outputs = [
    buf736: ExternKernelAlloc
    buf736.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf736.users = [NodeUser(node=SchedulerNode(name='op737'), can_inplace=True, is_weak=False)]
]
op736.node.kernel = extern_kernels.convolution


op737: SchedulerNode(ComputedBuffer)
op737.writes = [MemoryDep('buf737', c0, {c0: 28224}, None)]
op737.unmet_dependencies = [MemoryDep('buf736', c0, {c0: 28224}, None)]
op737.met_dependencies = 
    [   MemoryDep('arg1502_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1503_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1504_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1505_1', c1, {c0: 1568, c1: 18}, None)]
op737.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf737.users = [NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False)]
]
op737.group.device = cuda:0
op737.group.iteration = (28224, 1)
op737.sizes = ([1568, 18], [])
buf736_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg1502_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1503_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1504_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1505_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
class op737_loop_body:
    var_ranges = {z0: 1568, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf736', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1502_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1503_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1504_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1505_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf737', get_index_5, relu, None)
        return store


op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', 162*c0 + c1 + 18*c2, {c0: 144, c1: 18, c2: 9}, None)]
op738.unmet_dependencies = []
op738.met_dependencies = [MemoryDep('arg1506_1', c0, {c0: 23328}, None)]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
    buf738.users = [NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False)]
]
op738.group.device = cuda:0
op738.group.iteration = (23328, 1)
op738.sizes = ([144, 18, 9], [])
arg1506_1_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 9, 3, 1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
class op738_loop_body:
    var_ranges = {z0: 144, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1506_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf738', get_index_1, load, None)
        return store


op739: ExternKernelSchedulerNode(ExternKernelAlloc)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf737', mode=None), StarDep(name='buf738', mode=None)]
op739.met_dependencies = []
op739.outputs = [
    buf739: ExternKernelAlloc
    buf739.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf739.users = [NodeUser(node=SchedulerNode(name='op776'), can_inplace=True, is_weak=False)]
]
op739.node.kernel = extern_kernels.convolution


op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op740.unmet_dependencies = []
op740.met_dependencies = [MemoryDep('arg1221_1', c0, {c0: 5832}, None)]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf740.users = [NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op740.group.device = cuda:0
op740.group.iteration = (5832, 1)
op740.sizes = ([36, 18, 9], [])
arg1221_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op740_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1221_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf740', get_index_1, load, None)
        return store


op741: ExternKernelSchedulerNode(ExternKernelAlloc)
op741.writes = [StarDep(name='buf741', mode=None)]
op741.unmet_dependencies = [StarDep(name='buf593', mode=None), StarDep(name='buf740', mode=None)]
op741.met_dependencies = []
op741.outputs = [
    buf741: ExternKernelAlloc
    buf741.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf741.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False)]
]
op741.node.kernel = extern_kernels.convolution


op742: ExternKernelSchedulerNode(ExternKernelAlloc)
op742.writes = [StarDep(name='buf742', mode=None)]
op742.unmet_dependencies = [StarDep(name='buf661', mode=None)]
op742.met_dependencies = [StarDep(name='arg1226_1', mode=None)]
op742.outputs = [
    buf742: ExternKernelAlloc
    buf742.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf742.users = [NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op742.node.kernel = extern_kernels.convolution


op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 225792}, None)]
op743.unmet_dependencies = [MemoryDep('buf742', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op743.met_dependencies = 
    [   MemoryDep('arg1227_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1228_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1229_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1230_1', c1, {c0: 8, c1: 36}, None)]
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf743.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False)]
]
op743.group.device = cuda:0
op743.group.iteration = (225792, 1)
op743.sizes = ([8, 36, 28, 28], [])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg1227_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1228_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1229_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1230_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op743_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf742', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1227_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1228_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1229_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1230_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf743', get_index_7, add_1, None)
        return store


op744: ExternKernelSchedulerNode(ExternKernelAlloc)
op744.writes = [StarDep(name='buf744', mode=None)]
op744.unmet_dependencies = [StarDep(name='buf704', mode=None)]
op744.met_dependencies = [StarDep(name='arg1231_1', mode=None)]
op744.outputs = [
    buf744: ExternKernelAlloc
    buf744.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
    buf744.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op744.node.kernel = extern_kernels.convolution


op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 225792}, None)]
op745.unmet_dependencies = [MemoryDep('buf744', 1764*c0 + c1 + 252*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op745.met_dependencies = 
    [   MemoryDep('arg1232_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1233_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1234_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1235_1', c1, {c0: 8, c1: 36}, None)]
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False)]
]
op745.group.device = cuda:0
op745.group.iteration = (225792, 1)
op745.sizes = ([8, 36, 28, 28], [])
buf744_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
arg1232_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1233_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1234_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1235_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op745_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 36*indirect1 + 1764*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf744', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1232_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1233_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1234_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1235_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf745', get_index_7, add_1, None)
        return store


op746: SchedulerNode(ComputedBuffer)
op746.writes = [MemoryDep('buf746', c0, {c0: 225792}, None)]
op746.unmet_dependencies = 
    [   MemoryDep('buf624', c0, {c0: 225792}, None),
        MemoryDep('buf741', c0, {c0: 225792}, None),
        MemoryDep('buf743', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None),
        MemoryDep('buf745', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op746.met_dependencies = 
    [   MemoryDep('arg1222_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1223_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1224_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1225_1', c1, {c0: 6272, c1: 36}, None)]
op746.outputs = [
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf746.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False),
    ]
]
op746.group.device = cuda:0
op746.group.iteration = (225792, 1)
op746.sizes = ([8, 784, 36], [])
buf741_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1222_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1223_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1224_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1225_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op746_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf624', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf743', get_index_6)
        add_3 = ops.add(add_2, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf745', get_index_7)
        add_4 = ops.add(add_3, load_7)
        relu = ops.relu(add_4)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf746', get_index_8, relu, None)
        return store


op747: SchedulerNode(ComputedBuffer)
op747.writes = [MemoryDep('buf747', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op747.unmet_dependencies = []
op747.met_dependencies = [MemoryDep('arg1326_1', c0, {c0: 11664}, None)]
op747.outputs = [
    buf747: ComputedBuffer
    buf747.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf747.users = [NodeUser(node=ExternKernelSchedulerNode(name='op748'), can_inplace=False, is_weak=False)]
]
op747.group.device = cuda:0
op747.group.iteration = (11664, 1)
op747.sizes = ([36, 36, 9], [])
arg1326_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op747_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1326_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf747', get_index_1, load, None)
        return store


op748: ExternKernelSchedulerNode(ExternKernelAlloc)
op748.writes = [StarDep(name='buf748', mode=None)]
op748.unmet_dependencies = [StarDep(name='buf746', mode=None), StarDep(name='buf747', mode=None)]
op748.met_dependencies = []
op748.outputs = [
    buf748: ExternKernelAlloc
    buf748.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False)]
]
op748.node.kernel = extern_kernels.convolution


op749: SchedulerNode(ComputedBuffer)
op749.writes = [MemoryDep('buf749', c0, {c0: 225792}, None)]
op749.unmet_dependencies = [MemoryDep('buf748', c0, {c0: 225792}, None)]
op749.met_dependencies = 
    [   MemoryDep('arg1327_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1328_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1329_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1330_1', c1, {c0: 6272, c1: 36}, None)]
op749.outputs = [
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf749.users = [NodeUser(node=ExternKernelSchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op749.group.device = cuda:0
op749.group.iteration = (225792, 1)
op749.sizes = ([6272, 36], [])
buf748_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1327_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1328_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1329_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1330_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op749_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf748', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf749', get_index_5, relu, None)
        return store


op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op750.unmet_dependencies = []
op750.met_dependencies = [MemoryDep('arg1331_1', c0, {c0: 11664}, None)]
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf750.users = [NodeUser(node=ExternKernelSchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (11664, 1)
op750.sizes = ([36, 36, 9], [])
arg1331_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op750_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1331_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf750', get_index_1, load, None)
        return store


op751: ExternKernelSchedulerNode(ExternKernelAlloc)
op751.writes = [StarDep(name='buf751', mode=None)]
op751.unmet_dependencies = [StarDep(name='buf749', mode=None), StarDep(name='buf750', mode=None)]
op751.met_dependencies = []
op751.outputs = [
    buf751: ExternKernelAlloc
    buf751.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf751.users = [NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False)]
]
op751.node.kernel = extern_kernels.convolution


op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 225792}, None)]
op752.unmet_dependencies = 
    [   MemoryDep('buf746', c0, {c0: 225792}, None),
        MemoryDep('buf751', c0, {c0: 225792}, None)]
op752.met_dependencies = 
    [   MemoryDep('arg1332_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1333_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1334_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1335_1', c1, {c0: 6272, c1: 36}, None)]
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf752.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False),
    ]
]
op752.group.device = cuda:0
op752.group.iteration = (225792, 1)
op752.sizes = ([6272, 36], [])
buf751_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1332_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1333_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1334_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1335_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op752_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf751', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1332_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1333_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1334_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1335_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf746', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf752', get_index_6, relu, None)
        return store


op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op753.unmet_dependencies = []
op753.met_dependencies = [MemoryDep('arg1336_1', c0, {c0: 11664}, None)]
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf753.users = [NodeUser(node=ExternKernelSchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (11664, 1)
op753.sizes = ([36, 36, 9], [])
arg1336_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op753_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1336_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf753', get_index_1, load, None)
        return store


op754: ExternKernelSchedulerNode(ExternKernelAlloc)
op754.writes = [StarDep(name='buf754', mode=None)]
op754.unmet_dependencies = [StarDep(name='buf752', mode=None), StarDep(name='buf753', mode=None)]
op754.met_dependencies = []
op754.outputs = [
    buf754: ExternKernelAlloc
    buf754.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf754.users = [NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False)]
]
op754.node.kernel = extern_kernels.convolution


op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 225792}, None)]
op755.unmet_dependencies = [MemoryDep('buf754', c0, {c0: 225792}, None)]
op755.met_dependencies = 
    [   MemoryDep('arg1337_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1338_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1339_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1340_1', c1, {c0: 6272, c1: 36}, None)]
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf755.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op755.group.device = cuda:0
op755.group.iteration = (225792, 1)
op755.sizes = ([6272, 36], [])
buf754_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1337_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1338_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1339_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1340_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf755_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op755_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf754', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf755', get_index_5, relu, None)
        return store


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op756.unmet_dependencies = []
op756.met_dependencies = [MemoryDep('arg1341_1', c0, {c0: 11664}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (11664, 1)
op756.sizes = ([36, 36, 9], [])
arg1341_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf756_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op756_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1341_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf756', get_index_1, load, None)
        return store


op757: ExternKernelSchedulerNode(ExternKernelAlloc)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = [StarDep(name='buf755', mode=None), StarDep(name='buf756', mode=None)]
op757.met_dependencies = []
op757.outputs = [
    buf757: ExternKernelAlloc
    buf757.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op757.node.kernel = extern_kernels.convolution


op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 225792}, None)]
op758.unmet_dependencies = 
    [   MemoryDep('buf752', c0, {c0: 225792}, None),
        MemoryDep('buf757', c0, {c0: 225792}, None)]
op758.met_dependencies = 
    [   MemoryDep('arg1342_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1343_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1344_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1345_1', c1, {c0: 6272, c1: 36}, None)]
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf758.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=True, is_weak=False),
    ]
]
op758.group.device = cuda:0
op758.group.iteration = (225792, 1)
op758.sizes = ([6272, 36], [])
buf757_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1342_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1343_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1344_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1345_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf758_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op758_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf752', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf758', get_index_6, relu, None)
        return store


op759: SchedulerNode(ComputedBuffer)
op759.writes = [MemoryDep('buf759', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op759.unmet_dependencies = []
op759.met_dependencies = [MemoryDep('arg1346_1', c0, {c0: 11664}, None)]
op759.outputs = [
    buf759: ComputedBuffer
    buf759.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf759.users = [NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False)]
]
op759.group.device = cuda:0
op759.group.iteration = (11664, 1)
op759.sizes = ([36, 36, 9], [])
arg1346_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op759_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1346_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf759', get_index_1, load, None)
        return store


op760: ExternKernelSchedulerNode(ExternKernelAlloc)
op760.writes = [StarDep(name='buf760', mode=None)]
op760.unmet_dependencies = [StarDep(name='buf758', mode=None), StarDep(name='buf759', mode=None)]
op760.met_dependencies = []
op760.outputs = [
    buf760: ExternKernelAlloc
    buf760.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf760.users = [NodeUser(node=SchedulerNode(name='op761'), can_inplace=True, is_weak=False)]
]
op760.node.kernel = extern_kernels.convolution


op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 225792}, None)]
op761.unmet_dependencies = [MemoryDep('buf760', c0, {c0: 225792}, None)]
op761.met_dependencies = 
    [   MemoryDep('arg1347_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1348_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1349_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1350_1', c1, {c0: 6272, c1: 36}, None)]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf761.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op761.group.device = cuda:0
op761.group.iteration = (225792, 1)
op761.sizes = ([6272, 36], [])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1347_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1348_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1349_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1350_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op761_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf760', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf761', get_index_5, relu, None)
        return store


op762: SchedulerNode(ComputedBuffer)
op762.writes = [MemoryDep('buf762', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op762.unmet_dependencies = []
op762.met_dependencies = [MemoryDep('arg1351_1', c0, {c0: 11664}, None)]
op762.outputs = [
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf762.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op762.group.device = cuda:0
op762.group.iteration = (11664, 1)
op762.sizes = ([36, 36, 9], [])
arg1351_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op762_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1351_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf762', get_index_1, load, None)
        return store


op763: ExternKernelSchedulerNode(ExternKernelAlloc)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = [StarDep(name='buf761', mode=None), StarDep(name='buf762', mode=None)]
op763.met_dependencies = []
op763.outputs = [
    buf763: ExternKernelAlloc
    buf763.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf763.users = [NodeUser(node=SchedulerNode(name='op764'), can_inplace=True, is_weak=False)]
]
op763.node.kernel = extern_kernels.convolution


op764: SchedulerNode(ComputedBuffer)
op764.writes = [MemoryDep('buf764', c0, {c0: 225792}, None)]
op764.unmet_dependencies = 
    [   MemoryDep('buf758', c0, {c0: 225792}, None),
        MemoryDep('buf763', c0, {c0: 225792}, None)]
op764.met_dependencies = 
    [   MemoryDep('arg1352_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1353_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1354_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1355_1', c1, {c0: 6272, c1: 36}, None)]
op764.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf764.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=True, is_weak=False),
    ]
]
op764.group.device = cuda:0
op764.group.iteration = (225792, 1)
op764.sizes = ([6272, 36], [])
buf763_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1352_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1353_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1354_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1355_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf764_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op764_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf763', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf758', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf764', get_index_6, relu, None)
        return store


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op765.unmet_dependencies = []
op765.met_dependencies = [MemoryDep('arg1356_1', c0, {c0: 11664}, None)]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf765.users = [NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False)]
]
op765.group.device = cuda:0
op765.group.iteration = (11664, 1)
op765.sizes = ([36, 36, 9], [])
arg1356_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op765_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1356_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf765', get_index_1, load, None)
        return store


op766: ExternKernelSchedulerNode(ExternKernelAlloc)
op766.writes = [StarDep(name='buf766', mode=None)]
op766.unmet_dependencies = [StarDep(name='buf764', mode=None), StarDep(name='buf765', mode=None)]
op766.met_dependencies = []
op766.outputs = [
    buf766: ExternKernelAlloc
    buf766.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf766.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=True, is_weak=False)]
]
op766.node.kernel = extern_kernels.convolution


op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 225792}, None)]
op767.unmet_dependencies = [MemoryDep('buf766', c0, {c0: 225792}, None)]
op767.met_dependencies = 
    [   MemoryDep('arg1357_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1358_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1359_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1360_1', c1, {c0: 6272, c1: 36}, None)]
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf767.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op767.group.device = cuda:0
op767.group.iteration = (225792, 1)
op767.sizes = ([6272, 36], [])
buf766_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1357_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1358_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1359_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1360_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf767_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op767_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf766', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf767', get_index_5, relu, None)
        return store


op768: SchedulerNode(ComputedBuffer)
op768.writes = [MemoryDep('buf768', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op768.unmet_dependencies = []
op768.met_dependencies = [MemoryDep('arg1361_1', c0, {c0: 11664}, None)]
op768.outputs = [
    buf768: ComputedBuffer
    buf768.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf768.users = [NodeUser(node=ExternKernelSchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op768.group.device = cuda:0
op768.group.iteration = (11664, 1)
op768.sizes = ([36, 36, 9], [])
arg1361_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf768_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op768_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1361_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf768', get_index_1, load, None)
        return store


op769: ExternKernelSchedulerNode(ExternKernelAlloc)
op769.writes = [StarDep(name='buf769', mode=None)]
op769.unmet_dependencies = [StarDep(name='buf767', mode=None), StarDep(name='buf768', mode=None)]
op769.met_dependencies = []
op769.outputs = [
    buf769: ExternKernelAlloc
    buf769.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf769.users = [NodeUser(node=SchedulerNode(name='op770'), can_inplace=True, is_weak=False)]
]
op769.node.kernel = extern_kernels.convolution


op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 225792}, None)]
op770.unmet_dependencies = 
    [   MemoryDep('buf764', c0, {c0: 225792}, None),
        MemoryDep('buf769', c0, {c0: 225792}, None)]
op770.met_dependencies = 
    [   MemoryDep('arg1362_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1363_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1364_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1365_1', c1, {c0: 6272, c1: 36}, None)]
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf770.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op889'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op898'), can_inplace=False, is_weak=False),
    ]
]
op770.group.device = cuda:0
op770.group.iteration = (225792, 1)
op770.sizes = ([6272, 36], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1362_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1363_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1364_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1365_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op770_loop_body:
    var_ranges = {z0: 6272, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf769', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf764', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf770', get_index_6, relu, None)
        return store


op771: SchedulerNode(ComputedBuffer)
op771.writes = [MemoryDep('buf771', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op771.unmet_dependencies = []
op771.met_dependencies = [MemoryDep('arg1511_1', c0, {c0: 11664}, None)]
op771.outputs = [
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf771.users = [NodeUser(node=ExternKernelSchedulerNode(name='op772'), can_inplace=False, is_weak=False)]
]
op771.group.device = cuda:0
op771.group.iteration = (11664, 1)
op771.sizes = ([36, 36, 9], [])
arg1511_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf771_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op771_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1511_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf771', get_index_1, load, None)
        return store


op772: ExternKernelSchedulerNode(ExternKernelAlloc)
op772.writes = [StarDep(name='buf772', mode=None)]
op772.unmet_dependencies = [StarDep(name='buf770', mode=None), StarDep(name='buf771', mode=None)]
op772.met_dependencies = []
op772.outputs = [
    buf772: ExternKernelAlloc
    buf772.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf772.users = [NodeUser(node=SchedulerNode(name='op773'), can_inplace=True, is_weak=False)]
]
op772.node.kernel = extern_kernels.convolution


op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 56448}, None)]
op773.unmet_dependencies = [MemoryDep('buf772', c0, {c0: 56448}, None)]
op773.met_dependencies = 
    [   MemoryDep('arg1512_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1513_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1514_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1515_1', c1, {c0: 1568, c1: 36}, None)]
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False)]
]
op773.group.device = cuda:0
op773.group.iteration = (56448, 1)
op773.sizes = ([1568, 36], [])
buf772_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg1512_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1513_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1514_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1515_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
class op773_loop_body:
    var_ranges = {z0: 1568, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf772', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1512_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1513_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1514_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1515_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf773', get_index_5, relu, None)
        return store


op774: SchedulerNode(ComputedBuffer)
op774.writes = [MemoryDep('buf774', 324*c0 + c1 + 36*c2, {c0: 144, c1: 36, c2: 9}, None)]
op774.unmet_dependencies = []
op774.met_dependencies = [MemoryDep('arg1516_1', c0, {c0: 46656}, None)]
op774.outputs = [
    buf774: ComputedBuffer
    buf774.layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
    buf774.users = [NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False)]
]
op774.group.device = cuda:0
op774.group.iteration = (46656, 1)
op774.sizes = ([144, 36, 9], [])
arg1516_1_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 9, 3, 1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
class op774_loop_body:
    var_ranges = {z0: 144, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1516_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf774', get_index_1, load, None)
        return store


op775: ExternKernelSchedulerNode(ExternKernelAlloc)
op775.writes = [StarDep(name='buf775', mode=None)]
op775.unmet_dependencies = [StarDep(name='buf773', mode=None), StarDep(name='buf774', mode=None)]
op775.met_dependencies = []
op775.outputs = [
    buf775: ExternKernelAlloc
    buf775.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf775.users = [NodeUser(node=SchedulerNode(name='op776'), can_inplace=True, is_weak=False)]
]
op775.node.kernel = extern_kernels.convolution


op776: SchedulerNode(ComputedBuffer)
op776.writes = [MemoryDep('buf776', c0, {c0: 56448}, None)]
op776.unmet_dependencies = 
    [   MemoryDep('buf739', c0, {c0: 56448}, None),
        MemoryDep('buf775', c0, {c0: 56448}, None)]
op776.met_dependencies = 
    [   MemoryDep('arg1507_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1508_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1509_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1510_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1517_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1518_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1519_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1520_1', c1, {c0: 392, c1: 144}, None)]
op776.outputs = [
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf776.users = [NodeUser(node=SchedulerNode(name='op855'), can_inplace=True, is_weak=False)]
]
op776.group.device = cuda:0
op776.group.iteration = (56448, 1)
op776.sizes = ([392, 144], [])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1507_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1508_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1509_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1510_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1517_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1518_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1519_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1520_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf776_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op776_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1507_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1508_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1509_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1510_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf775', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1517_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1518_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1519_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1520_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf776', get_index_10, add_4, None)
        return store


op777: SchedulerNode(ComputedBuffer)
op777.writes = [MemoryDep('buf777', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op777.unmet_dependencies = []
op777.met_dependencies = [MemoryDep('arg1236_1', c0, {c0: 2916}, None)]
op777.outputs = [
    buf777: ComputedBuffer
    buf777.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf777.users = [NodeUser(node=ExternKernelSchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op777.group.device = cuda:0
op777.group.iteration = (2916, 1)
op777.sizes = ([18, 18, 9], [])
arg1236_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf777_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op777_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1236_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf777', get_index_1, load, None)
        return store


op778: ExternKernelSchedulerNode(ExternKernelAlloc)
op778.writes = [StarDep(name='buf778', mode=None)]
op778.unmet_dependencies = [StarDep(name='buf593', mode=None), StarDep(name='buf777', mode=None)]
op778.met_dependencies = []
op778.outputs = [
    buf778: ExternKernelAlloc
    buf778.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf778.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=True, is_weak=False)]
]
op778.node.kernel = extern_kernels.convolution


op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 112896}, None)]
op779.unmet_dependencies = [MemoryDep('buf778', c0, {c0: 112896}, None)]
op779.met_dependencies = 
    [   MemoryDep('arg1237_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1238_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1239_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1240_1', c1, {c0: 6272, c1: 18}, None)]
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf779.users = [NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False)]
]
op779.group.device = cuda:0
op779.group.iteration = (112896, 1)
op779.sizes = ([6272, 18], [])
buf778_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1237_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1238_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1239_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1240_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op779_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf778', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf779', get_index_5, relu, None)
        return store


op780: SchedulerNode(ComputedBuffer)
op780.writes = [MemoryDep('buf780', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op780.unmet_dependencies = []
op780.met_dependencies = [MemoryDep('arg1241_1', c0, {c0: 11664}, None)]
op780.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf780.users = [NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False)]
]
op780.group.device = cuda:0
op780.group.iteration = (11664, 1)
op780.sizes = ([72, 18, 9], [])
arg1241_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op780_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1241_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf780', get_index_1, load, None)
        return store


op781: ExternKernelSchedulerNode(ExternKernelAlloc)
op781.writes = [StarDep(name='buf781', mode=None)]
op781.unmet_dependencies = [StarDep(name='buf779', mode=None), StarDep(name='buf780', mode=None)]
op781.met_dependencies = []
op781.outputs = [
    buf781: ExternKernelAlloc
    buf781.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf781.users = [NodeUser(node=SchedulerNode(name='op784'), can_inplace=True, is_weak=False)]
]
op781.node.kernel = extern_kernels.convolution


op782: SchedulerNode(ComputedBuffer)
op782.writes = [MemoryDep('buf782', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op782.unmet_dependencies = []
op782.met_dependencies = [MemoryDep('arg1246_1', c0, {c0: 23328}, None)]
op782.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf782.users = [NodeUser(node=ExternKernelSchedulerNode(name='op783'), can_inplace=False, is_weak=False)]
]
op782.group.device = cuda:0
op782.group.iteration = (23328, 1)
op782.sizes = ([72, 36, 9], [])
arg1246_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf782_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op782_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1246_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf782', get_index_1, load, None)
        return store


op783: ExternKernelSchedulerNode(ExternKernelAlloc)
op783.writes = [StarDep(name='buf783', mode=None)]
op783.unmet_dependencies = [StarDep(name='buf624', mode=None), StarDep(name='buf782', mode=None)]
op783.met_dependencies = []
op783.outputs = [
    buf783: ExternKernelAlloc
    buf783.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf783.users = [NodeUser(node=SchedulerNode(name='op784'), can_inplace=True, is_weak=False)]
]
op783.node.kernel = extern_kernels.convolution


op784: SchedulerNode(ComputedBuffer)
op784.writes = [MemoryDep('buf784', c0, {c0: 112896}, None)]
op784.unmet_dependencies = 
    [   MemoryDep('buf781', c0, {c0: 112896}, None),
        MemoryDep('buf783', c0, {c0: 112896}, None)]
op784.met_dependencies = 
    [   MemoryDep('arg1242_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1243_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1244_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1245_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1247_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1248_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1249_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1250_1', c1, {c0: 1568, c1: 72}, None)]
op784.outputs = [
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf784.users = [NodeUser(node=SchedulerNode(name='op787'), can_inplace=True, is_weak=False)]
]
op784.group.device = cuda:0
op784.group.iteration = (112896, 1)
op784.sizes = ([1568, 72], [])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1242_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1243_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1244_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1245_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1247_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1248_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1249_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1250_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op784_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf781', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf783', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1247_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1248_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1249_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1250_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf784', get_index_10, add_4, None)
        return store


op785: ExternKernelSchedulerNode(ExternKernelAlloc)
op785.writes = [StarDep(name='buf785', mode=None)]
op785.unmet_dependencies = [StarDep(name='buf704', mode=None)]
op785.met_dependencies = [StarDep(name='arg1251_1', mode=None)]
op785.outputs = [
    buf785: ExternKernelAlloc
    buf785.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
    buf785.users = [NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op785.node.kernel = extern_kernels.convolution


op786: SchedulerNode(ComputedBuffer)
op786.writes = [MemoryDep('buf786', c0, {c0: 112896}, None)]
op786.unmet_dependencies = [MemoryDep('buf785', 3528*c0 + c1 + 504*tmp0 + 72*tmp1, {c0: 8, c1: 72}, None)]
op786.met_dependencies = 
    [   MemoryDep('arg1252_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1253_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1254_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1255_1', c1, {c0: 8, c1: 72}, None)]
op786.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
    buf786.users = [NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False)]
]
op786.group.device = cuda:0
op786.group.iteration = (112896, 1)
op786.sizes = ([8, 72, 14, 14], [])
buf785_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
arg1252_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1253_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1254_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1255_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
class op786_loop_body:
    var_ranges = {z0: 8, z1: 72, z2: 14, z3: 14}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 72*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 14112*z0 + 196*z1 + 14*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf785', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1252_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1253_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1254_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1255_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf786', get_index_7, add_1, None)
        return store


op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 112896}, None)]
op787.unmet_dependencies = 
    [   MemoryDep('buf661', c0, {c0: 112896}, None),
        MemoryDep('buf784', c0, {c0: 112896}, None),
        MemoryDep('buf786', 14112*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 72}, None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf787.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op787.group.device = cuda:0
op787.group.iteration = (112896, 1)
op787.sizes = ([8, 196, 72], [])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf786_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op787_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 72}
    index0 = 14112*z0 + 72*z1 + z2
    index1 = 14112*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf784', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf661', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf786', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf787', get_index_3, relu, None)
        return store


op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op788.unmet_dependencies = []
op788.met_dependencies = [MemoryDep('arg1366_1', c0, {c0: 46656}, None)]
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf788.users = [NodeUser(node=ExternKernelSchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
]
op788.group.device = cuda:0
op788.group.iteration = (46656, 1)
op788.sizes = ([72, 72, 9], [])
arg1366_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op788_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1366_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf788', get_index_1, load, None)
        return store


op789: ExternKernelSchedulerNode(ExternKernelAlloc)
op789.writes = [StarDep(name='buf789', mode=None)]
op789.unmet_dependencies = [StarDep(name='buf787', mode=None), StarDep(name='buf788', mode=None)]
op789.met_dependencies = []
op789.outputs = [
    buf789: ExternKernelAlloc
    buf789.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf789.users = [NodeUser(node=SchedulerNode(name='op790'), can_inplace=True, is_weak=False)]
]
op789.node.kernel = extern_kernels.convolution


op790: SchedulerNode(ComputedBuffer)
op790.writes = [MemoryDep('buf790', c0, {c0: 112896}, None)]
op790.unmet_dependencies = [MemoryDep('buf789', c0, {c0: 112896}, None)]
op790.met_dependencies = 
    [   MemoryDep('arg1367_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1368_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1369_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1370_1', c1, {c0: 1568, c1: 72}, None)]
op790.outputs = [
    buf790: ComputedBuffer
    buf790.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf790.users = [NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False)]
]
op790.group.device = cuda:0
op790.group.iteration = (112896, 1)
op790.sizes = ([1568, 72], [])
buf789_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1367_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1368_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1369_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1370_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf790_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op790_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf789', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1367_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1368_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1369_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1370_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf790', get_index_5, relu, None)
        return store


op791: SchedulerNode(ComputedBuffer)
op791.writes = [MemoryDep('buf791', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op791.unmet_dependencies = []
op791.met_dependencies = [MemoryDep('arg1371_1', c0, {c0: 46656}, None)]
op791.outputs = [
    buf791: ComputedBuffer
    buf791.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf791.users = [NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False)]
]
op791.group.device = cuda:0
op791.group.iteration = (46656, 1)
op791.sizes = ([72, 72, 9], [])
arg1371_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op791_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1371_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf791', get_index_1, load, None)
        return store


op792: ExternKernelSchedulerNode(ExternKernelAlloc)
op792.writes = [StarDep(name='buf792', mode=None)]
op792.unmet_dependencies = [StarDep(name='buf790', mode=None), StarDep(name='buf791', mode=None)]
op792.met_dependencies = []
op792.outputs = [
    buf792: ExternKernelAlloc
    buf792.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf792.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op792.node.kernel = extern_kernels.convolution


op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 112896}, None)]
op793.unmet_dependencies = 
    [   MemoryDep('buf787', c0, {c0: 112896}, None),
        MemoryDep('buf792', c0, {c0: 112896}, None)]
op793.met_dependencies = 
    [   MemoryDep('arg1372_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1373_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1374_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1375_1', c1, {c0: 1568, c1: 72}, None)]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf793.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False),
    ]
]
op793.group.device = cuda:0
op793.group.iteration = (112896, 1)
op793.sizes = ([1568, 72], [])
buf792_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1372_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1373_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1374_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1375_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op793_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf792', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf787', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf793', get_index_6, relu, None)
        return store


op794: SchedulerNode(ComputedBuffer)
op794.writes = [MemoryDep('buf794', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op794.unmet_dependencies = []
op794.met_dependencies = [MemoryDep('arg1376_1', c0, {c0: 46656}, None)]
op794.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf794.users = [NodeUser(node=ExternKernelSchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
]
op794.group.device = cuda:0
op794.group.iteration = (46656, 1)
op794.sizes = ([72, 72, 9], [])
arg1376_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf794_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op794_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1376_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf794', get_index_1, load, None)
        return store


op795: ExternKernelSchedulerNode(ExternKernelAlloc)
op795.writes = [StarDep(name='buf795', mode=None)]
op795.unmet_dependencies = [StarDep(name='buf793', mode=None), StarDep(name='buf794', mode=None)]
op795.met_dependencies = []
op795.outputs = [
    buf795: ExternKernelAlloc
    buf795.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf795.users = [NodeUser(node=SchedulerNode(name='op796'), can_inplace=True, is_weak=False)]
]
op795.node.kernel = extern_kernels.convolution


op796: SchedulerNode(ComputedBuffer)
op796.writes = [MemoryDep('buf796', c0, {c0: 112896}, None)]
op796.unmet_dependencies = [MemoryDep('buf795', c0, {c0: 112896}, None)]
op796.met_dependencies = 
    [   MemoryDep('arg1377_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1378_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1379_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1380_1', c1, {c0: 1568, c1: 72}, None)]
op796.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf796.users = [NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op796.group.device = cuda:0
op796.group.iteration = (112896, 1)
op796.sizes = ([1568, 72], [])
buf795_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1377_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1378_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1379_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1380_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op796_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf795', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1377_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1378_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1379_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1380_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf796', get_index_5, relu, None)
        return store


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op797.unmet_dependencies = []
op797.met_dependencies = [MemoryDep('arg1381_1', c0, {c0: 46656}, None)]
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf797.users = [NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (46656, 1)
op797.sizes = ([72, 72, 9], [])
arg1381_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op797_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1381_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf797', get_index_1, load, None)
        return store


op798: ExternKernelSchedulerNode(ExternKernelAlloc)
op798.writes = [StarDep(name='buf798', mode=None)]
op798.unmet_dependencies = [StarDep(name='buf796', mode=None), StarDep(name='buf797', mode=None)]
op798.met_dependencies = []
op798.outputs = [
    buf798: ExternKernelAlloc
    buf798.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=True, is_weak=False)]
]
op798.node.kernel = extern_kernels.convolution


op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 112896}, None)]
op799.unmet_dependencies = 
    [   MemoryDep('buf793', c0, {c0: 112896}, None),
        MemoryDep('buf798', c0, {c0: 112896}, None)]
op799.met_dependencies = 
    [   MemoryDep('arg1382_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1383_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1384_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1385_1', c1, {c0: 1568, c1: 72}, None)]
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf799.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op805'), can_inplace=True, is_weak=False),
    ]
]
op799.group.device = cuda:0
op799.group.iteration = (112896, 1)
op799.sizes = ([1568, 72], [])
buf798_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1382_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1383_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1384_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1385_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf799_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op799_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf793', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf799', get_index_6, relu, None)
        return store


op800: SchedulerNode(ComputedBuffer)
op800.writes = [MemoryDep('buf800', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op800.unmet_dependencies = []
op800.met_dependencies = [MemoryDep('arg1386_1', c0, {c0: 46656}, None)]
op800.outputs = [
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf800.users = [NodeUser(node=ExternKernelSchedulerNode(name='op801'), can_inplace=False, is_weak=False)]
]
op800.group.device = cuda:0
op800.group.iteration = (46656, 1)
op800.sizes = ([72, 72, 9], [])
arg1386_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf800_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op800_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1386_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf800', get_index_1, load, None)
        return store


op801: ExternKernelSchedulerNode(ExternKernelAlloc)
op801.writes = [StarDep(name='buf801', mode=None)]
op801.unmet_dependencies = [StarDep(name='buf799', mode=None), StarDep(name='buf800', mode=None)]
op801.met_dependencies = []
op801.outputs = [
    buf801: ExternKernelAlloc
    buf801.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf801.users = [NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False)]
]
op801.node.kernel = extern_kernels.convolution


op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', c0, {c0: 112896}, None)]
op802.unmet_dependencies = [MemoryDep('buf801', c0, {c0: 112896}, None)]
op802.met_dependencies = 
    [   MemoryDep('arg1387_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1388_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1389_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1390_1', c1, {c0: 1568, c1: 72}, None)]
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf802.users = [NodeUser(node=ExternKernelSchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op802.group.device = cuda:0
op802.group.iteration = (112896, 1)
op802.sizes = ([1568, 72], [])
buf801_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1387_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1388_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1389_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1390_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf802_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op802_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf801', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1387_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1388_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1389_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1390_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf802', get_index_5, relu, None)
        return store


op803: SchedulerNode(ComputedBuffer)
op803.writes = [MemoryDep('buf803', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op803.unmet_dependencies = []
op803.met_dependencies = [MemoryDep('arg1391_1', c0, {c0: 46656}, None)]
op803.outputs = [
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf803.users = [NodeUser(node=ExternKernelSchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op803.group.device = cuda:0
op803.group.iteration = (46656, 1)
op803.sizes = ([72, 72, 9], [])
arg1391_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf803_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op803_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1391_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf803', get_index_1, load, None)
        return store


op804: ExternKernelSchedulerNode(ExternKernelAlloc)
op804.writes = [StarDep(name='buf804', mode=None)]
op804.unmet_dependencies = [StarDep(name='buf802', mode=None), StarDep(name='buf803', mode=None)]
op804.met_dependencies = []
op804.outputs = [
    buf804: ExternKernelAlloc
    buf804.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf804.users = [NodeUser(node=SchedulerNode(name='op805'), can_inplace=True, is_weak=False)]
]
op804.node.kernel = extern_kernels.convolution


op805: SchedulerNode(ComputedBuffer)
op805.writes = [MemoryDep('buf805', c0, {c0: 112896}, None)]
op805.unmet_dependencies = 
    [   MemoryDep('buf799', c0, {c0: 112896}, None),
        MemoryDep('buf804', c0, {c0: 112896}, None)]
op805.met_dependencies = 
    [   MemoryDep('arg1392_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1393_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1394_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1395_1', c1, {c0: 1568, c1: 72}, None)]
op805.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf805.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False),
    ]
]
op805.group.device = cuda:0
op805.group.iteration = (112896, 1)
op805.sizes = ([1568, 72], [])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1392_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1393_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1394_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1395_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf799_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf805_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op805_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf804', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1392_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1393_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1394_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1395_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf799', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf805', get_index_6, relu, None)
        return store


op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op806.unmet_dependencies = []
op806.met_dependencies = [MemoryDep('arg1396_1', c0, {c0: 46656}, None)]
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf806.users = [NodeUser(node=ExternKernelSchedulerNode(name='op807'), can_inplace=False, is_weak=False)]
]
op806.group.device = cuda:0
op806.group.iteration = (46656, 1)
op806.sizes = ([72, 72, 9], [])
arg1396_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf806_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op806_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1396_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf806', get_index_1, load, None)
        return store


op807: ExternKernelSchedulerNode(ExternKernelAlloc)
op807.writes = [StarDep(name='buf807', mode=None)]
op807.unmet_dependencies = [StarDep(name='buf805', mode=None), StarDep(name='buf806', mode=None)]
op807.met_dependencies = []
op807.outputs = [
    buf807: ExternKernelAlloc
    buf807.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf807.users = [NodeUser(node=SchedulerNode(name='op808'), can_inplace=True, is_weak=False)]
]
op807.node.kernel = extern_kernels.convolution


op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 112896}, None)]
op808.unmet_dependencies = [MemoryDep('buf807', c0, {c0: 112896}, None)]
op808.met_dependencies = 
    [   MemoryDep('arg1397_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1398_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1399_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1400_1', c1, {c0: 1568, c1: 72}, None)]
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf808.users = [NodeUser(node=ExternKernelSchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op808.group.device = cuda:0
op808.group.iteration = (112896, 1)
op808.sizes = ([1568, 72], [])
buf807_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1397_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1398_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1399_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1400_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf808_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op808_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf807', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1397_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1398_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1399_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1400_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf808', get_index_5, relu, None)
        return store


op809: SchedulerNode(ComputedBuffer)
op809.writes = [MemoryDep('buf809', 648*c0 + c1 + 72*c2, {c0: 72, c1: 72, c2: 9}, None)]
op809.unmet_dependencies = []
op809.met_dependencies = [MemoryDep('arg1401_1', c0, {c0: 46656}, None)]
op809.outputs = [
    buf809: ComputedBuffer
    buf809.layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
    buf809.users = [NodeUser(node=ExternKernelSchedulerNode(name='op810'), can_inplace=False, is_weak=False)]
]
op809.group.device = cuda:0
op809.group.iteration = (46656, 1)
op809.sizes = ([72, 72, 9], [])
arg1401_1_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 9, 3, 1])
buf809_layout = FixedLayout('cuda', torch.float32, size=[72, 72, 3, 3], stride=[648, 1, 216, 72])
class op809_loop_body:
    var_ranges = {z0: 72, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf809', get_index_1, load, None)
        return store


op810: ExternKernelSchedulerNode(ExternKernelAlloc)
op810.writes = [StarDep(name='buf810', mode=None)]
op810.unmet_dependencies = [StarDep(name='buf808', mode=None), StarDep(name='buf809', mode=None)]
op810.met_dependencies = []
op810.outputs = [
    buf810: ExternKernelAlloc
    buf810.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf810.users = [NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False)]
]
op810.node.kernel = extern_kernels.convolution


op811: SchedulerNode(ComputedBuffer)
op811.writes = [MemoryDep('buf811', c0, {c0: 112896}, None)]
op811.unmet_dependencies = 
    [   MemoryDep('buf805', c0, {c0: 112896}, None),
        MemoryDep('buf810', c0, {c0: 112896}, None)]
op811.met_dependencies = 
    [   MemoryDep('arg1402_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1403_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1404_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1405_1', c1, {c0: 1568, c1: 72}, None)]
op811.outputs = [
    buf811: ComputedBuffer
    buf811.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf811.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op813'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op874'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op885'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op900'), can_inplace=False, is_weak=False),
    ]
]
op811.group.device = cuda:0
op811.group.iteration = (112896, 1)
op811.sizes = ([1568, 72], [])
buf810_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1402_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1403_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1404_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1405_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf805_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf811_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op811_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf810', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1402_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1403_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1404_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1405_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf805', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf811', get_index_6, relu, None)
        return store


op812: SchedulerNode(ComputedBuffer)
op812.writes = [MemoryDep('buf812', 648*c0 + c1 + 72*c2, {c0: 144, c1: 72, c2: 9}, None)]
op812.unmet_dependencies = []
op812.met_dependencies = [MemoryDep('arg1521_1', c0, {c0: 93312}, None)]
op812.outputs = [
    buf812: ComputedBuffer
    buf812.layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
    buf812.users = [NodeUser(node=ExternKernelSchedulerNode(name='op813'), can_inplace=False, is_weak=False)]
]
op812.group.device = cuda:0
op812.group.iteration = (93312, 1)
op812.sizes = ([144, 72, 9], [])
arg1521_1_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 9, 3, 1])
buf812_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
class op812_loop_body:
    var_ranges = {z0: 144, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1521_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf812', get_index_1, load, None)
        return store


op813: ExternKernelSchedulerNode(ExternKernelAlloc)
op813.writes = [StarDep(name='buf813', mode=None)]
op813.unmet_dependencies = [StarDep(name='buf811', mode=None), StarDep(name='buf812', mode=None)]
op813.met_dependencies = []
op813.outputs = [
    buf813: ExternKernelAlloc
    buf813.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf813.users = [NodeUser(node=SchedulerNode(name='op855'), can_inplace=True, is_weak=False)]
]
op813.node.kernel = extern_kernels.convolution


op814: SchedulerNode(ComputedBuffer)
op814.writes = [MemoryDep('buf814', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op814.unmet_dependencies = []
op814.met_dependencies = [MemoryDep('arg1256_1', c0, {c0: 2916}, None)]
op814.outputs = [
    buf814: ComputedBuffer
    buf814.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf814.users = [NodeUser(node=ExternKernelSchedulerNode(name='op815'), can_inplace=False, is_weak=False)]
]
op814.group.device = cuda:0
op814.group.iteration = (2916, 1)
op814.sizes = ([18, 18, 9], [])
arg1256_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf814_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op814_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1256_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf814', get_index_1, load, None)
        return store


op815: ExternKernelSchedulerNode(ExternKernelAlloc)
op815.writes = [StarDep(name='buf815', mode=None)]
op815.unmet_dependencies = [StarDep(name='buf593', mode=None), StarDep(name='buf814', mode=None)]
op815.met_dependencies = []
op815.outputs = [
    buf815: ExternKernelAlloc
    buf815.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf815.users = [NodeUser(node=SchedulerNode(name='op816'), can_inplace=True, is_weak=False)]
]
op815.node.kernel = extern_kernels.convolution


op816: SchedulerNode(ComputedBuffer)
op816.writes = [MemoryDep('buf816', c0, {c0: 112896}, None)]
op816.unmet_dependencies = [MemoryDep('buf815', c0, {c0: 112896}, None)]
op816.met_dependencies = 
    [   MemoryDep('arg1257_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1258_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1259_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1260_1', c1, {c0: 6272, c1: 18}, None)]
op816.outputs = [
    buf816: ComputedBuffer
    buf816.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf816.users = [NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False)]
]
op816.group.device = cuda:0
op816.group.iteration = (112896, 1)
op816.sizes = ([6272, 18], [])
buf815_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1257_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1258_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1259_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1260_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf816_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op816_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf815', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf816', get_index_5, relu, None)
        return store


op817: SchedulerNode(ComputedBuffer)
op817.writes = [MemoryDep('buf817', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op817.unmet_dependencies = []
op817.met_dependencies = [MemoryDep('arg1261_1', c0, {c0: 2916}, None)]
op817.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf817.users = [NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False)]
]
op817.group.device = cuda:0
op817.group.iteration = (2916, 1)
op817.sizes = ([18, 18, 9], [])
arg1261_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf817_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op817_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1261_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf817', get_index_1, load, None)
        return store


op818: ExternKernelSchedulerNode(ExternKernelAlloc)
op818.writes = [StarDep(name='buf818', mode=None)]
op818.unmet_dependencies = [StarDep(name='buf816', mode=None), StarDep(name='buf817', mode=None)]
op818.met_dependencies = []
op818.outputs = [
    buf818: ExternKernelAlloc
    buf818.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf818.users = [NodeUser(node=SchedulerNode(name='op819'), can_inplace=True, is_weak=False)]
]
op818.node.kernel = extern_kernels.convolution


op819: SchedulerNode(ComputedBuffer)
op819.writes = [MemoryDep('buf819', c0, {c0: 28224}, None)]
op819.unmet_dependencies = [MemoryDep('buf818', c0, {c0: 28224}, None)]
op819.met_dependencies = 
    [   MemoryDep('arg1262_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1263_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1264_1', c1, {c0: 1568, c1: 18}, None),
        MemoryDep('arg1265_1', c1, {c0: 1568, c1: 18}, None)]
op819.outputs = [
    buf819: ComputedBuffer
    buf819.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf819.users = [NodeUser(node=ExternKernelSchedulerNode(name='op821'), can_inplace=False, is_weak=False)]
]
op819.group.device = cuda:0
op819.group.iteration = (28224, 1)
op819.sizes = ([1568, 18], [])
buf818_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg1262_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1263_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1264_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1265_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf819_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
class op819_loop_body:
    var_ranges = {z0: 1568, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf819', get_index_5, relu, None)
        return store


op820: SchedulerNode(ComputedBuffer)
op820.writes = [MemoryDep('buf820', 162*c0 + c1 + 18*c2, {c0: 144, c1: 18, c2: 9}, None)]
op820.unmet_dependencies = []
op820.met_dependencies = [MemoryDep('arg1266_1', c0, {c0: 23328}, None)]
op820.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
    buf820.users = [NodeUser(node=ExternKernelSchedulerNode(name='op821'), can_inplace=False, is_weak=False)]
]
op820.group.device = cuda:0
op820.group.iteration = (23328, 1)
op820.sizes = ([144, 18, 9], [])
arg1266_1_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 9, 3, 1])
buf820_layout = FixedLayout('cuda', torch.float32, size=[144, 18, 3, 3], stride=[162, 1, 54, 18])
class op820_loop_body:
    var_ranges = {z0: 144, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1266_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf820', get_index_1, load, None)
        return store


op821: ExternKernelSchedulerNode(ExternKernelAlloc)
op821.writes = [StarDep(name='buf821', mode=None)]
op821.unmet_dependencies = [StarDep(name='buf819', mode=None), StarDep(name='buf820', mode=None)]
op821.met_dependencies = []
op821.outputs = [
    buf821: ExternKernelAlloc
    buf821.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf821.users = [NodeUser(node=SchedulerNode(name='op827'), can_inplace=True, is_weak=False)]
]
op821.node.kernel = extern_kernels.convolution


op822: SchedulerNode(ComputedBuffer)
op822.writes = [MemoryDep('buf822', 324*c0 + c1 + 36*c2, {c0: 36, c1: 36, c2: 9}, None)]
op822.unmet_dependencies = []
op822.met_dependencies = [MemoryDep('arg1271_1', c0, {c0: 11664}, None)]
op822.outputs = [
    buf822: ComputedBuffer
    buf822.layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
    buf822.users = [NodeUser(node=ExternKernelSchedulerNode(name='op823'), can_inplace=False, is_weak=False)]
]
op822.group.device = cuda:0
op822.group.iteration = (11664, 1)
op822.sizes = ([36, 36, 9], [])
arg1271_1_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 9, 3, 1])
buf822_layout = FixedLayout('cuda', torch.float32, size=[36, 36, 3, 3], stride=[324, 1, 108, 36])
class op822_loop_body:
    var_ranges = {z0: 36, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1271_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf822', get_index_1, load, None)
        return store


op823: ExternKernelSchedulerNode(ExternKernelAlloc)
op823.writes = [StarDep(name='buf823', mode=None)]
op823.unmet_dependencies = [StarDep(name='buf624', mode=None), StarDep(name='buf822', mode=None)]
op823.met_dependencies = []
op823.outputs = [
    buf823: ExternKernelAlloc
    buf823.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf823.users = [NodeUser(node=SchedulerNode(name='op824'), can_inplace=True, is_weak=False)]
]
op823.node.kernel = extern_kernels.convolution


op824: SchedulerNode(ComputedBuffer)
op824.writes = [MemoryDep('buf824', c0, {c0: 56448}, None)]
op824.unmet_dependencies = [MemoryDep('buf823', c0, {c0: 56448}, None)]
op824.met_dependencies = 
    [   MemoryDep('arg1272_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1273_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1274_1', c1, {c0: 1568, c1: 36}, None),
        MemoryDep('arg1275_1', c1, {c0: 1568, c1: 36}, None)]
op824.outputs = [
    buf824: ComputedBuffer
    buf824.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf824.users = [NodeUser(node=ExternKernelSchedulerNode(name='op826'), can_inplace=False, is_weak=False)]
]
op824.group.device = cuda:0
op824.group.iteration = (56448, 1)
op824.sizes = ([1568, 36], [])
buf823_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg1272_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1273_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1274_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1275_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf824_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
class op824_loop_body:
    var_ranges = {z0: 1568, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf823', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf824', get_index_5, relu, None)
        return store


op825: SchedulerNode(ComputedBuffer)
op825.writes = [MemoryDep('buf825', 324*c0 + c1 + 36*c2, {c0: 144, c1: 36, c2: 9}, None)]
op825.unmet_dependencies = []
op825.met_dependencies = [MemoryDep('arg1276_1', c0, {c0: 46656}, None)]
op825.outputs = [
    buf825: ComputedBuffer
    buf825.layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
    buf825.users = [NodeUser(node=ExternKernelSchedulerNode(name='op826'), can_inplace=False, is_weak=False)]
]
op825.group.device = cuda:0
op825.group.iteration = (46656, 1)
op825.sizes = ([144, 36, 9], [])
arg1276_1_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 9, 3, 1])
buf825_layout = FixedLayout('cuda', torch.float32, size=[144, 36, 3, 3], stride=[324, 1, 108, 36])
class op825_loop_body:
    var_ranges = {z0: 144, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1276_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf825', get_index_1, load, None)
        return store


op826: ExternKernelSchedulerNode(ExternKernelAlloc)
op826.writes = [StarDep(name='buf826', mode=None)]
op826.unmet_dependencies = [StarDep(name='buf824', mode=None), StarDep(name='buf825', mode=None)]
op826.met_dependencies = []
op826.outputs = [
    buf826: ExternKernelAlloc
    buf826.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf826.users = [NodeUser(node=SchedulerNode(name='op827'), can_inplace=True, is_weak=False)]
]
op826.node.kernel = extern_kernels.convolution


op827: SchedulerNode(ComputedBuffer)
op827.writes = [MemoryDep('buf827', c0, {c0: 56448}, None)]
op827.unmet_dependencies = 
    [   MemoryDep('buf821', c0, {c0: 56448}, None),
        MemoryDep('buf826', c0, {c0: 56448}, None)]
op827.met_dependencies = 
    [   MemoryDep('arg1267_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1268_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1269_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1270_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1277_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1278_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1279_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1280_1', c1, {c0: 392, c1: 144}, None)]
op827.outputs = [
    buf827: ComputedBuffer
    buf827.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf827.users = [NodeUser(node=SchedulerNode(name='op830'), can_inplace=True, is_weak=False)]
]
op827.group.device = cuda:0
op827.group.iteration = (56448, 1)
op827.sizes = ([392, 144], [])
buf821_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1267_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1268_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1269_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1270_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf826_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1277_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1278_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1279_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1280_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf827_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op827_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf821', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf826', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1277_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1278_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1279_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1280_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf827', get_index_10, add_4, None)
        return store


op828: SchedulerNode(ComputedBuffer)
op828.writes = [MemoryDep('buf828', 648*c0 + c1 + 72*c2, {c0: 144, c1: 72, c2: 9}, None)]
op828.unmet_dependencies = []
op828.met_dependencies = [MemoryDep('arg1281_1', c0, {c0: 93312}, None)]
op828.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
    buf828.users = [NodeUser(node=ExternKernelSchedulerNode(name='op829'), can_inplace=False, is_weak=False)]
]
op828.group.device = cuda:0
op828.group.iteration = (93312, 1)
op828.sizes = ([144, 72, 9], [])
arg1281_1_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 9, 3, 1])
buf828_layout = FixedLayout('cuda', torch.float32, size=[144, 72, 3, 3], stride=[648, 1, 216, 72])
class op828_loop_body:
    var_ranges = {z0: 144, z1: 72, z2: 9}
    index0 = 648*z0 + 9*z1 + z2
    index1 = 648*z0 + z1 + 72*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1281_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf828', get_index_1, load, None)
        return store


op829: ExternKernelSchedulerNode(ExternKernelAlloc)
op829.writes = [StarDep(name='buf829', mode=None)]
op829.unmet_dependencies = [StarDep(name='buf661', mode=None), StarDep(name='buf828', mode=None)]
op829.met_dependencies = []
op829.outputs = [
    buf829: ExternKernelAlloc
    buf829.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf829.users = [NodeUser(node=SchedulerNode(name='op830'), can_inplace=True, is_weak=False)]
]
op829.node.kernel = extern_kernels.convolution


op830: SchedulerNode(ComputedBuffer)
op830.writes = [MemoryDep('buf830', c0, {c0: 56448}, None)]
op830.unmet_dependencies = 
    [   MemoryDep('buf704', c0, {c0: 56448}, None),
        MemoryDep('buf827', c0, {c0: 56448}, None),
        MemoryDep('buf829', c0, {c0: 56448}, None)]
op830.met_dependencies = 
    [   MemoryDep('arg1282_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1283_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1284_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1285_1', c1, {c0: 392, c1: 144}, None)]
op830.outputs = [
    buf830: ComputedBuffer
    buf830.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf830.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op836'), can_inplace=True, is_weak=False),
    ]
]
op830.group.device = cuda:0
op830.group.iteration = (56448, 1)
op830.sizes = ([392, 144], [])
buf827_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf829_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1282_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1283_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1284_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1285_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf830_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op830_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf827', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf829', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1282_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1283_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1284_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1285_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf704', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf830', get_index_7, relu, None)
        return store


op831: SchedulerNode(ComputedBuffer)
op831.writes = [MemoryDep('buf831', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op831.unmet_dependencies = []
op831.met_dependencies = [MemoryDep('arg1406_1', c0, {c0: 186624}, None)]
op831.outputs = [
    buf831: ComputedBuffer
    buf831.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf831.users = [NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False)]
]
op831.group.device = cuda:0
op831.group.iteration = (186624, 1)
op831.sizes = ([144, 144, 9], [])
arg1406_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf831_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op831_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1406_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf831', get_index_1, load, None)
        return store


op832: ExternKernelSchedulerNode(ExternKernelAlloc)
op832.writes = [StarDep(name='buf832', mode=None)]
op832.unmet_dependencies = [StarDep(name='buf830', mode=None), StarDep(name='buf831', mode=None)]
op832.met_dependencies = []
op832.outputs = [
    buf832: ExternKernelAlloc
    buf832.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf832.users = [NodeUser(node=SchedulerNode(name='op833'), can_inplace=True, is_weak=False)]
]
op832.node.kernel = extern_kernels.convolution


op833: SchedulerNode(ComputedBuffer)
op833.writes = [MemoryDep('buf833', c0, {c0: 56448}, None)]
op833.unmet_dependencies = [MemoryDep('buf832', c0, {c0: 56448}, None)]
op833.met_dependencies = 
    [   MemoryDep('arg1407_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1408_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1409_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1410_1', c1, {c0: 392, c1: 144}, None)]
op833.outputs = [
    buf833: ComputedBuffer
    buf833.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf833.users = [NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False)]
]
op833.group.device = cuda:0
op833.group.iteration = (56448, 1)
op833.sizes = ([392, 144], [])
buf832_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1407_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1408_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1409_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1410_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf833_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op833_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf832', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1407_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1408_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1409_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1410_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf833', get_index_5, relu, None)
        return store


op834: SchedulerNode(ComputedBuffer)
op834.writes = [MemoryDep('buf834', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op834.unmet_dependencies = []
op834.met_dependencies = [MemoryDep('arg1411_1', c0, {c0: 186624}, None)]
op834.outputs = [
    buf834: ComputedBuffer
    buf834.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf834.users = [NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False)]
]
op834.group.device = cuda:0
op834.group.iteration = (186624, 1)
op834.sizes = ([144, 144, 9], [])
arg1411_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf834_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op834_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1411_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf834', get_index_1, load, None)
        return store


op835: ExternKernelSchedulerNode(ExternKernelAlloc)
op835.writes = [StarDep(name='buf835', mode=None)]
op835.unmet_dependencies = [StarDep(name='buf833', mode=None), StarDep(name='buf834', mode=None)]
op835.met_dependencies = []
op835.outputs = [
    buf835: ExternKernelAlloc
    buf835.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf835.users = [NodeUser(node=SchedulerNode(name='op836'), can_inplace=True, is_weak=False)]
]
op835.node.kernel = extern_kernels.convolution


op836: SchedulerNode(ComputedBuffer)
op836.writes = [MemoryDep('buf836', c0, {c0: 56448}, None)]
op836.unmet_dependencies = 
    [   MemoryDep('buf830', c0, {c0: 56448}, None),
        MemoryDep('buf835', c0, {c0: 56448}, None)]
op836.met_dependencies = 
    [   MemoryDep('arg1412_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1413_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1414_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1415_1', c1, {c0: 392, c1: 144}, None)]
op836.outputs = [
    buf836: ComputedBuffer
    buf836.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf836.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=True, is_weak=False),
    ]
]
op836.group.device = cuda:0
op836.group.iteration = (56448, 1)
op836.sizes = ([392, 144], [])
buf835_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1412_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1413_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1414_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1415_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf830_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf836_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op836_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf835', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1413_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf830', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf836', get_index_6, relu, None)
        return store


op837: SchedulerNode(ComputedBuffer)
op837.writes = [MemoryDep('buf837', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op837.unmet_dependencies = []
op837.met_dependencies = [MemoryDep('arg1416_1', c0, {c0: 186624}, None)]
op837.outputs = [
    buf837: ComputedBuffer
    buf837.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf837.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
]
op837.group.device = cuda:0
op837.group.iteration = (186624, 1)
op837.sizes = ([144, 144, 9], [])
arg1416_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf837_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op837_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1416_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf837', get_index_1, load, None)
        return store


op838: ExternKernelSchedulerNode(ExternKernelAlloc)
op838.writes = [StarDep(name='buf838', mode=None)]
op838.unmet_dependencies = [StarDep(name='buf836', mode=None), StarDep(name='buf837', mode=None)]
op838.met_dependencies = []
op838.outputs = [
    buf838: ExternKernelAlloc
    buf838.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf838.users = [NodeUser(node=SchedulerNode(name='op839'), can_inplace=True, is_weak=False)]
]
op838.node.kernel = extern_kernels.convolution


op839: SchedulerNode(ComputedBuffer)
op839.writes = [MemoryDep('buf839', c0, {c0: 56448}, None)]
op839.unmet_dependencies = [MemoryDep('buf838', c0, {c0: 56448}, None)]
op839.met_dependencies = 
    [   MemoryDep('arg1417_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1418_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1419_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1420_1', c1, {c0: 392, c1: 144}, None)]
op839.outputs = [
    buf839: ComputedBuffer
    buf839.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf839.users = [NodeUser(node=ExternKernelSchedulerNode(name='op841'), can_inplace=False, is_weak=False)]
]
op839.group.device = cuda:0
op839.group.iteration = (56448, 1)
op839.sizes = ([392, 144], [])
buf838_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1417_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1418_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1419_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1420_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf839_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op839_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1417_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1418_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1419_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1420_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf839', get_index_5, relu, None)
        return store


op840: SchedulerNode(ComputedBuffer)
op840.writes = [MemoryDep('buf840', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op840.unmet_dependencies = []
op840.met_dependencies = [MemoryDep('arg1421_1', c0, {c0: 186624}, None)]
op840.outputs = [
    buf840: ComputedBuffer
    buf840.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf840.users = [NodeUser(node=ExternKernelSchedulerNode(name='op841'), can_inplace=False, is_weak=False)]
]
op840.group.device = cuda:0
op840.group.iteration = (186624, 1)
op840.sizes = ([144, 144, 9], [])
arg1421_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf840_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op840_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1421_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf840', get_index_1, load, None)
        return store


op841: ExternKernelSchedulerNode(ExternKernelAlloc)
op841.writes = [StarDep(name='buf841', mode=None)]
op841.unmet_dependencies = [StarDep(name='buf839', mode=None), StarDep(name='buf840', mode=None)]
op841.met_dependencies = []
op841.outputs = [
    buf841: ExternKernelAlloc
    buf841.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf841.users = [NodeUser(node=SchedulerNode(name='op842'), can_inplace=True, is_weak=False)]
]
op841.node.kernel = extern_kernels.convolution


op842: SchedulerNode(ComputedBuffer)
op842.writes = [MemoryDep('buf842', c0, {c0: 56448}, None)]
op842.unmet_dependencies = 
    [   MemoryDep('buf836', c0, {c0: 56448}, None),
        MemoryDep('buf841', c0, {c0: 56448}, None)]
op842.met_dependencies = 
    [   MemoryDep('arg1422_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1423_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1424_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1425_1', c1, {c0: 392, c1: 144}, None)]
op842.outputs = [
    buf842: ComputedBuffer
    buf842.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf842.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op848'), can_inplace=True, is_weak=False),
    ]
]
op842.group.device = cuda:0
op842.group.iteration = (56448, 1)
op842.sizes = ([392, 144], [])
buf841_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1422_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1423_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1424_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1425_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf836_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf842_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op842_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf841', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1422_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1423_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1424_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1425_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf836', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf842', get_index_6, relu, None)
        return store


op843: SchedulerNode(ComputedBuffer)
op843.writes = [MemoryDep('buf843', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op843.unmet_dependencies = []
op843.met_dependencies = [MemoryDep('arg1426_1', c0, {c0: 186624}, None)]
op843.outputs = [
    buf843: ComputedBuffer
    buf843.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf843.users = [NodeUser(node=ExternKernelSchedulerNode(name='op844'), can_inplace=False, is_weak=False)]
]
op843.group.device = cuda:0
op843.group.iteration = (186624, 1)
op843.sizes = ([144, 144, 9], [])
arg1426_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf843_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op843_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1426_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf843', get_index_1, load, None)
        return store


op844: ExternKernelSchedulerNode(ExternKernelAlloc)
op844.writes = [StarDep(name='buf844', mode=None)]
op844.unmet_dependencies = [StarDep(name='buf842', mode=None), StarDep(name='buf843', mode=None)]
op844.met_dependencies = []
op844.outputs = [
    buf844: ExternKernelAlloc
    buf844.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf844.users = [NodeUser(node=SchedulerNode(name='op845'), can_inplace=True, is_weak=False)]
]
op844.node.kernel = extern_kernels.convolution


op845: SchedulerNode(ComputedBuffer)
op845.writes = [MemoryDep('buf845', c0, {c0: 56448}, None)]
op845.unmet_dependencies = [MemoryDep('buf844', c0, {c0: 56448}, None)]
op845.met_dependencies = 
    [   MemoryDep('arg1427_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1428_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1429_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1430_1', c1, {c0: 392, c1: 144}, None)]
op845.outputs = [
    buf845: ComputedBuffer
    buf845.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf845.users = [NodeUser(node=ExternKernelSchedulerNode(name='op847'), can_inplace=False, is_weak=False)]
]
op845.group.device = cuda:0
op845.group.iteration = (56448, 1)
op845.sizes = ([392, 144], [])
buf844_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1427_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1428_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1429_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1430_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf845_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op845_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf844', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1427_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1428_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1429_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1430_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf845', get_index_5, relu, None)
        return store


op846: SchedulerNode(ComputedBuffer)
op846.writes = [MemoryDep('buf846', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op846.unmet_dependencies = []
op846.met_dependencies = [MemoryDep('arg1431_1', c0, {c0: 186624}, None)]
op846.outputs = [
    buf846: ComputedBuffer
    buf846.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf846.users = [NodeUser(node=ExternKernelSchedulerNode(name='op847'), can_inplace=False, is_weak=False)]
]
op846.group.device = cuda:0
op846.group.iteration = (186624, 1)
op846.sizes = ([144, 144, 9], [])
arg1431_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf846_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op846_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1431_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf846', get_index_1, load, None)
        return store


op847: ExternKernelSchedulerNode(ExternKernelAlloc)
op847.writes = [StarDep(name='buf847', mode=None)]
op847.unmet_dependencies = [StarDep(name='buf845', mode=None), StarDep(name='buf846', mode=None)]
op847.met_dependencies = []
op847.outputs = [
    buf847: ExternKernelAlloc
    buf847.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf847.users = [NodeUser(node=SchedulerNode(name='op848'), can_inplace=True, is_weak=False)]
]
op847.node.kernel = extern_kernels.convolution


op848: SchedulerNode(ComputedBuffer)
op848.writes = [MemoryDep('buf848', c0, {c0: 56448}, None)]
op848.unmet_dependencies = 
    [   MemoryDep('buf842', c0, {c0: 56448}, None),
        MemoryDep('buf847', c0, {c0: 56448}, None)]
op848.met_dependencies = 
    [   MemoryDep('arg1432_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1433_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1434_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1435_1', c1, {c0: 392, c1: 144}, None)]
op848.outputs = [
    buf848: ComputedBuffer
    buf848.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf848.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op850'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op854'), can_inplace=True, is_weak=False),
    ]
]
op848.group.device = cuda:0
op848.group.iteration = (56448, 1)
op848.sizes = ([392, 144], [])
buf847_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1432_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1433_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1434_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1435_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf842_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf848_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op848_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf847', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1432_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1433_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1434_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1435_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf842', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf848', get_index_6, relu, None)
        return store


op849: SchedulerNode(ComputedBuffer)
op849.writes = [MemoryDep('buf849', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op849.unmet_dependencies = []
op849.met_dependencies = [MemoryDep('arg1436_1', c0, {c0: 186624}, None)]
op849.outputs = [
    buf849: ComputedBuffer
    buf849.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf849.users = [NodeUser(node=ExternKernelSchedulerNode(name='op850'), can_inplace=False, is_weak=False)]
]
op849.group.device = cuda:0
op849.group.iteration = (186624, 1)
op849.sizes = ([144, 144, 9], [])
arg1436_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf849_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op849_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1436_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf849', get_index_1, load, None)
        return store


op850: ExternKernelSchedulerNode(ExternKernelAlloc)
op850.writes = [StarDep(name='buf850', mode=None)]
op850.unmet_dependencies = [StarDep(name='buf848', mode=None), StarDep(name='buf849', mode=None)]
op850.met_dependencies = []
op850.outputs = [
    buf850: ExternKernelAlloc
    buf850.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf850.users = [NodeUser(node=SchedulerNode(name='op851'), can_inplace=True, is_weak=False)]
]
op850.node.kernel = extern_kernels.convolution


op851: SchedulerNode(ComputedBuffer)
op851.writes = [MemoryDep('buf851', c0, {c0: 56448}, None)]
op851.unmet_dependencies = [MemoryDep('buf850', c0, {c0: 56448}, None)]
op851.met_dependencies = 
    [   MemoryDep('arg1437_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1438_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1439_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1440_1', c1, {c0: 392, c1: 144}, None)]
op851.outputs = [
    buf851: ComputedBuffer
    buf851.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf851.users = [NodeUser(node=ExternKernelSchedulerNode(name='op853'), can_inplace=False, is_weak=False)]
]
op851.group.device = cuda:0
op851.group.iteration = (56448, 1)
op851.sizes = ([392, 144], [])
buf850_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1437_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1438_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1439_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1440_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf851_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op851_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1437_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1438_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1439_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1440_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf851', get_index_5, relu, None)
        return store


op852: SchedulerNode(ComputedBuffer)
op852.writes = [MemoryDep('buf852', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op852.unmet_dependencies = []
op852.met_dependencies = [MemoryDep('arg1441_1', c0, {c0: 186624}, None)]
op852.outputs = [
    buf852: ComputedBuffer
    buf852.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf852.users = [NodeUser(node=ExternKernelSchedulerNode(name='op853'), can_inplace=False, is_weak=False)]
]
op852.group.device = cuda:0
op852.group.iteration = (186624, 1)
op852.sizes = ([144, 144, 9], [])
arg1441_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf852_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op852_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1441_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf852', get_index_1, load, None)
        return store


op853: ExternKernelSchedulerNode(ExternKernelAlloc)
op853.writes = [StarDep(name='buf853', mode=None)]
op853.unmet_dependencies = [StarDep(name='buf851', mode=None), StarDep(name='buf852', mode=None)]
op853.met_dependencies = []
op853.outputs = [
    buf853: ExternKernelAlloc
    buf853.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf853.users = [NodeUser(node=SchedulerNode(name='op854'), can_inplace=True, is_weak=False)]
]
op853.node.kernel = extern_kernels.convolution


op854: SchedulerNode(ComputedBuffer)
op854.writes = [MemoryDep('buf854', c0, {c0: 56448}, None)]
op854.unmet_dependencies = 
    [   MemoryDep('buf848', c0, {c0: 56448}, None),
        MemoryDep('buf853', c0, {c0: 56448}, None)]
op854.met_dependencies = 
    [   MemoryDep('arg1442_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1443_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1444_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1445_1', c1, {c0: 392, c1: 144}, None)]
op854.outputs = [
    buf854: ComputedBuffer
    buf854.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf854.users = [
        NodeUser(node=SchedulerNode(name='op855'), can_inplace=True, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op872'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op887'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op902'), can_inplace=False, is_weak=False),
    ]
]
op854.group.device = cuda:0
op854.group.iteration = (56448, 1)
op854.sizes = ([392, 144], [])
buf853_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1442_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1443_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1444_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1445_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf848_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf854_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op854_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf853', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf848', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf854', get_index_6, relu, None)
        return store


op855: SchedulerNode(ComputedBuffer)
op855.writes = [MemoryDep('buf855', c0, {c0: 56448}, None)]
op855.unmet_dependencies = 
    [   MemoryDep('buf776', c0, {c0: 56448}, None),
        MemoryDep('buf813', c0, {c0: 56448}, None),
        MemoryDep('buf854', c0, {c0: 56448}, None)]
op855.met_dependencies = 
    [   MemoryDep('arg1522_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1523_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1524_1', c1, {c0: 392, c1: 144}, None),
        MemoryDep('arg1525_1', c1, {c0: 392, c1: 144}, None)]
op855.outputs = [
    buf855: ComputedBuffer
    buf855.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
    buf855.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op862'), can_inplace=False, is_weak=False),
    ]
]
op855.group.device = cuda:0
op855.group.iteration = (56448, 1)
op855.sizes = ([392, 144], [])
buf776_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf813_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
arg1522_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1523_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1524_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg1525_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf854_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
buf855_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 7, 7], stride=[7056, 1, 1008, 144])
class op855_loop_body:
    var_ranges = {z0: 392, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf776', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf813', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1522_1', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1523_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_3, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1524_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1525_1', get_index_5)
        add_1 = ops.add(mul_2, load_5)
        add_2 = ops.add(load, add_1)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf854', get_index_6)
        add_3 = ops.add(add_2, load_6)
        relu = ops.relu(add_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf855', get_index_7, relu, None)
        return store


op856: ExternKernelSchedulerNode(ExternKernelAlloc)
op856.writes = [StarDep(name='buf856', mode=None)]
op856.unmet_dependencies = [StarDep(name='buf855', mode=None)]
op856.met_dependencies = [StarDep(name='arg1598_1', mode=None)]
op856.outputs = [
    buf856: ExternKernelAlloc
    buf856.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf856.users = [NodeUser(node=SchedulerNode(name='op857'), can_inplace=True, is_weak=False)]
]
op856.node.kernel = extern_kernels.convolution


op857: SchedulerNode(ComputedBuffer)
op857.writes = [MemoryDep('buf857', c0, {c0: 100352}, None)]
op857.unmet_dependencies = [MemoryDep('buf856', c0, {c0: 100352}, None)]
op857.met_dependencies = 
    [   MemoryDep('arg1599_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1600_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1601_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1602_1', c1, {c0: 392, c1: 256}, None)]
op857.outputs = [
    buf857: ComputedBuffer
    buf857.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf857.users = [NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False)]
]
op857.group.device = cuda:0
op857.group.iteration = (100352, 1)
op857.sizes = ([392, 256], [])
buf856_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
arg1599_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1600_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1601_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1602_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf857_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op857_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf856', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1599_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1600_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1601_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1602_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf857', get_index_5, relu, None)
        return store


op858: SchedulerNode(ComputedBuffer)
op858.writes = [MemoryDep('buf858', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op858.unmet_dependencies = []
op858.met_dependencies = [MemoryDep('arg1603_1', c0, {c0: 589824}, None)]
op858.outputs = [
    buf858: ComputedBuffer
    buf858.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf858.users = [NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False)]
]
op858.group.device = cuda:0
op858.group.iteration = (589824, 1)
op858.sizes = ([256, 256, 9], [])
arg1603_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf858_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op858_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1603_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf858', get_index_1, load, None)
        return store


op859: ExternKernelSchedulerNode(ExternKernelAlloc)
op859.writes = [StarDep(name='buf859', mode=None)]
op859.unmet_dependencies = [StarDep(name='buf857', mode=None), StarDep(name='buf858', mode=None)]
op859.met_dependencies = []
op859.outputs = [
    buf859: ExternKernelAlloc
    buf859.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf859.users = [NodeUser(node=SchedulerNode(name='op860'), can_inplace=True, is_weak=False)]
]
op859.node.kernel = extern_kernels.convolution


op860: SchedulerNode(ComputedBuffer)
op860.writes = [MemoryDep('buf860', c0, {c0: 100352}, None)]
op860.unmet_dependencies = [MemoryDep('buf859', c0, {c0: 100352}, None)]
op860.met_dependencies = 
    [   MemoryDep('arg1604_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1605_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1606_1', c1, {c0: 392, c1: 256}, None),
        MemoryDep('arg1607_1', c1, {c0: 392, c1: 256}, None)]
op860.outputs = [
    buf860: ComputedBuffer
    buf860.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
    buf860.users = [NodeUser(node=ExternKernelSchedulerNode(name='op861'), can_inplace=False, is_weak=False)]
]
op860.group.device = cuda:0
op860.group.iteration = (100352, 1)
op860.sizes = ([392, 256], [])
buf859_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
arg1604_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1605_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1606_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1607_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf860_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 7, 7], stride=[12544, 1, 1792, 256])
class op860_loop_body:
    var_ranges = {z0: 392, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf859', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1604_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1605_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1606_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1607_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf860', get_index_5, relu, None)
        return store


op861: ExternKernelSchedulerNode(ExternKernelAlloc)
op861.writes = [StarDep(name='buf861', mode=None)]
op861.unmet_dependencies = [StarDep(name='buf860', mode=None)]
op861.met_dependencies = [StarDep(name='arg1608_1', mode=None)]
op861.outputs = [
    buf861: ExternKernelAlloc
    buf861.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf861.users = [NodeUser(node=SchedulerNode(name='op863'), can_inplace=True, is_weak=False)]
]
op861.node.kernel = extern_kernels.convolution


op862: ExternKernelSchedulerNode(ExternKernelAlloc)
op862.writes = [StarDep(name='buf862', mode=None)]
op862.unmet_dependencies = [StarDep(name='buf855', mode=None)]
op862.met_dependencies = [StarDep(name='arg1613_1', mode=None)]
op862.outputs = [
    buf862: ExternKernelAlloc
    buf862.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf862.users = [NodeUser(node=SchedulerNode(name='op863'), can_inplace=True, is_weak=False)]
]
op862.node.kernel = extern_kernels.convolution


op863: SchedulerNode(ComputedBuffer)
op863.writes = [MemoryDep('buf863', c0, {c0: 401408}, None)]
op863.unmet_dependencies = 
    [   MemoryDep('buf861', c0, {c0: 401408}, None),
        MemoryDep('buf862', c0, {c0: 401408}, None)]
op863.met_dependencies = 
    [   MemoryDep('arg1609_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1610_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1611_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1612_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1614_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1615_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1616_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1617_1', c1, {c0: 392, c1: 1024}, None)]
op863.outputs = [
    buf863: ComputedBuffer
    buf863.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf863.users = [NodeUser(node=SchedulerNode(name='op922'), can_inplace=True, is_weak=False)]
]
op863.group.device = cuda:0
op863.group.iteration = (401408, 1)
op863.sizes = ([392, 1024], [])
buf861_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg1609_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1610_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1611_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1612_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf862_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg1614_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1615_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1616_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1617_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf863_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
class op863_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1609_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1610_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1611_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1612_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf862', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1614_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1615_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1616_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1617_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf863', get_index_10, add_4, None)
        return store


op864: SchedulerNode(ComputedBuffer)
op864.writes = [MemoryDep('buf864', 162*c0 + c1 + 18*c2, {c0: 18, c1: 18, c2: 9}, None)]
op864.unmet_dependencies = []
op864.met_dependencies = [MemoryDep('arg1476_1', c0, {c0: 2916}, None)]
op864.outputs = [
    buf864: ComputedBuffer
    buf864.layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
    buf864.users = [NodeUser(node=ExternKernelSchedulerNode(name='op865'), can_inplace=False, is_weak=False)]
]
op864.group.device = cuda:0
op864.group.iteration = (2916, 1)
op864.sizes = ([18, 18, 9], [])
arg1476_1_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 9, 3, 1])
buf864_layout = FixedLayout('cuda', torch.float32, size=[18, 18, 3, 3], stride=[162, 1, 54, 18])
class op864_loop_body:
    var_ranges = {z0: 18, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1476_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf864', get_index_1, load, None)
        return store


op865: ExternKernelSchedulerNode(ExternKernelAlloc)
op865.writes = [StarDep(name='buf865', mode=None)]
op865.unmet_dependencies = [StarDep(name='buf731', mode=None), StarDep(name='buf864', mode=None)]
op865.met_dependencies = []
op865.outputs = [
    buf865: ExternKernelAlloc
    buf865.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf865.users = [NodeUser(node=SchedulerNode(name='op866'), can_inplace=True, is_weak=False)]
]
op865.node.kernel = extern_kernels.convolution


op866: SchedulerNode(ComputedBuffer)
op866.writes = [MemoryDep('buf866', c0, {c0: 112896}, None)]
op866.unmet_dependencies = [MemoryDep('buf865', c0, {c0: 112896}, None)]
op866.met_dependencies = 
    [   MemoryDep('arg1477_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1478_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1479_1', c1, {c0: 6272, c1: 18}, None),
        MemoryDep('arg1480_1', c1, {c0: 6272, c1: 18}, None)]
op866.outputs = [
    buf866: ComputedBuffer
    buf866.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf866.users = [NodeUser(node=ExternKernelSchedulerNode(name='op868'), can_inplace=False, is_weak=False)]
]
op866.group.device = cuda:0
op866.group.iteration = (112896, 1)
op866.sizes = ([6272, 18], [])
buf865_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1477_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1478_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1479_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1480_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf866_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
class op866_loop_body:
    var_ranges = {z0: 6272, z1: 18}
    index0 = 18*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf865', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1477_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1478_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1479_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1480_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf866', get_index_5, relu, None)
        return store


op867: SchedulerNode(ComputedBuffer)
op867.writes = [MemoryDep('buf867', 162*c0 + c1 + 18*c2, {c0: 72, c1: 18, c2: 9}, None)]
op867.unmet_dependencies = []
op867.met_dependencies = [MemoryDep('arg1481_1', c0, {c0: 11664}, None)]
op867.outputs = [
    buf867: ComputedBuffer
    buf867.layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
    buf867.users = [NodeUser(node=ExternKernelSchedulerNode(name='op868'), can_inplace=False, is_weak=False)]
]
op867.group.device = cuda:0
op867.group.iteration = (11664, 1)
op867.sizes = ([72, 18, 9], [])
arg1481_1_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 9, 3, 1])
buf867_layout = FixedLayout('cuda', torch.float32, size=[72, 18, 3, 3], stride=[162, 1, 54, 18])
class op867_loop_body:
    var_ranges = {z0: 72, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1481_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf867', get_index_1, load, None)
        return store


op868: ExternKernelSchedulerNode(ExternKernelAlloc)
op868.writes = [StarDep(name='buf868', mode=None)]
op868.unmet_dependencies = [StarDep(name='buf866', mode=None), StarDep(name='buf867', mode=None)]
op868.met_dependencies = []
op868.outputs = [
    buf868: ExternKernelAlloc
    buf868.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf868.users = [NodeUser(node=SchedulerNode(name='op871'), can_inplace=True, is_weak=False)]
]
op868.node.kernel = extern_kernels.convolution


op869: SchedulerNode(ComputedBuffer)
op869.writes = [MemoryDep('buf869', 324*c0 + c1 + 36*c2, {c0: 72, c1: 36, c2: 9}, None)]
op869.unmet_dependencies = []
op869.met_dependencies = [MemoryDep('arg1486_1', c0, {c0: 23328}, None)]
op869.outputs = [
    buf869: ComputedBuffer
    buf869.layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
    buf869.users = [NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False)]
]
op869.group.device = cuda:0
op869.group.iteration = (23328, 1)
op869.sizes = ([72, 36, 9], [])
arg1486_1_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 9, 3, 1])
buf869_layout = FixedLayout('cuda', torch.float32, size=[72, 36, 3, 3], stride=[324, 1, 108, 36])
class op869_loop_body:
    var_ranges = {z0: 72, z1: 36, z2: 9}
    index0 = 324*z0 + 9*z1 + z2
    index1 = 324*z0 + z1 + 36*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1486_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf869', get_index_1, load, None)
        return store


op870: ExternKernelSchedulerNode(ExternKernelAlloc)
op870.writes = [StarDep(name='buf870', mode=None)]
op870.unmet_dependencies = [StarDep(name='buf770', mode=None), StarDep(name='buf869', mode=None)]
op870.met_dependencies = []
op870.outputs = [
    buf870: ExternKernelAlloc
    buf870.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf870.users = [NodeUser(node=SchedulerNode(name='op871'), can_inplace=True, is_weak=False)]
]
op870.node.kernel = extern_kernels.convolution


op871: SchedulerNode(ComputedBuffer)
op871.writes = [MemoryDep('buf871', c0, {c0: 112896}, None)]
op871.unmet_dependencies = 
    [   MemoryDep('buf868', c0, {c0: 112896}, None),
        MemoryDep('buf870', c0, {c0: 112896}, None)]
op871.met_dependencies = 
    [   MemoryDep('arg1482_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1483_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1484_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1485_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1487_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1488_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1489_1', c1, {c0: 1568, c1: 72}, None),
        MemoryDep('arg1490_1', c1, {c0: 1568, c1: 72}, None)]
op871.outputs = [
    buf871: ComputedBuffer
    buf871.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf871.users = [NodeUser(node=SchedulerNode(name='op874'), can_inplace=True, is_weak=False)]
]
op871.group.device = cuda:0
op871.group.iteration = (112896, 1)
op871.sizes = ([1568, 72], [])
buf868_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1482_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1483_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1484_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1485_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf870_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
arg1487_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1488_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1489_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1490_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf871_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op871_loop_body:
    var_ranges = {z0: 1568, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf868', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1482_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1483_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1484_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1485_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf870', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1487_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1488_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1489_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1490_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf871', get_index_10, add_4, None)
        return store


op872: ExternKernelSchedulerNode(ExternKernelAlloc)
op872.writes = [StarDep(name='buf872', mode=None)]
op872.unmet_dependencies = [StarDep(name='buf854', mode=None)]
op872.met_dependencies = [StarDep(name='arg1491_1', mode=None)]
op872.outputs = [
    buf872: ExternKernelAlloc
    buf872.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
    buf872.users = [NodeUser(node=SchedulerNode(name='op873'), can_inplace=False, is_weak=False)]
]
op872.node.kernel = extern_kernels.convolution


op873: SchedulerNode(ComputedBuffer)
op873.writes = [MemoryDep('buf873', c0, {c0: 112896}, None)]
op873.unmet_dependencies = [MemoryDep('buf872', 3528*c0 + c1 + 504*tmp0 + 72*tmp1, {c0: 8, c1: 72}, None)]
op873.met_dependencies = 
    [   MemoryDep('arg1492_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1493_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1494_1', c1, {c0: 8, c1: 72}, None),
        MemoryDep('arg1495_1', c1, {c0: 8, c1: 72}, None)]
op873.outputs = [
    buf873: ComputedBuffer
    buf873.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
    buf873.users = [NodeUser(node=SchedulerNode(name='op874'), can_inplace=False, is_weak=False)]
]
op873.group.device = cuda:0
op873.group.iteration = (112896, 1)
op873.sizes = ([8, 72, 14, 14], [])
buf872_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 7, 7], stride=[3528, 1, 504, 72])
arg1492_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1493_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1494_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg1495_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf873_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
class op873_loop_body:
    var_ranges = {z0: 8, z1: 72, z2: 14, z3: 14}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 72*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 14112*z0 + 196*z1 + 14*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf872', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1492_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1493_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1494_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1495_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf873', get_index_7, add_1, None)
        return store


op874: SchedulerNode(ComputedBuffer)
op874.writes = [MemoryDep('buf874', c0, {c0: 112896}, None)]
op874.unmet_dependencies = 
    [   MemoryDep('buf811', c0, {c0: 112896}, None),
        MemoryDep('buf871', c0, {c0: 112896}, None),
        MemoryDep('buf873', 14112*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 72}, None)]
op874.met_dependencies = []
op874.outputs = [
    buf874: ComputedBuffer
    buf874.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
    buf874.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op881'), can_inplace=False, is_weak=False),
    ]
]
op874.group.device = cuda:0
op874.group.iteration = (112896, 1)
op874.sizes = ([8, 196, 72], [])
buf871_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf811_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
buf873_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 196, 14, 1])
buf874_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 14, 14], stride=[14112, 1, 1008, 72])
class op874_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 72}
    index0 = 14112*z0 + 72*z1 + z2
    index1 = 14112*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf871', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf811', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf873', get_index_2)
        add_1 = ops.add(add, load_2)
        relu = ops.relu(add_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf874', get_index_3, relu, None)
        return store


op875: ExternKernelSchedulerNode(ExternKernelAlloc)
op875.writes = [StarDep(name='buf875', mode=None)]
op875.unmet_dependencies = [StarDep(name='buf874', mode=None)]
op875.met_dependencies = [StarDep(name='arg1572_1', mode=None)]
op875.outputs = [
    buf875: ExternKernelAlloc
    buf875.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf875.users = [NodeUser(node=SchedulerNode(name='op876'), can_inplace=True, is_weak=False)]
]
op875.node.kernel = extern_kernels.convolution


op876: SchedulerNode(ComputedBuffer)
op876.writes = [MemoryDep('buf876', c0, {c0: 200704}, None)]
op876.unmet_dependencies = [MemoryDep('buf875', c0, {c0: 200704}, None)]
op876.met_dependencies = 
    [   MemoryDep('arg1573_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1574_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1575_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1576_1', c1, {c0: 1568, c1: 128}, None)]
op876.outputs = [
    buf876: ComputedBuffer
    buf876.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf876.users = [NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False)]
]
op876.group.device = cuda:0
op876.group.iteration = (200704, 1)
op876.sizes = ([1568, 128], [])
buf875_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
arg1573_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1574_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1575_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1576_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf876_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
class op876_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf875', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1573_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1574_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1575_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1576_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf876', get_index_5, relu, None)
        return store


op877: SchedulerNode(ComputedBuffer)
op877.writes = [MemoryDep('buf877', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op877.unmet_dependencies = []
op877.met_dependencies = [MemoryDep('arg1577_1', c0, {c0: 147456}, None)]
op877.outputs = [
    buf877: ComputedBuffer
    buf877.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf877.users = [NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False)]
]
op877.group.device = cuda:0
op877.group.iteration = (147456, 1)
op877.sizes = ([128, 128, 9], [])
arg1577_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf877_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op877_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1577_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf877', get_index_1, load, None)
        return store


op878: ExternKernelSchedulerNode(ExternKernelAlloc)
op878.writes = [StarDep(name='buf878', mode=None)]
op878.unmet_dependencies = [StarDep(name='buf876', mode=None), StarDep(name='buf877', mode=None)]
op878.met_dependencies = []
op878.outputs = [
    buf878: ExternKernelAlloc
    buf878.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf878.users = [NodeUser(node=SchedulerNode(name='op879'), can_inplace=True, is_weak=False)]
]
op878.node.kernel = extern_kernels.convolution


op879: SchedulerNode(ComputedBuffer)
op879.writes = [MemoryDep('buf879', c0, {c0: 200704}, None)]
op879.unmet_dependencies = [MemoryDep('buf878', c0, {c0: 200704}, None)]
op879.met_dependencies = 
    [   MemoryDep('arg1578_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1579_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1580_1', c1, {c0: 1568, c1: 128}, None),
        MemoryDep('arg1581_1', c1, {c0: 1568, c1: 128}, None)]
op879.outputs = [
    buf879: ComputedBuffer
    buf879.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
    buf879.users = [NodeUser(node=ExternKernelSchedulerNode(name='op880'), can_inplace=False, is_weak=False)]
]
op879.group.device = cuda:0
op879.group.iteration = (200704, 1)
op879.sizes = ([1568, 128], [])
buf878_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
arg1578_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1579_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1580_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1581_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf879_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 14, 14], stride=[25088, 1, 1792, 128])
class op879_loop_body:
    var_ranges = {z0: 1568, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf878', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1578_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1579_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1580_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1581_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf879', get_index_5, relu, None)
        return store


op880: ExternKernelSchedulerNode(ExternKernelAlloc)
op880.writes = [StarDep(name='buf880', mode=None)]
op880.unmet_dependencies = [StarDep(name='buf879', mode=None)]
op880.met_dependencies = [StarDep(name='arg1582_1', mode=None)]
op880.outputs = [
    buf880: ExternKernelAlloc
    buf880.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf880.users = [NodeUser(node=SchedulerNode(name='op882'), can_inplace=True, is_weak=False)]
]
op880.node.kernel = extern_kernels.convolution


op881: ExternKernelSchedulerNode(ExternKernelAlloc)
op881.writes = [StarDep(name='buf881', mode=None)]
op881.unmet_dependencies = [StarDep(name='buf874', mode=None)]
op881.met_dependencies = [StarDep(name='arg1587_1', mode=None)]
op881.outputs = [
    buf881: ExternKernelAlloc
    buf881.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf881.users = [NodeUser(node=SchedulerNode(name='op882'), can_inplace=True, is_weak=False)]
]
op881.node.kernel = extern_kernels.convolution


op882: SchedulerNode(ComputedBuffer)
op882.writes = [MemoryDep('buf882', c0, {c0: 802816}, None)]
op882.unmet_dependencies = 
    [   MemoryDep('buf880', c0, {c0: 802816}, None),
        MemoryDep('buf881', c0, {c0: 802816}, None)]
op882.met_dependencies = 
    [   MemoryDep('arg1583_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1584_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1585_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1586_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1588_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1589_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1590_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1591_1', c1, {c0: 1568, c1: 512}, None)]
op882.outputs = [
    buf882: ComputedBuffer
    buf882.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf882.users = [NodeUser(node=SchedulerNode(name='op919'), can_inplace=True, is_weak=False)]
]
op882.group.device = cuda:0
op882.group.iteration = (802816, 1)
op882.sizes = ([1568, 512], [])
buf880_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg1583_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1584_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1585_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1586_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf881_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg1588_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1589_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1590_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1591_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf882_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op882_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf880', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1583_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1584_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1585_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1586_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf881', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1588_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1589_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1590_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1591_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf882', get_index_10, add_4, None)
        return store


op883: SchedulerNode(ComputedBuffer)
op883.writes = [MemoryDep('buf883', 162*c0 + c1 + 18*c2, {c0: 36, c1: 18, c2: 9}, None)]
op883.unmet_dependencies = []
op883.met_dependencies = [MemoryDep('arg1461_1', c0, {c0: 5832}, None)]
op883.outputs = [
    buf883: ComputedBuffer
    buf883.layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
    buf883.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op883.group.device = cuda:0
op883.group.iteration = (5832, 1)
op883.sizes = ([36, 18, 9], [])
arg1461_1_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 9, 3, 1])
buf883_layout = FixedLayout('cuda', torch.float32, size=[36, 18, 3, 3], stride=[162, 1, 54, 18])
class op883_loop_body:
    var_ranges = {z0: 36, z1: 18, z2: 9}
    index0 = 162*z0 + 9*z1 + z2
    index1 = 162*z0 + z1 + 18*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1461_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf883', get_index_1, load, None)
        return store


op884: ExternKernelSchedulerNode(ExternKernelAlloc)
op884.writes = [StarDep(name='buf884', mode=None)]
op884.unmet_dependencies = [StarDep(name='buf731', mode=None), StarDep(name='buf883', mode=None)]
op884.met_dependencies = []
op884.outputs = [
    buf884: ExternKernelAlloc
    buf884.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf884.users = [NodeUser(node=SchedulerNode(name='op889'), can_inplace=True, is_weak=False)]
]
op884.node.kernel = extern_kernels.convolution


op885: ExternKernelSchedulerNode(ExternKernelAlloc)
op885.writes = [StarDep(name='buf885', mode=None)]
op885.unmet_dependencies = [StarDep(name='buf811', mode=None)]
op885.met_dependencies = [StarDep(name='arg1466_1', mode=None)]
op885.outputs = [
    buf885: ExternKernelAlloc
    buf885.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
    buf885.users = [NodeUser(node=SchedulerNode(name='op886'), can_inplace=False, is_weak=False)]
]
op885.node.kernel = extern_kernels.convolution


op886: SchedulerNode(ComputedBuffer)
op886.writes = [MemoryDep('buf886', c0, {c0: 225792}, None)]
op886.unmet_dependencies = [MemoryDep('buf885', 7056*c0 + c1 + 504*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op886.met_dependencies = 
    [   MemoryDep('arg1467_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1468_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1469_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1470_1', c1, {c0: 8, c1: 36}, None)]
op886.outputs = [
    buf886: ComputedBuffer
    buf886.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf886.users = [NodeUser(node=SchedulerNode(name='op889'), can_inplace=False, is_weak=False)]
]
op886.group.device = cuda:0
op886.group.iteration = (225792, 1)
op886.sizes = ([8, 36, 28, 28], [])
buf885_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 14, 14], stride=[7056, 1, 504, 36])
arg1467_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1468_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1469_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1470_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf886_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op886_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 36*indirect1 + 7056*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf885', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1467_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1468_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1469_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1470_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf886', get_index_7, add_1, None)
        return store


op887: ExternKernelSchedulerNode(ExternKernelAlloc)
op887.writes = [StarDep(name='buf887', mode=None)]
op887.unmet_dependencies = [StarDep(name='buf854', mode=None)]
op887.met_dependencies = [StarDep(name='arg1471_1', mode=None)]
op887.outputs = [
    buf887: ExternKernelAlloc
    buf887.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
    buf887.users = [NodeUser(node=SchedulerNode(name='op888'), can_inplace=False, is_weak=False)]
]
op887.node.kernel = extern_kernels.convolution


op888: SchedulerNode(ComputedBuffer)
op888.writes = [MemoryDep('buf888', c0, {c0: 225792}, None)]
op888.unmet_dependencies = [MemoryDep('buf887', 1764*c0 + c1 + 252*tmp0 + 36*tmp1, {c0: 8, c1: 36}, None)]
op888.met_dependencies = 
    [   MemoryDep('arg1472_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1473_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1474_1', c1, {c0: 8, c1: 36}, None),
        MemoryDep('arg1475_1', c1, {c0: 8, c1: 36}, None)]
op888.outputs = [
    buf888: ComputedBuffer
    buf888.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
    buf888.users = [NodeUser(node=SchedulerNode(name='op889'), can_inplace=False, is_weak=False)]
]
op888.group.device = cuda:0
op888.group.iteration = (225792, 1)
op888.sizes = ([8, 36, 28, 28], [])
buf887_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 7, 7], stride=[1764, 1, 252, 36])
arg1472_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1473_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1474_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1475_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf888_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
class op888_loop_body:
    var_ranges = {z0: 8, z1: 36, z2: 28, z3: 28}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 36*indirect1 + 1764*z0 + z1
    index3 = z1
    index4 = 28224*z0 + 784*z1 + 28*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf887', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1472_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1473_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1474_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1475_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf888', get_index_7, add_1, None)
        return store


op889: SchedulerNode(ComputedBuffer)
op889.writes = [MemoryDep('buf889', c0, {c0: 225792}, None)]
op889.unmet_dependencies = 
    [   MemoryDep('buf770', c0, {c0: 225792}, None),
        MemoryDep('buf884', c0, {c0: 225792}, None),
        MemoryDep('buf886', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None),
        MemoryDep('buf888', 28224*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 36}, None)]
op889.met_dependencies = 
    [   MemoryDep('arg1462_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1463_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1464_1', c1, {c0: 6272, c1: 36}, None),
        MemoryDep('arg1465_1', c1, {c0: 6272, c1: 36}, None)]
op889.outputs = [
    buf889: ComputedBuffer
    buf889.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
    buf889.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op896'), can_inplace=False, is_weak=False),
    ]
]
op889.group.device = cuda:0
op889.group.iteration = (225792, 1)
op889.sizes = ([8, 784, 36], [])
buf884_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
arg1462_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1463_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1464_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg1465_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
buf886_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf888_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 784, 28, 1])
buf889_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 28, 28], stride=[28224, 1, 1008, 36])
class op889_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 36}
    index0 = 28224*z0 + 36*z1 + z2
    index1 = z2
    index2 = 28224*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf884', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1462_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1463_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1464_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1465_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf770', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('buf886', get_index_6)
        add_3 = ops.add(add_2, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('buf888', get_index_7)
        add_4 = ops.add(add_3, load_7)
        relu = ops.relu(add_4)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf889', get_index_8, relu, None)
        return store


op890: ExternKernelSchedulerNode(ExternKernelAlloc)
op890.writes = [StarDep(name='buf890', mode=None)]
op890.unmet_dependencies = [StarDep(name='buf889', mode=None)]
op890.met_dependencies = [StarDep(name='arg1546_1', mode=None)]
op890.outputs = [
    buf890: ExternKernelAlloc
    buf890.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
    buf890.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False)]
]
op890.node.kernel = extern_kernels.convolution


op891: SchedulerNode(ComputedBuffer)
op891.writes = [MemoryDep('buf891', c0, {c0: 401408}, None)]
op891.unmet_dependencies = [MemoryDep('buf890', c0, {c0: 401408}, None)]
op891.met_dependencies = 
    [   MemoryDep('arg1547_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1548_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1549_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1550_1', c1, {c0: 6272, c1: 64}, None)]
op891.outputs = [
    buf891: ComputedBuffer
    buf891.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
    buf891.users = [NodeUser(node=ExternKernelSchedulerNode(name='op893'), can_inplace=False, is_weak=False)]
]
op891.group.device = cuda:0
op891.group.iteration = (401408, 1)
op891.sizes = ([6272, 64], [])
buf890_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
arg1547_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1548_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1549_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1550_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf891_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
class op891_loop_body:
    var_ranges = {z0: 6272, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf890', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1547_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1548_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1549_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1550_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf891', get_index_5, relu, None)
        return store


op892: SchedulerNode(ComputedBuffer)
op892.writes = [MemoryDep('buf892', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op892.unmet_dependencies = []
op892.met_dependencies = [MemoryDep('arg1551_1', c0, {c0: 36864}, None)]
op892.outputs = [
    buf892: ComputedBuffer
    buf892.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf892.users = [NodeUser(node=ExternKernelSchedulerNode(name='op893'), can_inplace=False, is_weak=False)]
]
op892.group.device = cuda:0
op892.group.iteration = (36864, 1)
op892.sizes = ([64, 64, 9], [])
arg1551_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf892_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op892_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1551_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf892', get_index_1, load, None)
        return store


op893: ExternKernelSchedulerNode(ExternKernelAlloc)
op893.writes = [StarDep(name='buf893', mode=None)]
op893.unmet_dependencies = [StarDep(name='buf891', mode=None), StarDep(name='buf892', mode=None)]
op893.met_dependencies = []
op893.outputs = [
    buf893: ExternKernelAlloc
    buf893.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
    buf893.users = [NodeUser(node=SchedulerNode(name='op894'), can_inplace=True, is_weak=False)]
]
op893.node.kernel = extern_kernels.convolution


op894: SchedulerNode(ComputedBuffer)
op894.writes = [MemoryDep('buf894', c0, {c0: 401408}, None)]
op894.unmet_dependencies = [MemoryDep('buf893', c0, {c0: 401408}, None)]
op894.met_dependencies = 
    [   MemoryDep('arg1552_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1553_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1554_1', c1, {c0: 6272, c1: 64}, None),
        MemoryDep('arg1555_1', c1, {c0: 6272, c1: 64}, None)]
op894.outputs = [
    buf894: ComputedBuffer
    buf894.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
    buf894.users = [NodeUser(node=ExternKernelSchedulerNode(name='op895'), can_inplace=False, is_weak=False)]
]
op894.group.device = cuda:0
op894.group.iteration = (401408, 1)
op894.sizes = ([6272, 64], [])
buf893_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
arg1552_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1553_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1554_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg1555_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 28, 28], stride=[50176, 1, 1792, 64])
class op894_loop_body:
    var_ranges = {z0: 6272, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf893', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1552_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1553_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1554_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1555_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf894', get_index_5, relu, None)
        return store


op895: ExternKernelSchedulerNode(ExternKernelAlloc)
op895.writes = [StarDep(name='buf895', mode=None)]
op895.unmet_dependencies = [StarDep(name='buf894', mode=None)]
op895.met_dependencies = [StarDep(name='arg1556_1', mode=None)]
op895.outputs = [
    buf895: ExternKernelAlloc
    buf895.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf895.users = [NodeUser(node=SchedulerNode(name='op897'), can_inplace=True, is_weak=False)]
]
op895.node.kernel = extern_kernels.convolution


op896: ExternKernelSchedulerNode(ExternKernelAlloc)
op896.writes = [StarDep(name='buf896', mode=None)]
op896.unmet_dependencies = [StarDep(name='buf889', mode=None)]
op896.met_dependencies = [StarDep(name='arg1561_1', mode=None)]
op896.outputs = [
    buf896: ExternKernelAlloc
    buf896.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf896.users = [NodeUser(node=SchedulerNode(name='op897'), can_inplace=True, is_weak=False)]
]
op896.node.kernel = extern_kernels.convolution


op897: SchedulerNode(ComputedBuffer)
op897.writes = [MemoryDep('buf897', c0, {c0: 1605632}, None)]
op897.unmet_dependencies = 
    [   MemoryDep('buf895', c0, {c0: 1605632}, None),
        MemoryDep('buf896', c0, {c0: 1605632}, None)]
op897.met_dependencies = 
    [   MemoryDep('arg1557_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1558_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1559_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1560_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1562_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1563_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1564_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1565_1', c1, {c0: 6272, c1: 256}, None)]
op897.outputs = [
    buf897: ComputedBuffer
    buf897.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf897.users = [NodeUser(node=SchedulerNode(name='op916'), can_inplace=True, is_weak=False)]
]
op897.group.device = cuda:0
op897.group.iteration = (1605632, 1)
op897.sizes = ([6272, 256], [])
buf895_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg1557_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1558_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1559_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1560_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf896_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg1562_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1563_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1564_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1565_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf897_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op897_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf895', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1557_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1558_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1559_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1560_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf896', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1562_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1563_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1564_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1565_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf897', get_index_10, add_4, None)
        return store


op898: ExternKernelSchedulerNode(ExternKernelAlloc)
op898.writes = [StarDep(name='buf898', mode=None)]
op898.unmet_dependencies = [StarDep(name='buf770', mode=None)]
op898.met_dependencies = [StarDep(name='arg1446_1', mode=None)]
op898.outputs = [
    buf898: ExternKernelAlloc
    buf898.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
    buf898.users = [NodeUser(node=SchedulerNode(name='op899'), can_inplace=False, is_weak=False)]
]
op898.node.kernel = extern_kernels.convolution


op899: SchedulerNode(ComputedBuffer)
op899.writes = [MemoryDep('buf899', c0, {c0: 451584}, None)]
op899.unmet_dependencies = [MemoryDep('buf898', 14112*c0 + c1 + 504*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op899.met_dependencies = 
    [   MemoryDep('arg1447_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1448_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1449_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1450_1', c1, {c0: 8, c1: 18}, None)]
op899.outputs = [
    buf899: ComputedBuffer
    buf899.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf899.users = [NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False)]
]
op899.group.device = cuda:0
op899.group.iteration = (451584, 1)
op899.sizes = ([8, 18, 56, 56], [])
buf898_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 28, 28], stride=[14112, 1, 504, 18])
arg1447_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1448_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1449_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1450_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf899_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op899_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 504*indirect0 + 18*indirect1 + 14112*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf898', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1447_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1448_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1449_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1450_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf899', get_index_7, add_1, None)
        return store


op900: ExternKernelSchedulerNode(ExternKernelAlloc)
op900.writes = [StarDep(name='buf900', mode=None)]
op900.unmet_dependencies = [StarDep(name='buf811', mode=None)]
op900.met_dependencies = [StarDep(name='arg1451_1', mode=None)]
op900.outputs = [
    buf900: ExternKernelAlloc
    buf900.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
    buf900.users = [NodeUser(node=SchedulerNode(name='op901'), can_inplace=False, is_weak=False)]
]
op900.node.kernel = extern_kernels.convolution


op901: SchedulerNode(ComputedBuffer)
op901.writes = [MemoryDep('buf901', c0, {c0: 451584}, None)]
op901.unmet_dependencies = [MemoryDep('buf900', 3528*c0 + c1 + 252*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op901.met_dependencies = 
    [   MemoryDep('arg1452_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1453_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1454_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1455_1', c1, {c0: 8, c1: 18}, None)]
op901.outputs = [
    buf901: ComputedBuffer
    buf901.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf901.users = [NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False)]
]
op901.group.device = cuda:0
op901.group.iteration = (451584, 1)
op901.sizes = ([8, 18, 56, 56], [])
buf900_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 14, 14], stride=[3528, 1, 252, 18])
arg1452_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1453_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1454_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1455_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf901_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op901_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 252*indirect0 + 18*indirect1 + 3528*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.25, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf900', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1452_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1453_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1454_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1455_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf901', get_index_7, add_1, None)
        return store


op902: ExternKernelSchedulerNode(ExternKernelAlloc)
op902.writes = [StarDep(name='buf902', mode=None)]
op902.unmet_dependencies = [StarDep(name='buf854', mode=None)]
op902.met_dependencies = [StarDep(name='arg1456_1', mode=None)]
op902.outputs = [
    buf902: ExternKernelAlloc
    buf902.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
    buf902.users = [NodeUser(node=SchedulerNode(name='op903'), can_inplace=False, is_weak=False)]
]
op902.node.kernel = extern_kernels.convolution


op903: SchedulerNode(ComputedBuffer)
op903.writes = [MemoryDep('buf903', c0, {c0: 451584}, None)]
op903.unmet_dependencies = [MemoryDep('buf902', 882*c0 + c1 + 126*tmp0 + 18*tmp1, {c0: 8, c1: 18}, None)]
op903.met_dependencies = 
    [   MemoryDep('arg1457_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1458_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1459_1', c1, {c0: 8, c1: 18}, None),
        MemoryDep('arg1460_1', c1, {c0: 8, c1: 18}, None)]
op903.outputs = [
    buf903: ComputedBuffer
    buf903.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
    buf903.users = [NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False)]
]
op903.group.device = cuda:0
op903.group.iteration = (451584, 1)
op903.sizes = ([8, 18, 56, 56], [])
buf902_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 7, 7], stride=[882, 1, 126, 18])
arg1457_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1458_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1459_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
arg1460_1_layout = FixedLayout('cuda', torch.float32, size=[18], stride=[1])
buf903_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
class op903_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 56, z3: 56}
    index0 = z2
    index1 = z3
    index2 = 126*indirect0 + 18*indirect1 + 882*z0 + z1
    index3 = z1
    index4 = 56448*z0 + 3136*z1 + 56*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.125, torch.float32)
        mul = ops.mul(index_expr, constant)
        to_dtype = ops.to_dtype(mul, torch.int64, src_dtype = torch.float32)
        set_indirect0 = self.set_indirect0(to_dtype)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_1, constant_1)
        to_dtype_1 = ops.to_dtype(mul_1, torch.int64, src_dtype = torch.float32)
        set_indirect1 = self.set_indirect1(to_dtype_1)
        get_index_2 = self.get_index('index2')
        load = ops.load('buf902', get_index_2)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg1457_1', get_index_3)
        sub = ops.sub(load, load_1)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('arg1458_1', get_index_4)
        constant_2 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_2)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_2 = ops.mul(reciprocal, constant_3)
        mul_3 = ops.mul(sub, mul_2)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('arg1459_1', get_index_5)
        mul_4 = ops.mul(mul_3, load_3)
        get_index_6 = self.get_index('index3')
        load_4 = ops.load('arg1460_1', get_index_6)
        add_1 = ops.add(mul_4, load_4)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf903', get_index_7, add_1, None)
        return store


op904: SchedulerNode(ComputedBuffer)
op904.writes = [MemoryDep('buf904', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None)]
op904.unmet_dependencies = 
    [   MemoryDep('buf731', 56448*c0 + c1 + 18*c2, {c0: 8, c1: 18, c2: 3136}, None),
        MemoryDep('buf899', c0, {c0: 451584}, None),
        MemoryDep('buf901', c0, {c0: 451584}, None),
        MemoryDep('buf903', c0, {c0: 451584}, None)]
op904.met_dependencies = []
op904.outputs = [
    buf904: ComputedBuffer
    buf904.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
    buf904.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op911'), can_inplace=False, is_weak=False),
    ]
]
op904.group.device = cuda:0
op904.group.iteration = (451584, 1)
op904.sizes = ([8, 18, 3136], [])
buf731_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
buf899_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf901_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf903_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 3136, 56, 1])
buf904_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 56, 56], stride=[56448, 1, 1008, 18])
class op904_loop_body:
    var_ranges = {z0: 8, z1: 18, z2: 3136}
    index0 = 56448*z0 + z1 + 18*z2
    index1 = 56448*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf731', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf899', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf901', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf903', get_index_3)
        add_2 = ops.add(add_1, load_3)
        relu = ops.relu(add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf904', get_index_4, relu, None)
        return store


op905: ExternKernelSchedulerNode(ExternKernelAlloc)
op905.writes = [StarDep(name='buf905', mode=None)]
op905.unmet_dependencies = [StarDep(name='buf904', mode=None)]
op905.met_dependencies = [StarDep(name='arg1526_1', mode=None)]
op905.outputs = [
    buf905: ExternKernelAlloc
    buf905.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf905.users = [NodeUser(node=SchedulerNode(name='op906'), can_inplace=True, is_weak=False)]
]
op905.node.kernel = extern_kernels.convolution


op906: SchedulerNode(ComputedBuffer)
op906.writes = [MemoryDep('buf906', c0, {c0: 802816}, None)]
op906.unmet_dependencies = [MemoryDep('buf905', c0, {c0: 802816}, None)]
op906.met_dependencies = 
    [   MemoryDep('arg1527_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1528_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1529_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1530_1', c1, {c0: 25088, c1: 32}, None)]
op906.outputs = [
    buf906: ComputedBuffer
    buf906.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf906.users = [NodeUser(node=ExternKernelSchedulerNode(name='op908'), can_inplace=False, is_weak=False)]
]
op906.group.device = cuda:0
op906.group.iteration = (802816, 1)
op906.sizes = ([25088, 32], [])
buf905_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg1527_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1528_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1529_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1530_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf906_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
class op906_loop_body:
    var_ranges = {z0: 25088, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf905', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1527_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1528_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1529_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1530_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf906', get_index_5, relu, None)
        return store


op907: SchedulerNode(ComputedBuffer)
op907.writes = [MemoryDep('buf907', 288*c0 + c1 + 32*c2, {c0: 32, c1: 32, c2: 9}, None)]
op907.unmet_dependencies = []
op907.met_dependencies = [MemoryDep('arg1531_1', c0, {c0: 9216}, None)]
op907.outputs = [
    buf907: ComputedBuffer
    buf907.layout = FixedLayout('cuda', torch.float32, size=[32, 32, 3, 3], stride=[288, 1, 96, 32])
    buf907.users = [NodeUser(node=ExternKernelSchedulerNode(name='op908'), can_inplace=False, is_weak=False)]
]
op907.group.device = cuda:0
op907.group.iteration = (9216, 1)
op907.sizes = ([32, 32, 9], [])
arg1531_1_layout = FixedLayout('cuda', torch.float32, size=[32, 32, 3, 3], stride=[288, 9, 3, 1])
buf907_layout = FixedLayout('cuda', torch.float32, size=[32, 32, 3, 3], stride=[288, 1, 96, 32])
class op907_loop_body:
    var_ranges = {z0: 32, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1531_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf907', get_index_1, load, None)
        return store


op908: ExternKernelSchedulerNode(ExternKernelAlloc)
op908.writes = [StarDep(name='buf908', mode=None)]
op908.unmet_dependencies = [StarDep(name='buf906', mode=None), StarDep(name='buf907', mode=None)]
op908.met_dependencies = []
op908.outputs = [
    buf908: ExternKernelAlloc
    buf908.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf908.users = [NodeUser(node=SchedulerNode(name='op909'), can_inplace=True, is_weak=False)]
]
op908.node.kernel = extern_kernels.convolution


op909: SchedulerNode(ComputedBuffer)
op909.writes = [MemoryDep('buf909', c0, {c0: 802816}, None)]
op909.unmet_dependencies = [MemoryDep('buf908', c0, {c0: 802816}, None)]
op909.met_dependencies = 
    [   MemoryDep('arg1532_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1533_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1534_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg1535_1', c1, {c0: 25088, c1: 32}, None)]
op909.outputs = [
    buf909: ComputedBuffer
    buf909.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf909.users = [NodeUser(node=ExternKernelSchedulerNode(name='op910'), can_inplace=False, is_weak=False)]
]
op909.group.device = cuda:0
op909.group.iteration = (802816, 1)
op909.sizes = ([25088, 32], [])
buf908_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg1532_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1533_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1534_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg1535_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf909_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
class op909_loop_body:
    var_ranges = {z0: 25088, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf908', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1532_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1533_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1534_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1535_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf909', get_index_5, relu, None)
        return store


op910: ExternKernelSchedulerNode(ExternKernelAlloc)
op910.writes = [StarDep(name='buf910', mode=None)]
op910.unmet_dependencies = [StarDep(name='buf909', mode=None)]
op910.met_dependencies = [StarDep(name='arg1536_1', mode=None)]
op910.outputs = [
    buf910: ExternKernelAlloc
    buf910.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf910.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=True, is_weak=False)]
]
op910.node.kernel = extern_kernels.convolution


op911: ExternKernelSchedulerNode(ExternKernelAlloc)
op911.writes = [StarDep(name='buf911', mode=None)]
op911.unmet_dependencies = [StarDep(name='buf904', mode=None)]
op911.met_dependencies = [StarDep(name='arg1541_1', mode=None)]
op911.outputs = [
    buf911: ExternKernelAlloc
    buf911.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf911.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=True, is_weak=False)]
]
op911.node.kernel = extern_kernels.convolution


op912: SchedulerNode(ComputedBuffer)
op912.writes = [MemoryDep('buf912', c0, {c0: 3211264}, None)]
op912.unmet_dependencies = 
    [   MemoryDep('buf910', c0, {c0: 3211264}, None),
        MemoryDep('buf911', c0, {c0: 3211264}, None)]
op912.met_dependencies = 
    [   MemoryDep('arg1537_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1538_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1539_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1540_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1542_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1543_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1544_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg1545_1', c1, {c0: 25088, c1: 128}, None)]
op912.outputs = [
    buf912: ComputedBuffer
    buf912.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf912.users = [NodeUser(node=SchedulerNode(name='op913'), can_inplace=True, is_weak=False)]
]
op912.group.device = cuda:0
op912.group.iteration = (3211264, 1)
op912.sizes = ([25088, 128], [])
buf910_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg1537_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1538_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1539_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1540_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf911_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg1542_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1543_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1544_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1545_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf912_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op912_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf910', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1537_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1538_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1539_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1540_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf911', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1542_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1543_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg1544_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg1545_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf912', get_index_10, add_4, None)
        return store


op913: SchedulerNode(ComputedBuffer)
op913.writes = [MemoryDep('buf913', c0, {c0: 3211264}, None)]
op913.unmet_dependencies = [MemoryDep('buf912', c0, {c0: 3211264}, None)]
op913.met_dependencies = []
op913.outputs = [
    buf913: ComputedBuffer
    buf913.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf913.users = [NodeUser(node=ExternKernelSchedulerNode(name='op915'), can_inplace=False, is_weak=False)]
]
op913.group.device = cuda:0
op913.group.iteration = (3211264, 1)
op913.sizes = ([3211264], [])
buf912_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf913_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op913_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf912', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf913', get_index_1, relu, None)
        return store


op914: SchedulerNode(ComputedBuffer)
op914.writes = [MemoryDep('buf914', 1152*c0 + c1 + 128*c2, {c0: 256, c1: 128, c2: 9}, None)]
op914.unmet_dependencies = []
op914.met_dependencies = [MemoryDep('arg1566_1', c0, {c0: 294912}, None)]
op914.outputs = [
    buf914: ComputedBuffer
    buf914.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf914.users = [NodeUser(node=ExternKernelSchedulerNode(name='op915'), can_inplace=False, is_weak=False)]
]
op914.group.device = cuda:0
op914.group.iteration = (294912, 1)
op914.sizes = ([256, 128, 9], [])
arg1566_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf914_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
class op914_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1566_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf914', get_index_1, load, None)
        return store


op915: ExternKernelSchedulerNode(ExternKernelAlloc)
op915.writes = [StarDep(name='buf915', mode=None)]
op915.unmet_dependencies = [StarDep(name='buf913', mode=None), StarDep(name='buf914', mode=None)]
op915.met_dependencies = []
op915.outputs = [
    buf915: ExternKernelAlloc
    buf915.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf915.users = [NodeUser(node=SchedulerNode(name='op916'), can_inplace=True, is_weak=False)]
]
op915.node.kernel = extern_kernels.convolution


op916: SchedulerNode(ComputedBuffer)
op916.writes = [MemoryDep('buf916', c0, {c0: 1605632}, None)]
op916.unmet_dependencies = 
    [   MemoryDep('buf897', c0, {c0: 1605632}, None),
        MemoryDep('buf915', c0, {c0: 1605632}, None)]
op916.met_dependencies = 
    [   MemoryDep('arg1567_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1568_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1569_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1570_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg1571_1', c1, {c0: 6272, c1: 256}, None)]
op916.outputs = [
    buf916: ComputedBuffer
    buf916.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf916.users = [NodeUser(node=ExternKernelSchedulerNode(name='op918'), can_inplace=False, is_weak=False)]
]
op916.group.device = cuda:0
op916.group.iteration = (1605632, 1)
op916.sizes = ([6272, 256], [])
buf897_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf915_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg1567_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1568_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1569_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1570_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg1571_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf916_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op916_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf897', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf915', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1567_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1568_1', get_index_3)
        sub = ops.sub(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1569_1', get_index_4)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_4, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1570_1', get_index_5)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1571_1', get_index_6)
        add_2 = ops.add(mul_2, load_6)
        relu_1 = ops.relu(add_2)
        add_3 = ops.add(relu, relu_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf916', get_index_7, add_3, None)
        return store


op917: SchedulerNode(ComputedBuffer)
op917.writes = [MemoryDep('buf917', 2304*c0 + c1 + 256*c2, {c0: 512, c1: 256, c2: 9}, None)]
op917.unmet_dependencies = []
op917.met_dependencies = [MemoryDep('arg1592_1', c0, {c0: 1179648}, None)]
op917.outputs = [
    buf917: ComputedBuffer
    buf917.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf917.users = [NodeUser(node=ExternKernelSchedulerNode(name='op918'), can_inplace=False, is_weak=False)]
]
op917.group.device = cuda:0
op917.group.iteration = (1179648, 1)
op917.sizes = ([512, 256, 9], [])
arg1592_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1])
buf917_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
class op917_loop_body:
    var_ranges = {z0: 512, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1592_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf917', get_index_1, load, None)
        return store


op918: ExternKernelSchedulerNode(ExternKernelAlloc)
op918.writes = [StarDep(name='buf918', mode=None)]
op918.unmet_dependencies = [StarDep(name='buf916', mode=None), StarDep(name='buf917', mode=None)]
op918.met_dependencies = []
op918.outputs = [
    buf918: ExternKernelAlloc
    buf918.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf918.users = [NodeUser(node=SchedulerNode(name='op919'), can_inplace=True, is_weak=False)]
]
op918.node.kernel = extern_kernels.convolution


op919: SchedulerNode(ComputedBuffer)
op919.writes = [MemoryDep('buf919', c0, {c0: 802816}, None)]
op919.unmet_dependencies = 
    [   MemoryDep('buf882', c0, {c0: 802816}, None),
        MemoryDep('buf918', c0, {c0: 802816}, None)]
op919.met_dependencies = 
    [   MemoryDep('arg1593_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1594_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1595_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1596_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg1597_1', c1, {c0: 1568, c1: 512}, None)]
op919.outputs = [
    buf919: ComputedBuffer
    buf919.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf919.users = [NodeUser(node=ExternKernelSchedulerNode(name='op921'), can_inplace=False, is_weak=False)]
]
op919.group.device = cuda:0
op919.group.iteration = (802816, 1)
op919.sizes = ([1568, 512], [])
buf882_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf918_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg1593_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1594_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1595_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1596_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1597_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf919_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op919_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf882', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf918', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1593_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1594_1', get_index_3)
        sub = ops.sub(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1595_1', get_index_4)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_4, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1596_1', get_index_5)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1597_1', get_index_6)
        add_2 = ops.add(mul_2, load_6)
        relu_1 = ops.relu(add_2)
        add_3 = ops.add(relu, relu_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf919', get_index_7, add_3, None)
        return store


op920: SchedulerNode(ComputedBuffer)
op920.writes = [MemoryDep('buf920', 4608*c0 + c1 + 512*c2, {c0: 1024, c1: 512, c2: 9}, None)]
op920.unmet_dependencies = []
op920.met_dependencies = [MemoryDep('arg1618_1', c0, {c0: 4718592}, None)]
op920.outputs = [
    buf920: ComputedBuffer
    buf920.layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf920.users = [NodeUser(node=ExternKernelSchedulerNode(name='op921'), can_inplace=False, is_weak=False)]
]
op920.group.device = cuda:0
op920.group.iteration = (4718592, 1)
op920.sizes = ([1024, 512, 9], [])
arg1618_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 3, 3], stride=[4608, 9, 3, 1])
buf920_layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op920_loop_body:
    var_ranges = {z0: 1024, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1618_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf920', get_index_1, load, None)
        return store


op921: ExternKernelSchedulerNode(ExternKernelAlloc)
op921.writes = [StarDep(name='buf921', mode=None)]
op921.unmet_dependencies = [StarDep(name='buf919', mode=None), StarDep(name='buf920', mode=None)]
op921.met_dependencies = []
op921.outputs = [
    buf921: ExternKernelAlloc
    buf921.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf921.users = [NodeUser(node=SchedulerNode(name='op922'), can_inplace=True, is_weak=False)]
]
op921.node.kernel = extern_kernels.convolution


op922: SchedulerNode(ComputedBuffer)
op922.writes = [MemoryDep('buf922', c0, {c0: 401408}, None)]
op922.unmet_dependencies = 
    [   MemoryDep('buf863', c0, {c0: 401408}, None),
        MemoryDep('buf921', c0, {c0: 401408}, None)]
op922.met_dependencies = 
    [   MemoryDep('arg1619_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1620_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1621_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1622_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg1623_1', c1, {c0: 392, c1: 1024}, None)]
op922.outputs = [
    buf922: ComputedBuffer
    buf922.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf922.users = [NodeUser(node=ExternKernelSchedulerNode(name='op923'), can_inplace=False, is_weak=False)]
]
op922.group.device = cuda:0
op922.group.iteration = (401408, 1)
op922.sizes = ([392, 1024], [])
buf863_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
buf921_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg1619_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1620_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1621_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1622_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg1623_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf922_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
class op922_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf863', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf921', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1619_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1620_1', get_index_3)
        sub = ops.sub(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1621_1', get_index_4)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_4, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1622_1', get_index_5)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1623_1', get_index_6)
        add_2 = ops.add(mul_2, load_6)
        relu_1 = ops.relu(add_2)
        add_3 = ops.add(relu, relu_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf922', get_index_7, add_3, None)
        return store


op923: ExternKernelSchedulerNode(ExternKernelAlloc)
op923.writes = [StarDep(name='buf923', mode=None)]
op923.unmet_dependencies = [StarDep(name='buf922', mode=None)]
op923.met_dependencies = [StarDep(name='arg1624_1', mode=None)]
op923.outputs = [
    buf923: ExternKernelAlloc
    buf923.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf923.users = [NodeUser(node=SchedulerNode(name='op924'), can_inplace=False, is_weak=False)]
]
op923.node.kernel = extern_kernels.convolution


op924: SchedulerNode(ComputedBuffer)
op924.writes = [MemoryDep('buf924', c0, {c0: 16384}, None)]
op924.unmet_dependencies = [MemoryDep('buf923', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None)]
op924.met_dependencies = 
    [   MemoryDep('arg1625_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg1626_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg1627_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg1628_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg1629_1', c1, {c0: 8, c1: 2048}, None)]
op924.outputs = [
    buf924: ComputedBuffer
    buf924.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf924.users = [NodeUser(node=SchedulerNode(name='op925'), can_inplace=True, is_weak=False)]
]
op924.group.device = cuda:0
op924.group.iteration = (16384, 49)
op924.sizes = ([8, 2048], [49])
buf923_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg1625_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg1626_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg1627_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg1628_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg1629_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf924_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op924_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 49}
    index0 = 100352*z0 + z1 + 2048*z2
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf923', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1625_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1626_1', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1627_1', get_index_3)
        constant = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(load_3, constant)
        sqrt = ops.sqrt(add_1)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1628_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1629_1', get_index_5)
        add_2 = ops.add(mul_2, load_5)
        relu = ops.relu(add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf924', get_index_6, reduction)
        return store_reduction


op925: SchedulerNode(ComputedBuffer)
op925.writes = [MemoryDep('buf925', c0, {c0: 16384}, None)]
op925.unmet_dependencies = [MemoryDep('buf924', c0, {c0: 16384}, None)]
op925.met_dependencies = []
op925.outputs = [
    buf925: ComputedBuffer
    buf925.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf925.users = [NodeUser(node=ExternKernelSchedulerNode(name='op926'), can_inplace=False, is_weak=False)]
]
op925.group.device = cuda:0
op925.group.iteration = (16384, 1)
op925.sizes = ([16384], [])
buf924_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
buf925_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op925_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf924', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf925', get_index_1, truediv, None)
        return store


op926: ExternKernelSchedulerNode(ExternKernelOut)
op926.writes = [StarDep(name='buf926', mode=None)]
op926.unmet_dependencies = [StarDep(name='buf925', mode=None)]
op926.met_dependencies = [StarDep(name='arg1630_1', mode=None), StarDep(name='arg1631_1', mode=None)]
op926.outputs = [
    buf926: ExternKernelOut
    buf926.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf926.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op926.node.kernel = extern_kernels.addmm



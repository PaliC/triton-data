op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 602112}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg4_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg5_1', c1, {c0: 1568, c1: 384}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (602112, 1)
op1.sizes = ([8, 196, 384], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg5_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf0', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg2_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul_1 = ops.mul(mul, add)
        add_1 = ops.add(load, mul_1)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf1', get_index_4, add_1, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 602112}, None)]
op2.unmet_dependencies = [   MemoryDep('buf1', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (602112, 1)
op2.sizes = ([196, 3072], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op2_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, load, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 602112}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 602112}, None),
        MemoryDep('buf3', c0, {c0: 602112}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg7_1', c1, {c0: 3072, c1: 196}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (602112, 1)
op4.sizes = ([8, 384, 196], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf3', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(load_3, load_4)
        mul = ops.mul(load_2, add_1)
        add_2 = ops.add(add, mul)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf4', get_index_5, add_2, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 602112}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg9_1', c1, {c0: 1568, c1: 384}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (602112, 1)
op5.sizes = ([8, 196, 384], [])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg10_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf5', get_index_3, add, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.mm


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 2408448}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 2408448}, None)]
op7.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 1568, c1: 1536}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (2408448, 1)
op7.sizes = ([1568, 1536], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op7_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf6', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf7', get_index_4, mul_2, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 602112}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf4', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf8', c0, {c0: 602112}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg16_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg17_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg8_1', c1, {c0: 1568, c1: 384}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (602112, 1)
op9.sizes = ([8, 196, 384], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg17_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg8_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf8', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg14_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf9', get_index_6, add_2, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 602112}, None)]
op10.unmet_dependencies = [   MemoryDep('buf9', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (602112, 1)
op10.sizes = ([196, 3072], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op10_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 602112}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf11', c0, {c0: 602112}, None),
        MemoryDep('buf4', c0, {c0: 602112}, None),
        MemoryDep('buf8', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg14_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg19_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg8_1', c1, {c0: 8, c1: 384}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (602112, 1)
op12.sizes = ([8, 384, 196], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf8', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf11', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg19_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf12', get_index_7, add_3, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 602112}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg22_1', c1, {c0: 1568, c1: 384}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (602112, 1)
op13.sizes = ([8, 196, 384], [])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg21_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg22_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf13', get_index_3, add, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.mm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 2408448}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2408448}, None)]
op15.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 1568, c1: 1536}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (2408448, 1)
op15.sizes = ([1568, 1536], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op15_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf14', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf15', get_index_4, mul_2, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 602112}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf12', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf16', c0, {c0: 602112}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg26_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg28_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg29_1', c1, {c0: 1568, c1: 384}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (602112, 1)
op17.sizes = ([8, 196, 384], [])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg28_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg29_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg20_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf16', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg26_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf17', get_index_6, add_2, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 602112}, None)]
op18.unmet_dependencies = [   MemoryDep('buf17', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (602112, 1)
op18.sizes = ([196, 3072], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op18_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, load, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 602112}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf12', c0, {c0: 602112}, None),
        MemoryDep('buf16', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf19', c0, {c0: 602112}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg20_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg26_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg31_1', c1, {c0: 3072, c1: 196}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (602112, 1)
op20.sizes = ([8, 384, 196], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf16', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg27_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf19', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg31_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf20', get_index_7, add_3, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 602112}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg34_1', c1, {c0: 1568, c1: 384}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (602112, 1)
op21.sizes = ([8, 196, 384], [])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg33_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg34_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf20', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf21', get_index_3, add, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2408448}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 2408448}, None)]
op23.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 1568, c1: 1536}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2408448, 1)
op23.sizes = ([1568, 1536], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op23_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg36_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 602112}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf20', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf24', c0, {c0: 602112}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg38_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg40_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg41_1', c1, {c0: 1568, c1: 384}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (602112, 1)
op25.sizes = ([8, 196, 384], [])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg40_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg41_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf20', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg32_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf24', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg38_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf25', get_index_6, add_2, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 602112}, None)]
op26.unmet_dependencies = [   MemoryDep('buf25', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (602112, 1)
op26.sizes = ([196, 3072], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op26_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, load, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 602112}, None),
        MemoryDep('buf24', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf27', c0, {c0: 602112}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg38_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg39_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg43_1', c1, {c0: 3072, c1: 196}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (602112, 1)
op28.sizes = ([8, 384, 196], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf24', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg38_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg39_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf27', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg43_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 602112}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg46_1', c1, {c0: 1568, c1: 384}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (602112, 1)
op29.sizes = ([8, 196, 384], [])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op29_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg45_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg46_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf29', get_index_3, add, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2408448}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 2408448}, None)]
op31.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 1568, c1: 1536}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (2408448, 1)
op31.sizes = ([1568, 1536], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op31_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf31', get_index_4, mul_2, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 602112}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf28', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf32', c0, {c0: 602112}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg50_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg52_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg53_1', c1, {c0: 1568, c1: 384}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (602112, 1)
op33.sizes = ([8, 196, 384], [])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op33_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg52_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg53_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg44_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf32', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg50_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf33', get_index_6, add_2, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 602112}, None)]
op34.unmet_dependencies = [   MemoryDep('buf33', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (602112, 1)
op34.sizes = ([196, 3072], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op34_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf34', get_index_1, load, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.mm


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 602112}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf32', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg50_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg51_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg55_1', c1, {c0: 3072, c1: 196}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (602112, 1)
op36.sizes = ([8, 384, 196], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf32', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg50_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg51_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf35', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg55_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf36', get_index_7, add_3, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 602112}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg58_1', c1, {c0: 1568, c1: 384}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (602112, 1)
op37.sizes = ([8, 196, 384], [])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg57_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg58_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf37', get_index_3, add, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 2408448}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 2408448}, None)]
op39.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 1568, c1: 1536}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (2408448, 1)
op39.sizes = ([1568, 1536], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op39_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg60_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg60_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, mul_2, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 602112}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf36', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf40', c0, {c0: 602112}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg62_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg64_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg65_1', c1, {c0: 1568, c1: 384}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (602112, 1)
op41.sizes = ([8, 196, 384], [])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg64_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg65_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg56_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf40', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg62_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf41', get_index_6, add_2, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 602112}, None)]
op42.unmet_dependencies = [   MemoryDep('buf41', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (602112, 1)
op42.sizes = ([196, 3072], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op42_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf42', get_index_1, load, None)
        return store


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 602112}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 602112}, None),
        MemoryDep('buf40', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf43', c0, {c0: 602112}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg62_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg63_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg67_1', c1, {c0: 3072, c1: 196}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf44.users = [
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (602112, 1)
op44.sizes = ([8, 384, 196], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf43', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg67_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf44', get_index_7, add_3, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 602112}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg70_1', c1, {c0: 1568, c1: 384}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (602112, 1)
op45.sizes = ([8, 196, 384], [])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg69_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg70_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf45', get_index_3, add, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 2408448}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 2408448}, None)]
op47.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 1568, c1: 1536}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (2408448, 1)
op47.sizes = ([1568, 1536], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op47_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf47', get_index_4, mul_2, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = extern_kernels.mm


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 602112}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf44', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf48', c0, {c0: 602112}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg76_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg77_1', c1, {c0: 1568, c1: 384}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (602112, 1)
op49.sizes = ([8, 196, 384], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg77_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg68_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf48', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg74_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf49', get_index_6, add_2, None)
        return store


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 602112}, None)]
op50.unmet_dependencies = [   MemoryDep('buf49', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (602112, 1)
op50.sizes = ([196, 3072], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op50_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf50', get_index_1, load, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 602112}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 602112}, None),
        MemoryDep('buf48', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf51', c0, {c0: 602112}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg75_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg79_1', c1, {c0: 3072, c1: 196}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (602112, 1)
op52.sizes = ([8, 384, 196], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf48', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf51', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg79_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf52', get_index_7, add_3, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 602112}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg81_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg82_1', c1, {c0: 1568, c1: 384}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (602112, 1)
op53.sizes = ([8, 196, 384], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg82_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf53', get_index_3, add, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 2408448}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 2408448}, None)]
op55.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 1568, c1: 1536}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (2408448, 1)
op55.sizes = ([1568, 1536], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op55_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf54', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf55', get_index_4, mul_2, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
    ]
]
op56.node.kernel = extern_kernels.mm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 602112}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf52', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf56', c0, {c0: 602112}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg86_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg88_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg89_1', c1, {c0: 1568, c1: 384}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (602112, 1)
op57.sizes = ([8, 196, 384], [])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg88_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg89_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg80_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf56', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg86_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf57', get_index_6, add_2, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 602112}, None)]
op58.unmet_dependencies = [   MemoryDep('buf57', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (602112, 1)
op58.sizes = ([196, 3072], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op58_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 602112}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 602112}, None),
        MemoryDep('buf56', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf59', c0, {c0: 602112}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg86_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg87_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg91_1', c1, {c0: 3072, c1: 196}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (602112, 1)
op60.sizes = ([8, 384, 196], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf56', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf59', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg91_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf60', get_index_7, add_3, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 602112}, None)]
op61.unmet_dependencies = [MemoryDep('buf60', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg94_1', c1, {c0: 1568, c1: 384}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (602112, 1)
op61.sizes = ([8, 196, 384], [])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op61_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg94_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf61', get_index_3, add, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2408448}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 2408448}, None)]
op63.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 1568, c1: 1536}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (2408448, 1)
op63.sizes = ([1568, 1536], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op63_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, mul_2, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 602112}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf60', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf64', c0, {c0: 602112}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg101_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg92_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 384}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (602112, 1)
op65.sizes = ([8, 196, 384], [])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg100_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg101_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg92_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf64', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg98_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf65', get_index_6, add_2, None)
        return store


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 602112}, None)]
op66.unmet_dependencies = [   MemoryDep('buf65', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (602112, 1)
op66.sizes = ([196, 3072], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op66_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 602112}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 602112}, None),
        MemoryDep('buf64', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf67', c0, {c0: 602112}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 3072, c1: 196}, None),
        MemoryDep('arg92_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg98_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 384}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (602112, 1)
op68.sizes = ([8, 384, 196], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf64', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg98_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg99_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf67', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg103_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add_3, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 602112}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg105_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg106_1', c1, {c0: 1568, c1: 384}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (602112, 1)
op69.sizes = ([8, 196, 384], [])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg105_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg106_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf69', get_index_3, add, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.mm


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 2408448}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 2408448}, None)]
op71.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 1568, c1: 1536}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (2408448, 1)
op71.sizes = ([1568, 1536], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op71_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf70', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf71', get_index_4, mul_2, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 602112}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf68', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf72', c0, {c0: 602112}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg113_1', c1, {c0: 1568, c1: 384}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (602112, 1)
op73.sizes = ([8, 196, 384], [])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg112_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg113_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg104_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf72', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg110_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf73', get_index_6, add_2, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 602112}, None)]
op74.unmet_dependencies = [   MemoryDep('buf73', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (602112, 1)
op74.sizes = ([196, 3072], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op74_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.mm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 602112}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 602112}, None),
        MemoryDep('buf72', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf75', c0, {c0: 602112}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg111_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg115_1', c1, {c0: 3072, c1: 196}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (602112, 1)
op76.sizes = ([8, 384, 196], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg110_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg111_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf75', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg115_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf76', get_index_7, add_3, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 602112}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 384}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (602112, 1)
op77.sizes = ([8, 196, 384], [])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg117_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg118_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf76', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf77', get_index_3, add, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2408448}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 2408448}, None)]
op79.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 1568, c1: 1536}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2408448, 1)
op79.sizes = ([1568, 1536], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op79_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg120_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf79', get_index_4, mul_2, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 602112}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf76', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf80', c0, {c0: 602112}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg124_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg125_1', c1, {c0: 1568, c1: 384}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (602112, 1)
op81.sizes = ([8, 196, 384], [])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg125_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf76', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg116_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf80', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg122_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf81', get_index_6, add_2, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 602112}, None)]
op82.unmet_dependencies = [   MemoryDep('buf81', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (602112, 1)
op82.sizes = ([196, 3072], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op82_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf82', get_index_1, load, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 602112}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 602112}, None),
        MemoryDep('buf80', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf83', c0, {c0: 602112}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg123_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg127_1', c1, {c0: 3072, c1: 196}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (602112, 1)
op84.sizes = ([8, 384, 196], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z1
    index2 = 75264*z0 + z1 + 384*z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf80', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf83', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg127_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf84', get_index_7, add_3, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 602112}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg130_1', c1, {c0: 1568, c1: 384}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (602112, 1)
op85.sizes = ([8, 196, 384], [])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op85_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg129_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg130_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf85', get_index_3, add, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 2408448}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 2408448}, None)]
op87.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 1568, c1: 1536}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (2408448, 1)
op87.sizes = ([1568, 1536], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf86', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf87', get_index_4, mul_2, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 602112}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf84', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf88', c0, {c0: 602112}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg136_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 384}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (602112, 1)
op89.sizes = ([8, 196, 384], [])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = z2
    index1 = 75264*z0 + z1 + 196*z2
    index2 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg136_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg137_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg128_1', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf88', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg134_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf89', get_index_6, add_2, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 602112}, None)]
op90.unmet_dependencies = [   MemoryDep('buf89', 384*c0 + 75264*((c1//384)) + ModularIndexing(c1, 1, 384), {c0: 196, c1: 3072}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (602112, 1)
op90.sizes = ([196, 3072], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[1, 3072])
class op90_loop_body:
    var_ranges = {z0: 196, z1: 3072}
    index0 = 384*z0 + 75264*((z1//384)) + ModularIndexing(z1, 1, 384)
    index1 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 602112}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf84', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf88', c0, {c0: 602112}, None),
        MemoryDep('buf91', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 196}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (602112, 1)
op92.sizes = ([8, 196, 384], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 1, 196])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[3072, 196], stride=[196, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[196], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + z1 + 196*z2
    index1 = z2
    index2 = 75264*z0 + 384*z1 + z2
    index3 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        add = ops.add(load_2, load_3)
        mul = ops.mul(load_1, add)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf91', get_index_5)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg139_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        mul_1 = ops.mul(load_4, add_2)
        add_3 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf92', get_index_7, add_3, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 602112}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 602112}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 384}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (602112, 1)
op93.sizes = ([1568, 384], [])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op93_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = z1
    index1 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg142_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf92', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        add = ops.add(load, mul_1)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf93', get_index_3, add, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 2408448}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 2408448}, None)]
op95.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 1568, c1: 1536}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (2408448, 1)
op95.sizes = ([1568, 1536], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1536], stride=[301056, 1536, 1])
class op95_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf95', get_index_4, mul_2, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 6144}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf92', 37632*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 98}, None),
        MemoryDep('buf96', 37632*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 98}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 16, c1: 384}, None),
        MemoryDep('arg146_1', c1, {c0: 16, c1: 384}, None),
        MemoryDep('arg147_1', c1, {c0: 16, c1: 384}, None),
        MemoryDep('arg148_1', c1, {c0: 16, c1: 384}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 2], stride=[768, 1, 384])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (6144, 98)
op97.sizes = ([16, 384], [98])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 2], stride=[768, 1, 384])
class op97_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 98}
    index0 = z1
    index1 = 37632*z0 + z1 + 384*z2
    index2 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg148_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf92', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('arg140_1', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf96', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('arg146_1', get_index_5)
        add = ops.add(load_4, load_5)
        mul_1 = ops.mul(load_3, add)
        add_1 = ops.add(load_2, mul_1)
        mul_2 = ops.mul(mul, add_1)
        add_2 = ops.add(load, mul_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_2)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf97', get_index_6, reduction)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 3072}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', 768*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 2}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (3072, 2)
op98.sizes = ([8, 384], [2])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 2], stride=[768, 1, 384])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 2}
    index0 = 768*z0 + z1 + 384*z2
    index1 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, reduction)
        return store_reduction


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 3072}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 3072}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (3072, 1)
op99.sizes = ([3072], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op99_loop_body:
    var_ranges = {z0: 3072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, truediv, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg149_1', mode=None), StarDep(name='arg150_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf100.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.addmm


